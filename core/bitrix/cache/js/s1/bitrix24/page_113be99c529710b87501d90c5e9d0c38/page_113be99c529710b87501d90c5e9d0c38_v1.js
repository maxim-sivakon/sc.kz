
; /* Start:"a:4:{s:4:"full";s:99:"/bitrix/components/bitrix/crm.entity.product.list/templates/.default/script.min.js?1728733186112636";s:6:"source";s:78:"/bitrix/components/bitrix/crm.entity.product.list/templates/.default/script.js";s:3:"min";s:82:"/bitrix/components/bitrix/crm.entity.product.list/templates/.default/script.min.js";s:3:"map";s:82:"/bitrix/components/bitrix/crm.entity.product.list/templates/.default/script.map.js";}"*/
this.BX=this.BX||{};this.BX.Crm=this.BX.Crm||{};this.BX.Crm.Entity=this.BX.Crm.Entity||{};(function(e,t,i,n,r,a,s,l,o,u,d,c,h,v,g,f){"use strict";var p;var E=function(){function e(t){babelHelpers.classCallCheck(this,e);this.editor=t}babelHelpers.createClass(e,[{key:"load",value:function e(t,i){if(!this.hintPopup){this.hintPopup=new s.Popup("ui-hint-popup-"+this.editor.getId(),null,{darkMode:true,closeIcon:true,animation:"fading-slide",autoHide:true})}this.hintPopup.setBindElement(t);this.hintPopup.adjustPosition();this.hintPopup.setContent(h.Tag.render(p||(p=babelHelpers.taggedTemplateLiteral(["\n\t\t\t<div class='ui-hint-content'>","</div>\n\t\t"])),h.Text.encode(i)));return this.hintPopup}},{key:"show",value:function e(){if(this.hintPopup){this.hintPopup.show()}}},{key:"close",value:function e(){if(this.hintPopup){this.hintPopup.close()}}}]);return e}();var y,b,T,m,S,I;function C(e,t){R(e,t);t.add(e)}function P(e,t,i){R(e,t);t.set(e,i)}function R(e,t){if(t.has(e)){throw new TypeError("Cannot initialize the same private elements twice on an object")}}function D(e,t,i){N(e,t);return i}function N(e,t){if(e!==t){throw new TypeError("Private static access of wrong provenance")}}function _(e,t,i){if(!t.has(e)){throw new TypeError("attempted to get private field on non-instance")}return i}var F=new WeakMap;var k=new WeakMap;var A=new WeakSet;var w=new WeakSet;var U=new WeakSet;var M=new WeakSet;var O=function(){function e(t){babelHelpers.classCallCheck(this,e);C(this,M);C(this,U);C(this,w);C(this,A);P(this,F,{writable:true,value:null});P(this,k,{writable:true,value:new h.Cache.MemoryCache});babelHelpers.defineProperty(this,"isReserveEqualProductQuantity",true);babelHelpers.defineProperty(this,"wrapper",null);babelHelpers.classPrivateFieldSet(this,F,t.row);this.inputFieldName=t.inputName||e.INPUT_NAME;this.viewName=e.VIEW_NAME;this.dateFieldName=t.dateFieldName||e.DATE_NAME;this.quantityFieldName=t.quantityFieldName||e.QUANTITY_NAME;this.deductedQuantityFieldName=t.deductedQuantityFieldName||e.DEDUCTED_QUANTITY_NAME;this.defaultDateReservation=t.defaultDateReservation||null;this.isBlocked=t.isBlocked||false;this.isInventoryManagementToolEnabled=t.isInventoryManagementToolEnabled||false;this.inventoryManagementMode=t.inventoryManagementMode||"";this.measureName=t.measureName;this.isReserveEqualProductQuantity=t.isReserveEqualProductQuantity&&(this.getReservedQuantity()===this.getQuantity()||babelHelpers.classPrivateFieldGet(this,F).isNewRow())}babelHelpers.createClass(e,[{key:"renderTo",value:function t(i){this.wrapper=i;h.Dom.append(h.Tag.render(y||(y=babelHelpers.taggedTemplateLiteral(["<div>","</div>"])),_(this,w,L).call(this)),this.wrapper);h.Event.bind(_(this,w,L).call(this).querySelector("input"),"input",h.Runtime.debounce(this.onReserveInputChange,800,this));if(!_(this,M,G).call(this)){if(this.getReservedQuantity()>0||this.isReserveEqualProductQuantity){_(this,U,x).call(this,this.getDateReservation())}h.Dom.append(_(this,A,B).call(this),this.wrapper);h.Event.bind(_(this,A,B).call(this),"click",D(e,e,H).bind(this));h.Event.bind(_(this,A,B).call(this).querySelector("input"),"change",this.onDateChange.bind(this))}}},{key:"setReservedQuantity",value:function e(t,i){var n=_(this,w,L).call(this).querySelector("input");if(n){n.value=t;if(i){n.dispatchEvent(new window.Event("input"))}}}},{key:"getReservedQuantity",value:function e(){return h.Text.toNumber(babelHelpers.classPrivateFieldGet(this,F).getField(this.inputFieldName))}},{key:"getDateReservation",value:function e(){return babelHelpers.classPrivateFieldGet(this,F).getField(this.dateFieldName)||""}},{key:"getQuantity",value:function e(){return h.Text.toNumber(babelHelpers.classPrivateFieldGet(this,F).getField(this.quantityFieldName))}},{key:"getDeductedQuantity",value:function e(){return h.Text.toNumber(babelHelpers.classPrivateFieldGet(this,F).getField(this.deductedQuantityFieldName))}},{key:"getAvailableQuantity",value:function e(){return this.getQuantity()-this.getDeductedQuantity()}},{key:"onReserveInputChange",value:function e(t){var i=h.Text.toNumber(t.target.value);this.changeInputValue(i)}},{key:"changeInputValue",value:function e(t){if(t>this.getAvailableQuantity()){var i="reserveCountError";var n=BX.UI.Notification.Center.getBalloonById(i);if(!n){var r={id:i,closeButton:true,autoHideDelay:3e3,content:h.Tag.render(b||(b=babelHelpers.taggedTemplateLiteral(["<div>","</div>"])),h.Loc.getMessage("CRM_ENTITY_PL_IS_LESS_QUANTITY_WITH_DEDUCTED_THEN_RESERVED"))};n=BX.UI.Notification.Center.notify(r)}n.show();t=this.getAvailableQuantity();this.setReservedQuantity(t)}if(t>0){var a=this.getDateReservation();if(a===""){this.changeDateReservation(this.defaultDateReservation)}else{_(this,U,x).call(this,a)}}else if(t<=0){this.changeDateReservation()}this.setReservedQuantity(t,false);babelHelpers.classPrivateFieldGet(this,F).updateField(this.inputFieldName,t)}},{key:"clearCache",value:function e(){babelHelpers.classPrivateFieldGet(this,k)["delete"]("dateInput");babelHelpers.classPrivateFieldGet(this,k)["delete"]("reserveInput")}},{key:"isInputDisabled",value:function e(){if(this.isBlocked||!this.isInventoryManagementToolEnabled){return true}var t=babelHelpers.classPrivateFieldGet(this,F).getModel();if(t){return t.isSimple()||t.isService()}return false}},{key:"onDateChange",value:function e(t){var i=t.target.value;var n=BX.parseDate(i);var r=new Date;r.setHours(0,0,0,0);if(n>=r){this.changeDateReservation(i)}else{var a="reserveDateError";var s=BX.UI.Notification.Center.getBalloonById(a);if(!s){var l={id:a,closeButton:true,autoHideDelay:3e3,content:h.Tag.render(T||(T=babelHelpers.taggedTemplateLiteral(["<div>","</div>"])),h.Loc.getMessage("CRM_ENTITY_PL_DATE_IN_PAST"))};s=BX.UI.Notification.Center.notify(l)}s.show();this.changeDateReservation(this.defaultDateReservation)}}},{key:"changeDateReservation",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";if(t!==this.getDateReservation()){babelHelpers.classPrivateFieldGet(this,F).updateField(this.dateFieldName,t)}_(this,U,x).call(this,t)}},{key:"disable",value:function e(t){var i=t||this.wrapper;if(i){i.innerHTML=this.getReservedQuantity()+" "+h.Text.encode(this.measureName)}}}]);return e}();function H(e){BX.calendar({node:e.target,field:e.target.parentNode.querySelector("input"),bTime:false})}function B(){var e=this;return babelHelpers.classPrivateFieldGet(this,k).remember("dateInput",(function(){return h.Tag.render(m||(m=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t<div>\n\t\t\t\t\t<a class="crm-entity-product-list-reserve-date"></a>\n\t\t\t\t\t<input\n\t\t\t\t\t\tdata-name="','"\n\t\t\t\t\t\tname="','"\n\t\t\t\t\t\ttype="hidden"\n\t\t\t\t\t\tvalue="','"\n\t\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t'])),e.dateFieldName,e.dateFieldName,e.getDateReservation())}))}function L(){var e=this;return babelHelpers.classPrivateFieldGet(this,k).remember("reserveInput",(function(){var t=_(e,M,G).call(e)?h.Tag.render(S||(S=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<span data-name="','">\n\t\t\t\t\t\t\t\t',"\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t","\n\t\t\t\t\t\t</span>\n\t\t\t\t\t"])),e.viewName,e.getReservedQuantity(),h.Text.encode(babelHelpers.classPrivateFieldGet(e,F).getMeasureName())):null;var i=h.Tag.render(I||(I=babelHelpers.taggedTemplateLiteral(["\n\t\t\t\t<div ",">\n\t\t\t\t\t",'\n\t\t\t\t\t<input type="','"\n\t\t\t\t\t\tdata-name="','"\n\t\t\t\t\t\tname="','"\n\t\t\t\t\t\tclass="ui-ctl-element ui-ctl-textbox ','"\n\t\t\t\t\t\tautoComplete="off"\n\t\t\t\t\t\tvalue="','"\n\t\t\t\t\t\tplaceholder="0"\n\t\t\t\t\t\ttitle="','"\n\t\t\t\t\t\t',"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t"])),e.isInputDisabled()?'class="crm-entity-product-list-locked-field-wrapper"':"",t,_(e,M,G).call(e)?"hidden":"text",e.inputFieldName,e.inputFieldName,e.isInputDisabled()?"crm-entity-product-list-locked-field":"",e.getReservedQuantity(),e.getReservedQuantity(),e.isInputDisabled()?"disabled":"");if(e.isBlocked||!e.isInventoryManagementToolEnabled){i.onclick=function(){return l.EventEmitter.emit(e,"onNodeClick")}}return i}))}function x(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";var t=e===""?"":h.Loc.getMessage("CRM_ENTITY_PL_RESERVED_DATE",{"#FINAL_RESERVATION_DATE#":e});var i=_(this,A,B).call(this).querySelector("a");if(i){i.innerText=t}var n=_(this,A,B).call(this).querySelector("input");if(n){n.value=e}}function G(){return this.inventoryManagementMode===r.ModeList.MODE_1C}babelHelpers.defineProperty(O,"INPUT_NAME","INPUT_RESERVE_QUANTITY");babelHelpers.defineProperty(O,"VIEW_NAME","VIEW_RESERVE_QUANTITY");babelHelpers.defineProperty(O,"DATE_NAME","DATE_RESERVE_END");babelHelpers.defineProperty(O,"QUANTITY_NAME","QUANTITY");babelHelpers.defineProperty(O,"DEDUCTED_QUANTITY_NAME","DEDUCTED_QUANTITY");var V;function Y(e,t){X(e,t);t.add(e)}function W(e,t,i){X(e,t);t.set(e,i)}function X(e,t){if(t.has(e)){throw new TypeError("Cannot initialize the same private elements twice on an object")}}function Q(e,t,i){if(!t.has(e)){throw new TypeError("attempted to get private field on non-instance")}return i}var q=new WeakMap;var j=new WeakMap;var z=new WeakMap;var K=new WeakMap;var Z=new WeakMap;var J=new WeakSet;var $=function(){function e(t){babelHelpers.classCallCheck(this,e);Y(this,J);W(this,q,{writable:true,value:void 0});W(this,j,{writable:true,value:void 0});W(this,z,{writable:true,value:void 0});W(this,K,{writable:true,value:void 0});W(this,Z,{writable:true,value:void 0});babelHelpers.classPrivateFieldSet(this,q,t.rowId);babelHelpers.classPrivateFieldSet(this,j,t.model);babelHelpers.classPrivateFieldSet(this,z,t.inventoryManagementMode);this.setNode(t.node)}babelHelpers.createClass(e,[{key:"setNode",value:function e(t){babelHelpers.classPrivateFieldSet(this,K,t);h.Dom.addClass(babelHelpers.classPrivateFieldGet(this,K),"store-available-popup-link");h.Event.bind(babelHelpers.classPrivateFieldGet(this,K),"click",this.togglePopup.bind(this))}},{key:"getPopupContent",value:function e(){var t=this;var i=babelHelpers.classPrivateFieldGet(this,j).getField("STORE_ID");var n=babelHelpers.classPrivateFieldGet(this,j).getStoreCollection();var a=n.getStoreAmount(i);var s=n.getStoreReserved(i);var l=n.getStoreAvailableAmount(i);var o=function e(t){return'<td class="main-grid-cell-head main-grid-col-no-sortable main-grid-cell-right">\n\t\t\t\t<div class="main-grid-cell-inner">\n\t\t\t\t\t<span class="main-grid-cell-head-container">'.concat(t,"</span>\n\t\t\t\t</div>\n\t\t\t</td>")};var u=function e(t){return'<td class="main-grid-cell main-grid-cell-right">\n\t\t\t\t<div class="main-grid-cell-inner">\n\t\t\t\t\t<span class="main-grid-cell-content">'.concat(t,"</span>\n\t\t\t\t</div>\n\t\t\t</td>")};var d=s>0&&babelHelpers.classPrivateFieldGet(this,z)!==r.ModeList.MODE_1C;var c=d?'<a href="#" class="store-available-popup-reserves-slider-link">'.concat(s,"</a>"):s;var v=l<=0?'<span class="text--danger">'.concat(l):l;var g=h.Tag.render(V||(V=babelHelpers.taggedTemplateLiteral(['\n\t\t\t<div class="store-available-popup-container">\n\t\t\t\t<table class="main-grid-table">\n\t\t\t\t\t<thead class="main-grid-header">\n\t\t\t\t\t\t<tr class="main-grid-row-head">\n\t\t\t\t\t\t\t',"\n\t\t\t\t\t\t\t","\n\t\t\t\t\t\t\t",'\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr class="main-grid-row main-grid-row-body">\n\t\t\t\t\t\t\t',"\n\t\t\t\t\t\t\t","\n\t\t\t\t\t\t\t","\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t"])),o(h.Loc.getMessage("CRM_ENTITY_PL_STORE_AVAILABLE_POPUP_QUANTITY_COMMON_MSGVER_1")),o(h.Loc.getMessage("CRM_ENTITY_PL_STORE_AVAILABLE_POPUP_QUANTITY_RESERVED")),o(h.Loc.getMessage("CRM_ENTITY_PL_STORE_AVAILABLE_POPUP_QUANTITY_AVAILABLE")),u(a),u(c),u(v));if(d){h.Event.bind(g.querySelector(".store-available-popup-reserves-slider-link"),"click",(function(e){e.preventDefault();t.openDealsWithReservedProductSlider()}))}return g}},{key:"openDealsWithReservedProductSlider",value:function e(){var t="/bitrix/components/bitrix/catalog.productcard.reserved.deal.list/slider.php";var i=babelHelpers.classPrivateFieldGet(this,j).getField("STORE_ID");var n=babelHelpers.classPrivateFieldGet(this,j).getField("PRODUCT_ID");var r=new h.Uri(t);r.setQueryParam("productId",n);r.setQueryParam("storeId",i);BX.SidePanel.Instance.open(r.toString(),{allowChangeHistory:false,cacheable:false})}},{key:"togglePopup",value:function e(){if(babelHelpers.classPrivateFieldGet(this,Z)){if(babelHelpers.classPrivateFieldGet(this,Z).isShown()){babelHelpers.classPrivateFieldGet(this,Z).close()}else{babelHelpers.classPrivateFieldGet(this,Z).setContent(this.getPopupContent());babelHelpers.classPrivateFieldGet(this,Z).show()}}else{Q(this,J,ee).call(this);babelHelpers.classPrivateFieldGet(this,Z).show()}}}]);return e}();function ee(){var e="store-available-popup-row-".concat(babelHelpers.classPrivateFieldGet(this,q));var t=s.PopupManager.getPopupById(e);if(t){babelHelpers.classPrivateFieldSet(this,Z,t);babelHelpers.classPrivateFieldGet(this,Z).setBindElement(babelHelpers.classPrivateFieldGet(this,K));babelHelpers.classPrivateFieldGet(this,Z).setContent(this.getPopupContent())}else{babelHelpers.classPrivateFieldSet(this,Z,s.PopupManager.create({id:e,bindElement:babelHelpers.classPrivateFieldGet(this,K),autoHide:true,draggable:false,offsetLeft:-218,offsetTop:0,angle:{position:"top",offset:250},noAllPaddings:true,bindOptions:{forceBindPosition:true},closeByEsc:true,content:this.getPopupContent()}))}}var te=function(){function e(t){babelHelpers.classCallCheck(this,e);this.node=t.node;this.hint=t.hint}babelHelpers.createClass(e,[{key:"enable",value:function e(){var t;this.node.removeAttribute("disabled");this.node.removeAttribute("data-hint-no-icon");this.node.removeAttribute("data-hint");this.node.classList.remove("ui-ctl-element");var i=this.node.querySelector(".main-grid-editor-money-currency");if(i){i.classList.add("main-dropdown");i.dataset.disabled=false}(t=this.node.querySelector(".main-grid-editor-money-price"))===null||t===void 0?void 0:t.removeAttribute("disabled")}},{key:"disable",value:function e(){var t;this.node.setAttribute("disabled","");this.node.classList.add("ui-ctl-element");(t=this.node.querySelector(".main-grid-editor-money-price"))===null||t===void 0?void 0:t.setAttribute("disabled","");var i=this.node.querySelector(".main-grid-editor-money-currency");if(i){i.classList.remove("main-dropdown");i.dataset.disabled=true}if(this.hint){this.node.setAttribute("data-hint-no-icon","");this.node.setAttribute("data-hint",this.hint);BX.UI.Hint.init(this.node.parentNode)}}}]);return e}();var ie,ne,re,ae;function se(e,t){var i=typeof Symbol!=="undefined"&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=le(e))||t&&e&&typeof e.length==="number"){if(i)e=i;var n=0;var r=function e(){};return{s:r,n:function t(){if(n>=e.length)return{done:true};return{done:false,value:e[n++]}},e:function e(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a=true,s=false,l;return{s:function t(){i=i.call(e)},n:function e(){var t=i.next();a=t.done;return t},e:function e(t){s=true;l=t},f:function e(){try{if(!a&&i["return"]!=null)i["return"]()}finally{if(s)throw l}}}}function le(e,t){if(!e)return;if(typeof e==="string")return oe(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor)i=e.constructor.name;if(i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return oe(e,t)}function oe(e,t){if(t==null||t>e.length)t=e.length;for(var i=0,n=new Array(t);i<t;i++)n[i]=e[i];return n}function ue(e,t){de(e,t);t.add(e)}function de(e,t){if(t.has(e)){throw new TypeError("Cannot initialize the same private elements twice on an object")}}function ce(e,t,i){if(!t.has(e)){throw new TypeError("attempted to get private field on non-instance")}return i}var he="EDIT";var ve="SET";var ge=new Map;var fe=new WeakSet;var pe=new WeakSet;var Ee=new WeakSet;var ye=new WeakSet;var be=new WeakSet;var Te=new WeakSet;var me=new WeakSet;var Se=new WeakSet;var Ie=new WeakSet;var Ce=new WeakSet;var Pe=new WeakSet;var Re=new WeakSet;var De=new WeakSet;var Ne=new WeakSet;var _e=new WeakSet;var Fe=new WeakSet;var ke=new WeakSet;var Ae=new WeakSet;var we=new WeakSet;var Ue=new WeakSet;var Me=new WeakSet;var Oe=new WeakSet;var He=function(){function e(t,i,n,r){babelHelpers.classCallCheck(this,e);ue(this,Oe);ue(this,Me);ue(this,Ue);ue(this,we);ue(this,Ae);ue(this,ke);ue(this,Fe);ue(this,_e);ue(this,Ne);ue(this,De);ue(this,Re);ue(this,Pe);ue(this,Ce);ue(this,Ie);ue(this,Se);ue(this,me);ue(this,Te);ue(this,be);ue(this,ye);ue(this,Ee);ue(this,pe);ue(this,fe);babelHelpers.defineProperty(this,"fields",{});babelHelpers.defineProperty(this,"externalActions",[]);babelHelpers.defineProperty(this,"handleChangeStoreData",ce(this,De,ze).bind(this));babelHelpers.defineProperty(this,"handleProductErrorsChange",h.Runtime.debounce(ce(this,Ne,Ke),500,this));babelHelpers.defineProperty(this,"handleMainSelectorClear",h.Runtime.debounce(ce(this,be,Ge).bind(this),500,this));babelHelpers.defineProperty(this,"handleStoreFieldChange",h.Runtime.debounce(ce(this,Pe,qe).bind(this),500,this));babelHelpers.defineProperty(this,"handleStoreFieldClear",h.Runtime.debounce(ce(this,Re,je).bind(this),500,this));babelHelpers.defineProperty(this,"cache",new h.Cache.MemoryCache);babelHelpers.defineProperty(this,"modeChanges",{EDIT:he,SET:ve});this.setId(t);this.setSettings(n);this.setEditor(r);this.setModel(i,n);this.setFields(i);ce(this,fe,Be).call(this);ce(this,ye,xe).call(this);ce(this,Te,Ve).call(this);ce(this,me,Ye).call(this);ce(this,Ce,Qe).call(this);this.modifyBasePriceInput();this.modifyQuantityInput();this.refreshFieldsLayout();this.updateUiStoreAmountData();this.initHandlersForSelectors();requestAnimationFrame(this.initHandlers.bind(this))}babelHelpers.createClass(e,[{key:"getNode",value:function e(){var t=this;return this.cache.remember("node",(function(){var e=t.getField("ID",0);return t.getEditorContainer().querySelector('[data-id="'+e+'"]')}))}},{key:"getSelector",value:function e(){return this.mainSelector}},{key:"isNewRow",value:function e(){return isNaN(+this.getField("ID"))}},{key:"getId",value:function e(){return this.id}},{key:"setId",value:function e(t){this.id=t}},{key:"getSettings",value:function e(){return this.settings}},{key:"setSettings",value:function e(t){this.settings=h.Type.isPlainObject(t)?t:{}}},{key:"getSettingValue",value:function e(t,i){return this.settings.hasOwnProperty(t)?this.settings[t]:i}},{key:"setSettingValue",value:function e(t,i){this.settings[t]=i}},{key:"setEditor",value:function e(t){this.editor=t}},{key:"getEditor",value:function e(){return this.editor}},{key:"getEditorContainer",value:function e(){return this.getEditor().getContainer()}},{key:"getHintPopup",value:function e(){return this.getEditor().getHintPopup()}},{key:"initHandlers",value:function e(){var t=this.getEditor();this.getNode().querySelectorAll("input").forEach((function(e){h.Event.bind(e,"input",t.changeProductFieldHandler);h.Event.bind(e,"change",t.changeProductFieldHandler);h.Event.bind(e,"mousedown",(function(e){return e.stopPropagation()}))}));this.getNode().querySelectorAll("select").forEach((function(e){h.Event.bind(e,"change",t.changeProductFieldHandler);h.Event.bind(e,"mousedown",(function(e){return e.stopPropagation()}))}))}},{key:"initHandlersForSelectors",value:function e(){var t=this;var i=this.getEditor();var n=["MAIN_INFO","STORE_INFO","RESERVE_INFO"];n.forEach((function(e){t.getNode().querySelectorAll('[data-name="'+e+'"] input[type="text"]').forEach((function(e){h.Event.bind(e,"input",i.changeProductFieldHandler);h.Event.bind(e,"change",i.changeProductFieldHandler);h.Event.bind(e,"mousedown",(function(e){return e.stopPropagation()}))}))}))}},{key:"unsubscribeCustomEvents",value:function e(){if(this.mainSelector){this.mainSelector.unsubscribeEvents();l.EventEmitter.unsubscribe(this.mainSelector,"onClear",this.handleMainSelectorClear)}if(this.storeSelector){this.storeSelector.unsubscribeEvents();l.EventEmitter.unsubscribe(this.storeSelector,"onChange",this.handleStoreFieldChange);l.EventEmitter.unsubscribe(this.storeSelector,"onClear",this.handleStoreFieldClear)}l.EventEmitter.unsubscribe(this.model,"onChangeStoreData",this.handleChangeStoreData);l.EventEmitter.unsubscribe(this.model,"onErrorsChange",this.handleProductErrorsChange)}},{key:"modifyBasePriceInput",value:function e(){var t=ce(this,we,tt).call(this,"PRICE");if(!t){return}var i=new te({node:t,hint:h.Loc.getMessage("CRM_ENTITY_PL_PRICE_CHANGING_RESTRICTED")});if(!ce(this,pe,Le).call(this)){i.disable()}else{i.enable()}}},{key:"modifyQuantityInput",value:function e(){if(!this.isRestrictedStoreInfo()){return}var t=ce(this,we,tt).call(this,"QUANTITY");if(t){var i=new te({node:t,hint:h.Loc.getMessage("CRM_ENTITY_PL_ROW_UPDATE_RESTRICTED_BY_STORE")});i.disable()}}},{key:"layoutStoreSelector",value:function e(){var t=ce(this,we,tt).call(this,"STORE_INFO");if(this.storeSelector&&t){t.innerHTML="";if(ce(this,Oe,rt).call(this)){this.storeSelector.renderTo(t);if(this.isReserveBlocked()){ce(this,Se,We).call(this)}else if(!this.isInventoryManagementToolEnabled()){ce(this,Ie,Xe).call(this)}}}}},{key:"layoutReserveControl",value:function e(){var t=ce(this,we,tt).call(this,"RESERVE_INFO");if(t&&this.reserveControl){t.innerHTML="";this.reserveControl.clearCache();if(ce(this,Me,nt).call(this)){if(this.isRestrictedStoreInfo()){t.innerHTML=this.reserveControl.getReservedQuantity()+" "+h.Text.encode(this.getMeasureName());return}this.reserveControl.renderTo(t)}}}},{key:"clearReserveControl",value:function e(){var t=ce(this,we,tt).call(this,"RESERVE_INFO");if(t&&this.reserveControl){t.innerHTML="";this.reserveControl.clearCache()}}},{key:"setRowNumber",value:function e(t){this.getNode().querySelectorAll(".main-grid-row-number").forEach((function(e){e.textContent=t+"."}))}},{key:"getFields",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var i;if(!h.Type.isArrayFilled(t)){i=h.Runtime.clone(this.fields)}else{i={};var n=se(t),r;try{for(n.s();!(r=n.n()).done;){var a=r.value;i[a]=this.getField(a)}}catch(e){n.e(e)}finally{n.f()}}if("PRODUCT_NAME"in i){var s=this.getField("FIXED_PRODUCT_NAME","");if(h.Type.isStringFilled(s)){i["PRODUCT_NAME"]=s}}return i}},{key:"getCatalogFields",value:function e(){var t=this.getFields(["CURRENCY","QUANTITY","MEASURE_CODE"]);t["PRICE"]=this.getBasePrice();t["VAT_INCLUDED"]=this.getTaxIncluded();t["VAT_ID"]=this.getTaxId();return t}},{key:"getCalculateFields",value:function e(){return{PRICE:this.getPrice(),BASE_PRICE:this.getBasePrice(),PRICE_EXCLUSIVE:this.getPriceExclusive(),PRICE_NETTO:this.getPriceNetto(),PRICE_BRUTTO:this.getPriceBrutto(),QUANTITY:this.getQuantity(),DISCOUNT_TYPE_ID:this.getDiscountType(),DISCOUNT_RATE:this.getDiscountRate(),DISCOUNT_SUM:this.getDiscountSum(),DISCOUNT_ROW:this.getDiscountRow(),TAX_INCLUDED:this.getTaxIncluded(),TAX_RATE:this.getTaxRate()}}},{key:"setFields",value:function e(t){for(var i in t){if(t.hasOwnProperty(i)){this.setField(i,t[i]);this.getModel().setField(i,t[i])}}}},{key:"getField",value:function e(t,i){return this.fields.hasOwnProperty(t)?this.fields[t]:i}},{key:"setField",value:function e(t,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;this.fields[t]=i;if(n){this.getModel().setField(t,i)}}},{key:"getUiFieldId",value:function e(t){return this.getId()+"_"+t}},{key:"getBasePrice",value:function e(){return this.getField("BASE_PRICE",0)}},{key:"isPriceNetto",value:function e(){return this.getEditor().isTaxAllowed()&&!this.isTaxIncluded()}},{key:"getPrice",value:function e(){return this.getField("PRICE",0)}},{key:"getPriceExclusive",value:function e(){return this.getField("PRICE_EXCLUSIVE",0)}},{key:"getPriceNetto",value:function e(){return this.getField("PRICE_NETTO",0)}},{key:"getPriceBrutto",value:function e(){return this.getField("PRICE_BRUTTO",0)}},{key:"getQuantity",value:function e(){return this.getField("QUANTITY",1)}},{key:"getDiscountType",value:function e(){return this.getField("DISCOUNT_TYPE_ID",a.DiscountType.UNDEFINED)}},{key:"isDiscountUndefined",value:function e(){return this.getDiscountType()===a.DiscountType.UNDEFINED}},{key:"isDiscountPercentage",value:function e(){return this.getDiscountType()===a.DiscountType.PERCENTAGE}},{key:"isDiscountMonetary",value:function e(){return this.getDiscountType()===a.DiscountType.MONETARY}},{key:"isDiscountHandmade",value:function e(){return this.isDiscountPercentage()||this.isDiscountMonetary()}},{key:"getDiscountRate",value:function e(){return this.getField("DISCOUNT_RATE",0)}},{key:"getDiscountSum",value:function e(){return this.getField("DISCOUNT_SUM",0)}},{key:"getDiscountRow",value:function e(){return this.getField("DISCOUNT_ROW",0)}},{key:"isEmptyDiscount",value:function e(){if(this.isDiscountPercentage()){return this.getDiscountRate()===0}else if(this.isDiscountMonetary()){return this.getDiscountSum()===0}else if(this.isDiscountUndefined()){return true}return false}},{key:"isEmptyRow",value:function e(){return!h.Type.isStringFilled(this.getField("NAME","").trim())&&this.model.isEmpty()&&this.getBasePrice()<=0}},{key:"getTaxIncluded",value:function e(){return this.getField("TAX_INCLUDED","N")}},{key:"isTaxIncluded",value:function e(){return this.getTaxIncluded()==="Y"}},{key:"getTaxRate",value:function e(){return this.getField("TAX_RATE",0)}},{key:"getTaxSum",value:function e(){return this.isTaxIncluded()?this.getPrice()*this.getQuantity()*(1-1/(1+this.getTaxRate()/100)):this.getPriceExclusive()*this.getQuantity()*this.getTaxRate()/100}},{key:"getTaxNode",value:function e(){return this.getNode().querySelector('select[data-field-code="TAX_RATE"]')}},{key:"getTaxId",value:function e(){var t=this.getTaxNode();if(h.Type.isDomNode(t)&&t.options[t.selectedIndex]){return h.Text.toNumber(t.options[t.selectedIndex].getAttribute("data-tax-id"))}return 0}},{key:"updateFieldByEvent",value:function e(t,i){var n=i.target;var r=n.type==="checkbox"?n.checked:n.value;var a=i.type==="input"||i.type==="change"?he:ve;this.updateField(t,r,a)}},{key:"updateField",value:function e(t,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ve;this.resetExternalActions();this.updateFieldValue(t,i,n);this.executeExternalActions()}},{key:"updateFieldValue",value:function e(t,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ve;switch(t){case"ID":case"OFFER_ID":this.changeProductId(i);break;case"QUANTITY":this.changeQuantity(i,n);break;case"MEASURE_CODE":this.changeMeasureCode(i,n);break;case"DISCOUNT":case"DISCOUNT_PRICE":this.changeDiscount(i,n);break;case"DISCOUNT_TYPE_ID":this.changeDiscountType(i);break;case"DISCOUNT_ROW":this.changeRowDiscount(i,n);break;case"VAT_ID":case"TAX_ID":this.changeTaxId(i);break;case"TAX_RATE":this.changeTaxRate(i);break;case"VAT_INCLUDED":case"TAX_INCLUDED":this.changeTaxIncluded(i);break;case"SUM":this.changeRowSum(i,n);break;case"NAME":case"PRODUCT_NAME":case"MAIN_INFO":this.changeProductName(i);break;case"SORT":this.changeSort(i,n);break;case"STORE_ID":this.changeStore(i);break;case"STORE_TITLE":this.changeStoreName(i);break;case"INPUT_RESERVE_QUANTITY":this.changeReserveQuantity(i);break;case"DATE_RESERVE_END":this.changeDateReserveEnd(i);break;case"PRICE":case"BASE_PRICE":this.changeBasePrice(i,n);break;case"DEDUCTED_QUANTITY":this.setDeductedQuantity(i);break;case"ROW_RESERVED":this.setRowReserved(i);break;case"TYPE":this.setType(i);break;case"SKU_TREE":case"DETAIL_URL":case"IMAGE_INFO":case"COMMON_STORE_AMOUNT":this.setField(t,i);break}}},{key:"updateFieldByName",value:function e(t,i){switch(t){case"TAX_INCLUDED":this.setTaxIncluded(i);break}}},{key:"handleCopyAction",value:function e(t,i){var n;(n=this.getEditor())===null||n===void 0?void 0:n.copyRow(this);var r=i.getMenuWindow();if(r){r.destroy()}}},{key:"handleDeleteAction",value:function e(t,i){var n;(n=this.getEditor())===null||n===void 0?void 0:n.deleteRow(this.getField("ID"));var r=i.getMenuWindow();if(r){r.destroy()}}},{key:"changeProductId",value:function e(t){var i=this.parseInt(t);this.setProductId(i)}},{key:"changeQuantity",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;var n=this.parseFloat(t,this.getQuantityPrecision());this.setQuantity(n,i)}},{key:"changeMeasureCode",value:function e(t){var i=this;var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;this.getEditor().getMeasures().filter((function(e){return e.CODE===t})).forEach((function(e){return i.setMeasure(e,n)}))}},{key:"changeDiscount",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;var n;if(this.isDiscountPercentage()){n=this.parseFloat(t,this.getCommonPrecision())}else{n=this.parseFloat(t,this.getPricePrecision()).toFixed(this.getPricePrecision())}this.setDiscount(n,i)}},{key:"changeDiscountType",value:function e(t){var i=this.parseInt(t,a.DiscountType.UNDEFINED);this.setDiscountType(i)}},{key:"changeRowDiscount",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;var n=this.parseFloat(t,this.getPricePrecision());this.setRowDiscount(n,i)}},{key:"changeTaxId",value:function e(t){var i=this.getEditor().getTaxList();if(h.Type.isArrayFilled(i)){var n=i.find((function(e){return parseInt(e.ID)===parseInt(t)}));if(!n){n=i.find((function(e){return h.Type.isNil(e.VALUE)}))}if(n){this.changeTaxRate(n.VALUE)}}}},{key:"changeTaxRate",value:function e(t){var i=h.Type.isNil(t)||t===""?null:this.parseFloat(t,this.getCommonPrecision());this.setTaxRate(i)}},{key:"changeTaxIncluded",value:function e(t){if(h.Type.isBoolean(t)){t=t?"Y":"N"}this.setTaxIncluded(t)}},{key:"changeRowSum",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;var n=this.parseFloat(t,this.getPricePrecision());this.setRowSum(n,i)}},{key:"changeProductName",value:function e(t){var i=t.toString();var n=this.getField("PRODUCT_NAME")!==i;if(n){this.setField("PRODUCT_NAME",i);this.setField("NAME",i);this.addActionProductChange()}}},{key:"changeSort",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;var n=this.parseInt(t);if(i===ve){this.setField("SORT",n)}var r=this.getField("SORT")!==n;if(r){this.addActionProductChange()}}},{key:"changeStore",value:function e(t){if(this.isReserveBlocked()){return}var i=h.Text.toNumber(t);if(this.getField("STORE_ID")===i){return}this.setField("STORE_ID",i);this.setField("STORE_AVAILABLE",this.model.getStoreCollection().getStoreAvailableAmount(t));this.updateUiStoreAmountData();this.layoutReserveControl();this.addActionProductChange();this.initHandlersForSelectors()}},{key:"updateUiStoreAmountData",value:function e(){var t=ce(this,we,tt).call(this,"STORE_AVAILABLE");if(!h.Type.isDomNode(t)){return}var i=this.getField("STORE_ID");if(!i){return}var n=this.model.getStoreCollection().getStoreAvailableAmount(i);var r=h.Text.toNumber(n);var a="";if(!this.getModel().isCatalogExisted()||this.isRestrictedStoreInfo()||this.getModel().isService()){return}a=r+" "+this.getMeasureName();t.innerHTML=r>0?a:'<span class="store-available-popup-link--danger">'.concat(a,"</span>")}},{key:"updatePropertyFields",value:function e(){var t=this.model.getField("PRODUCT_PROPERTIES");for(var i in t){var n=ce(this,we,tt).call(this,i);if(n){var r;var a=(r=this.model.getField("PRODUCT_PROPERTIES")[i])!==null&&r!==void 0?r:"";n.innerHTML=a}}}},{key:"clearPropertyFields",value:function e(){var t=ce(this,Ue,it).call(this);t.forEach((function(e){e.innerHTML=""}))}},{key:"setRowReserved",value:function e(t){this.setField("ROW_RESERVED",t);var i=ce(this,we,tt).call(this,"ROW_RESERVED");if(!h.Type.isDomNode(i)){return}if(!this.getModel().isCatalogExisted()||this.getModel().isService()){i.innerHTML="";return}i.innerHTML=h.Text.toNumber(this.getField("ROW_RESERVED"))+" "+this.getMeasureName()}},{key:"setDeductedQuantity",value:function e(t){this.setField("DEDUCTED_QUANTITY",t);var i=ce(this,we,tt).call(this,"DEDUCTED_QUANTITY");if(!h.Type.isDomNode(i)){return}if(!this.getModel().isCatalogExisted()||this.getModel().isService()){i.innerHTML="";return}i.innerHTML=h.Text.toNumber(this.getField("DEDUCTED_QUANTITY"))+" "+this.getMeasureName()}},{key:"changeStoreName",value:function e(t){var i=t.toString();this.setField("STORE_TITLE",i);this.addActionProductChange()}},{key:"changeDateReserveEnd",value:function e(t){var i=h.Type.isNil(t)?"":t.toString();this.setField("DATE_RESERVE_END",i);this.addActionProductChange()}},{key:"changeReserveQuantity",value:function e(t){var i=h.Text.toNumber(t);var n=i-this.getField("INPUT_RESERVE_QUANTITY");if(n===0||isNaN(n)){return}var r=this.getField("ROW_RESERVED")+n;this.setField("ROW_RESERVED",r);this.setField("RESERVE_QUANTITY",Math.max(r,0));this.setField("INPUT_RESERVE_QUANTITY",i);this.addActionProductChange()}},{key:"resetReserveFields",value:function e(){this.setField("ROW_RESERVED",null);this.setField("RESERVE_QUANTITY",null);this.setField("INPUT_RESERVE_QUANTITY",null)}},{key:"refreshFieldsLayout",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];for(var i in this.fields){if(this.fields.hasOwnProperty(i)&&!t.includes(i)){this.updateUiField(i,this.fields[i])}}}},{key:"getCalculator",value:function e(){return this.getModel().getCalculator().setFields(this.getCalculateFields()).setSettings(this.getEditor().getSettings())}},{key:"setModel",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var n=i.selectorId;if(n){var r=d.ProductModel.getById(n);if(r){this.model=r}}if(!this.model){var a;this.model=new d.ProductModel({id:n,currency:this.getEditor().getCurrencyId(),iblockId:t["IBLOCK_ID"],basePriceId:t["BASE_PRICE_ID"],isSimpleModel:h.Text.toInteger(t["PRODUCT_ID"])<=0&&h.Type.isStringFilled(t["NAME"]),skuTree:h.Type.isStringFilled(t["SKU_TREE"])?JSON.parse(t["SKU_TREE"]):null,storeMap:(a=t["STORE_MAP"])!==null&&a!==void 0?a:{},fields:t});if(!h.Type.isNil(t["DETAIL_URL"])){this.model.setDetailPath(t["DETAIL_URL"])}}var s=h.Type.isStringFilled(t["IMAGE_INFO"])?JSON.parse(t["IMAGE_INFO"]):null;if(h.Type.isObject(s)){this.model.getImageCollection().setPreview(s["preview"]);this.model.getImageCollection().setEditInput(s["input"]);this.model.getImageCollection().setMorePhotoValues(s["values"])}if(ce(this,Ae,et).call(this)){if(!this.getModel().getField("DATE_RESERVE_END")){this.setField("DATE_RESERVE_END",this.editor.getSettingValue("defaultDateReservation"))}}l.EventEmitter.subscribe(this.model,"onErrorsChange",this.handleProductErrorsChange);l.EventEmitter.subscribe(this.model,"onChangeStoreData",this.handleChangeStoreData)}},{key:"getModel",value:function e(){return this.model}},{key:"setProductId",value:function e(t){var i=this;var n=this.getField("PRODUCT_ID")!==t;if(n){var r;this.getModel().setOption("isSimpleModel",t<=0&&h.Type.isStringFilled(this.getField("NAME")));this.setField("PRODUCT_ID",t,false);this.setField("OFFER_ID",t,false);(r=this.storeSelector)===null||r===void 0?void 0:r.setProductId(t);this.addActionProductChange();this.addActionUpdateTotal();if(this.reserveControl&&ce(this,Ae,et).call(this)&&ce(this,Me,nt).call(this)){if(!this.getModel().getField("DATE_RESERVE_END")){this.setField("DATE_RESERVE_END",this.editor.getSettingValue("defaultDateReservation"))}this.resetReserveFields();this.onAfterExecuteExternalActions=function(){i.reserveControl.changeInputValue(i.getField("QUANTITY"))}}}}},{key:"changeBasePrice",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;if(i===he&&!ce(this,pe,Le).call(this)){t=this.getField("BASE_PRICE");this.updateUiInputField("PRICE",t.toFixed(this.getPricePrecision()));return}var n=t;t=Math.max(t,0);if(i===ve){this.updateUiInputField("PRICE",t.toFixed(this.getPricePrecision()))}var r=this.getBasePrice()!==t;if(r){var a=this.getCalculator().calculateBasePrice(t);this.setFields(a);var s=i===he?["BASE_PRICE","PRICE"]:[];this.refreshFieldsLayout(s);this.addActionProductChange();this.addActionUpdateTotal()}ce(this,Fe,Je).call(this,n<0&&n!==t)}},{key:"setQuantity",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;if(i===ve){this.updateUiInputField("QUANTITY",t)}var n=this.getField("QUANTITY")!==t;if(n){var r="quantityReservedCountError";var a=BX.UI.Notification.Center.getBalloonById(r);if(a){a.close()}var s=this.getCalculator().calculateQuantity(t);this.setFields(s);this.refreshFieldsLayout(["QUANTITY"]);this.addActionProductChange();this.addActionUpdateTotal()}}},{key:"setReserveQuantity",value:function e(t){var i=ce(this,we,tt).call(this,"RESERVE_INFO");var n=i===null||i===void 0?void 0:i.querySelector('input[name="INPUT_RESERVE_QUANTITY"]');if(h.Type.isElementNode(n)){var r;n.value=t;var a=i===null||i===void 0?void 0:i.querySelector('span[data-name="VIEW_RESERVE_QUANTITY"]');if(a){a.textContent=t}(r=this.reserveControl)===null||r===void 0?void 0:r.changeInputValue(t)}else{this.changeReserveQuantity(t)}}},{key:"setMeasure",value:function e(t){var i=this;var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;this.setField("MEASURE_CODE",t.CODE);this.setField("MEASURE_NAME",t.SYMBOL);this.updateUiMoneyField("MEASURE_CODE",t.CODE,h.Text.encode(t.SYMBOL));if(this.getModel().isNew()){this.getModel().save(["MEASURE_CODE"])}else if(n===he){this.getModel().showSaveNotifier("measureChanger_"+this.getId(),{title:h.Loc.getMessage("CATALOG_PRODUCT_MODEL_SAVING_NOTIFICATION_MEASURE_CHANGED_QUERY"),events:{onSave:function e(){i.getModel().save(["MEASURE_CODE","MEASURE_NAME"])}}})}this.addActionProductChange()}},{key:"setDiscount",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;if(!this.isDiscountHandmade()){return}var n=this.isDiscountPercentage()?"DISCOUNT_RATE":"DISCOUNT_SUM";var r=this.getField(n)!==t;if(r){var a=this.getCalculator().calculateDiscount(t);this.setFields(a);var s=i===he?["DISCOUNT_RATE","DISCOUNT_SUM","DISCOUNT"]:[];this.refreshFieldsLayout(s);this.addActionProductChange();this.addActionUpdateTotal()}ce(this,Fe,Je).call(this)}},{key:"setDiscountType",value:function e(t){var i=t!==a.DiscountType.UNDEFINED&&this.getField("DISCOUNT_TYPE_ID")!==t;if(i){var n=this.getCalculator().calculateDiscountType(t);this.setFields(n);this.refreshFieldsLayout();this.addActionProductChange();this.addActionUpdateTotal()}}},{key:"setRowDiscount",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;var n=this.getField("DISCOUNT_ROW")!==t;if(n){var r=this.getCalculator().calculateRowDiscount(t);this.setFields(r);var a=i===he?["DISCOUNT_ROW"]:[];this.refreshFieldsLayout(a);this.addActionProductChange();this.addActionUpdateTotal()}}},{key:"setTaxRate",value:function e(t){if(!this.getEditor().isTaxAllowed()){return}var i=this.getTaxRate()!==t;if(i){var n=this.getCalculator().calculateTax(t);this.setFields(n);this.refreshFieldsLayout();this.addActionProductChange();this.addActionUpdateTotal()}}},{key:"setTaxIncluded",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;if(!this.getEditor().isTaxAllowed()){return}if(i===ve){this.updateUiCheckboxField("TAX_INCLUDED",t)}var n=this.getTaxIncluded()!==t;if(n){var r=this.getCalculator().calculateTaxIncluded(t);this.setFields(r);this.refreshFieldsLayout();this.addActionUpdateFieldList("TAX_INCLUDED",t);this.addActionProductChange();this.addActionUpdateTotal()}}},{key:"setRowSum",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ve;var n=this.getField("SUM")!==t;if(n){var r=this.getCalculator().calculateRowSum(t);this.setFields(r);var a=i===he?["SUM"]:[];this.refreshFieldsLayout(a);this.addActionProductChange();this.addActionUpdateTotal()}}},{key:"getInputByFieldName",value:function e(t){var i=this.getUiFieldId(t);var n=document.getElementById(i);if(!h.Type.isElementNode(n)){n=this.getNode().querySelector('[name="'+i+'"]')}return n}},{key:"updateUiInputField",value:function e(t,i){var n=this.getInputByFieldName(t);if(h.Type.isElementNode(n)){n.value=i}}},{key:"updateUiCheckboxField",value:function e(t,i){var n=this.getInputByFieldName(t);if(h.Type.isElementNode(n)){n.checked=i==="Y"}}},{key:"updateUiDiscountTypeField",value:function e(t,i){var n=i===a.DiscountType.MONETARY?this.getEditor().getCurrencyText():"%";this.updateUiMoneyField(t,i,n)}},{key:"getMoneyFieldDropdownApi",value:function e(t){if(!h.Reflection.getClass("BX.Main.dropdownManager")){return null}return BX.Main.dropdownManager.getById(this.getId()+"_"+t+"_control")}},{key:"updateMoneyFieldUiWithDropdownApi",value:function e(t,i){if(t.getValue()===i){return}var n=t.menu.itemsContainer.querySelector('[data-value="'+i+'"]');var r=n&&t.getMenuItem(n);if(r){t.refresh(r);t.selectItem(r)}}},{key:"updateMoneyFieldUiManually",value:function e(t,i,n){var r=this.getInputByFieldName(t);if(!h.Type.isElementNode(r)){return}r.dataset.value=i;var a=r.querySelector("span.main-dropdown-inner");if(!h.Type.isElementNode(a)){return}a.innerHTML=n}},{key:"updateUiMoneyField",value:function e(t,i,n){var r=this.getMoneyFieldDropdownApi(t);if(r){this.updateMoneyFieldUiWithDropdownApi(r,i)}else{this.updateMoneyFieldUiManually(t,i,n)}}},{key:"updateUiMeasure",value:function e(t,i){this.updateUiMoneyField("MEASURE_CODE",t,i);this.updateUiStoreAmountData()}},{key:"updateUiHtmlField",value:function e(t,i){var n=this.getNode().querySelector('[data-name="'+t+'"]');if(h.Type.isElementNode(n)){n.innerHTML=i}}},{key:"updateUiCurrencyFields",value:function e(){var t=this;var i=this.getEditor().getCurrencyText();var n=""+this.getEditor().getCurrencyId();var r=["PRICE_CURRENCY","SUM_CURRENCY","DISCOUNT_TYPE_ID","DISCOUNT_ROW_CURRENCY"];r.forEach((function(e){var r=[];if(e==="DISCOUNT_TYPE_ID"){r.push({NAME:"%",VALUE:""+a.DiscountType.PERCENTAGE});r.push({NAME:i,VALUE:""+a.DiscountType.MONETARY});if(t.getDiscountType()===a.DiscountType.MONETARY){t.updateMoneyFieldUiManually(e,a.DiscountType.MONETARY,i)}}else{r.push({NAME:i,VALUE:n});t.updateUiMoneyField(e,n,i)}h.Dom.attr(t.getInputByFieldName(e),"data-items",r)}));this.updateUiField("TAX_SUM",this.getField("TAX_SUM"))}},{key:"updateUiField",value:function e(t,i){var n=this.getUiFieldName(t);if(!n){return}var r=this.getUiFieldType(n);if(!r){return}if(!this.allowUpdateUiField(t)){return}switch(r){case"input":if(t==="QUANTITY"){i=this.parseFloat(i,this.getQuantityPrecision())}else if(t==="DISCOUNT_RATE"){i=this.parseFloat(i,this.getCommonPrecision())}else if(t==="TAX_RATE"){i=h.Type.isNil(i)||i===""?"":this.parseFloat(i,this.getCommonPrecision())}else if(i===0){i=""}else if(h.Type.isNumber(i)){i=this.parseFloat(i,this.getPricePrecision()).toFixed(this.getPricePrecision())}this.updateUiInputField(n,i);break;case"checkbox":this.updateUiCheckboxField(n,i);break;case"discount_type_field":this.updateUiDiscountTypeField(n,i);break;case"html":this.updateUiHtmlField(n,i);break;case"money_html":i=o.CurrencyCore.currencyFormat(i,this.getEditor().getCurrencyId(),true);this.updateUiHtmlField(n,i);break}}},{key:"getUiFieldName",value:function e(t){var i=null;switch(t){case"QUANTITY":case"MEASURE_CODE":case"DISCOUNT_ROW":case"DISCOUNT_TYPE_ID":case"TAX_RATE":case"TAX_INCLUDED":case"TAX_SUM":case"SUM":case"PRODUCT_NAME":case"SORT":i=t;break;case"BASE_PRICE":i="PRICE";break;case"DISCOUNT_RATE":case"DISCOUNT_SUM":i="DISCOUNT_PRICE";break}return i}},{key:"getUiFieldType",value:function e(t){var i=null;switch(t){case"PRICE":case"QUANTITY":case"TAX_RATE":case"DISCOUNT_PRICE":case"DISCOUNT_RATE":case"DISCOUNT_SUM":case"DISCOUNT_ROW":case"SUM":case"PRODUCT_NAME":case"SORT":i="input";break;case"DISCOUNT_TYPE_ID":i="discount_type_field";break;case"TAX_INCLUDED":i="checkbox";break;case"TAX_SUM":i="money_html";break}return i}},{key:"allowUpdateUiField",value:function e(t){var i=true;switch(t){case"PRICE_NETTO":i=this.isPriceNetto();break;case"PRICE_BRUTTO":i=!this.isPriceNetto();break;case"DISCOUNT_RATE":i=this.isDiscountPercentage();break;case"DISCOUNT_SUM":i=this.isDiscountMonetary();break}return i}},{key:"parseInt",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;return this.getEditor().parseInt(t,i)}},{key:"parseFloat",value:function e(t,i){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;return this.getEditor().parseFloat(t,i,n)}},{key:"getPricePrecision",value:function e(){return this.getEditor().getPricePrecision()}},{key:"getQuantityPrecision",value:function e(){return this.getEditor().getQuantityPrecision()}},{key:"getCommonPrecision",value:function e(){return this.getEditor().getCommonPrecision()}},{key:"resetExternalActions",value:function e(){this.externalActions.length=0}},{key:"addExternalAction",value:function e(t){this.externalActions.push(t)}},{key:"addActionProductChange",value:function e(){this.addExternalAction({type:this.getEditor().actions.productChange,id:this.getId()})}},{key:"addActionDisableSaveButton",value:function e(){this.addExternalAction({type:this.getEditor().actions.disableSaveButton,id:this.getId()})}},{key:"addActionUpdateFieldList",value:function e(t,i){this.addExternalAction({type:this.getEditor().actions.updateListField,field:t,value:i})}},{key:"addActionStateChanged",value:function e(){this.addExternalAction({type:this.getEditor().actions.stateChanged,value:true})}},{key:"addActionStateReset",value:function e(){this.addExternalAction({type:this.getEditor().actions.stateChanged,value:false})}},{key:"addActionUpdateTotal",value:function e(){this.addExternalAction({type:this.getEditor().actions.updateTotal})}},{key:"executeExternalActions",value:function e(){if(this.externalActions.length===0){return}this.getEditor().executeActions(this.externalActions);this.resetExternalActions();if(this.onAfterExecuteExternalActions){var t=this.onAfterExecuteExternalActions;this.onAfterExecuteExternalActions=null;t.call()}}},{key:"isEmpty",value:function e(){return!h.Type.isStringFilled(this.getField("PRODUCT_NAME","").trim())&&this.getField("PRODUCT_ID",0)<=0&&this.getPrice()<=0}},{key:"isReserveBlocked",value:function e(){return this.getSettingValue("isReserveBlocked",false)}},{key:"isInventoryManagementToolEnabled",value:function e(){return this.getSettingValue("isInventoryManagementToolEnabled",true)}},{key:"getInventoryManagementMode",value:function e(){return this.getSettingValue("inventoryManagementMode","")}},{key:"isRestrictedStoreInfo",value:function e(){var t;if(!this.editor.getSettingValue("allowReservation",true)){return false}var i=(t=this.getField("STORE_ID"))===null||t===void 0?void 0:t.toString();if(h.Type.isNil(i)||i==="0"){return false}else if(this.getModel().isSimple()||this.getModel().isService()){return false}return!ce(this,ke,$e).call(this).includes(i)}},{key:"getMeasureName",value:function e(){var t;var i=h.Type.isStringFilled(this.model.getField("MEASURE_NAME"))?this.model.getField("MEASURE_NAME"):((t=this.editor.getDefaultMeasure())===null||t===void 0?void 0:t.SYMBOL)||"";return h.Text.encode(i)}},{key:"setType",value:function e(t){this.setField("TYPE",t);if(this.getModel().isService()){this.clearReserveControl()}}}]);return e}();function Be(){var e=this;if(this.getEditor().isReadOnly()||this.isRestrictedStoreInfo()){return}var t=this.getNode().querySelector(".main-grid-cell-action .main-grid-cell-content");if(h.Type.isDomNode(t)){var i=h.Tag.render(ie||(ie=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t<a\n\t\t\t\t\thref="#"\n\t\t\t\t\tclass="main-grid-row-action-button"\n\t\t\t\t></a>\n\t\t\t'])));h.Event.bind(i,"click",(function(t){var n=[{text:h.Loc.getMessage("CRM_ENTITY_PL_COPY"),onclick:e.handleCopyAction.bind(e),disabled:e.editor.getSettingValue("disabledSelectProductInput")},{text:h.Loc.getMessage("CRM_ENTITY_PL_DELETE"),onclick:e.handleDeleteAction.bind(e),disabled:e.getModel().isEmpty()&&e.getEditor().products.length<=1}];s.PopupMenu.show({id:e.getId()+"_actions_popup",bindElement:i,items:n,cacheable:false});t.preventDefault();t.stopPropagation()}));h.Dom.append(i,t)}}function Le(){return this.editor.canEditCatalogPrice()||!this.getModel().isCatalogExisted()||this.getModel().isNew()}function xe(){var e="crm_grid_"+this.getId();var t=this.editor.getSettingValue("enableSelectProductImageInput",true);this.mainSelector=u.ProductSelector.getById(e);if(!this.mainSelector){var i={iblockId:this.model.getIblockId(),basePriceId:this.model.getBasePriceId(),currency:this.model.getCurrency(),model:this.model,config:{ENABLE_SEARCH:true,IS_ALLOWED_CREATION_PRODUCT:true,ENABLE_IMAGE_INPUT:t,ROLLBACK_INPUT_AFTER_CANCEL:true,ENABLE_INPUT_DETAIL_LINK:true,ROW_ID:this.getId(),ENABLE_SKU_SELECTION:true,ENABLE_EMPTY_PRODUCT_ERROR:false,SELECTOR_INPUT_DISABLED:this.editor.getSettingValue("disabledSelectProductInput"),URL_BUILDER_CONTEXT:this.editor.getSettingValue("productUrlBuilderContext"),RESTRICTED_PRODUCT_TYPES:this.getEditor().getRestrictedProductTypes()},mode:u.ProductSelector.MODE_EDIT};this.mainSelector=new u.ProductSelector("crm_grid_"+this.getId(),i)}else{this.mainSelector.subscribeEvents();if(t!==ge[e]){this.mainSelector.setConfig("ENABLE_IMAGE_INPUT",t);if(t){this.mainSelector.layoutImage()}}}ge[e]=t;if(this.isRestrictedStoreInfo()){this.mainSelector.setMode(u.ProductSelector.MODE_VIEW)}var n=ce(this,we,tt).call(this,"MAIN_INFO");if(n){var r=n.querySelector(".main-grid-row-number");if(!h.Type.isDomNode(r)){h.Dom.append(h.Tag.render(ne||(ne=babelHelpers.taggedTemplateLiteral(['<div class="main-grid-row-number"></div>']))),n)}var a=n.querySelector(".main-grid-row-product-selector");if(!h.Type.isDomNode(a)){a=h.Tag.render(re||(re=babelHelpers.taggedTemplateLiteral(['<div class="main-grid-row-product-selector"></div>'])));h.Dom.append(a,n)}this.mainSelector.skuTreeInstance=null;if(this.editor.isVisible()){this.mainSelector.renderTo(a)}else{this.mainSelector.wrapper=a}}l.EventEmitter.subscribe(this.mainSelector,"onClear",this.handleMainSelectorClear)}function Ge(){this.updateField("OFFER_ID",0);this.updateField("PRODUCT_NAME","");this.updateUiStoreAmountData();this.updateField("DEDUCTED_QUANTITY",0);this.updateField("ROW_RESERVED",0)}function Ve(){this.storeSelector=new n.StoreSelector(this.getId(),{inputFieldId:"STORE_ID",inputFieldTitle:"STORE_TITLE",config:{ENABLE_SEARCH:true,ENABLE_INPUT_DETAIL_LINK:false,ROW_ID:this.getId()},mode:n.StoreSelector.MODE_EDIT,model:this.model});l.EventEmitter.subscribe(this.storeSelector,"onChange",this.handleStoreFieldChange);l.EventEmitter.subscribe(this.storeSelector,"onClear",this.handleStoreFieldClear);if(this.isRestrictedStoreInfo()&&this.storeSelector.searchInput){this.storeSelector.searchInput.disable(h.Loc.getMessage("CRM_ENTITY_PL_ROW_UPDATE_STORE_RESTRICTED_BY_STORE"))}this.layoutStoreSelector()}function Ye(){var e=ce(this,we,tt).call(this,"STORE_AVAILABLE");if(!e){return}this.storeAvailablePopup=new $({rowId:this.id,model:this.getModel(),node:e,inventoryManagementMode:this.getInventoryManagementMode()})}function We(){var e=this;var t=this.storeSelector.searchInput;if(!t||!t.getNameInput()){return}t.toggleIcon(this.storeSelector.searchInput.getSearchIcon(),"none");t.getNameInput().disabled=true;h.Dom.addClass(t.getNameInput(),"crm-entity-product-list-locked-field");if(this.storeSelector.getWrapper()){h.Dom.addClass(this.storeSelector.getWrapper(),"crm-entity-product-list-locked-field-wrapper");h.Event.bind(this.storeSelector.getWrapper(),"click",(function(){e.editor.openIntegrationLimitSlider()}))}}function Xe(){var e=this;var t=this.storeSelector.searchInput;if(!t||!t.getNameInput()){return}t.toggleIcon(this.storeSelector.searchInput.getSearchIcon(),"none");t.getNameInput().disabled=true;h.Dom.addClass(t.getNameInput(),"crm-entity-product-list-locked-field");if(this.storeSelector.getWrapper()){h.Dom.addClass(this.storeSelector.getWrapper(),"crm-entity-product-list-locked-field-wrapper");h.Event.bind(this.storeSelector.getWrapper(),"click",(function(){e.editor.openInventoryManagementToolDisabledSlider()}))}}function Qe(){var e=this;var t=ce(this,we,tt).call(this,"RESERVE_INFO");if(t&&ce(this,ke,$e).call(this).length){this.reserveControl=new O({row:this,isReserveEqualProductQuantity:ce(this,Ae,et).call(this),defaultDateReservation:this.editor.getSettingValue("defaultDateReservation"),isInventoryManagementToolEnabled:this.isInventoryManagementToolEnabled(),inventoryManagementMode:this.getInventoryManagementMode(),isBlocked:this.isReserveBlocked(),measureName:this.getMeasureName()});l.EventEmitter.subscribe(this.reserveControl,"onNodeClick",(function(){if(e.isReserveBlocked()){e.editor.openIntegrationLimitSlider()}else if(!e.isInventoryManagementToolEnabled()){e.editor.openInventoryManagementToolDisabledSlider()}}));if(this.isRestrictedStoreInfo()){this.reserveControl.disable()}this.layoutReserveControl()}var i=this.getNode().querySelector('div[data-name="QUANTITY"] input');if(i){h.Event.bind(i,"change",(function(t){var i;var n=ce(e,Ae,et).call(e)&&((i=e.reserveControl)===null||i===void 0?void 0:i.isReserveEqualProductQuantity);if(n){e.setReserveQuantity(e.getField("QUANTITY"));return}var r=h.Text.toNumber(t.target.value);var a="quantityReservedCountError";var s=BX.UI.Notification.Center.getBalloonById(a);if(r<e.getField("INPUT_RESERVE_QUANTITY")){if(!s){var l={id:a,closeButton:true,autoHideDelay:3e3,content:h.Tag.render(ae||(ae=babelHelpers.taggedTemplateLiteral(["<div>","</div>"])),h.Loc.getMessage("CRM_ENTITY_PL_IS_LESS_QUANTITY_THEN_RESERVED"))};s=BX.UI.Notification.Center.notify(l)}e.setReserveQuantity(e.getField("QUANTITY"));s.show()}}))}}function qe(e){var t=this;var i=e.getData();i.fields.forEach((function(e){t.updateField(e.NAME,e.VALUE)}));this.initHandlersForSelectors()}function je(){this.initHandlersForSelectors()}function ze(){var e=this.getField("STORE_ID");if(!this.isReserveBlocked()&&this.isNewRow()&&this.storeSelector){var t=this.getModel().getStoreCollection().getStoreAmount(e);if(t<=0&&this.getModel().isChanged()){var i=this.getModel().getStoreCollection().getMaxFilledStore();if(i.AMOUNT>t){this.storeSelector.onStoreSelect(i.STORE_ID,h.Text.decode(i.STORE_TITLE))}else if(h.Type.isNil(e)){e=+this.storeSelector.getStoreId();if(e>0){this.changeStore(e)}}}}this.setField("STORE_AVAILABLE",this.model.getStoreCollection().getStoreAvailableAmount(e));this.updateUiStoreAmountData()}function Ke(){this.getEditor().handleProductErrorsChange()}function Ze(){return h.Text.toNumber(this.getField("PRICE"))>0&&h.Text.toNumber(this.getField("PRICE"))<1&&this.isDiscountPercentage()&&(h.Text.toNumber(this.getField("DISCOUNT_SUM"))>0||h.Text.toNumber(this.getField("DISCOUNT_RATE"))>0||h.Text.toNumber(this.getField("DISCOUNT_ROW"))>0)}function Je(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(ce(this,_e,Ze).call(this)){this.getHintPopup().load(this.getInputByFieldName("PRICE"),h.Loc.getMessage("CRM_ENTITY_PL_SMALL_PRICE_NOTICE")).show()}else if(e){this.getHintPopup().load(this.getInputByFieldName("PRICE"),h.Loc.getMessage("CRM_ENTITY_PL_NEGATIVE_PRICE_NOTICE")).show()}else{this.getHintPopup().close()}}function $e(){return this.editor.getSettingValue("allowedStores",[])}function et(){return this.editor.getSettingValue("isReserveEqualProductQuantity",false)}function tt(e){return this.getNode().querySelector('[data-name="'.concat(e,'"]'))}function it(){return this.getNode().querySelectorAll("span[data-name]")}function nt(){return!this.getModel().isSimple()&&!this.getModel().isService()}function rt(){return!this.getModel().isSimple()&&!this.getModel().isService()}babelHelpers.defineProperty(He,"CATALOG_PRICE_CHANGING_DISABLED","CATALOG_PRICE_CHANGING_DISABLED");var at=function(){function e(t){babelHelpers.classCallCheck(this,e);babelHelpers.defineProperty(this,"_settings",{});this._settings=t?t:{};this.eventHandlers={}}babelHelpers.createClass(e,[{key:"registerEventHandler",value:function e(t,i){if(!this.eventHandlers[t])this.eventHandlers[t]=[];this.eventHandlers[t].push(i);BX.addCustomEvent(this,t,i)}},{key:"fireEvent",value:function e(t,i){BX.onCustomEvent(this,t,i)}},{key:"unregisterEventHandlers",value:function e(t){if(this.eventHandlers[t]){for(var i=0;i<this.eventHandlers[t].length;i++){BX.removeCustomEvent(this,t,this.eventHandlers[t][i])}delete this.eventHandlers[t]}}}]);return e}();var st,lt,ot,ut,dt;function ct(e,t){vt(e,t);t.add(e)}function ht(e,t,i){vt(e,t);t.set(e,i)}function vt(e,t){if(t.has(e)){throw new TypeError("Cannot initialize the same private elements twice on an object")}}function gt(e,t,i){if(!t.has(e)){throw new TypeError("attempted to get private field on non-instance")}return i}var ft=new WeakMap;var pt=new WeakMap;var Et=new WeakMap;var yt=new WeakMap;var bt=new WeakSet;var Tt=new WeakSet;var mt=new WeakSet;var St=new WeakSet;var It=function(){function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var n=arguments.length>2?arguments[2]:undefined;babelHelpers.classCallCheck(this,e);ct(this,St);ct(this,mt);ct(this,Tt);ct(this,bt);ht(this,ft,{writable:true,value:void 0});ht(this,pt,{writable:true,value:void 0});ht(this,Et,{writable:true,value:void 0});ht(this,yt,{writable:true,value:new h.Cache.MemoryCache});babelHelpers.classPrivateFieldSet(this,ft,t);babelHelpers.classPrivateFieldSet(this,pt,i);babelHelpers.classPrivateFieldSet(this,Et,n)}babelHelpers.createClass(e,[{key:"show",value:function e(){this.getPopup().show()}},{key:"getPopup",value:function e(){var t=this;return babelHelpers.classPrivateFieldGet(this,yt).remember("settings-popup",(function(){return new s.Popup(babelHelpers.classPrivateFieldGet(t,Et).getId()+"_"+Math.random()*100,babelHelpers.classPrivateFieldGet(t,ft),{autoHide:true,draggable:false,offsetLeft:0,offsetTop:0,angle:{position:"top",offset:43},noAllPaddings:true,bindOptions:{forceBindPosition:true},closeByEsc:true,content:gt(t,bt,Ct).call(t)})}))}},{key:"getSetting",value:function e(t){return babelHelpers.classPrivateFieldGet(this,pt).filter((function(e){return e.id===t}))[0]}},{key:"requestGridSettings",value:function e(t,i){var n=this;var r=[];var a=babelHelpers.classPrivateFieldGet(this,Et).getGrid().getRows().getHeadFirstChild().getCells();Array.from(a).forEach((function(e){if("name"in e.dataset){r.push(e.dataset.name)}}));h.ajax.runComponentAction(babelHelpers.classPrivateFieldGet(this,Et).getComponentName(),"setGridSetting",{mode:"class",data:{signedParameters:babelHelpers.classPrivateFieldGet(this,Et).getSignedParameters(),settingId:t.id,selected:i,currentHeaders:r}}).then((function(){var e;t.checked=i;if(t.id==="ADD_NEW_ROW_TOP"){var r=i?"top":"bottom";babelHelpers.classPrivateFieldGet(n,Et).setSettingValue("newRowPosition",r);var a=babelHelpers.classPrivateFieldGet(n,Et).changeActivePanelButtons(r);var s=a.querySelector('[data-role="product-list-settings-button"]');n.getPopup().setBindElement(s);e=i?h.Loc.getMessage("CRM_ENTITY_PL_SETTING_ENABLED"):h.Loc.getMessage("CRM_ENTITY_PL_SETTING_DISABLED");e=e.replace("#NAME#",t.title)}else if(t.id==="WAREHOUSE"){babelHelpers.classPrivateFieldGet(n,Et).reloadGrid(false);e=i?h.Loc.getMessage("CRM_ENTITY_CARD_WAREHOUSE_ENABLED"):h.Loc.getMessage("CRM_ENTITY_CARD_WAREHOUSE_DISABLED")}else{babelHelpers.classPrivateFieldGet(n,Et).reloadGrid();e=i?h.Loc.getMessage("CRM_ENTITY_PL_SETTING_ENABLED"):h.Loc.getMessage("CRM_ENTITY_PL_SETTING_DISABLED");e=e.replace("#NAME#",t.title)}n.getPopup().close();gt(n,St,Dt).call(n,e,{category:"popup-settings"})}))}},{key:"updateCheckboxState",value:function e(){var t=this;var i=this.getPopup().getContentContainer();babelHelpers.classPrivateFieldGet(this,pt).filter((function(e){return e.action==="grid"&&h.Type.isArray(e.columns)})).forEach((function(e){var n=true;e.columns.forEach((function(e){if(!babelHelpers.classPrivateFieldGet(t,Et).getGrid().getColumnHeaderCellByName(e)){n=false}}));var r=i.querySelector('input[data-setting-id="'+e.id+'"]');if(h.Type.isDomNode(r)){r.checked=n}}))}}]);return e}();function Ct(){var e=this;var t=h.Tag.render(st||(st=babelHelpers.taggedTemplateLiteral(["\n\t\t\t<div class='ui-entity-editor-popup-create-field-list'></div>\n\t\t"])));babelHelpers.classPrivateFieldGet(this,pt).forEach((function(i){t.append(gt(e,Tt,Pt).call(e,i))}));return t}function Pt(e){var t;var i=h.Tag.render(lt||(lt=babelHelpers.taggedTemplateLiteral(['\n\t\t\t<input type="checkbox">\n\t\t'])));i.checked=e.checked;i.disabled=(t=e.disabled)!==null&&t!==void 0?t:false;i.dataset.settingId=e.id;var n=h.Type.isStringFilled(e.desc)?h.Tag.render(ot||(ot=babelHelpers.taggedTemplateLiteral(['<span class="ui-entity-editor-popup-create-field-item-desc">',"</span>"])),e.desc):"";var r=h.Type.isStringFilled(e.hint)?h.Tag.render(ut||(ut=babelHelpers.taggedTemplateLiteral(['<span class="crm-entity-product-list-setting-hint" data-hint="','"></span>'])),e.hint):"";var a=h.Tag.render(dt||(dt=babelHelpers.taggedTemplateLiteral(['\n\t\t\t<label class="ui-ctl-block ui-entity-editor-popup-create-field-item ui-ctl-w100">\n\t\t\t\t<div class="ui-ctl-w10" style="text-align: center">','</div>\n\t\t\t\t<div class="ui-ctl-w75">\n\t\t\t\t\t<span class="ui-entity-editor-popup-create-field-item-title ','">',"","</span>\n\t\t\t\t\t","\n\t\t\t\t</div>\n\t\t\t</label>\n\t\t"])),i,e.disabled?"crm-entity-product-list-disabled-setting":"",e.title,r,n);BX.UI.Hint.init(a);h.Event.bind(a,"change",gt(this,mt,Rt).bind(this));return a}function Rt(e){var t=this.getSetting(e.target.dataset.settingId);if(!t){return}var i=e.target.checked;this.requestGridSettings(t,i)}function Dt(e,t){t=t||{};BX.UI.Notification.Center.notify({content:e,stack:t.stack||null,position:"top-right",width:"auto",category:t.category||null,autoHideDelay:t.autoHideDelay||3e3})}function Nt(e,t){Ft(e,t);t.add(e)}function _t(e,t,i){Ft(e,t);t.set(e,i)}function Ft(e,t){if(t.has(e)){throw new TypeError("Cannot initialize the same private elements twice on an object")}}function kt(e,t,i){if(!t.has(e)){throw new TypeError("attempted to get private field on non-instance")}return i}var At=new WeakMap;var wt=new WeakMap;var Ut=new WeakSet;var Mt=new WeakSet;var Ot=new WeakSet;var Ht=new WeakSet;var Bt=new WeakSet;var Lt=new WeakSet;var xt=function(){function e(t,i){babelHelpers.classCallCheck(this,e);Nt(this,Lt);Nt(this,Bt);Nt(this,Ht);Nt(this,Ot);Nt(this,Mt);Nt(this,Ut);babelHelpers.defineProperty(this,"fieldHintIsBusy",false);babelHelpers.defineProperty(this,"activeHintGuide",null);_t(this,At,{writable:true,value:void 0});_t(this,wt,{writable:true,value:void 0});babelHelpers.classPrivateFieldSet(this,wt,t);babelHelpers.classPrivateFieldSet(this,At,i)}babelHelpers.createClass(e,[{key:"processFieldTour",value:function e(t,i,n){var r=this;var a=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];if(this.fieldHintIsBusy){return}this.fieldHintIsBusy=true;i.events={onClose:function e(){n();r.fieldHintIsBusy=false;r.activeHintGuide=null}};if(kt(this,Ot,Yt).call(this,t)){var s=kt(this,Lt,Qt).call(this,t,i);kt(this,Bt,Xt).call(this,(function(){s.close()}))}else{var l=babelHelpers.classPrivateFieldGet(this,At).call(this).getContainer();var o=l.querySelector(".main-grid-ear-left");var u=l.querySelector(".main-grid-ear-right");var d=t.getClientRects()[0].x;var c=l.getClientRects()[0].x;var h=null;if(d>c){h=kt(this,Ht,Wt).call(this,u)}else{h=kt(this,Ht,Wt).call(this,o)}kt(this,Ut,Gt).call(this,t,(function(){h.close();var e=kt(r,Lt,Qt).call(r,t,i);kt(r,Bt,Xt).call(r,(function(){e.close()}))}),[],a)}}},{key:"getActiveHint",value:function e(){if(!this.fieldHintIsBusy){return null}else if(this.activeHintGuide instanceof g.Guide){return this.activeHintGuide}return null}}]);return e}();function Gt(e,t){var i,n=this;var r=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var a=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];var s=(i=kt(this,Mt,Vt)).call.apply(i,[this,e].concat(babelHelpers.toConsumableArray(a)));var l=function e(i){var a;if((a=kt(n,Ot,Yt)).call.apply(a,[n].concat(babelHelpers.toConsumableArray(s)))){h.Event.unbind(babelHelpers.classPrivateFieldGet(n,At).call(n).getScrollContainer(),"scroll",e);h.Event.unbind(window,"resize",e);t.apply(void 0,babelHelpers.toConsumableArray(r))}};h.Event.bind(babelHelpers.classPrivateFieldGet(this,At).call(this).getScrollContainer(),"scroll",l);h.Event.bind(window,"resize",l)}function Vt(e){var t,i;var n=[];for(var r=arguments.length,a=new Array(r>1?r-1:0),s=1;s<r;s++){a[s-1]=arguments[s]}for(var l=0,o=a;l<o.length;l++){var u=o[l];n.push({node:u,nodeRect:u.getClientRects()[0]})}var d={node:e,nodeRect:e.getClientRects()[0]};n.push(d);n.sort((function(e,t){var i=e.nodeRect.x;var n=t.nodeRect.x;if(i<n){return-1}else if(i>n){return 1}else{return 0}}));var c=(t=babelHelpers.classPrivateFieldGet(this,At).call(this))===null||t===void 0?void 0:(i=t.getContainer().getClientRects())===null||i===void 0?void 0:i[0];function h(e,t){return Math.abs(e-t)<c.width}while(n.length>1&&!h(n[0].nodeRect.x,n[n.length-1].nodeRect.x)){var v=n[0];var g=n[n.length-1];if(v===d){n.pop()}else if(g===d){n.shift()}else{var f=d.nodeRect.x-v.nodeRect.x;var p=g.nodeRect.x-d.nodeRect.x;if(f>=p){n.shift()}else{n.pop()}}}return n.map((function(e){return e.node}))}function Yt(){var e,t;var i=(e=babelHelpers.classPrivateFieldGet(this,At).call(this))===null||e===void 0?void 0:(t=e.getContainer().getClientRects())===null||t===void 0?void 0:t[0];if(i===undefined){return false}var n=i.x;var r=i.x+i.width;for(var a=arguments.length,s=new Array(a),l=0;l<a;l++){s[l]=arguments[l]}for(var o=0,u=s;o<u.length;o++){var d;var c=u[o];var h=(d=c.getClientRects())===null||d===void 0?void 0:d[0];if(h===undefined){return false}var v=h.x;var g=h.x+h.width;if(v<n||g>r){return false}}return true}function Wt(e){var t=new BX.SpotLight({id:"arrow_spotlight",targetElement:e,autoSave:true,targetVertex:"middle-center",zIndex:200});t.show();t.container.style.pointerEvents="none";return t}function Xt(e){var t=this;var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var n=babelHelpers.classPrivateFieldGet(this,At).call(this).getContainer();var r=n.querySelector(".main-grid-ear-left");var a=n.querySelector(".main-grid-ear-right");n.style.pointerEvents="none";r.style.pointerEvents="none";a.style.pointerEvents="none";var s=function s(l){n.style.pointerEvents="auto";r.style.pointerEvents="auto";a.style.pointerEvents="auto";h.Event.unbind(babelHelpers.classPrivateFieldGet(t,wt),"click",s);e.apply(void 0,babelHelpers.toConsumableArray(i))};setTimeout((function(){h.Event.bind(babelHelpers.classPrivateFieldGet(t,wt),"click",s)}),500)}function Qt(e,t){var i=new g.Guide({steps:[Object.assign({target:e},t)],onEvents:true});this.activeHintGuide=i;i.showNextStep();return i}var qt;function jt(e,t){var i=typeof Symbol!=="undefined"&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=zt(e))||t&&e&&typeof e.length==="number"){if(i)e=i;var n=0;var r=function e(){};return{s:r,n:function t(){if(n>=e.length)return{done:true};return{done:false,value:e[n++]}},e:function e(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a=true,s=false,l;return{s:function t(){i=i.call(e)},n:function e(){var t=i.next();a=t.done;return t},e:function e(t){s=true;l=t},f:function e(){try{if(!a&&i["return"]!=null)i["return"]()}finally{if(s)throw l}}}}function zt(e,t){if(!e)return;if(typeof e==="string")return Kt(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);if(i==="Object"&&e.constructor)i=e.constructor.name;if(i==="Map"||i==="Set")return Array.from(e);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return Kt(e,t)}function Kt(e,t){if(t==null||t>e.length)t=e.length;for(var i=0,n=new Array(t);i<t;i++)n[i]=e[i];return n}function Zt(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function Jt(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?Zt(Object(i),!0).forEach((function(t){babelHelpers.defineProperty(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):Zt(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function $t(e,t){ti(e,t);t.add(e)}function ei(e,t,i){ti(e,t);t.set(e,i)}function ti(e,t){if(t.has(e)){throw new TypeError("Cannot initialize the same private elements twice on an object")}}function ii(e,t,i){ni(e,t);return i}function ni(e,t){if(e!==t){throw new TypeError("Private static access of wrong provenance")}}function ri(e,t,i){if(!t.has(e)){throw new TypeError("attempted to get private field on non-instance")}return i}var ai="template_0";var si=2;var li=new WeakMap;var oi=new WeakSet;var ui=new WeakSet;var di=new WeakSet;var ci=function(){function e(t){babelHelpers.classCallCheck(this,e);$t(this,di);$t(this,ui);$t(this,oi);babelHelpers.defineProperty(this,"ajaxPool",new Map);babelHelpers.defineProperty(this,"products",[]);babelHelpers.defineProperty(this,"productsWasInitiated",false);babelHelpers.defineProperty(this,"isChangedGrid",false);babelHelpers.defineProperty(this,"isVisibleGrid",false);babelHelpers.defineProperty(this,"cache",new h.Cache.MemoryCache);ei(this,li,{writable:true,value:void 0});babelHelpers.defineProperty(this,"actions",{disableSaveButton:"disableSaveButton",productChange:"productChange",productListChanged:"productListChanged",updateListField:"listField",stateChanged:"stateChange",updateTotal:"total"});babelHelpers.defineProperty(this,"stateChange",{changed:false,sended:false});babelHelpers.defineProperty(this,"updateFieldForList",null);babelHelpers.defineProperty(this,"totalData",{inProgress:false});babelHelpers.defineProperty(this,"productSelectionPopupHandler",this.handleProductSelectionPopup.bind(this));babelHelpers.defineProperty(this,"productRowAddHandler",this.handleProductRowAdd.bind(this));babelHelpers.defineProperty(this,"showSettingsPopupHandler",this.handleShowSettingsPopup.bind(this));babelHelpers.defineProperty(this,"onDialogSelectProductHandler",this.handleOnDialogSelectProduct.bind(this));babelHelpers.defineProperty(this,"onSaveHandler",this.handleOnSave.bind(this));babelHelpers.defineProperty(this,"onFocusToProductList",this.handleProductListFocus.bind(this));babelHelpers.defineProperty(this,"onEntityUpdateHandler",this.handleOnEntityUpdate.bind(this));babelHelpers.defineProperty(this,"onEditorSubmit",this.handleEditorSubmit.bind(this));babelHelpers.defineProperty(this,"onInnerCancelHandler",this.handleOnInnerCancel.bind(this));babelHelpers.defineProperty(this,"onBeforeGridRequestHandler",this.handleOnBeforeGridRequest.bind(this));babelHelpers.defineProperty(this,"onGridUpdatedHandler",this.handleOnGridUpdated.bind(this));babelHelpers.defineProperty(this,"onGridRowMovedHandler",this.handleOnGridRowMoved.bind(this));babelHelpers.defineProperty(this,"onBeforeProductChangeHandler",this.handleOnBeforeProductChange.bind(this));babelHelpers.defineProperty(this,"onProductChangeHandler",this.handleOnProductChange.bind(this));babelHelpers.defineProperty(this,"onBeforeProductClearHandler",this.handleOnBeforeProductClear.bind(this));babelHelpers.defineProperty(this,"onProductClearHandler",this.handleOnProductClear.bind(this));babelHelpers.defineProperty(this,"dropdownChangeHandler",this.handleDropdownChange.bind(this));babelHelpers.defineProperty(this,"pullReloadGrid",null);babelHelpers.defineProperty(this,"changeProductFieldHandler",this.handleFieldChange.bind(this));babelHelpers.defineProperty(this,"updateTotalDataDelayedHandler",h.Runtime.debounce(this.updateTotalDataDelayed,1e3,this));this.setId(t)}babelHelpers.createClass(e,[{key:"init",value:function e(){var t=this;var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.setSettings(i);if(this.canEdit()){this.addFirstRowIfEmpty();this.enableEdit()}this.initForm();this.initProducts();this.initGridData();babelHelpers.classPrivateFieldSet(this,li,new xt(this.getContainer(),this.getGrid.bind(this)));l.EventEmitter.emit(window,"EntityProductListController",[this]);ri(this,oi,hi).call(this);this.subscribeDomEvents();this.subscribeCustomEvents();if(this.getSettingValue("isReserveBlocked",false)){var n=["STORE_INFO","RESERVE_INFO"];var r=this.getContainer();n.forEach((function(e){var i=r===null||r===void 0?void 0:r.querySelector('.main-grid-cell-head[data-name="'.concat(e,'"] .main-grid-cell-head-container'));if(i){h.Dom.addClass(i,"main-grid-cell-head-locked");i.onclick=function(e){if(h.Dom.hasClass(e.target,"ui-hint-icon")){return}t.openIntegrationLimitSlider()};var n=h.Tag.render(qt||(qt=babelHelpers.taggedTemplateLiteral(['<span class="crm-entity-product-list-locked-header"></span>'])));i.insertBefore(n,i.firstChild)}}))}this.getContainer().querySelectorAll(".crm-entity-product-list-add-block").forEach((function(e){BX.UI.Hint.init(e)}))}},{key:"subscribeDomEvents",value:function e(){var t=this;this.unsubscribeDomEvents();var i=this.getContainer();if(h.Type.isElementNode(i)){if(!this.getSettingValue("disabledSelectProductButton",false)){i.querySelectorAll('[data-role="product-list-select-button"]').forEach((function(e){h.Event.bind(e,"click",t.productSelectionPopupHandler)}))}if(!this.getSettingValue("disabledAddRowButton",false)){i.querySelectorAll('[data-role="product-list-add-button"]').forEach((function(e){if(t.getSettingValue("isOnecInventoryManagementRestricted")===true){h.Dom.addClass(e,"ui-btn-icon-lock")}h.Event.bind(e,"click",t.productRowAddHandler)}))}i.querySelectorAll('[data-role="product-list-settings-button"]').forEach((function(e){h.Event.bind(e,"click",t.showSettingsPopupHandler)}))}}},{key:"unsubscribeDomEvents",value:function e(){var t=this;var i=this.getContainer();if(h.Type.isElementNode(i)){i.querySelectorAll('[data-role="product-list-select-button"]').forEach((function(e){h.Event.unbind(e,"click",t.productSelectionPopupHandler)}));i.querySelectorAll('[data-role="product-list-add-button"]').forEach((function(e){h.Event.unbind(e,"click",t.productRowAddHandler)}));i.querySelectorAll('[data-role="product-list-settings-button"]').forEach((function(e){h.Event.unbind(e,"click",t.showSettingsPopupHandler)}))}}},{key:"subscribeCustomEvents",value:function e(){var t=this;this.unsubscribeCustomEvents();l.EventEmitter.subscribe("CrmProductSearchDialog_SelectProduct",this.onDialogSelectProductHandler);l.EventEmitter.subscribe("BX.Crm.EntityEditor:onSave",this.onSaveHandler);l.EventEmitter.subscribe("onFocusToProductList",this.onFocusToProductList);l.EventEmitter.subscribe("onCrmEntityUpdate",this.onEntityUpdateHandler);l.EventEmitter.subscribe("BX.Crm.EntityEditorAjax:onSubmit",this.onEditorSubmit);l.EventEmitter.subscribe("EntityProductListController:onInnerCancel",this.onInnerCancelHandler);l.EventEmitter.subscribe("Grid::beforeRequest",this.onBeforeGridRequestHandler);l.EventEmitter.subscribe("Grid::updated",this.onGridUpdatedHandler);l.EventEmitter.subscribe("Grid::rowMoved",this.onGridRowMovedHandler);l.EventEmitter.subscribe("BX.Catalog.ProductSelector:onBeforeChange",this.onBeforeProductChangeHandler);l.EventEmitter.subscribe("BX.Catalog.ProductSelector:onChange",this.onProductChangeHandler);l.EventEmitter.subscribe("BX.Catalog.ProductSelector:onBeforeClear",this.onBeforeProductClearHandler);l.EventEmitter.subscribe("BX.Catalog.ProductSelector:onClear",this.onProductClearHandler);l.EventEmitter.subscribe("Dropdown::change",this.dropdownChangeHandler);if(c.PULL){this.pullReloadGrid=c.PULL.subscribe({moduleId:"crm",callback:function e(i){if(i.command==="onCatalogInventoryManagementEnabled"||i.command==="onCatalogInventoryManagementDisabled"){t.reloadGrid(false)}}})}}},{key:"unsubscribeCustomEvents",value:function e(){l.EventEmitter.unsubscribe("CrmProductSearchDialog_SelectProduct",this.onDialogSelectProductHandler);l.EventEmitter.unsubscribe("BX.Crm.EntityEditor:onSave",this.onSaveHandler);l.EventEmitter.unsubscribe("onFocusToProductList",this.onFocusToProductList);l.EventEmitter.unsubscribe("onCrmEntityUpdate",this.onEntityUpdateHandler);l.EventEmitter.unsubscribe("BX.Crm.EntityEditorAjax:onSubmit",this.onEditorSubmit);l.EventEmitter.unsubscribe("EntityProductListController:onInnerCancel",this.onInnerCancelHandler);l.EventEmitter.unsubscribe("Grid::beforeRequest",this.onBeforeGridRequestHandler);l.EventEmitter.unsubscribe("Grid::updated",this.onGridUpdatedHandler);l.EventEmitter.unsubscribe("Grid::rowMoved",this.onGridRowMovedHandler);l.EventEmitter.unsubscribe("BX.Catalog.ProductSelector:onBeforeChange",this.onBeforeProductChangeHandler);l.EventEmitter.unsubscribe("BX.Catalog.ProductSelector:onChange",this.onProductChangeHandler);l.EventEmitter.unsubscribe("BX.Catalog.ProductSelector:onBeforeClear",this.onBeforeProductClearHandler);l.EventEmitter.unsubscribe("BX.Catalog.ProductSelector:onClear",this.onProductClearHandler);l.EventEmitter.unsubscribe("Dropdown::change",this.dropdownChangeHandler);if(!h.Type.isNil(this.pullReloadGrid)){this.pullReloadGrid()}}},{key:"handleOnDialogSelectProduct",value:function e(t){var i;var n=t.getCompatData(),r=babelHelpers.slicedToArray(n,1),a=r[0];var s;if(this.getProductCount()>0||((i=this.products[0])===null||i===void 0?void 0:i.getField("ID"))<=0){s=this.addProductRow()}else{var l;s=(l=this.products[0])===null||l===void 0?void 0:l.getField("ID")}this.selectProductInRow(s,a)}},{key:"selectProductInRow",value:function e(t,i){var n=this;if(!h.Type.isStringFilled(t)||h.Text.toNumber(i)<=0){return}requestAnimationFrame((function(){var e=n.getProductSelector(t);if(e){e.searchInput.clearErrors();e.onProductSelect(i)}}))}},{key:"handleOnSave",value:function e(t){var i=[];this.products.forEach((function(e){var t={fields:Jt({},e.fields),rowId:e.fields.ROW_ID};i.push(t)}));this.setSettingValue("items",i)}},{key:"handleProductListFocus",value:function e(t){if(this.isReadOnly()){return}var i=false;var n=jt(this.products),r;try{for(n.s();!(r=n.n()).done;){var a=r.value;if(a.isEmptyRow()){i=true;this.focusProductSelector(a.fields["ID"]);break}}}catch(e){n.e(e)}finally{n.f()}if(!i){this.handleProductRowAdd()}}},{key:"handleOnEntityUpdate",value:function e(t){var i=t.getData(),n=babelHelpers.slicedToArray(i,1),r=n[0];if(this.isChanged()&&r.entityId===this.getSettingValue("entityId")&&r.entityTypeId===this.getSettingValue("entityTypeId")){this.setGridChanged(false);this.reloadGrid(false)}}},{key:"handleEditorSubmit",value:function e(t){if(!this.isLocationDependantTaxesEnabled()){return}var i=t.getData()[0];if(!i||!i.hasOwnProperty("LOCATION_ID")){return}if(i["LOCATION_ID"]!==this.getLocationId()){this.setLocationId(i["LOCATION_ID"]);this.reloadGrid(false)}}},{key:"handleOnInnerCancel",value:function e(t){var i=this;if(this.controller){this.controller.rollback()}this.setGridChanged(false);l.EventEmitter.subscribeOnce(this,"onGridReloaded",(function(){return i.actionUpdateTotalData({isInternalChanging:true})}));this.reloadGrid(false)}},{key:"changeActivePanelButtons",value:function e(t){var i=this.getContainer();var n=i.querySelector(".crm-entity-product-list-add-block-"+t);if(h.Type.isDomNode(n)){h.Dom.removeClass(n,"crm-entity-product-list-add-block-hidden");h.Dom.addClass(n,"crm-entity-product-list-add-block-active")}var r=t==="top"?"bottom":"top";var a=i.querySelector(".crm-entity-product-list-add-block-"+r);if(h.Type.isDomNode(a)){h.Dom.addClass(a,"crm-entity-product-list-add-block-hidden");h.Dom.removeClass(a,"crm-entity-product-list-add-block-active")}return n}},{key:"reloadGrid",value:function e(){var t=this;var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;this.getGrid().reloadTable("POST",{useProductsFromRequest:i},(function(){return l.EventEmitter.emit(t,"onGridReloaded")}))}},{key:"handleOnBeforeGridRequest",value:function t(i){var n=this;var r=i.getCompatData(),a=babelHelpers.slicedToArray(r,2),s=a[0],o=a[1];if(!s||!s.parent||s.parent.getId()!==this.getGridId()){return}var u=!("useProductsFromRequest"in o.data);var d=u?true:o.data.useProductsFromRequest;o.url=this.getReloadUrl();o.method="POST";o.sessid=BX.bitrix_sessid();o.data=Jt(Jt({},o.data),{},{signedParameters:this.getSignedParameters(),products:d?this.getProductsFields(ii(e,e,fi).call(e)):null,locationId:this.getLocationId(),currencyId:this.getCurrencyId()});this.clearEditor();if(u&&this.isChanged()){l.EventEmitter.subscribeOnce("Grid::updated",(function(){return n.actionUpdateTotalData({isInternalChanging:false})}))}}},{key:"handleOnGridUpdated",value:function e(t){var i=t.getCompatData(),n=babelHelpers.slicedToArray(i,1),r=n[0];if(!r||r.getId()!==this.getGridId()){return}this.getSettingsPopup().updateCheckboxState()}},{key:"handleOnGridRowMoved",value:function e(t){var i=t.getCompatData(),n=babelHelpers.slicedToArray(i,3),r=n[0],a=n[2];if(!a||a.getId()!==this.getGridId()){return}var s=this.resortProductsByIds(r);if(s){this.refreshSortFields();this.numerateRows();this.executeActions([{type:this.actions.productListChanged}])}}},{key:"initPageEventsManager",value:function e(){var t=this.getSettingValue("componentId");this.pageEventsManager=new at({id:t})}},{key:"getPageEventsManager",value:function e(){if(!this.pageEventsManager){this.initPageEventsManager()}return this.pageEventsManager}},{key:"canEdit",value:function e(){return this.getSettingValue("allowEdit",false)===true}},{key:"canEditCatalogPrice",value:function e(){return this.getSettingValue("allowCatalogPriceEdit",false)===true}},{key:"canSaveCatalogPrice",value:function e(){return this.getSettingValue("allowCatalogPriceSave",false)===true}},{key:"enableEdit",value:function e(){var t=this.getGrid().getRows().getRows();t.forEach((function(e){if(!e.isHeadChild()&&!e.isTemplate()){e.edit()}}))}},{key:"addFirstRowIfEmpty",value:function e(){var t=this;if(this.getGrid().getRows().getCountDisplayed()===0){requestAnimationFrame((function(){return t.addProductRow()}))}}},{key:"clearEditor",value:function e(){this.unsubscribeProductsEvents();this.products=[];this.productsWasInitiated=false;this.destroySettingsPopup();this.unsubscribeDomEvents();this.unsubscribeCustomEvents();h.Event.unbindAll(this.container)}},{key:"wasProductsInitiated",value:function e(){return this.productsWasInitiated}},{key:"unsubscribeProductsEvents",value:function e(){this.products.forEach((function(e){e.unsubscribeCustomEvents()}))}},{key:"destroy",value:function e(){this.setForm(null);this.clearController();this.clearEditor()}},{key:"setController",value:function e(t){if(this.controller===t){return}if(this.controller){this.controller.clearProductList()}this.controller=t}},{key:"clearController",value:function e(){this.controller=null}},{key:"getId",value:function e(){return this.id}},{key:"setId",value:function e(t){this.id=t}},{key:"getSettings",value:function e(){return this.settings}},{key:"setSettings",value:function e(t){this.settings=t?t:{}}},{key:"getSettingValue",value:function e(t,i){return this.settings.hasOwnProperty(t)?this.settings[t]:i}},{key:"setSettingValue",value:function e(t,i){this.settings[t]=i}},{key:"getComponentName",value:function e(){return this.getSettingValue("componentName","")}},{key:"getReloadUrl",value:function e(){return this.getSettingValue("reloadUrl","")}},{key:"getSignedParameters",value:function e(){return this.getSettingValue("signedParameters","")}},{key:"getContainerId",value:function e(){return this.getSettingValue("containerId","")}},{key:"getGridId",value:function e(){return this.getSettingValue("gridId","")}},{key:"getLanguageId",value:function e(){return this.getSettingValue("languageId","")}},{key:"getSiteId",value:function e(){return this.getSettingValue("siteId","")}},{key:"getCatalogId",value:function e(){return this.getSettingValue("catalogId",0)}},{key:"isReadOnly",value:function e(){return this.getSettingValue("readOnly",true)}},{key:"setReadOnly",value:function e(t){this.setSettingValue("readOnly",t)}},{key:"getCurrencyId",value:function e(){return this.getSettingValue("currencyId","")}},{key:"setCurrencyId",value:function e(t){this.setSettingValue("currencyId",t);this.products.forEach((function(e){var i;return(i=e.getModel())===null||i===void 0?void 0:i.setOption("currency",t)}))}},{key:"isLocationDependantTaxesEnabled",value:function e(){return this.getSettingValue("isLocationDependantTaxesEnabled",false)}},{key:"getLocationId",value:function e(){return this.getSettingValue("locationId")}},{key:"setLocationId",value:function e(t){this.setSettingValue("locationId",t)}},{key:"changeCurrencyId",value:function e(t){var i=this;this.setCurrencyId(t);var n=[];this.products.forEach((function(e){var t={};ri(i,ui,vi).call(i).forEach((function(i){t[i]=e.getField(i)}));n.push({fields:t,id:e.getId()})}));if(n.length>0){this.ajaxRequest("calculateProductPrices",{products:n,currencyId:t})}var r=this.getGridEditData();var a=r[ai];a["CURRENCY"]=this.getCurrencyId();var s=["DISCOUNT_ROW","SUM","PRICE"];s.forEach((function(e){a[e]["CURRENCY"]["VALUE"]=i.getCurrencyId()}));this.setGridEditData(r)}},{key:"onCalculatePricesResponse",value:function e(t){this.products.forEach((function(e){if(h.Type.isObject(t[e.getId()])){e.updateUiCurrencyFields();["BASE_PRICE","DISCOUNT_ROW","DISCOUNT_SUM","CURRENCY_ID"].forEach((function(i){e.updateField(i,h.Text.toNumber(t[e.getId()][i]))}));e.setField("CURRENCY",t[e.getId()]["CURRENCY_ID"])}}));this.updateTotalUiCurrency()}},{key:"updateTotalUiCurrency",value:function e(){var t=this;var i=BX(this.getSettingValue("totalBlockContainerId",null));if(h.Type.isElementNode(i)){i.querySelectorAll(".crm-product-list-payment-side-table-column").forEach((function(e){var i=e.querySelector(".crm-product-list-result-grid-total");if(i){e.innerHTML=o.CurrencyCore.getPriceControl(i,t.getCurrencyId())}}))}}},{key:"getCurrencyText",value:function e(){var t=this.getCurrencyId();if(!h.Type.isStringFilled(t)){return""}var i=o.CurrencyCore.getCurrencyFormat(t);return i&&i.FORMAT_STRING.replace(/(^|[^&])#/,"$1").trim()||""}},{key:"getDataFieldName",value:function e(){return this.getSettingValue("dataFieldName","")}},{key:"getDataSettingsFieldName",value:function e(){var t=this.getDataFieldName();return h.Type.isStringFilled(t)?t+"_SETTINGS":""}},{key:"getDiscountEnabled",value:function e(){return this.getSettingValue("enableDiscount","N")}},{key:"getPricePrecision",value:function e(){return this.getSettingValue("pricePrecision",si)}},{key:"getQuantityPrecision",value:function e(){return this.getSettingValue("quantityPrecision",si)}},{key:"getCommonPrecision",value:function e(){return this.getSettingValue("commonPrecision",si)}},{key:"getTaxList",value:function e(){return this.getSettingValue("taxList",[])}},{key:"getTaxAllowed",value:function e(){return this.getSettingValue("allowTax","N")}},{key:"isTaxAllowed",value:function e(){return this.getTaxAllowed()==="Y"}},{key:"getTaxEnabled",value:function e(){return this.getSettingValue("enableTax","N")}},{key:"isTaxEnabled",value:function e(){return this.getTaxEnabled()==="Y"}},{key:"isTaxUniform",value:function e(){return this.getSettingValue("taxUniform",true)}},{key:"getMeasures",value:function e(){return this.getSettingValue("measures",[])}},{key:"getDefaultMeasure",value:function e(){return this.getSettingValue("defaultMeasure",{})}},{key:"getRowIdPrefix",value:function e(){return this.getSettingValue("rowIdPrefix","crm_entity_product_list_")}},{key:"parseInt",value:function(e){function t(t){return e.apply(this,arguments)}t.toString=function(){return e.toString()};return t}((function(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var i;var n=h.Type.isNumber(e);var r=h.Type.isStringFilled(e);if(!n&&!r){return t}if(r){e=e.replace(/^\s+|\s+$/g,"");var a=e.indexOf("-")===0;i=parseInt(e.replace(/[^\d]/g,""),10);if(isNaN(i)){i=t}else{if(a){i=-i}}}else{i=parseInt(e,10);if(isNaN(i)){i=t}}return i}))},{key:"parseFloat",value:function(e){function t(t){return e.apply(this,arguments)}t.toString=function(){return e.toString()};return t}((function(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:si;var i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var n;var r=h.Type.isNumber(e);var a=h.Type.isStringFilled(e);if(!r&&!a){return i}if(a){e=e.replace(/^\s+|\s+$/g,"");var s=e.indexOf(".");var l=e.indexOf(",");var o=e.indexOf("-")===0;if(s<0&&l>=0){var u=e.substr(0,l);var d=e.length-l-1;if(d>0){u+="."+e.substr(l+1,d)}e=u}e=e.replace(/[^\d.]+/g,"");n=parseFloat(e);if(isNaN(n)){n=i}if(o){n=-n}}else{n=parseFloat(e)}if(t>=0){n=this.round(n,t)}return n}))},{key:"round",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:si;var n=Math.pow(10,i);return Math.round(t*n)/n}},{key:"calculatePriceWithoutDiscount",value:function e(t,i,n){var r=0;switch(n){case a.DiscountType.PERCENTAGE:r=t-t*i/100;break;case a.DiscountType.MONETARY:r=t-i;break}return r}},{key:"calculateDiscountRate",value:function e(t,i){if(t===0){return 0}if(i===0){return t>0?100:-100}return 100*(t-i)/t}},{key:"calculateDiscount",value:function e(t,i){return t*i/100}},{key:"calculatePriceWithoutTax",value:function e(t,i){return t/(1+i/100)}},{key:"calculatePriceWithTax",value:function e(t,i){return t*(1+i/100)}},{key:"getContainer",value:function e(){var t=this;return this.cache.remember("container",(function(){return document.getElementById(t.getContainerId())}))}},{key:"initForm",value:function e(){var t=this.getSettingValue("formId","");var i=h.Type.isStringFilled(t)?BX("form_"+t):null;if(h.Type.isElementNode(i)){this.setForm(i)}}},{key:"isExistForm",value:function e(){return h.Type.isElementNode(this.getForm())}},{key:"getForm",value:function e(){return this.form}},{key:"setForm",value:function e(t){this.form=t}},{key:"initFormFields",value:function e(){var t=this.getForm();if(h.Type.isElementNode(t)){var i=this.getDataField();if(!h.Type.isElementNode(i)){this.initDataField()}var n=this.getDataSettingsField();if(!h.Type.isElementNode(n)){this.initDataSettingsField()}}}},{key:"initFormField",value:function e(t){var i=this.getForm();if(h.Type.isElementNode(i)&&h.Type.isStringFilled(t)){h.Dom.append(h.Dom.create("input",{attrs:{type:"hidden",name:t}}),i)}}},{key:"removeFormFields",value:function e(){var t=this.getDataField();if(h.Type.isElementNode(t)){h.Dom.remove(t)}var i=this.getDataSettingsField();if(h.Type.isElementNode(i)){h.Dom.remove(i)}}},{key:"initDataField",value:function e(){this.initFormField(this.getDataFieldName())}},{key:"initDataSettingsField",value:function e(){this.initFormField(this.getDataSettingsFieldName())}},{key:"getFormField",value:function e(t){var i=this.getForm();if(h.Type.isElementNode(i)&&h.Type.isStringFilled(t)){return i.querySelector('input[name="'+t+'"]')}return null}},{key:"getDataField",value:function e(){return this.getFormField(this.getDataFieldName())}},{key:"getDataSettingsField",value:function e(){return this.getFormField(this.getDataSettingsFieldName())}},{key:"getProductCount",value:function e(){return this.products.filter((function(e){return!e.isEmpty()})).length}},{key:"initProducts",value:function e(){var t=this.getSettingValue("items",[]);var i=this.getSettingValue("isReserveBlocked",false);var n=this.getSettingValue("isInventoryManagementToolEnabled",false);var r=this.getSettingValue("inventoryManagementMode",null);var a=jt(t),s;try{for(a.s();!(s=a.n()).done;){var l=s.value;var o=Jt({},l.fields);var u={selectorId:l.selectorId,isReserveBlocked:i,isInventoryManagementToolEnabled:n,inventoryManagementMode:r};this.products.push(new He(l.rowId,o,u,this))}}catch(e){a.e(e)}finally{a.f()}this.numerateRows();this.productsWasInitiated=true}},{key:"numerateRows",value:function e(){this.products.forEach((function(e,t){e.setRowNumber(t+1)}))}},{key:"getGrid",value:function e(){var t=this;return this.cache.remember("grid",(function(){var e=t.getGridId();if(!h.Reflection.getClass("BX.Main.gridManager.getInstanceById")){throw Error("Cannot find grid with '".concat(e,"' id."))}return BX.Main.gridManager.getInstanceById(e)}))}},{key:"initGridData",value:function e(){var t=this.getSettingValue("templateGridEditData",null);if(t){this.setGridEditData(t)}}},{key:"getGridEditData",value:function e(){return this.getGrid().arParams.EDITABLE_DATA}},{key:"setGridEditData",value:function e(t){this.getGrid().arParams.EDITABLE_DATA=t}},{key:"setOriginalTemplateEditData",value:function e(t){this.getGrid().arParams.EDITABLE_DATA[ai]=t}},{key:"handleProductErrorsChange",value:function e(){if(ri(this,di,gi).call(this)){this.controller.disableSaveButton()}}},{key:"handleFieldChange",value:function e(t){var i=t.target.closest("tr");if(i&&i.hasAttribute("data-id")){var n=this.getProductById(i.getAttribute("data-id"));if(n){var r=t.target.closest("td");var a=this.getFieldCodeByGridCell(i,r);if(a){n.updateFieldByEvent(a,t)}}}}},{key:"handleDropdownChange",value:function e(t){var i=t.getData(),n=babelHelpers.slicedToArray(i,5),r=n[0],a=n[4];var s=new RegExp(this.getRowIdPrefix()+"([A-Za-z0-9]+)_(\\w+)_control","i");var l=r.match(s);if(l){var o=babelHelpers.slicedToArray(l,3),u=o[1],d=o[2];var c=this.getProductById(u);if(c){c.updateField(d,a,c.modeChanges.EDIT)}}}},{key:"getProductById",value:function e(t){var i=this.getRowIdPrefix()+t;return this.getProductByRowId(i)}},{key:"getProductByRowId",value:function e(t){return this.products.find((function(e){return e.getId()===t}))}},{key:"getFieldCodeByGridCell",value:function e(t,i){if(!h.Type.isDomNode(t)||!h.Type.isDomNode(i)){return null}var n=this.getGrid();if(n){var r=n.getRows().getHeadFirstChild();var a=babelHelpers.toConsumableArray(t.cells).indexOf(i);return r.getCellNameByCellIndex(a)}return null}},{key:"handleProductSelectionPopup",value:function e(t){var i="crm_entity_product_list";var n=this.getSettingValue("jsEventsManagerId","");var r=new BX.CDialog({content_url:"/bitrix/components/bitrix/crm.product_row.list/product_choice_dialog.php?"+"caller="+i+"&JS_EVENTS_MANAGER_ID="+BX.util.urlencode(n)+"&sessid="+BX.bitrix_sessid(),height:Math.max(500,window.innerHeight-400),width:Math.max(800,window.innerWidth-400),draggable:true,resizable:true,min_height:500,min_width:800,zIndex:800});l.EventEmitter.subscribeOnce(r,"onWindowRegister",BX.defer((function(){r.Get().style.position="fixed";r.Get().style.top=parseInt(r.Get().style.top)-BX.GetWindowScrollPos().scrollTop+"px"})));l.EventEmitter.subscribeOnce(window,"EntityProductListController:onInnerCancel",BX.defer((function(){r.Close()})));if(!h.Type.isUndefined(BX.Crm.EntityEvent)){l.EventEmitter.subscribeOnce(window,BX.Crm.EntityEvent.names.update,BX.defer((function(){requestAnimationFrame((function(){r.Close()}),0)})))}r.Show()}},{key:"addProductRow",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var i=this.createGridProductRow();var n=i.getId();if(t){var r;var a=(r=this.getGrid().getRows().getById(t.getField("ID")))===null||r===void 0?void 0:r.getNode();if(a){a.parentNode.insertBefore(i.getNode(),a.nextSibling)}}this.initializeNewProductRow(n,t);this.getGrid().bindOnRowEvents();return n}},{key:"handleProductRowAdd",value:function e(){if(this.getSettingValue("isOnecInventoryManagementRestricted")===true){f.OneCPlanRestrictionSlider.show();return}var t=this.addProductRow();this.focusProductSelector(t)}},{key:"handleShowSettingsPopup",value:function e(){this.getSettingsPopup().show()}},{key:"destroySettingsPopup",value:function e(){if(this.cache.has("settings-popup")){this.cache.get("settings-popup").getPopup().destroy();this.cache["delete"]("settings-popup")}}},{key:"getSettingsPopup",value:function e(){var t=this;return this.cache.remember("settings-popup",(function(){return new It(t.getContainer().querySelector('.crm-entity-product-list-add-block-active [data-role="product-list-settings-button"]'),t.getSettingValue("popupSettings",[]),t)}))}},{key:"getHintPopup",value:function e(){var t=this;return this.cache.remember("hint-popup",(function(){return new E(t)}))}},{key:"createGridProductRow",value:function e(){var t=h.Text.getRandom();var i=this.redefineTemplateEditData(t);var n=this.getGrid();var r;if(this.getSettingValue("newRowPosition")==="bottom"){r=n.appendRowEditor()}else{r=n.prependRowEditor()}var a=r.getNode();if(h.Type.isDomNode(a)){a.setAttribute("data-id",t);r.makeCountable()}if(i){this.setOriginalTemplateEditData(i)}l.EventEmitter.emit("Grid::thereEditedRows",[]);n.adjustRows();n.updateCounterDisplayed();n.updateCounterSelected();return r}},{key:"handleDeleteRow",value:function e(t,i){i.preventDefault();this.deleteRow(t)}},{key:"redefineTemplateEditData",value:function e(t){var i=this.getGridEditData();var n=i[ai];var r=this.prepareCustomEditData(n,t);this.setOriginalTemplateEditData(Jt(Jt({},n),r));return n}},{key:"prepareCustomEditData",value:function e(t,i){var n={};var r=this.getSettingValue("templateIdMask","");for(var a in t){if(t.hasOwnProperty(a)){if(h.Type.isStringFilled(t[a])&&t[a].indexOf(r)>=0){n[a]=t[a].replace(new RegExp(r,"g"),i)}else if(h.Type.isPlainObject(t[a])){n[a]=this.prepareCustomEditData(t[a],i)}else{n[a]=t[a]}}}return n}},{key:"initializeNewProductRow",value:function e(t){var i;var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var r=n===null||n===void 0?void 0:n.getFields();if(h.Type.isNil(r)){r=Jt(Jt({},this.getSettingValue("templateItemFields",{})),{CURRENCY:this.getCurrencyId()});var a=this.products[this.products.length-1];if(a){r.TAX_INCLUDED=a.getField("TAX_INCLUDED")}}var s=this.getRowIdPrefix()+t;r.ID=t;if(h.Type.isObject(r.IMAGE_INFO)){delete r.IMAGE_INFO.input}delete r.RESERVE_ID;var l=this.getSettingValue("isReserveBlocked",false);var o=this.getSettingValue("isInventoryManagementToolEnabled",false);var u=this.getSettingValue("inventoryManagementMode",null);var d={isReserveBlocked:l,isInventoryManagementToolEnabled:o,inventoryManagementMode:u,selectorId:"crm_grid_"+s};var c=new He(s,r,d,this);c.refreshFieldsLayout();if(n instanceof He){var v,g;this.products.splice(1+this.products.indexOf(n),0,c);(v=c.getSelector())===null||v===void 0?void 0:v.reloadFileInput();(g=c.getSelector())===null||g===void 0?void 0:g.layout();c.updateUiMeasure(c.getField("MEASURE_CODE"),h.Text.encode(c.getField("MEASURE_NAME")))}else if(this.getSettingValue("newRowPosition")==="bottom"){this.products.push(c)}else{this.products.unshift(c)}this.refreshSortFields();this.numerateRows();c.updateUiCurrencyFields();this.updateTotalUiCurrency();(i=c.getSelector())===null||i===void 0?void 0:i.setConfig("ENABLE_EMPTY_PRODUCT_ERROR",this.getSettingValue("enableEmptyProductError",false));return c}},{key:"isTaxIncludedActive",value:function e(){return this.products.filter((function(e){return e.isTaxIncluded()})).length>0}},{key:"getProductSelector",value:function e(t){return u.ProductSelector.getById("crm_grid_"+this.getRowIdPrefix()+t)}},{key:"focusProductSelector",value:function e(t){var i=this;requestAnimationFrame((function(){var e;(e=i.getProductSelector(t))===null||e===void 0?void 0:e.searchInDialog().focusName()}))}},{key:"handleOnBeforeProductChange",value:function e(t){var i=t.getData();var n=this.getProductByRowId(i.rowId);if(n){this.getGrid().tableFade();n.resetExternalActions()}}},{key:"handleOnProductChange",value:function e(t){var i=this;var n=t.getData();var r=this.getProductByRowId(n.rowId);if(r&&n.fields){var a=new Promise((function(e,t){var a=n.fields;if(!h.Type.isNil(a["IMAGE_INFO"])){a["IMAGE_INFO"]=JSON.stringify(a["IMAGE_INFO"])}if(i.getCurrencyId()!==a["CURRENCY_ID"]){a["CURRENCY"]=a["CURRENCY_ID"];var s={};ri(i,ui,vi).call(i).forEach((function(e){s[e]=n.fields[e]}));var l=[{fields:s,id:r.getId()}];h.ajax.runComponentAction(i.getComponentName(),"calculateProductPrices",{mode:"class",signedParameters:i.getSignedParameters(),data:{products:l,currencyId:i.getCurrencyId(),options:{ACTION:"calculateProductPrices"}}}).then((function(t){var i=t.data.result[r.getId()];if(i){i["CUSTOMIZED"]="Y";e(Object.assign(a,i))}else{e(a)}}))}else{e(a)}}));a.then((function(e){if(i.products.length>1){var t=e["VAT_ID"]||e["TAX_ID"];var a=e["VAT_INCLUDED"]||e["TAX_INCLUDED"];if(t>0&&a!==r.getTaxIncluded()){var s;var l=(s=i.getTaxList())===null||s===void 0?void 0:s.find((function(e){return parseInt(e.ID)===t}));if((l===null||l===void 0?void 0:l.VALUE)>0&&a==="Y"){e["BASE_PRICE"]=e["BASE_PRICE"]/(1+l.VALUE/100)}}["TAX_INCLUDED","VAT_INCLUDED"].forEach((function(t){return delete e[t]}))}if(r.getField("OFFER_ID")!==e.ID){e["ROW_RESERVED"]=0;e["DEDUCTED_QUANTITY"]=0;if(!i.getSettingValue("allowDiscountChange",true)){e["DISCOUNT_ROW"]=0;e["DISCOUNT_SUM"]=0;e["DISCOUNT_RATE"]=0;e["DISCOUNT"]=0;r.updateUiHtmlField("DISCOUNT_PRICE",o.CurrencyCore.currencyFormat(0,i.getCurrencyId(),true));r.updateUiHtmlField("DISCOUNT_ROW",o.CurrencyCore.currencyFormat(0,i.getCurrencyId(),true))}}Object.keys(e).forEach((function(t){r.updateFieldValue(t,e[t])}));if(!h.Type.isStringFilled(e["CUSTOMIZED"])){r.setField("CUSTOMIZED","N")}r.setField("IS_NEW",n.isNew?"Y":"N");r.layoutReserveControl();r.layoutStoreSelector();r.initHandlersForSelectors();r.updateUiStoreAmountData();r.updatePropertyFields();r.modifyBasePriceInput();r.executeExternalActions();i.getGrid().tableUnfade()}))}else{this.getGrid().tableUnfade()}}},{key:"handleOnBeforeProductClear",value:function e(t){var i=t.getData(),n=i.rowId;var r=this.getProductByRowId(n);r.clearPropertyFields()}},{key:"handleOnProductClear",value:function e(t){var i=t.getData(),n=i.rowId;var r=this.getProductByRowId(n);if(r){r.layoutReserveControl();r.initHandlersForSelectors();r.changeBasePrice(0);if(!this.getSettingValue("allowDiscountChange",true)){r.setDiscount(0);r.updateUiHtmlField("DISCOUNT_PRICE",o.CurrencyCore.currencyFormat(0,this.getCurrencyId(),true));r.updateUiHtmlField("DISCOUNT_ROW",o.CurrencyCore.currencyFormat(0,this.getCurrencyId(),true))}r.modifyBasePriceInput();r.executeExternalActions()}}},{key:"compileProductData",value:function e(){if(!this.isExistForm()){return}this.initFormFields();var t=this.getDataField();var i=this.getDataSettingsField();this.cleanProductRows();if(h.Type.isElementNode(t)&&h.Type.isElementNode(i)){t.value=this.prepareProductDataValue();i.value=JSON.stringify({ENABLE_DISCOUNT:this.getDiscountEnabled(),ENABLE_TAX:this.getTaxEnabled()})}this.addFirstRowIfEmpty()}},{key:"prepareProductDataValue",value:function t(){var i="";if(this.getProductCount()){var n=[];this.products.forEach((function(t){var i=t.getFields(ii(e,e,fi).call(e));if(!/^[0-9]+$/.test(i["ID"])){i["ID"]=0}i["CUSTOMIZED"]="Y";n.push(i)}));i=JSON.stringify(n)}return i}},{key:"executeActions",value:function e(t){var i=this;if(!h.Type.isArrayFilled(t)){return}var n=t.filter((function(e){return e.type===i.actions.updateTotal||e.type===i.actions.disableSaveButton})).length>0;var r=jt(t),a;try{for(r.s();!(a=r.n()).done;){var s=a.value;if(!h.Type.isPlainObject(s)||!h.Type.isStringFilled(s.type)){continue}switch(s.type){case this.actions.productChange:this.actionSendProductChange(s,n);break;case this.actions.productListChanged:this.actionSendProductListChanged(n);break;case this.actions.updateListField:this.actionUpdateListField(s);break;case this.actions.updateTotal:this.actionUpdateTotalData();break;case this.actions.stateChanged:this.actionSendStatusChange(s);break}}}catch(e){r.e(e)}finally{r.f()}}},{key:"actionSendProductChange",value:function e(t,i){if(!h.Type.isStringFilled(t.id)){return}var n=this.getProductByRowId(t.id);if(!n){return}l.EventEmitter.emit(this,"ProductList::onChangeFields",{rowId:t.id,productId:n.getField("PRODUCT_ID"),fields:this.getProductByRowId(t.id).getCatalogFields()});if(this.controller){this.controller.productChange(i);this.setGridChanged(true)}}},{key:"actionSendProductListChanged",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(this.controller){this.controller.productChange(t);this.setGridChanged(true)}}},{key:"actionUpdateListField",value:function e(t){if(!h.Type.isStringFilled(t.field)||!("value"in t)){return}if(!this.allowUpdateListField(t.field)){return}this.updateFieldForList=t.field;var i=jt(this.products),n;try{for(i.s();!(n=i.n()).done;){var r=n.value;r.updateFieldByName(t.field,t.value)}}catch(e){i.e(e)}finally{i.f()}this.updateFieldForList=null}},{key:"actionUpdateTotalData",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(this.totalData.inProgress){return}this.updateTotalDataDelayedHandler(t)}},{key:"actionSendStatusChange",value:function e(t){if(!("value"in t)){return}if(this.stateChange.changed===t.value){return}this.stateChange.changed=t.value;if(this.stateChange.sended){return}this.stateChange.sended=true}},{key:"allowUpdateListField",value:function e(t){if(this.updateFieldForList!==null){return false}var i=true;switch(t){case"TAX_INCLUDED":i=this.isTaxUniform()&&this.isTaxAllowed();break}return i}},{key:"setGridChanged",value:function e(t){this.isChangedGrid=t}},{key:"isChanged",value:function e(){return this.isChangedGrid}},{key:"updateTotalDataDelayed",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(this.totalData.inProgress){return}this.totalData.inProgress=true;var i=this.getProductsFields(this.getProductFieldListForTotalData());i.forEach((function(e){return e["CUSTOMIZED"]="Y"}));this.ajaxRequest("calculateTotalData",{options:t,products:i,currencyId:this.getCurrencyId()})}},{key:"getProductsFields",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var i=[];var n=jt(this.products),r;try{for(n.s();!(r=n.n()).done;){var a=r.value;i.push(a.getFields(t))}}catch(e){n.e(e)}finally{n.f()}return i}},{key:"getProductFieldListForTotalData",value:function e(){return["PRODUCT_ID","PRODUCT_NAME","QUANTITY","DISCOUNT_TYPE_ID","DISCOUNT_RATE","DISCOUNT_SUM","TAX_RATE","TAX_INCLUDED","PRICE_EXCLUSIVE","PRICE","CUSTOMIZED"]}},{key:"setTotalData",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var n=BX(this.getSettingValue("totalBlockContainerId",null));if(h.Type.isElementNode(n)){var r=this.getCurrencyId();var a=["totalCost","totalDelivery","totalTax","totalWithoutTax","totalDiscount","totalWithoutDiscount"];for(var s=0,l=a;s<l.length;s++){var u=l[s];var d=n.querySelector('[data-total="'+u+'"]');if(h.Type.isElementNode(d)&&u in t){d.innerHTML=o.CurrencyCore.currencyFormat(t[u],r,false)}}}this.sendTotalData(t,i);this.totalData.inProgress=false}},{key:"sendTotalData",value:function e(t,i){var n=this;if(this.controller){var r=true;if(h.Type.isObject(i)&&(i.isInternalChanging===true||i.isInternalChanging==="true")){r=false}setTimeout((function(){n.controller.changeSumTotal(t,r,!ri(n,di,gi).call(n))}),500)}}},{key:"ajaxRequest",value:function e(t,i){var n=this;var r=h.Text.getRandom();this.ajaxPool.set(t,r);if(!h.Type.isPlainObject(i.options)){i.options={}}i.options.ACTION=t;i.options.REQUEST_KEY=r;h.ajax.runComponentAction(this.getComponentName(),t,{mode:"class",signedParameters:this.getSignedParameters(),data:i}).then((function(e){return n.ajaxResultSuccess(e,i.options)}),(function(e){return n.ajaxResultFailure(e,i.options)}))}},{key:"ajaxResultSuccess",value:function e(t,i){if(!this.ajaxResultCommonCheck(t)||this.ajaxPool.get(t.data.action)!==i.REQUEST_KEY){return}this.ajaxPool["delete"](t.data.action);l.EventEmitter.emit(this,"onAjaxSuccess",t.data.action);switch(t.data.action){case"calculateTotalData":if(h.Type.isPlainObject(t.data.result)){this.setTotalData(t.data.result,i)}break;case"calculateProductPrices":if(h.Type.isPlainObject(t.data.result)){this.onCalculatePricesResponse(t.data.result)}break}}},{key:"validateSubmit",value:function e(){return new Promise((function(e,t){var i=BX.UI.Notification.Center.getBalloonByCategory(d.ProductModel.SAVE_NOTIFICATION_CATEGORY);if(i){l.EventEmitter.subscribeOnce(i,BX.UI.Notification.Event.getFullName("onClose"),(function(){setTimeout(e,500)}));i.close()}else{setTimeout(e(),50)}}))}},{key:"ajaxResultFailure",value:function e(t,i){this.ajaxPool["delete"](i.ACTION)}},{key:"ajaxResultCommonCheck",value:function e(t){if(!h.Type.isPlainObject(t)){return false}if(!h.Type.isStringFilled(t.status)){return false}if(t.status!=="success"){return false}if(!h.Type.isPlainObject(t.data)){return false}if(!h.Type.isStringFilled(t.data.action)){return false}if(!("result"in t.data)){return false}return true}},{key:"deleteRow",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!h.Type.isStringFilled(t)){return}var n=this.getGrid().getRows().getById(t);if(n){h.Dom.remove(n.getNode());this.getGrid().getRows().reset()}var r=this.getProductById(t);if(r){var a=this.products.indexOf(r);if(a>-1){this.products.splice(a,1);this.refreshSortFields();this.numerateRows()}}l.EventEmitter.emit("Grid::thereEditedRows",[]);if(!i){this.addFirstRowIfEmpty();this.executeActions([{type:this.actions.productListChanged},{type:this.actions.updateTotal}])}}},{key:"copyRow",value:function e(t){this.addProductRow(t);this.refreshSortFields();this.numerateRows();l.EventEmitter.emit("Grid::thereEditedRows",[]);this.executeActions([{type:this.actions.productListChanged},{type:this.actions.updateTotal}])}},{key:"cleanProductRows",value:function e(){var t=this;this.products.filter((function(e){return e.isEmpty()})).forEach((function(e){return t.deleteRow(e.getField("ID"),true)}))}},{key:"resortProductsByIds",value:function e(t){var i=false;if(h.Type.isArrayFilled(t)){this.products.sort((function(e,n){if(t.indexOf(e.getField("ID"))>t.indexOf(n.getField("ID"))){return 1}i=true;return-1}))}return i}},{key:"refreshSortFields",value:function e(){this.products.forEach((function(e,t){return e.setField("SORT",(t+1)*10)}))}},{key:"handleOnTabShow",value:function e(){if(!this.isVisible()){this.products.forEach((function(e){var t;(t=e.getSelector())===null||t===void 0?void 0:t.layout();e.initHandlersForSelectors()}))}l.EventEmitter.emit("onDemandRecalculateWrapper",[this]);this.isVisibleGrid=true}},{key:"isVisible",value:function e(){return this.isVisibleGrid}},{key:"showFieldTourHint",value:function e(t,i,n){var r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];var a=arguments.length>4&&arguments[4]!==undefined?arguments[4]:"";if(this.products.length>0){var s=this.products[0].getNode();if(this.getProductByRowId(a)){s=this.getProductByRowId(a).getNode()}var l=[];var o=jt(r),u;try{for(o.s();!(u=o.n()).done;){var d=u.value;var c=s.querySelector('[data-name="'.concat(d,'"]'));if(c!==null){l.push(c)}}}catch(e){o.e(e)}finally{o.f()}var h=s.querySelector('[data-name="'.concat(t,'"]'));if(h!==null){babelHelpers.classPrivateFieldGet(this,li).processFieldTour(h,i,n,l)}}}},{key:"getActiveHint",value:function e(){return babelHelpers.classPrivateFieldGet(this,li).getActiveHint()}},{key:"openIntegrationLimitSlider",value:function e(){top.BX.UI.InfoHelper.show("limit_store_crm_integration");var t=top.BX.UI.InfoHelper.getSlider();top.BX.Event.EventEmitter.subscribeOnce("SidePanel.Slider:onCloseComplete",(function(e){var i;var n=(i=e.getData()[0])===null||i===void 0?void 0:i.getSlider();if(n!==t){return}window.location.search+="&active_tab=tab_products"}))}},{key:"openInventoryManagementToolDisabledSlider",value:function e(){h.Runtime.loadExtension("catalog.tool-availability-manager").then((function(e){var t=e.ToolAvailabilityManager;t.openInventoryManagementToolDisabledSlider()}))}},{key:"getRestrictedProductTypes",value:function e(){return this.getSettingValue("restrictedProductTypes",[])}}]);return e}();function hi(){this.getGrid()._clickOnRowActionsButton=function(){}}function vi(){return["BASE_PRICE","TAX_INCLUDED","PRICE_NETTO","PRICE_BRUTTO","DISCOUNT_ROW","DISCOUNT_SUM","CURRENCY"]}function gi(){return this.products.filter((function(e){return e.getModel().getErrorCollection().hasErrors()})).length>0}function fi(){return["ID","PRODUCT_ID","PRODUCT_NAME","QUANTITY","TAX_RATE","TAX_INCLUDED","PRICE_EXCLUSIVE","PRICE_NETTO","PRICE_BRUTTO","PRICE","CUSTOMIZED","BASE_PRICE","DISCOUNT_ROW","DISCOUNT_SUM","DISCOUNT_TYPE_ID","DISCOUNT_RATE","CURRENCY","STORE_ID","INPUT_RESERVE_QUANTITY","RESERVE_QUANTITY","DATE_RESERVE_END","SORT","MEASURE_CODE","MEASURE_NAME","TYPE"]}e.Editor=ci;e.PageEventsManager=at})(this.BX.Crm.Entity.ProductList=this.BX.Crm.Entity.ProductList||{},BX,BX,BX.Catalog,BX.Catalog.Store,BX.Catalog,BX.Main,BX.Event,BX.Currency,BX.Catalog,BX.Catalog,BX,BX,BX,BX.UI.Tour,BX.Catalog);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:88:"/bitrix/components/bitrix/main.ui.grid/templates/.default/script.min.js?1728733181192113";s:6:"source";s:67:"/bitrix/components/bitrix/main.ui.grid/templates/.default/script.js";s:3:"min";s:71:"/bitrix/components/bitrix/main.ui.grid/templates/.default/script.min.js";s:3:"map";s:71:"/bitrix/components/bitrix/main.ui.grid/templates/.default/script.map.js";}"*/
(function(exports,ui_cnt,ui_dialogs_checkboxList,main_core,main_core_events,main_loader,main_popup){"use strict";(function(){BX.namespace("BX.Grid");BX.Grid.ActionPanel=function(t,e,i){this.parent=null;this.rel={};this.actions=null;this.types=null;this.lastActivated=[];this.init(t,e,i);this.button=[];this.elements=[];this.buttonOnChange=[];this.buttonData={}};BX.Grid.ActionPanel.prototype={init(parent,actions,types){this.parent=parent;this.actions=eval(actions);this.types=eval(types);BX.addCustomEvent(window,"Dropdown::change",BX.proxy(this._dropdownEventHandle,this));BX.addCustomEvent(window,"Dropdown::load",BX.proxy(this._dropdownEventHandle,this));const panel=this.getPanel();BX.bind(panel,"change",BX.delegate(this._checkboxChange,this));BX.bind(panel,"click",BX.delegate(this._clickOnButton,this));BX.addCustomEvent(window,"Grid::updated",BX.proxy(this._gridUpdatedEventHandle,this))},destroy(){BX.removeCustomEvent(window,"Dropdown::change",BX.proxy(this._dropdownEventHandle,this));BX.removeCustomEvent(window,"Dropdown::load",BX.proxy(this._dropdownEventHandle,this));BX.removeCustomEvent(window,"Grid::updated",BX.proxy(this._gridUpdatedEventHandle,this))},_gridUpdatedEventHandle(){const t=BX("grid_cancel_button");t&&BX.fireEvent(BX.firstChild(t),"click")},_dropdownEventHandle(t,e,i,s){this.isPanelControl(BX(t))&&this._dropdownChange(t,e,i,s)},resetForAllCheckbox(){const t=this.getForAllCheckbox();if(BX.type.isDomNode(t)){t.checked=null}},getForAllCheckbox(){return BX.Grid.Utils.getByClass(this.getPanel(),this.parent.settings.get("classForAllCheckbox"),true)},getPanel(){return BX.Grid.Utils.getByClass(this.parent.getContainer(),this.parent.settings.get("classActionPanel"),true)},getApplyButton(){return BX.Grid.Utils.getByClass(this.getPanel(),this.parent.settings.get("classPanelApplyButton"),true)},isPanelControl(t){return BX.hasClass(t,this.parent.settings.get("classPanelControl"))},getTextInputs(){return BX.Grid.Utils.getBySelector(this.getPanel(),'input[type="text"]')},getHiddenInputs(){return BX.Grid.Utils.getBySelector(this.getPanel(),'input[type="hidden"]')},getSelects(){return BX.Grid.Utils.getBySelector(this.getPanel(),"select")},getDropdowns(){return BX.Grid.Utils.getByClass(this.getPanel(),this.parent.settings.get("classDropdown"))},getCheckboxes(){return BX.Grid.Utils.getByClass(this.getPanel(),this.parent.settings.get("classPanelCheckbox"))},getButtons(){return BX.Grid.Utils.getByClass(this.getPanel(),this.parent.settings.get("classPanelButton"))},isDropdown(t){return BX.hasClass(t,this.parent.settings.get("classDropdown"))},isCheckbox(t){return BX.hasClass(t,this.parent.settings.get("classPanelCheckbox"))},isTextInput(t){return t.type==="text"},isHiddenInput(t){return t.type==="hidden"},isSelect(t){return t.tagName==="SELECT"},createDropdown(t,e){const i=t.EMPTY_TEXT||"";const s=t.MULTIPLE==="Y";const n=this.createContainer(t.ID,e,{});const o=BX.create("div",{props:{className:"main-dropdown main-grid-panel-control",id:`${t.ID}_control`},attrs:{name:t.NAME,"data-name":t.NAME,"data-empty-text":i,"data-multiple":s?"Y":"N","data-items":JSON.stringify(t.ITEMS),"data-value":s?"":t.ITEMS[0].VALUE,"data-popup-position":"fixed"},children:[BX.create("span",{props:{className:"main-dropdown-inner"},html:s?i:t.ITEMS[0].NAME})]});n.appendChild(o);return n},createCheckbox(t,e){const i=this.createContainer(t.ID,e,{});const s=BX.create("span",{props:{className:"main-grid-checkbox-container"}});const n=BX.create("span",{props:{className:"main-grid-control-panel-content-title"}});const o=BX.create("input",{props:{type:"checkbox",className:`${this.parent.settings.get("classPanelCheckbox")} main-grid-checkbox`,id:`${t.ID}_control`},attrs:{value:t.VALUE||"",title:t.TITLE||"",name:t.NAME||"","data-onchange":JSON.stringify(t.ONCHANGE)}});o.checked=t.CHECKED||null;i.appendChild(s);i.appendChild(n);s.appendChild(o);s.appendChild(BX.create("label",{props:{className:"main-grid-checkbox"},attrs:{for:`${t.ID}_control`,title:t.TITLE}}));n.appendChild(BX.create("label",{attrs:{for:`${t.ID}_control`,title:t.TITLE},html:t.LABEL}));return i},createText(t,e){const i=this.createContainer(t.ID,e,{});const s=BX.type.isNotEmptyString(t.TITLE)?t.TITLE:"";if(s!==""){i.appendChild(BX.create("label",{attrs:{title:s,for:`${t.ID}_control`},text:s}))}i.appendChild(BX.create("input",{props:{className:"main-grid-control-panel-input-text main-grid-panel-control",id:`${t.ID}_control`},attrs:{name:t.NAME,title:s,placeholder:t.PLACEHOLDER||"",value:t.VALUE||"",type:"text","data-onchange":JSON.stringify(t.ONCHANGE||[])}}));return i},createHidden(t,e){const i=this.createContainer(t.ID,e,{CLASS:"main-grid-panel-hidden-control-container"});i.appendChild(BX.create("input",{props:{id:`${t.ID}_control`,type:"hidden"},attrs:{name:t.NAME,value:t.VALUE||""}}));return i},createButton(t,e){this.buttonOnChange=t.ONCHANGE||[];this.buttonData=t;this.button=this.createButtonNode(t);BX.removeCustomEvent(window,"Grid::unselectRow",BX.proxy(this.prepareButton,this));BX.removeCustomEvent(window,"Grid::selectRow",BX.proxy(this.prepareButton,this));BX.removeCustomEvent(window,"Grid::allRowsSelected",BX.proxy(this.prepareButton,this));BX.removeCustomEvent(window,"Grid::allRowsUnselected",BX.proxy(this.prepareButton,this));if(this.buttonData.SETTINGS&&t.ID===this.buttonData.SETTINGS.buttonId){BX.addCustomEvent(window,"Grid::unselectRow",BX.proxy(this.prepareButton,this));BX.addCustomEvent(window,"Grid::selectRow",BX.proxy(this.prepareButton,this));BX.addCustomEvent(window,"Grid::allRowsSelected",BX.proxy(this.prepareButton,this));BX.addCustomEvent(window,"Grid::allRowsUnselected",BX.proxy(this.prepareButton,this))}this.prepareButton();const i=this.createContainer(t.ID,e,{});i.appendChild(this.button);return i},createButtonNode(t){return BX.create("button",{props:{className:`ui-btn${t.CLASS?` ${t.CLASS}`:""}`,id:`${t.ID}_control`,title:BX.type.isNotEmptyString(t.TITLE)?t.TITLE:""},attrs:{name:t.NAME||""},html:t.TEXT})},prepareButton(){if(this.isSetButtonDisabled()){BX.Dom.attr(this.button,"data-onchange",[]);BX.Dom.addClass(this.button,"ui-btn-disabled")}else{BX.Dom.attr(this.button,"data-onchange",this.buttonOnChange);BX.Dom.removeClass(this.button,"ui-btn-disabled")}},isSetButtonDisabled(){return Boolean(this.buttonData.SETTINGS&&this.buttonData.SETTINGS.minSelectedRows&&this.getSelectedIds().length<this.buttonData.SETTINGS.minSelectedRows)},createLink(t,e){const i=this.createContainer(t.ID,e,{});const s=BX.create("a",{props:{className:`main-grid-link${t.CLASS?` ${t.CLASS}`:""}`,id:`${t.ID}_control`},attrs:{href:t.HREF||"","data-onchange":JSON.stringify(t.ONCHANGE||[])},html:t.TEXT});i.appendChild(s);return i},createCustom(t,e){const i=this.createContainer(t.ID,e,{CLASS:"main-grid-panel-hidden-control-container"});const s=BX.create("div",{props:{className:`main-grid-panel-custom${t.CLASS?` ${t.CLASS}`:""}`},html:t.VALUE});i.appendChild(s);return i},createContainer(t,e,i){t=t.replace("_control","");e=e.replace("_control","");i=i||{};return BX.create("span",{props:{className:this.parent.settings.get("classPanelControlContainer")+(i.CLASS?` ${i.CLASS}`:""),id:t},attrs:{"data-relative":e}})},removeItemsRelativeCurrent(t){let e=t;const i=[t.id];const s=[];let n;while(e){n=BX.data(e,"relative");if(i.includes(n)){i.push(e.id);s.push(e)}e=e.nextElementSibling}s.forEach((t=>{BX.remove(t)}))},validateData(t){return"ONCHANGE"in t&&BX.type.isArray(t.ONCHANGE)},activateControl(t){const e=BX(t);if(BX.type.isDomNode(e)){BX.removeClass(e,this.parent.settings.get("classDisable"));e.disabled=null}},deactivateControl(t){const e=BX(t);if(BX.type.isDomNode(e)){BX.addClass(e,this.parent.settings.get("classDisable"));e.disabled=true}},showControl(t){const e=BX(t);e&&BX.show(e)},hideControl(t){const e=BX(t);e&&BX.hide(e)},validateActionObject(t){return BX.type.isPlainObject(t)&&"ACTION"in t&&BX.type.isNotEmptyString(t.ACTION)&&(t.ACTION===this.actions.RESET_CONTROLS||"DATA"in t&&BX.type.isArray(t.DATA))},validateControlObject(t){return BX.type.isPlainObject(t)&&"TYPE"in t&&"ID"in t},createDate(t,e){const i=this.createContainer(t.ID,e,{});const s=BX.decl({block:"main-ui-date",mix:["main-grid-panel-date"],calendarButton:true,valueDelete:true,placeholder:"PLACEHOLDER"in t?t.PLACEHOLDER:"",name:"NAME"in t?`${t.NAME}_from`:"",tabindex:"TABINDEX"in t?t.TABINDEX:"",value:"VALUE"in t?t.VALUE:"",enableTime:"TIME"in t?t.TIME?"true":"false":"false"});i.appendChild(s);return i},createControl(t,e){let i=null;switch(t.TYPE){case this.types.DROPDOWN:i=this.createDropdown(t,e);break;case this.types.CHECKBOX:i=this.createCheckbox(t,e);break;case this.types.TEXT:i=this.createText(t,e);break;case this.types.HIDDEN:i=this.createHidden(t,e);break;case this.types.BUTTON:i=this.createButton(t,e);break;case this.types.LINK:i=this.createLink(t,e);break;case this.types.CUSTOM:i=this.createCustom(t,e);break;case this.types.DATE:i=this.createDate(t,e);break}return i},onChangeHandler(container,actions,isPseudo){let newElement;let callback;const self=this;if(BX.type.isDomNode(container)&&BX.type.isArray(actions)){actions.forEach((function(action){if(self.validateActionObject(action)){if(action.ACTION===self.actions.CREATE){self.removeItemsRelativeCurrent(container);const t=BX.Runtime.clone(action.DATA).reverse();t.forEach((t=>{if(self.validateControlObject(t)){newElement=self.createControl(t,container.id||BX.data(container,"relative"));if(BX.type.isDomNode(newElement)){BX.insertAfter(newElement,container);if("ONCHANGE"in t&&t.TYPE===self.types.CHECKBOX&&"CHECKED"in t&&t.CHECKED){self.onChangeHandler(newElement,t.ONCHANGE)}if(t.TYPE===self.types.DROPDOWN&&BX.type.isArray(t.ITEMS)&&t.ITEMS.length>0&&"ONCHANGE"in t.ITEMS[0]&&BX.type.isArray(t.ITEMS[0].ONCHANGE)){self.onChangeHandler(newElement,t.ITEMS[0].ONCHANGE)}}}}))}if(action.ACTION===self.actions.ACTIVATE){self.removeItemsRelativeCurrent(container);if(BX.type.isArray(action.DATA)){action.DATA.forEach((t=>{self.lastActivated.push(t.ID);self.activateControl(t.ID)}))}}if(action.ACTION===self.actions.SHOW&&BX.type.isArray(action.DATA)){action.DATA.forEach((t=>{self.showControl(t.ID)}))}if(action.ACTION===self.actions.HIDE&&BX.type.isArray(action.DATA)){action.DATA.forEach((t=>{self.hideControl(t.ID)}))}if(action.ACTION===self.actions.HIDE_ALL_EXPECT&&BX.type.isArray(action.DATA)){(self.getControls()||[]).forEach((t=>{if(!action.DATA.some((e=>e.ID===t.id))){self.hideControl(t.id)}}))}if(action.ACTION===self.actions.SHOW_ALL){(self.getControls()||[]).forEach((t=>{self.showControl(t.id)}))}if(action.ACTION===self.actions.REMOVE&&BX.type.isArray(action.DATA)){action.DATA.forEach((t=>{BX.remove(BX(t.ID))}))}if(action.ACTION===self.actions.CALLBACK){this.confirmDialog(action,BX.delegate((()=>{if(BX.type.isArray(action.DATA)){action.DATA.forEach((currentCallback=>{if(currentCallback.JS.includes("Grid.")){callback=currentCallback.JS.replace("Grid","self.parent");callback=callback.replace("()","");callback+=".apply(self.parent, [container])";try{eval(callback)}catch(t){throw new Error(t)}}else if(BX.type.isNotEmptyString(currentCallback.JS)){try{eval(currentCallback.JS)}catch(t){throw new Error(t)}}}))}}),this))}if(action.ACTION===self.actions.RESET_CONTROLS){this.removeItemsRelativeCurrent(container)}}}),this)}else{if(!isPseudo){this.removeItemsRelativeCurrent(container)}self.lastActivated.forEach((t=>{self.deactivateControl(t)}));self.lastActivated=[]}},confirmDialog(t,e,i){this.parent.confirmDialog(t,e,i)},_dropdownChange(t,e,i,s){const n=BX(t);const o=n.parentNode;const a=s&&"ONCHANGE"in s?s.ONCHANGE:null;const r=s&&"PSEUDO"in s&&s.PSEUDO!==false;this.onChangeHandler(o,a,r)},_checkboxChange(event){let onChange;try{onChange=eval(BX.data(event.target,"onchange"))}catch{onChange=null}this.onChangeHandler(BX.findParent(event.target,{className:this.parent.settings.get("classPanelContainer")},true,false),event.target.checked||event.target.id.includes("actallrows_")?onChange:null)},_clickOnButton(event){let onChange;if(this.isButton(event.target)){event.preventDefault();try{onChange=eval(BX.data(event.target,"onchange"))}catch{onChange=null}this.onChangeHandler(BX.findParent(event.target,{className:this.parent.settings.get("classPanelContainer")},true,false),onChange)}},isButton(t){return BX.hasClass(t,this.parent.settings.get("classPanelButton"))},getSelectedIds(){const t=this.parent.getRows().getSelected().filter((t=>t.isShown()));return t.map((t=>t.getId()))},getControls(){return BX.findChild(this.getPanel(),{className:this.parent.settings.get("classPanelControlContainer")},true,true)},getValues(){const t={};const e=this;const i=[].concat(this.getDropdowns(),this.getTextInputs(),this.getHiddenInputs(),this.getSelects(),this.getCheckboxes(),this.getButtons());(i||[]).forEach((i=>{if(BX.type.isDomNode(i)){if(e.isDropdown(i)){let e=BX.data(i,"value");const s=BX.data(i,"multiple")==="Y";e=e!==null&&e!==undefined?e:"";t[BX.data(i,"name")]=s?e.split(","):e}if(e.isSelect(i)){t[i.getAttribute("name")]=i.options[i.selectedIndex].value}if(e.isCheckbox(i)&&i.checked){t[i.getAttribute("name")]=i.value}if(e.isTextInput(i)||e.isHiddenInput(i)){t[i.getAttribute("name")]=i.value}if(e.isButton(i)){const e=BX.data(i,"name");let s=BX.data(i,"value");s=s!==null&&s!==undefined?s:"";if(e){t[e]=s}}}}));return t}}})();(function(){BX.namespace("BX.Grid");BX.Grid.BaseClass=function(t){this.parent=t};BX.Grid.BaseClass.prototype={getParent(){return this.parent}}})();class CellActionState{}CellActionState.SHOW_BY_HOVER="main-grid-cell-content-action-by-hover";CellActionState.ACTIVE="main-grid-cell-content-action-active";const namespace=main_core.Reflection.namespace("BX.Grid");namespace.CellActionState=CellActionState;class CellActions{}CellActions.PIN="main-grid-cell-content-action-pin";CellActions.MUTE="main-grid-cell-content-action-mute";const namespace$1=main_core.Reflection.namespace("BX.Grid");namespace$1.CellActions=CellActions;(function(){BX.namespace("BX.Grid");BX.Grid.ColsSortable=function(t){this.parent=null;this.dragItem=null;this.targetItem=null;this.rowsList=null;this.colsList=null;this.dragRect=null;this.offset=null;this.startDragOffset=null;this.dragColumn=null;this.targetColumn=null;this.isDrag=null;this.init(t)};BX.Grid.ColsSortable.prototype={init(t){this.parent=t;this.colsList=this.getColsList();this.rowsList=this.getRowsList();if(!this.inited){this.inited=true;BX.addCustomEvent("Grid::updated",BX.proxy(this.reinit,this));BX.addCustomEvent("Grid::headerUpdated",BX.proxy(this.reinit,this))}this.registerObjects()},destroy(){BX.removeCustomEvent("Grid::updated",BX.proxy(this.reinit,this));this.unregisterObjects()},reinit(){this.unregisterObjects();this.reset();this.init(this.parent)},reset(){this.dragItem=null;this.targetItem=null;this.rowsList=null;this.colsList=null;this.dragRect=null;this.offset=null;this.startDragOffset=null;this.dragColumn=null;this.targetColumn=null;this.isDrag=null;this.fixedTableColsList=null},isActive(){return this.isDrag},registerObjects(){this.unregisterObjects();this.getColsList().forEach(this.register,this);this.getFixedHeaderColsList().forEach(this.register,this)},unregisterObjects(){this.getColsList().forEach(this.unregister,this);this.getFixedHeaderColsList().forEach(this.unregister,this)},unregister(t){jsDD.unregisterObject(t)},register(t){t.onbxdragstart=BX.proxy(this._onDragStart,this);t.onbxdrag=BX.proxy(this._onDrag,this);t.onbxdragstop=BX.proxy(this._onDragEnd,this);jsDD.registerObject(t)},getColsList(){if(!this.colsList){this.colsList=BX.Grid.Utils.getByTag(this.parent.getRows().getHeadFirstChild().getNode(),"th");this.colsList=this.colsList.filter((function(t){return!this.isStatic(t)}),this)}return this.colsList},getFixedHeaderColsList(){if(!this.fixedTableColsList&&this.parent.getParam("ALLOW_PIN_HEADER")){this.fixedTableColsList=BX.Grid.Utils.getByTag(this.parent.getPinHeader().getFixedTable(),"th");this.fixedTableColsList=this.fixedTableColsList.filter((function(t){return!this.isStatic(t)}),this)}return this.fixedTableColsList||[]},getRowsList(){let t=this.parent.getRows().getSourceRows();if(this.parent.getParam("ALLOW_PIN_HEADER")){t=t.concat(BX.Grid.Utils.getByTag(this.parent.getPinHeader().getFixedTable(),"tr"))}return t},isStatic(t){return BX.hasClass(t,this.parent.settings.get("classCellStatic"))&&!BX.hasClass(t,"main-grid-fixed-column")},getDragOffset(){const t=this.parent.getScrollContainer().scrollLeft-this.startScrollOffset;return jsDD.x-this.startDragOffset-this.dragRect.left+t},getColumn(t){let e=[];if(t instanceof HTMLTableCellElement){e=this.rowsList.map((e=>e.cells[t.cellIndex]))}return e},_onDragStart(){if(this.parent.getParam("ALLOW_PIN_HEADER")&&this.parent.getPinHeader().isPinned()){this.colsList=this.getFixedHeaderColsList()}else{this.colsList=this.getColsList()}this.startScrollOffset=this.parent.getScrollContainer().scrollLeft;this.isDrag=true;this.dragItem=jsDD.current_node;this.dragRect=this.dragItem.getBoundingClientRect();this.offset=Math.ceil(this.dragRect.width);this.startDragOffset=jsDD.start_x-this.dragRect.left;this.dragColumn=this.getColumn(this.dragItem);this.dragIndex=BX.Grid.Utils.getIndex(this.colsList,this.dragItem);this.parent.preventSortableClick=true},isDragToRight(t,e){const i=t.getBoundingClientRect();const s=Math.ceil(i.left+i.width/2+BX.scrollLeft(window));const n=this.dragIndex;const o=jsDD.x;return e>n&&o>s},isDragToLeft(t,e){const i=t.getBoundingClientRect();const s=Math.ceil(i.left+i.width/2+BX.scrollLeft(window));const n=this.dragIndex;const o=jsDD.x;return e<n&&o<s},isDragToBack(t,e){const i=t.getBoundingClientRect();const s=Math.ceil(i.left+i.width/2+BX.scrollLeft(window));const n=this.dragIndex;const o=jsDD.x;return e>n&&o<s||e<n&&o>s},isMovedToRight(t){return t.style.transform===`translate3d(${-this.offset}px, 0px, 0px)`},isMovedToLeft(t){return t.style.transform===`translate3d(${this.offset}px, 0px, 0px)`},isMoved(t){return t.style.transform!=="translate3d(0px, 0px, 0px)"&&t.style.transform!==""},moveColumn(t,e,i){i=BX.type.isNumber(i)?i:300;BX.Grid.Utils.styleForEach(t,{transition:`${i}ms`,transform:`translate3d(${e}px, 0px, 0px)`})},_onDrag(){this.dragOffset=this.getDragOffset();this.targetItem=this.targetItem||this.dragItem;this.targetColumn=this.targetColumn||this.dragColumn;const t=-this.offset;const e=this.offset;const i=0;const s=0;this.moveColumn(this.dragColumn,this.dragOffset,s);[].forEach.call(this.colsList,(function(s,n){if(s&&!s.classList.contains("main-grid-cell-static")){if(this.isDragToRight(s,n)&&!this.isMovedToRight(s)){this.targetColumn=this.getColumn(s);this.moveColumn(this.targetColumn,t)}if(this.isDragToLeft(s,n)&&!this.isMovedToLeft(s)){this.targetColumn=this.getColumn(s);this.moveColumn(this.targetColumn,e)}if(this.isDragToBack(s,n)&&this.isMoved(s)){this.targetColumn=this.getColumn(s);this.moveColumn(this.targetColumn,i)}}}),this)},_onDragEnd(){[].forEach.call(this.dragColumn,(function(t,e){BX.Grid.Utils.collectionSort(t,this.targetColumn[e])}),this);this.rowsList.forEach((t=>{BX.Grid.Utils.styleForEach(t.cells,{transition:"",transform:""})}));this.reinit();const t=this.colsList.map((t=>BX.data(t,"name")));this.parent.getUserOptions().setColumns(t);BX.onCustomEvent(this.parent.getContainer(),"Grid::columnMoved",[this.parent]);setTimeout((()=>{this.parent.preventSortableClick=false}),10)}}})();class Counters{}Counters.Type={LEFT:"left",LEFT_ALIGNED:"left-aligned",RIGHT:"right"};Counters.Color={DANGER:"ui-counter-danger",SUCCESS:"ui-counter-success",PRIMARY:"ui-counter-primary",GRAY:"ui-counter-gray",LIGHT:"ui-counter-light",DARK:"ui-counter-dark",WARNING:"ui-counter-warning"};Counters.Size={LARGE:"ui-counter-lg",MEDIUM:"ui-counter-md"};const namespace$2=main_core.Reflection.namespace("BX.Grid");namespace$2.Counters=Counters;(function(){BX.namespace("BX.Grid");const t=window.parent.BX.ajax.UpdatePageData;function e(){window.parent.BX.ajax.UpdatePageData=function(){}}function i(){window.parent.BX.ajax.UpdatePageData=t}BX.Grid.Data=function(t){this.parent=t;this.reset()};BX.Grid.Data.prototype.reset=function(){this.response=null;this.xhr=null;this.headRows=null;this.bodyRows=null;this.footRows=null;this.moreButton=null;this.pagination=null;this.counterDisplayed=null;this.counterSelected=null;this.counterTotal=null;this.limit=null;this.actionPanel=null;this.rowsByParentId={};this.rowById={};this.isValidResponse=null};BX.Grid.Data.prototype.getParent=function(){return this.parent};BX.Grid.Data.prototype.validateResponse=function(){if(!BX.type.isBoolean(this.isValidResponse)){this.isValidResponse=Boolean(this.getResponse())&&Boolean(BX.Grid.Utils.getByClass(this.getResponse(),this.getParent().settings.get("classContainer"),true))}return this.isValidResponse};BX.Grid.Data.prototype.request=function(t,s,n,o,a,r){if(!BX.type.isString(t)){t=""}if(!BX.type.isNotEmptyString(s)){s="GET"}if(!BX.type.isPlainObject(n)){n={}}const l={gridId:this.parent.getId(),url:t,method:s,data:n};this.parent.disableCheckAllCheckboxes();BX.onCustomEvent(window,"Grid::beforeRequest",[this,l]);if(l.hasOwnProperty("cancelRequest")&&l.cancelRequest===true){return}t=l.url;if(!BX.type.isNotEmptyString(t)){t=this.parent.baseUrl}t=BX.Grid.Utils.addUrlParams(t,{sessid:BX.bitrix_sessid(),internal:"true",grid_id:this.parent.getId()});if("apply_filter"in n&&n.apply_filter==="Y"){t=BX.Grid.Utils.addUrlParams(t,{apply_filter:"Y"})}else{t=BX.util.remove_url_param(t,"apply_filter")}if("clear_nav"in n&&n.clear_nav==="Y"){t=BX.Grid.Utils.addUrlParams(t,{clear_nav:"Y"})}else{t=BX.util.remove_url_param(t,"clear_nav")}t=BX.Grid.Utils.addUrlParams(t,{grid_action:o||"showpage"});s=l.method;n=l.data;this.reset();const d=this;setTimeout((()=>{const l=BX.Http.Data.convertObjectToFormData(n);e();var h=BX.ajax({url:BX.Grid.Utils.ajaxUrl(t,d.getParent().getAjaxId()),data:l,method:s,dataType:"html",headers:[{name:"X-Ajax-Grid-UID",value:d.getParent().getAjaxId()},{name:"X-Ajax-Grid-Req",value:JSON.stringify({action:o||"showpage"})}],processData:true,scriptsRunFirst:false,start:false,preparePost:false,onsuccess(t){d.response=BX.create("div",{html:t});d.response=d.response.querySelector(`#${d.parent.getContainerId()}`);d.xhr=h;if(d.parent.getParam("HANDLE_RESPONSE_ERRORS")){let e;try{e=JSON.parse(t)}catch{e={messages:[]}}if(e.messages.length>0){d.parent.arParams.MESSAGES=e.messages;d.parent.messages.show();d.parent.tableUnfade();if(BX.type.isFunction(r)){BX.delegate(r,d)(h)}return}}if(BX.type.isFunction(a)){d.parent.enableCheckAllCheckboxes();BX.delegate(a,d)(t,h)}i()},onerror(t){d.error=r;d.xhr=h;if(BX.type.isFunction(r)){d.parent.enableCheckAllCheckboxes();BX.delegate(r,d)(h,t)}}});h.send(l)}),0)};BX.Grid.Data.prototype.getResponse=function(){return this.response};BX.Grid.Data.prototype.getContainer=function(){const t=this.getParent().settings.get("classContainer");if(BX.Dom.hasClass(this.getResponse(),t)){return this.getResponse()}return BX.Grid.Utils.getByClass(this.getResponse(),t,true)};BX.Grid.Data.prototype.getHeadRows=function(){if(!this.headRows){this.headRows=BX.Grid.Utils.getByClass(this.getResponse(),this.getParent().settings.get("classHeadRow"))}return this.headRows};BX.Grid.Data.prototype.getBodyRows=function(){if(!this.bodyRows){this.bodyRows=BX.Grid.Utils.getByClass(this.getResponse(),this.getParent().settings.get("classBodyRow"))}return this.bodyRows};BX.Grid.Data.prototype.getRowsByParentId=function(t){if(!(t in this.rowsByParentId)){this.rowsByParentId[t]=BX.Grid.Utils.getBySelector(this.getResponse(),`.${this.getParent().settings.get("classBodyRow")}[data-parent-id="${t}"]`)}return this.rowsByParentId[t]};BX.Grid.Data.prototype.getRowById=function(t){if(!(t in this.rowById)){this.rowById[t]=BX.Grid.Utils.getBySelector(this.getResponse(),`.${this.getParent().settings.get("classBodyRow")}[data-id="${t}"]`,true)}return this.rowById[t]};BX.Grid.Data.prototype.getFootRows=function(){if(!this.footRows){this.footRows=BX.Grid.Utils.getByClass(this.getResponse(),this.getParent().settings.get("classFootRow"))}return this.footRows};BX.Grid.Data.prototype.getMoreButton=function(){if(!this.moreButton){this.moreButton=BX.Grid.Utils.getByClass(this.getResponse(),this.getParent().settings.get("classMoreButton"),true)}return this.moreButton};BX.Grid.Data.prototype.getPagination=function(){if(!this.pagination){this.pagination=BX.Grid.Utils.getByClass(this.getResponse(),this.getParent().settings.get("classPagination"),true);if(BX.type.isDomNode(this.pagination)){this.pagination=BX.firstChild(this.pagination)}}return this.pagination};BX.Grid.Data.prototype.getCounterDisplayed=function(){if(!this.counterDisplayed){this.counterDisplayed=BX.Grid.Utils.getByClass(this.getResponse(),this.getParent().settings.get("classCounterDisplayed"),true)}return this.counterDisplayed};BX.Grid.Data.prototype.getCounterSelected=function(){if(!this.counterSelected){this.counterSelected=BX.Grid.Utils.getByClass(this.getResponse(),this.getParent().settings.get("classCounterSelected"),true)}return this.counterSelected};BX.Grid.Data.prototype.getCounterTotal=function(){if(!BX.type.isDomNode(this.counterTotal)){const t=`.${this.getParent().settings.get("classCounterTotal")} .${this.getParent().settings.get("classPanelCellContent")}`;this.counterTotal=BX.Grid.Utils.getBySelector(this.getResponse(),t,true)}return this.counterTotal};BX.Grid.Data.prototype.getLimit=function(){if(!this.limit){this.limit=BX.Grid.Utils.getByClass(this.getResponse(),this.getParent().settings.get("classPageSize"),true)}return this.limit};BX.Grid.Data.prototype.getPageSize=function(){return this.getLimit()};BX.Grid.Data.prototype.getActionPanel=function(){if(!this.actionPanel){this.actionPanel=BX.Grid.Utils.getByClass(this.getResponse(),this.getParent().settings.get("classActionPanel"),true)}return this.actionPanel}})();(function(){BX.namespace("BX.Main");BX.Main.dropdown=function(t){this.id=null;this.dropdown=null;this.items=null;this.value=null;this.menuId=null;this.menu=null;this.menuItems=null;this.multiple=null;this.emptyText=null;this.dataItems="items";this.dataValue="value";this.dataPseudo="pseudo";this.dropdownItemClass="main-dropdown-item";this.activeClass="main-dropdown-active";this.selectedClass="main-dropdown-item-selected";this.notSelectedClass="main-dropdown-item-not-selected";this.lockedClass="main-dropdown-item-locked";this.menuItemClass="menu-popup-item";this.init(t)};BX.Main.dropdown.prototype={init(t){this.id=t.id;this.dropdown=t;this.items=this.getItems();this.value=this.getValue();this.menuId=this.getMenuId();this.multiple=this.getMultiple();this.emptyText=this.getEmptyText();this.menu=this.createMenu();this.menu.popupWindow.show();this.adjustPosition();BX.bind(this.dropdown,"click",BX.delegate(this.showMenu,this))},getMenuId(){return`${this.id}_menu`},getItems(){let t;try{const e=this.dropdown.dataset[this.dataItems];t=JSON.parse(e);t=t.map((t=>{t.VALUE=String(t.VALUE);return t}))}catch{t=[]}return t},getValue(){return this.dropdown.dataset[this.dataValue]},getValueItem(){const t=this.getValue();return this.items.find((e=>e.VALUE===t))},getValueAsArray(){let t=this.getValue();if(t===undefined){t=""}return t.toString().split(",").filter((t=>t!==""))},getValueItems(){const t=this.getValueAsArray();return this.items.filter((e=>t.includes(e.VALUE)))},toggleValue(t){if(this.multiple){if(t||t===0||t==="0"){const e=this.getValueAsArray();const i=e.indexOf(t);if(i<0){e.push(t)}else{e.splice(i,1)}this.dropdown.dataset[this.dataValue]=e.join(",")}else{this.dropdown.dataset[this.dataValue]=null}}else{this.dropdown.dataset[this.dataValue]=t}},getValueText(){if(this.multiple){return this.getValueItems().map((t=>t.NAME)).filter((t=>Boolean(t))).join(", ")||this.emptyText}const t=this.getValueItem();return t?t.NAME:this.emptyText},getMultiple(){return this.dropdown.dataset.multiple==="Y"},getEmptyText(){return this.dropdown.dataset.emptyText||null},prepareMenuItems(){const t=this;let e;let i;const s=this.multiple?this.getValueAsArray():this.getValue();function n(o){const a=t.dropdown.dataset.htmlEntity==="true";return o.map((o=>{e={};e[`data-${t.dataValue}`]=o.VALUE;e[`data-${t.dataPseudo}`]="PSEUDO"in o&&o.PSEUDO?"true":"false";i=BX.create("div",{children:[BX.create("span",{props:{className:t.dropdownItemClass},attrs:e,html:a?o.NAME:null,text:a?null:o.NAME})]});const r=t.multiple?s.includes(o.VALUE):s===o.VALUE;return{html:i.innerHTML,className:r?t.selectedClass:t.notSelectedClass,delimiter:o.DELIMITER,items:"ITEMS"in o?n(o.ITEMS):null}}))}const o=n(this.items);BX.onCustomEvent(window,"Dropdown::onPrepareItems",[this.id,this.menuId,o]);return o},createMenu(){const t=this;return BX.PopupMenu.create(this.getMenuId(),this.dropdown,this.prepareMenuItems(),{autoHide:true,offsetTop:-8,offsetLeft:Number(this.dropdown.dataset.menuOffsetLeft||40),maxHeight:Number(this.dropdown.dataset.menuMaxHeight||170),events:{onPopupClose:BX.delegate(this._onCloseMenu,this),onPopupShow(){t._onShowMenu()}}})},showMenu(){this.menu=BX.PopupMenu.getMenuById(this.menuId);if(!this.menu){this.menu=this.createMenu();this.menu.popupWindow.show()}this.adjustPosition()},adjustPosition(){if(this.dropdown.dataset.popupPosition==="fixed"){const t=this.menu.popupWindow.popupContainer;t.style.setProperty("top","auto");t.style.setProperty("bottom","45px");t.style.setProperty("left","0px");this.dropdown.appendChild(t)}},getSubItem(t){return BX.Grid.Utils.getByClass(t,this.dropdownItemClass,true)},refresh(t){const e=this.getSubItem(t);let i=BX.data(e,this.dataValue);if(BX.Type.isUndefined(i)){i=""}this.toggleValue(i);if(this.dropdown.dataset.htmlEntity==="true"){BX.firstChild(this.dropdown).innerHTML=this.getValueText()}else{BX.firstChild(this.dropdown).innerText=this.getValueText()}},selectItem(t){const e=this;(this.menu.menuItems||[]).forEach((i=>{if(e.multiple){if(t===i.layout.item){if(BX.hasClass(t,e.selectedClass)){BX.addClass(i.layout.item,e.notSelectedClass);BX.removeClass(i.layout.item,e.selectedClass)}else{BX.removeClass(i.layout.item,e.notSelectedClass);BX.addClass(i.layout.item,e.selectedClass)}}return}BX.removeClass(i.layout.item,e.selectedClass);if(t===i.layout.item){BX.removeClass(i.layout.item,e.notSelectedClass);BX.addClass(i.layout.item,e.selectedClass)}else{BX.addClass(i.layout.item,e.notSelectedClass)}}))},lockedItem(t){BX.addClass(t,this.lockedClass)},getDataItemIndexByValue(t,e){if(BX.type.isArray(t)){t.map(((t,i)=>{if(t.VALUE===e){return false}}))}return false},getDataItemByValue(t){const e=this.items.filter((e=>e.VALUE===t));return e.length>0?e[0]:null},_onShowMenu(){const t=this;BX.addClass(this.dropdown,this.activeClass);(this.menu.menuItems||[]).forEach((e=>{BX.bind(e.layout.item,"click",BX.delegate(t._onItemClick,t))}))},_onCloseMenu(){BX.removeClass(this.dropdown,this.activeClass);BX.PopupMenu.destroy(this.menuId)},_onItemClick(t){const e=this.getMenuItem(t.target);let i;let s;const n=this.getSubItem(e);const o=BX.data(n,"pseudo");if(o==="true"){i=BX.data(n,"value");s=this.getDataItemByValue(i)}else{this.refresh(e);this.selectItem(e);if(!this.multiple){this.menu.popupWindow.close()}i=this.getValue();s=this.getDataItemByValue(i)}t.stopPropagation();BX.onCustomEvent(window,"Dropdown::change",[this.dropdown.id,t,e,s,i])},getMenuItem(t){let e=t;if(!BX.hasClass(e,this.menuItemClass)){e=BX.findParent(e,{class:this.menuItemClass})}return e}}})();(function(){BX.namespace("BX.Main");BX.Main.dropdownManager={dropdownClass:"main-dropdown",data:{},init(){const self=this;let result;let onLoadItems;let items;BX.bind(document,"click",BX.delegate((function(t){if(BX.hasClass(t.target,this.dropdownClass)){t.preventDefault();result=this.getById(t.target.id);if(result&&result.dropdown===t.target){self.push(t.target.id,this.getById(t.target.id))}else{self.push(t.target.id,new BX.Main.dropdown(t.target))}}}),this));onLoadItems=BX.Grid.Utils.getByClass(document.body,this.dropdownClass);if(BX.type.isArray(onLoadItems)){onLoadItems.forEach((current=>{result=self.getById(current.id);try{items=eval(BX.data(current,"items"))}catch{}BX.onCustomEvent(window,"Dropdown::load",[current.id,{},null,BX.type.isArray(items)&&items.length>0?items[0]:[],BX.data(current,"value")])}))}},push(t,e){this.data[t]=e},getById(t){return t in this.data?this.data[t]:null}}})();(function(){BX.namespace("BX.Grid");BX.Grid.Element=function(t,e){this.node=null;this.href=null;this.parent=null;this.init(t,e)};BX.Grid.Element.prototype={init(t,e){this.node=t;this.parent=e;this.resetOnclickAttr()},getParent(){return this.parent},load(){BX.addClass(this.getNode(),this.getParent().settings.get("classLoad"))},unload(){BX.removeClass(this.getNode(),this.getParent().settings.get("classLoad"))},isLoad(){return BX.hasClass(this.getNode(),this.getParent().settings.get("classLoad"))},resetOnclickAttr(){if(BX.type.isDomNode(this.getNode())){this.getNode().onclick=null}},getObserver(){return BX.Grid.observer},getNode(){return this.node},getLink(){let t;try{t=this.getNode().href}catch{t=null}return t}}})();(function(){BX.namespace("BX.Grid");BX.Grid.Fader=function(t){this.parent=null;this.table=null;this.container=null;this.init(t)};BX.Grid.Fader.prototype={init(t){this.parent=t;this.table=this.parent.getTable();this.container=this.table.parentNode;this.scrollStartEventName=this.parent.isTouch()?"touchstart":"mouseenter";this.scrollEndEventName=this.parent.isTouch()?"touchend":"mouseleave";if(this.parent.getParam("ALLOW_PIN_HEADER")){this.fixedTable=this.parent.getPinHeader().getFixedTable()}this.debounceScrollHandler=BX.debounce(this._onWindowScroll,400,this);BX.bind(window,"resize",BX.proxy(this.toggle,this));document.addEventListener("scroll",this.debounceScrollHandler,BX.Grid.Utils.listenerParams({passive:true}));this.container.addEventListener("scroll",BX.proxy(this.toggle,this),BX.Grid.Utils.listenerParams({passive:true}));BX.addCustomEvent(window,"Grid::updated",BX.proxy(this.toggle,this));BX.addCustomEvent(window,"Grid::resize",BX.proxy(this.toggle,this));BX.addCustomEvent(window,"Grid::headerUpdated",BX.proxy(this._onHeaderUpdated,this));BX.addCustomEvent(window,"Grid::columnResize",BX.proxy(this.toggle,this));BX.bind(this.getEarLeft(),this.scrollStartEventName,BX.proxy(this._onMouseoverLeft,this));BX.bind(this.getEarRight(),this.scrollStartEventName,BX.proxy(this._onMouseoverRight,this));BX.bind(this.getEarLeft(),this.scrollEndEventName,BX.proxy(this.stopScroll,this));BX.bind(this.getEarRight(),this.scrollEndEventName,BX.proxy(this.stopScroll,this));this.toggle();this.adjustEarOffset(true)},destroy(){BX.unbind(window,"resize",BX.proxy(this.toggle,this));document.removeEventListener("scroll",this.debounceScrollHandler,BX.Grid.Utils.listenerParams({passive:true}));this.container.removeEventListener("scroll",BX.proxy(this.toggle,this),BX.Grid.Utils.listenerParams({passive:true}));BX.removeCustomEvent(window,"Grid::updated",BX.proxy(this.toggle,this));BX.removeCustomEvent(window,"Grid::headerUpdated",BX.proxy(this._onHeaderUpdated,this));BX.removeCustomEvent(window,"Grid::columnResize",BX.proxy(this.toggle,this));BX.unbind(this.getEarLeft(),this.scrollStartEventName,BX.proxy(this._onMouseoverLeft,this));BX.unbind(this.getEarRight(),this.scrollStartEventName,BX.proxy(this._onMouseoverRight,this));BX.unbind(this.getEarLeft(),this.scrollEndEventName,BX.proxy(this.stopScroll,this));BX.unbind(this.getEarRight(),this.scrollEndEventName,BX.proxy(this.stopScroll,this));this.hideLeftEar();this.hideRightEar();this.stopScroll()},_onHeaderUpdated(){if(this.parent.getParam("ALLOW_PIN_HEADER")){this.fixedTable=this.parent.getPinHeader().getFixedTable()}},_onMouseoverLeft(t){this.parent.isTouch()&&t.preventDefault();this.startScrollByDirection("left")},_onMouseoverRight(t){this.parent.isTouch()&&t.preventDefault();this.startScrollByDirection("right")},stopScroll(){clearTimeout(this.scrollTimer);clearInterval(this.scrollInterval)},startScrollByDirection(t){const e=this.container;let i=e.scrollLeft;const s=this;const n=8;const o=1e3/60/2;this.scrollTimer=setTimeout((()=>{s.scrollInterval=setInterval((()=>{e.scrollLeft=t=="right"?i+=n:i-=n}),o)}),100)},getEarLeft(){if(!this.earLeft){this.earLeft=BX.Grid.Utils.getByClass(this.parent.getContainer(),this.parent.settings.get("classEarLeft"),true)}return this.earLeft},getEarRight(){if(!this.earRight){this.earRight=BX.Grid.Utils.getByClass(this.parent.getContainer(),this.parent.settings.get("classEarRight"),true)}return this.earRight},getShadowLeft(){return this.parent.getContainer().querySelector(".main-grid-fade-shadow-left")},getShadowRight(){return this.parent.getContainer().querySelector(".main-grid-fade-shadow-right")},adjustEarOffset(t){if(t){this.windowHeight=BX.height(window);this.tbodyPos=BX.pos(this.table.tBodies[0]);this.headerPos=BX.pos(this.table.tHead)}let e=window.scrollY;if(this.parent.isIE()){e=document.documentElement.scrollTop}let i=e+this.windowHeight-this.tbodyPos.top;let s=e-this.tbodyPos.top;if(i>this.tbodyPos.bottom-this.tbodyPos.top){i=this.tbodyPos.bottom-this.tbodyPos.top}if(s<this.headerPos.height){s=this.headerPos.height}else{i-=s;i+=this.headerPos.height}BX.Grid.Utils.requestAnimationFrame(BX.proxy((function(){if(s!==this.lastPosTop){const t=`translate3d(0px, ${s}px, 0)`;this.getEarLeft().style.transform=t;this.getEarRight().style.transform=t}if(i!==this.lastBottomPos){this.getEarLeft().style.height=`${i}px`;this.getEarRight().style.height=`${i}px`}this.lastPosTop=s;this.lastBottomPos=i}),this))},_onWindowScroll(){this.adjustEarOffset()},hasScroll(){return this.table.offsetWidth>this.container.clientWidth},hasScrollLeft(){return this.container.scrollLeft>0},hasScrollRight(){return this.table.offsetWidth>Math.round(this.container.scrollLeft+this.container.clientWidth)},showLeftEar(){BX.addClass(this.container.parentNode,this.parent.settings.get("classFadeContainerLeft"));BX.addClass(this.getEarLeft(),this.parent.settings.get("classShow"))},hideLeftEar(){BX.removeClass(this.container.parentNode,this.parent.settings.get("classFadeContainerLeft"));BX.removeClass(this.getEarLeft(),this.parent.settings.get("classShow"))},showRightEar(){BX.addClass(this.container.parentNode,this.parent.settings.get("classFadeContainerRight"));BX.addClass(this.getEarRight(),this.parent.settings.get("classShow"))},hideRightEar(){BX.removeClass(this.container.parentNode,this.parent.settings.get("classFadeContainerRight"));BX.removeClass(this.getEarRight(),this.parent.settings.get("classShow"))},adjustFixedTablePosition(){const t=this.container.scrollLeft;BX.Grid.Utils.requestAnimationFrame(BX.delegate((function(){this.fixedTable.style.marginLeft=`${-t}px`}),this))},toggle(){this.adjustEarOffset(true);this.fixedTable&&this.adjustFixedTablePosition();if(this.hasScroll()){this.hasScrollLeft()?this.showLeftEar():this.hideLeftEar();this.hasScrollRight()?this.showRightEar():this.hideRightEar()}else{this.hideLeftEar();this.hideRightEar()}}}})();(function(){BX.namespace("BX.Main");BX.Main.grid=function(t,e,i,s,n,o,a,r,l){BX.Event.EventEmitter.makeObservable(this,"BX.Main.Grid");this.settings=null;this.containerId="";this.container=null;this.wrapper=null;this.fadeContainer=null;this.scrollContainer=null;this.pagination=null;this.moreButton=null;this.table=null;this.rows=null;this.history=false;this.userOptions=null;this.checkAll=null;this.sortable=null;this.updater=null;this.data=null;this.fader=null;this.editor=null;this.isEditMode=null;this.pinHeader=null;this.pinPanel=null;this.arParams=null;this.resize=null;this.editableRows=[];this.init(t,e,i,s,n,o,a,r,l)};BX.Main.grid.prototype={init(t,e,i,s,n,o,a,r,l){this.baseUrl=window.location.pathname+window.location.search;this.container=BX(t);if(!BX.type.isNotEmptyString(t)){throw"BX.Main.grid.init: parameter containerId is empty"}if(BX.type.isPlainObject(e)){this.arParams=e}else{throw new TypeError("BX.Main.grid.init: arParams isn't object")}this.settings=new BX.Grid.Settings;this.containerId=t;this.userOptions=new BX.Grid.UserOptions(this,i,s,n);this.gridSettings=new BX.Grid.SettingsWindow.Manager(this);this.messages=new BX.Grid.Message(this,l);this.cache=new BX.Cache.MemoryCache;if(this.getParam("ALLOW_PIN_HEADER")){this.pinHeader=new BX.Grid.PinHeader(this);BX.addCustomEvent(window,"Grid::headerUpdated",BX.proxy(this.bindOnCheckAll,this))}this.bindOnCheckAll();if(this.getParam("ALLOW_HORIZONTAL_SCROLL")){this.fader=new BX.Grid.Fader(this)}this.pageSize=new BX.Grid.Pagesize(this);this.editor=new BX.Grid.InlineEditor(this,r);if(this.getParam("SHOW_ACTION_PANEL")){this.actionPanel=new BX.Grid.ActionPanel(this,o,a);this.pinPanel=new BX.Grid.PinPanel(this)}this.isEditMode=false;if(!BX.type.isDomNode(this.getContainer())){throw`BX.Main.grid.init: Failed to find container with id ${this.getContainerId()}`}if(!BX.type.isDomNode(this.getTable())){throw"BX.Main.grid.init: Failed to find table"}this.bindOnRowEvents();if(this.getParam("ALLOW_COLUMNS_RESIZE")){this.resize=new BX.Grid.Resize(this)}this.bindOnMoreButtonEvents();this.bindOnClickPaginationLinks();this.bindOnClickHeader();if(this.getParam("ALLOW_ROWS_SORT")){this.initRowsDragAndDrop()}if(this.getParam("ALLOW_COLUMNS_SORT")){this.initColsDragAndDrop()}this.getRows().initSelected();this.adjustEmptyTable(this.getRows().getSourceBodyChild());BX.onCustomEvent(this.getContainer(),"Grid::ready",[this]);BX.addCustomEvent(window,"Grid::unselectRow",BX.proxy(this._onUnselectRows,this));BX.addCustomEvent(window,"Grid::unselectRows",BX.proxy(this._onUnselectRows,this));BX.addCustomEvent(window,"Grid::allRowsUnselected",BX.proxy(this._onUnselectRows,this));BX.addCustomEvent(window,"Grid::updated",BX.proxy(this._onGridUpdated,this));window.frames[this.getFrameId()].onresize=BX.throttle(this._onFrameResize,20,this);if(this.getParam("ALLOW_STICKED_COLUMNS")){this.initStickedColumns()}},destroy(){BX.removeCustomEvent(window,"Grid::unselectRow",BX.proxy(this._onUnselectRows,this));BX.removeCustomEvent(window,"Grid::unselectRows",BX.proxy(this._onUnselectRows,this));BX.removeCustomEvent(window,"Grid::allRowsUnselected",BX.proxy(this._onUnselectRows,this));BX.removeCustomEvent(window,"Grid::headerPinned",BX.proxy(this.bindOnCheckAll,this));BX.removeCustomEvent(window,"Grid::updated",BX.proxy(this._onGridUpdated,this));this.getPinHeader()&&this.getPinHeader().destroy();this.getFader()&&this.getFader().destroy();this.getResize()&&this.getResize().destroy();this.getColsSortable()&&this.getColsSortable().destroy();this.getRowsSortable()&&this.getRowsSortable().destroy();this.getSettingsWindow()&&this.getSettingsWindow().destroy();this.getActionsPanel()&&this.getActionsPanel().destroy();this.getPinPanel()&&this.getPinPanel().destroy();this.getPageSize()&&this.getPageSize().destroy()},_onFrameResize(){BX.onCustomEvent(window,"Grid::resize",[this])},_onGridUpdated(){this.initStickedColumns();this.adjustFadePosition(this.getFadeOffset())},getFrameId(){return`main-grid-tmp-frame-${this.getContainerId()}`},enableActionsPanel(){if(this.getParam("SHOW_ACTION_PANEL")){const t=this.getActionsPanel().getPanel();if(BX.type.isDomNode(t)){BX.removeClass(t,this.settings.get("classDisable"))}}},disableActionsPanel(){if(this.getParam("SHOW_ACTION_PANEL")){const t=this.getActionsPanel().getPanel();if(BX.type.isDomNode(t)){BX.addClass(t,this.settings.get("classDisable"))}}},getSettingsWindow(){return this.gridSettings},_onUnselectRows(){const t=this.getActionsPanel();let e;if(t instanceof BX.Grid.ActionPanel){e=t.getForAllCheckbox();if(BX.type.isDomNode(e)){e.checked=null;this.disableForAllCounter()}}this.adjustCheckAllCheckboxes()},isIE(){if(!BX.type.isBoolean(this.ie)){this.ie=BX.hasClass(document.documentElement,"bx-ie")}return this.ie},isTouch(){if(!BX.type.isBoolean(this.touch)){this.touch=BX.hasClass(document.documentElement,"bx-touch")}return this.touch},getParam(t,e){if(e===undefined){e=null}return this.arParams.hasOwnProperty(t)?this.arParams[t]:e},getCounterTotal(){return BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classCounterTotal"),true)},getActionKey(){return`action_button_${this.getId()}`},getPinHeader(){if(this.getParam("ALLOW_PIN_HEADER")){this.pinHeader=this.pinHeader||new BX.Grid.PinHeader(this)}return this.pinHeader},getResize(){if(!(this.resize instanceof BX.Grid.Resize)&&this.getParam("ALLOW_COLUMNS_RESIZE")){this.resize=new BX.Grid.Resize(this)}return this.resize},confirmForAll(t){let e;const i=this;if(BX.type.isDomNode(t)){e=BX.Grid.Utils.getByTag(t,"input",true)}if(e.checked){this.getActionsPanel().confirmDialog({CONFIRM:true,CONFIRM_MESSAGE:this.arParams.CONFIRM_FOR_ALL_MESSAGE},(()=>{if(BX.type.isDomNode(e)){e.checked=true}i.selectAllCheckAllCheckboxes();i.getRows().selectAll();i.enableForAllCounter();i.updateCounterDisplayed();i.updateCounterSelected();i.enableActionsPanel();i.adjustCheckAllCheckboxes();i.lastRowAction=null;BX.onCustomEvent(window,"Grid::allRowsSelected",[])}),(()=>{if(BX.type.isDomNode(e)){e.checked=null;i.disableForAllCounter();i.updateCounterDisplayed();i.updateCounterSelected();i.adjustCheckAllCheckboxes();i.lastRowAction=null}}))}else{this.unselectAllCheckAllCheckboxes();this.adjustCheckAllCheckboxes();this.getRows().unselectAll();this.disableForAllCounter();this.updateCounterDisplayed();this.updateCounterSelected();this.disableActionsPanel();BX.onCustomEvent(window,"Grid::allRowsUnselected",[])}},disableCheckAllCheckboxes(){this.getCheckAllCheckboxes().forEach((t=>{t.getNode().disabled=true}))},enableCheckAllCheckboxes(){this.getCheckAllCheckboxes().forEach((t=>{t.getNode().disabled=false}))},indeterminateCheckAllCheckboxes(){this.getCheckAllCheckboxes().forEach((t=>{t.getNode().indeterminate=true}))},determinateCheckAllCheckboxes(){this.getCheckAllCheckboxes().forEach((t=>{t.getNode().indeterminate=false}))},editSelected(){this.disableCheckAllCheckboxes();this.getRows().editSelected();if(this.getParam("ALLOW_PIN_HEADER")){this.getPinHeader()._onGridUpdate()}BX.onCustomEvent(window,"Grid::resize",[this])},editSelectedSave(){const t={FIELDS:this.getRows().getEditSelectedValues(true)};if(this.getParam("ALLOW_VALIDATE")){this.tableFade();t[this.getActionKey()]="validate";this.getData().request("","POST",t,"validate",(e=>{e=JSON.parse(e);if(e.messages.length>0){this.arParams.MESSAGES=e.messages;this.messages.show();const t=this.getActionsPanel().getButtons().find((t=>t.id==="grid_edit_button_control"));this.tableUnfade();BX.fireEvent(t,"click")}else{t[this.getActionKey()]="edit";this.reloadTable("POST",t)}}));return}if(this.getParam("HANDLE_RESPONSE_ERRORS")){t[this.getActionKey()]="edit";const e=this;this.tableFade();this.getData().request("","POST",t,"",(function(t){try{t=JSON.parse(t)}catch{t={messages:[]}}if(t.messages.length>0){e.arParams.MESSAGES=t.messages;e.messages.show();const i=e.getActionsPanel().getButtons().find((t=>t.id==="grid_edit_button_control"));e.tableUnfade();BX.fireEvent(i,"click");return}e.getRows().reset();const i=this.getBodyRows();e.getUpdater().updateContainer(this.getContainer());e.getUpdater().updateHeadRows(this.getHeadRows());e.getUpdater().updateBodyRows(i);e.getUpdater().updateFootRows(this.getFootRows());e.getUpdater().updatePagination(this.getPagination());e.getUpdater().updateMoreButton(this.getMoreButton());e.getUpdater().updateCounterTotal(this.getCounterTotal());e.adjustEmptyTable(i);e.bindOnRowEvents();e.bindOnMoreButtonEvents();e.bindOnClickPaginationLinks();e.bindOnClickHeader();e.bindOnCheckAll();e.updateCounterDisplayed();e.updateCounterSelected();e.disableActionsPanel();e.disableForAllCounter();if(e.getParam("SHOW_ACTION_PANEL")){e.getUpdater().updateGroupActions(this.getActionPanel())}if(e.getParam("ALLOW_COLUMNS_SORT")){e.colsSortable.reinit()}if(e.getParam("ALLOW_ROWS_SORT")){e.rowsSortable.reinit()}e.tableUnfade();BX.onCustomEvent(window,"Grid::updated",[e])}),(t=>{const i=e.getActionsPanel().getButtons().find((t=>t.id==="grid_edit_button_control"));e.tableUnfade();BX.fireEvent(i,"click")}));return}t[this.getActionKey()]="edit";this.reloadTable("POST",t)},getForAllKey(){return`action_all_rows_${this.getId()}`},updateRow(t,e,i,s){const n=this.getRows().getById(t);if(n instanceof BX.Grid.Row){n.update(e,i,s)}},removeRow(t,e,i,s){const n=this.getRows().getById(t);if(n instanceof BX.Grid.Row){n.remove(e,i,s)}},addRow(t,e,i){const s=this.getUserOptions().getAction("GRID_ADD_ROW");const n={action:s,data:t};const o=this;this.tableFade();this.getData().request(e,"POST",n,null,(function(){const e=this.getBodyRows();o.getUpdater().updateBodyRows(e);o.tableUnfade();o.getRows().reset();o.getUpdater().updateFootRows(this.getFootRows());o.getUpdater().updatePagination(this.getPagination());o.getUpdater().updateMoreButton(this.getMoreButton());o.getUpdater().updateCounterTotal(this.getCounterTotal());o.bindOnRowEvents();o.adjustEmptyTable(e);o.bindOnMoreButtonEvents();o.bindOnClickPaginationLinks();o.updateCounterDisplayed();o.updateCounterSelected();if(o.getParam("ALLOW_COLUMNS_SORT")){o.colsSortable.reinit()}if(o.getParam("ALLOW_ROWS_SORT")){o.rowsSortable.reinit()}BX.onCustomEvent(window,"Grid::rowAdded",[{data:t,grid:o,response:this}]);BX.onCustomEvent(window,"Grid::updated",[o]);if(BX.type.isFunction(i)){i({data:t,grid:o,response:this})}}))},editSelectedCancel(){this.getRows().editSelectedCancel();this.enableCheckAllCheckboxes();if(this.getParam("ALLOW_PIN_HEADER")){this.getPinHeader()._onGridUpdate()}},removeSelected(){const t={ID:this.getRows().getSelectedIds()};const e=this.getActionsPanel().getValues();t[this.getActionKey()]="delete";t[this.getForAllKey()]=this.getForAllKey()in e?e[this.getForAllKey()]:"N";this.reloadTable("POST",t)},sendSelected(){const t=this.getActionsPanel().getValues();const e=this.getRows().getSelectedIds();const i={rows:e,controls:t};this.reloadTable("POST",i)},sendRowAction(t,e){if(!BX.type.isPlainObject(e)){e={}}e[this.getActionKey()]=t;this.reloadTable("POST",e)},getActionsPanel(){return this.actionPanel},getPinPanel(){return this.pinPanel},getApplyButton(){return BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classPanelButton"),true)},getEditor(){return this.editor},reload(t){this.reloadTable("GET",{},null,t)},getPanels(){return BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classPanels"),true)},getEmptyBlock(){return BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classEmptyBlock"),true)},adjustEmptyTable(t){function e(t){const e=t.currentTarget;BX.style(s,"transform",`translate3d(${BX.scrollLeft(e)}px, 0px, 0`)}const i=t.filter((t=>BX.Dom.attr(t,"data-id")!=="template_0"&&!BX.Dom.hasClass(t,"main-grid-hide")));if(!BX.hasClass(document.documentElement,"bx-ie")&&i.length===1&&BX.hasClass(i[0],this.settings.get("classEmptyRows"))){const t=BX.pos(this.getContainer());const i=BX.scrollTop(window)+BX.height(window);const n=t.bottom-i;const o=BX.height(this.getPanels());var s=this.getEmptyBlock();const a=BX.width(this.getContainer());if(a){BX.width(s,a)}BX.style(s,"transform",`translate3d(${BX.scrollLeft(this.getScrollContainer())}px, 0px, 0`);BX.unbind(this.getScrollContainer(),"scroll",e);BX.bind(this.getScrollContainer(),"scroll",e);let r=this.getContainer();let l=0;while(r=r.parentElement){const t=parseFloat(BX.style(r,"padding-top"));const e=parseFloat(BX.style(r,"padding-bottom"));if(!isNaN(t)){l+=t}if(!isNaN(e)){l+=e}}if(n>0){BX.style(this.getTable(),"min-height",`${t.height-n-o-l}px`)}else if(Math.abs(n)===i){BX.style(this.getTable(),"min-height","")}else{BX.style(this.getTable(),"min-height",`${t.height+Math.abs(n)-o-l}px`)}BX.Dom.addClass(this.getContainer(),"main-grid-empty-stub");if(this.getCurrentPage()<=1){this.hidePanels()}}else{BX.style(this.getTable(),"min-height","");BX.style(this.getTable(),"height","1px");requestAnimationFrame((()=>{BX.style(this.getTable(),"height","1px")}));this.showPanels();BX.Dom.removeClass(this.getContainer(),"main-grid-empty-stub")}},reloadTable(t,e,i,s){let n;if(!BX.type.isNotEmptyString(t)){t="GET"}if(!BX.type.isPlainObject(e)){e={}}const o=this;this.tableFade();if(!BX.type.isString(s)){s=""}this.getData().request(s,t,e,"",(function(){BX.onCustomEvent(window,"BX.Main.Grid:onBeforeReload",[o]);o.getRows().reset();n=this.getBodyRows();o.getUpdater().updateContainer(this.getContainer());o.getUpdater().updateHeadRows(this.getHeadRows());o.getUpdater().updateBodyRows(n);o.getUpdater().updateFootRows(this.getFootRows());o.getUpdater().updatePagination(this.getPagination());o.getUpdater().updateMoreButton(this.getMoreButton());o.getUpdater().updateCounterTotal(this.getCounterTotal());o.adjustEmptyTable(n);o.bindOnRowEvents();o.bindOnMoreButtonEvents();o.bindOnClickPaginationLinks();o.bindOnClickHeader();o.bindOnCheckAll();o.updateCounterDisplayed();o.updateCounterSelected();o.disableActionsPanel();o.disableForAllCounter();if(o.getParam("SHOW_ACTION_PANEL")){o.getUpdater().updateGroupActions(this.getActionPanel())}if(o.getParam("ALLOW_COLUMNS_SORT")){o.colsSortable.reinit()}if(o.getParam("ALLOW_ROWS_SORT")){o.rowsSortable.reinit()}o.tableUnfade();BX.onCustomEvent(window,"Grid::updated",[o]);if(BX.type.isFunction(i)){i()}if(o.getParam("ALLOW_PIN_HEADER")){o.getPinHeader()._onGridUpdate()}}))},getGroupEditButton(){return BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classGroupEditButton"),true)},getGroupDeleteButton(){return BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classGroupDeleteButton"),true)},enableGroupActions(){const t=this.getGroupEditButton();const e=this.getGroupDeleteButton();if(BX.type.isDomNode(t)){BX.removeClass(t,this.settings.get("classGroupActionsDisabled"))}if(BX.type.isDomNode(e)){BX.removeClass(e,this.settings.get("classGroupActionsDisabled"))}},disableGroupActions(){const t=this.getGroupEditButton();const e=this.getGroupDeleteButton();if(BX.type.isDomNode(t)){BX.addClass(t,this.settings.get("classGroupActionsDisabled"))}if(BX.type.isDomNode(e)){BX.addClass(e,this.settings.get("classGroupActionsDisabled"))}},closeActionsMenu(){const t=this.getRows().getRows();for(let e=0,i=t.length;e<i;e++){t[e].closeActionsMenu()}},getPageSize(){return this.pageSize},getFader(){return this.fader},getData(){this.data=this.data||new BX.Grid.Data(this);return this.data},getUpdater(){this.updater=this.updater||new BX.Grid.Updater(this);return this.updater},isSortableHeader(t){return BX.hasClass(t,this.settings.get("classHeaderSortable"))},isNoSortableHeader(t){return BX.hasClass(t,this.settings.get("classHeaderNoSortable"))},bindOnClickHeader(){const t=this;let e;BX.bind(this.getContainer(),"click",(i=>{e=BX.findParent(i.target,{tag:"th"},true,false);if(e&&t.isSortableHeader(e)&&!t.preventSortableClick){const s=new BX.Event.BaseEvent({data:{grid:t,columnName:BX.data(e,"name")}});BX.Event.EventEmitter.emit("BX.Main.grid:onBeforeSort",s);if(s.isDefaultPrevented()){return}t.preventSortableClick=false;t._clickOnSortableHeader(e,i)}}))},enableEditMode(){this.isEditMode=true},disableEditMode(){this.isEditMode=false},isEditMode(){return this.isEditMode},getColumnHeaderCellByName(t){return BX.Grid.Utils.getBySelector(this.getContainer(),`#${this.getId()} th[data-name="${t}"]`,true)},getColumnByName(t){const e=this.getParam("DEFAULT_COLUMNS");return Boolean(t)&&t in e?e[t]:null},adjustIndex(t){const e=this.getAllRows()[0].querySelectorAll(".main-grid-fixed-column").length;return t+e},getColumnByIndex(t){t=this.adjustIndex(t);return this.getAllRows().reduce(((e,i)=>{if(!i.classList.contains("main-grid-row-custom")&&!i.classList.contains("main-grid-row-empty")){e.push(i.children[t])}return e}),[])},getAllRows(){const t=[].slice.call(this.getTable().rows);const e=this.getContainer().parentElement.querySelector(".main-grid-fixed-bar table");if(e){t.push(e.rows[0])}return t},hasEmptyRow(){return this.getAllRows().some((t=>BX.hasClass(t,"main-grid-row-empty")))},initStickedColumns(){if(this.hasEmptyRow()){return}[].slice.call(this.getAllRows()[0].children).forEach((function(t,e){if(t.classList.contains("main-grid-sticked-column")){this.stickyColumnByIndex(e)}}),this);if(this.getParam("ALLOW_COLUMNS_RESIZE")){this.getResize().destroy();this.getResize().init(this)}},setStickedColumns(t){if(BX.type.isArray(t)){const e=this.getUserOptions();const i=[{action:e.getAction("GRID_SET_STICKED_COLUMNS"),stickedColumns:t}];e.batch(i,(()=>{this.reloadTable()}))}},getStickedColumns(){const t=[].slice.call(this.getHead().querySelectorAll(".main-grid-cell-head"));return t.reduce(((t,e)=>{if(BX.hasClass(e,"main-grid-fixed-column")&&!BX.hasClass(e,"main-grid-cell-checkbox")&&!BX.hasClass(e,"main-grid-cell-action")){t.push(e.dataset.name)}return t}),[])},stickyColumnByIndex(t){const e=this.getColumnByIndex(t);const i=e[0].clientWidth;const s=e.map((t=>BX.height(t)));e.forEach((function(t,e){t.style.minWidth=`${i}px`;t.style.width=`${i}px`;t.style.minHeight=`${s[e]}px`;const n=BX.clone(t);const o=this.getLastStickyCellFromRowByIndex(e);if(o){let e=parseInt(BX.style(o,"left"));let i=parseInt(BX.style(o,"width"));e=isNaN(e)?0:e;i=isNaN(i)?0:i;t.style.left=`${e+i}px`}t.classList.add("main-grid-fixed-column");t.classList.add("main-grid-cell-static");n.classList.add("main-grid-cell-static");if(this.getColsSortable()){this.getColsSortable().unregister(t);this.getColsSortable().unregister(n)}BX.insertAfter(n,t)}),this);this.adjustFadePosition(this.getFadeOffset())},adjustFixedColumnsPosition(){const t=this.getAllRows()[0].querySelectorAll(".main-grid-fixed-column").length;const e=[].slice.call(this.getAllRows()[0].children).reduce(((t,e,i,s)=>{let n;let o;if(s[i-1]&&s[i-1].classList.contains("main-grid-fixed-column")){n=parseInt(BX.style(s[i-1],"left"));o=parseInt(BX.style(s[i-1],"width"));n=isNaN(n)?0:n;o=isNaN(o)?0:o;t.push({index:i+1,left:n+o})}return t}),[]);e.forEach((function(i){const s=this.getColumnByIndex(i.index-t);s.forEach((t=>{if(i.index!==e[e.length-1].index){t.style.left=`${i.left}px`}}))}),this);this.getAllRows().forEach((t=>{const e=BX.height(t);const i=[].slice.call(t.children);i.forEach((t=>{t.style.minHeight=`${e}px`}))}))},getLastStickyCellFromRowByIndex(t){return[].slice.call(this.getAllRows()[t].children).reduceRight(((t,e)=>{if(!t&&e.classList.contains("main-grid-fixed-column")){t=e}return t}),null)},getFadeOffset(){let t=0;const e=this.getLastStickyCellFromRowByIndex(0);if(e){let i=parseInt(BX.style(e,"left"));let s=e.offsetWidth;i=isNaN(i)?0:i;s=isNaN(s)?0:s;t=i+s}return t},adjustFadePosition(t){const e=this.getFader().getEarLeft();const i=this.getFader().getShadowLeft();e.style.left=`${t}px`;i.style.left=`${t}px`},sortByColumn(t){let e=null;let i=null;if(BX.type.isPlainObject(t)){i=t;i.sort_url=this.prepareSortUrl(t)}else{e=this.getColumnHeaderCellByName(t);i=this.getColumnByName(t)}if(i&&(Boolean(e)&&!BX.hasClass(e,this.settings.get("classLoad"))||!e)){Boolean(e)&&BX.addClass(e,this.settings.get("classLoad"));this.tableFade();const t=this;this.getUserOptions().setSort(i.sort_by,i.sort_order,(()=>{t.getData().request(i.sort_url,null,null,"sort",(function(){t.rows=null;t.getUpdater().updateHeadRows(this.getHeadRows());t.getUpdater().updateBodyRows(this.getBodyRows());t.getUpdater().updatePagination(this.getPagination());t.getUpdater().updateMoreButton(this.getMoreButton());t.bindOnRowEvents();t.bindOnMoreButtonEvents();t.bindOnClickPaginationLinks();t.bindOnCheckAll();t.updateCounterDisplayed();t.updateCounterSelected();t.disableActionsPanel();t.disableForAllCounter();if(t.getParam("SHOW_ACTION_PANEL")){t.getActionsPanel().resetForAllCheckbox()}if(t.getParam("ALLOW_ROWS_SORT")){t.rowsSortable.reinit()}if(t.getParam("ALLOW_COLUMNS_SORT")){t.colsSortable.reinit()}BX.onCustomEvent(window,"BX.Main.grid:sort",[i,t]);BX.onCustomEvent(window,"Grid::updated",[t]);t.tableUnfade()}))}))}},prepareSortUrl(t){let e=window.location.toString();if("sort_by"in t){e=BX.util.add_url_param(e,{by:t.sort_by})}if("sort_order"in t){e=BX.util.add_url_param(e,{order:t.sort_order})}return e},_clickOnSortableHeader(t,e){e.preventDefault();this.sortByColumn(BX.data(t,"name"))},getObserver(){return BX.Grid.observer},initRowsDragAndDrop(){this.rowsSortable=new BX.Grid.RowsSortable(this)},initColsDragAndDrop(){this.colsSortable=new BX.Grid.ColsSortable(this)},getRowsSortable(){return this.rowsSortable},getColsSortable(){return this.colsSortable},getUserOptionsHandlerUrl(){return this.userOptionsHandlerUrl||""},getUserOptions(){return this.userOptions},getCheckAllCheckboxes(){const t=BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classCheckAllCheckboxes"));return t.map((t=>new BX.Grid.Element(t)))},selectAllCheckAllCheckboxes(){this.getCheckAllCheckboxes().forEach((t=>{t.getNode().checked=true}))},unselectAllCheckAllCheckboxes(){this.getCheckAllCheckboxes().forEach((t=>{t.getNode().checked=false}))},adjustCheckAllCheckboxes(){const t=this.getRows().getBodyChild().filter((t=>t.isShown()&&Boolean(t.getCheckbox()))).length;const e=this.getRows().getSelected().filter((t=>t.isShown())).length;if(t>0&&e>0&&t===e){this.selectAllCheckAllCheckboxes()}else{this.unselectAllCheckAllCheckboxes()}if(e>0&&e<t){this.indeterminateCheckAllCheckboxes()}else{this.determinateCheckAllCheckboxes()}},bindOnCheckAll(){const t=this;this.getCheckAllCheckboxes().forEach((e=>{e.getObserver().add(e.getNode(),"change",t._clickOnCheckAll,t)}))},_clickOnCheckAll(t){t.preventDefault();this.toggleSelectionAll();this.determinateCheckAllCheckboxes()},toggleSelectionAll(){if(!this.getRows().isAllSelected()&&(this.lastRowAction==="select"||!this.lastRowAction)){this.getRows().selectAll();this.selectAllCheckAllCheckboxes();this.enableActionsPanel();BX.onCustomEvent(window,"Grid::allRowsSelected",[this])}else{this.getRows().unselectAll();this.unselectAllCheckAllCheckboxes();this.disableActionsPanel();BX.onCustomEvent(window,"Grid::allRowsUnselected",[this])}delete this.lastRowAction;this.updateCounterSelected()},bindOnClickPaginationLinks(){const t=this;this.getPagination().getLinks().forEach((e=>{e.getObserver().add(e.getNode(),"click",t._clickOnPaginationLink,t)}))},bindOnMoreButtonEvents(){const t=this;this.getMoreButton().getObserver().add(this.getMoreButton().getNode(),"click",t._clickOnMoreButton,t)},bindOnRowEvents(){const t=this.getObserver();const e=this.getParam("SHOW_ROW_CHECKBOXES");const i=this.getParam("ENABLE_COLLAPSIBLE_ROWS");this.getRows().getBodyChild().forEach((function(s){e&&t.add(s.getNode(),"click",this._onClickOnRow,this);s.getDefaultAction()&&t.add(s.getNode(),"dblclick",this._onRowDblclick,this);s.getActionsButton()&&t.add(s.getActionsButton(),"click",this._clickOnRowActionsButton,this);i&&s.getCollapseButton()&&t.add(s.getCollapseButton(),"click",this._onCollapseButtonClick,this)}),this)},_onCollapseButtonClick(t){t.preventDefault();t.stopPropagation();const e=this.getRows().get(t.currentTarget);e.toggleChildRows();if(e.isCustom()){this.getUserOptions().setCollapsedGroups(this.getRows().getIdsCollapsedGroups())}else{this.getUserOptions().setExpandedRows(this.getRows().getIdsExpandedRows())}BX.fireEvent(document.body,"click")},_clickOnRowActionsButton(t){const e=this.getRows().get(t.target);t.preventDefault();if(e.actionsMenuIsShown()){e.closeActionsMenu()}else{e.showActionsMenu()}},_onRowDblclick(event){event.preventDefault();const row=this.getRows().get(event.target);let defaultJs="";if(!row.isEdit()){clearTimeout(this.clickTimer);this.clickPrevent=true;try{defaultJs=row.getDefaultAction();eval(defaultJs)}catch(t){console.warn(t)}}},_onClickOnRow(t){const e=50;const i=window.getSelection();if(t.target.nodeName==="LABEL"){t.preventDefault()}if(t.shiftKey||i.toString().length===0){if(t.shiftKey){i.removeAllRanges()}this.clickTimer=setTimeout(BX.delegate((function(){if(!this.clickPrevent){s.apply(this,[t])}this.clickPrevent=false}),this),e)}function s(t){let e;let i;let s;let n;let o;let a;let r=true;if(t.target.nodeName!=="A"&&t.target.nodeName!=="INPUT"){i=this.getRows().get(t.target);if(i){a=i.getContentContainer(t.target);if(BX.type.isDomNode(a)&&t.target.nodeName!=="TD"&&t.target!==a){r=BX.data(a,"prevent-default")==="true"}if(r){if(i.getCheckbox()){e=[];this.currentIndex=0;this.getRows().getRows().forEach((function(t,e){if(t===i){this.currentIndex=e}}),this);this.lastIndex=this.lastIndex||this.currentIndex;if(t.shiftKey){n=Math.min(this.currentIndex,this.lastIndex);o=Math.max(this.currentIndex,this.lastIndex);while(n<=o){e.push(this.getRows().getRows()[n]);n++}s=e.some((t=>!t.isSelected()));if(s){e.forEach((t=>{t.select()}));this.lastRowAction="select";BX.onCustomEvent(window,"Grid::selectRows",[e,this])}else{e.forEach((t=>{t.unselect()}));this.lastRowAction="unselect";BX.onCustomEvent(window,"Grid::unselectRows",[e,this])}}else if(i.isSelected()){this.lastRowAction="unselect";i.unselect();BX.onCustomEvent(window,"Grid::unselectRow",[i,this])}else{this.lastRowAction="select";i.select();BX.onCustomEvent(window,"Grid::selectRow",[i,this])}this.updateCounterSelected();this.lastIndex=this.currentIndex}this.adjustRows();this.adjustCheckAllCheckboxes()}}}}},adjustRows(){if(this.getRows().isSelected()){BX.onCustomEvent(window,"Grid::thereSelectedRows",[this]);this.enableActionsPanel()}else{BX.onCustomEvent(window,"Grid::noSelectedRows",[]);this.disableActionsPanel()}},getPagination(){return new BX.Grid.Pagination(this)},getState(){return window.history.state},tableFade(){BX.addClass(this.getTable(),this.settings.get("classTableFade"));this.getLoader().show();BX.onCustomEvent("Grid::disabled",[this])},tableUnfade(){BX.removeClass(this.getTable(),this.settings.get("classTableFade"));this.getLoader().hide();BX.onCustomEvent("Grid::enabled",[this])},_clickOnPaginationLink(t){t.preventDefault();const e=this;const i=this.getPagination().getLink(t.target);if(!i.isLoad()){this.getUserOptions().resetExpandedRows();i.load();this.tableFade();this.getData().request(i.getLink(),null,null,"pagination",(function(){e.rows=null;e.getUpdater().updateBodyRows(this.getBodyRows());e.getUpdater().updateHeadRows(this.getHeadRows());e.getUpdater().updateMoreButton(this.getMoreButton());e.getUpdater().updatePagination(this.getPagination());e.bindOnRowEvents();e.bindOnMoreButtonEvents();e.bindOnClickPaginationLinks();e.bindOnCheckAll();e.updateCounterDisplayed();e.updateCounterSelected();e.disableActionsPanel();e.disableForAllCounter();if(e.getParam("SHOW_ACTION_PANEL")){e.getActionsPanel().resetForAllCheckbox()}if(e.getParam("ALLOW_ROWS_SORT")){e.rowsSortable.reinit()}if(e.getParam("ALLOW_COLUMNS_SORT")){e.colsSortable.reinit()}i.unload();e.tableUnfade();BX.onCustomEvent(window,"Grid::updated",[e])}))}},_clickOnMoreButton(t){t.preventDefault();const e=this;const i=this.getMoreButton();i.load();this.getData().request(i.getLink(),null,null,"more",(function(){e.getUpdater().appendBodyRows(this.getBodyRows());e.getUpdater().updateMoreButton(this.getMoreButton());e.getUpdater().updatePagination(this.getPagination());e.getRows().reset();e.bindOnRowEvents();e.bindOnMoreButtonEvents();e.bindOnClickPaginationLinks();e.bindOnCheckAll();e.updateCounterDisplayed();e.updateCounterSelected();if(e.getParam("ALLOW_PIN_HEADER")){e.getPinHeader()._onGridUpdate()}if(e.getParam("ALLOW_ROWS_SORT")){e.rowsSortable.reinit()}if(e.getParam("ALLOW_COLUMNS_SORT")){e.colsSortable.reinit()}e.unselectAllCheckAllCheckboxes();BX.onCustomEvent(window,"Grid::updated",[e])}))},getAjaxId(){return BX.data(this.getContainer(),this.settings.get("ajaxIdDataProp"))},update(t,e){let i;let s;let n;let o;let a;let r;if(!BX.type.isNotEmptyString(t)){return}o=BX.Grid.Utils.getByTag(this.getTable(),"tbody",true);a=BX.Grid.Utils.getByTag(this.getTable(),"thead",true);r=BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classNavPanel"),true);t=BX.create("div",{html:t});s=BX.Grid.Utils.getByClass(t,this.settings.get("classHeadRow"));i=BX.Grid.Utils.getByClass(t,this.settings.get("classDataRows"));n=BX.Grid.Utils.getByClass(t,this.settings.get("classNavPanel"),true);if(e===this.settings.get("updateActionMore")){this.getRows().addRows(i);this.unselectAllCheckAllCheckboxes()}if(e===this.settings.get("updateActionPagination")){BX.cleanNode(o);this.getRows().addRows(i);this.unselectAllCheckAllCheckboxes()}if(e===this.settings.get("updateActionSort")){BX.cleanNode(a);BX.cleanNode(o);a.appendChild(s[0]);this.getRows().addRows(i)}r.innerHTML=n.innerHTML;this.bindOnRowEvents();this.bindOnMoreButtonEvents();this.bindOnClickPaginationLinks();this.bindOnClickHeader();this.bindOnCheckAll();this.updateCounterDisplayed();this.updateCounterSelected();this.sortable.reinit()},getCounterDisplayed(){return BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classCounterDisplayed"))},getCounterSelected(){return BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classCounterSelected"))},updateCounterDisplayed(){const t=this.getCounterDisplayed();let e;if(BX.type.isArray(t)){e=this.getRows();t.forEach((t=>{if(BX.type.isDomNode(t)){t.innerText=e.getCountDisplayed()}}))}},updateCounterSelected(){const t=this.getCounterSelected();let e;if(BX.type.isArray(t)){e=this.getRows();t.forEach((t=>{if(BX.type.isDomNode(t)){t.innerText=e.getCountSelected()}}))}},getContainerId(){return this.containerId},getId(){return this.containerId},getContainer(){return BX(this.getContainerId())},getCounter(){if(!this.counter){this.counter=BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classCounter"))}return this.counter},enableForAllCounter(){const t=this.getCounter();if(BX.type.isArray(t)){t.forEach((function(t){BX.addClass(t,this.settings.get("classForAllCounterEnabled"))}),this)}},disableForAllCounter(){const t=this.getCounter();if(BX.type.isArray(t)){t.forEach((function(t){BX.removeClass(t,this.settings.get("classForAllCounterEnabled"))}),this)}},getScrollContainer(){if(!this.scrollContainer){this.scrollContainer=BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classScrollContainer"),true)}return this.scrollContainer},getWrapper(){if(!this.wrapper){this.wrapper=BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classWrapper"),true)}return this.wrapper},getFadeContainer(){if(!this.fadeContainer){this.fadeContainer=BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classFadeContainer"),true)}return this.fadeContainer},getTable(){return BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classTable"),true)},getHeaders(){return BX.Grid.Utils.getBySelector(this.getWrapper(),`.main-grid-header[data-relative="${this.getContainerId()}"]`)},getHead(){return BX.Grid.Utils.getByTag(this.getContainer(),"thead",true)},getBody(){return BX.Grid.Utils.getByTag(this.getContainer(),"tbody",true)},getFoot(){return BX.Grid.Utils.getByTag(this.getContainer(),"tfoot",true)},getRows(){if(!(this.rows instanceof BX.Grid.Rows)){this.rows=new BX.Grid.Rows(this)}return this.rows},getMoreButton(){const t=BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classMoreButton"),true);return new BX.Grid.Element(t,this)},getLoader(){if(!(this.loader instanceof BX.Grid.Loader)){this.loader=new BX.Grid.Loader(this)}return this.loader},blockSorting(){const t=BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classHeadCell"));t.forEach((function(t){if(this.isSortableHeader(t)){BX.removeClass(t,this.settings.get("classHeaderSortable"));BX.addClass(t,this.settings.get("classHeaderNoSortable"))}}),this)},unblockSorting(){const t=BX.Grid.Utils.getByClass(this.getContainer(),this.settings.get("classHeadCell"));t.forEach((function(t){if(this.isNoSortableHeader(t)&&t.dataset.sortBy){BX.addClass(t,this.settings.get("classHeaderSortable"));BX.removeClass(t,this.settings.get("classHeaderNoSortable"))}}),this)},confirmDialog(t,e,i){let s;let n;let o;let a;if("CONFIRM"in t&&t.CONFIRM){t.CONFIRM_MESSAGE=t.CONFIRM_MESSAGE||this.arParams.CONFIRM_MESSAGE;t.CONFIRM_APPLY_BUTTON=t.CONFIRM_APPLY_BUTTON||this.arParams.CONFIRM_APPLY;t.CONFIRM_CANCEL_BUTTON=t.CONFIRM_CANCEL_BUTTON||this.arParams.CONFIRM_CANCEL;s=new BX.PopupWindow(`${this.getContainerId()}-confirm-dialog`,null,{content:`<div class="main-grid-confirm-content">${t.CONFIRM_MESSAGE}</div>`,titleBar:"CONFIRM_TITLE"in t?t.CONFIRM_TITLE:"",autoHide:false,zIndex:9999,overlay:.4,offsetTop:-100,closeIcon:false,closeByEsc:true,events:{onClose(){BX.unbind(window,"keydown",r);s.destroy()}},buttons:[new BX.PopupWindowButton({text:t.CONFIRM_APPLY_BUTTON,id:`${this.getContainerId()}-confirm-dialog-apply-button`,events:{click(){BX.type.isFunction(e)?e():null;this.popupWindow.close();this.popupWindow.destroy();BX.onCustomEvent(window,"Grid::confirmDialogApply",[this]);BX.unbind(window,"keydown",r)}}}),new BX.PopupWindowButtonLink({text:t.CONFIRM_CANCEL_BUTTON,id:`${this.getContainerId()}-confirm-dialog-cancel-button`,events:{click(){BX.type.isFunction(i)?i():null;this.popupWindow.close();this.popupWindow.destroy();BX.onCustomEvent(window,"Grid::confirmDialogCancel",[this]);BX.unbind(window,"keydown",r)}}})]});if(!s.isShown()){s.show();n=s.popupContainer;BX.removeClass(n,this.settings.get("classCloseAnimation"));BX.addClass(n,this.settings.get("classShowAnimation"));o=BX(`${this.getContainerId()}-confirm-dialog-apply-button`);a=BX(`${this.getContainerId()}-confirm-dialog-cancel-button`);BX.bind(window,"keydown",r)}}else{BX.type.isFunction(e)?e():null}function r(t){if(t.code==="Enter"){t.preventDefault();t.stopPropagation();BX.fireEvent(o,"click")}if(t.code==="Escape"){t.preventDefault();t.stopPropagation();BX.fireEvent(a,"click")}}},getCurrentPage(){const t=parseInt(this.arParams.CURRENT_PAGE);if(BX.Type.isNumber(t)){return t}return 0},getEmptyStub(){return this.getTable().querySelector(".main-grid-row-empty")},showEmptyStub(){const t=this.getEmptyStub();if(t){BX.Dom.attr(t,"hidden",null);BX.Dom.addClass(this.getContainer(),"main-grid-empty-stub");if(this.getCurrentPage()<=1){this.hidePanels()}}},hideEmptyStub(){const t=this.getEmptyStub();if(t){BX.Dom.attr(t,"hidden",true);BX.Dom.removeClass(this.getContainer(),"main-grid-empty-stub");BX.Dom.style(this.getTable(),"min-height",null);this.showPanels()}},showPanels(){BX.Dom.show(this.getPanels());if(this.getPanels().offsetHeight>0){BX.Dom.removeClass(this.getContainer(),"main-grid-empty-footer")}},hidePanels(){BX.Dom.hide(this.getPanels());BX.Dom.addClass(this.getContainer(),"main-grid-empty-footer")},getTemplateRow(){const t=BX.Runtime.clone(this.getRows().getBodyChild(true).find((t=>t.getId()==="template_0")));const e=BX.Runtime.clone(t.getNode());BX.Dom.prepend(e,this.getBody());const i=e.querySelector('[type="checkbox"]');if(i){BX.Dom.attr(i,"disabled",null);BX.Dom.attr(i,"data-disabled",null)}return new BX.Grid.Row(this,e)},getRowEditorValue(t){this.rows=null;return this.getRows().getSelected(t).map((t=>t.getEditorValue()))},getRowEditorActionPanel(){if(!this.rowEditorActionPanel){this.rowEditorActionPanel=BX.Dom.create({tag:"div",props:{className:"main-ui-grid-row-editor-actions-panel"},children:[BX.Dom.create({tag:"span",props:{className:"ui-btn ui-btn-success"},text:this.arParams.SAVE_BUTTON_LABEL,events:{click:this.saveRows.bind(this)}}),BX.Dom.create({tag:"span",props:{className:"ui-btn ui-btn-link"},text:this.arParams.CANCEL_BUTTON_LABEL,events:{click:this.hideRowsEditor.bind(this)}})]})}return this.rowEditorActionPanel},showRowEditorActionsPanel(){const t=this.getRowEditorActionPanel();BX.Dom.append(t,this.actionPanel.getPanel())},hideRowEditorActionsPanel(){BX.Dom.remove(this.getRowEditorActionPanel())},prependRowEditor(){return this.addRowEditor("prepend")},appendRowEditor(){return this.addRowEditor("append")},addRowEditor(t="prepend"){BX.Dom.style(this.getTable(),"min-height",null);const e=this.getTemplateRow();this.editableRows.push(e);if(t==="prepend"){e.prependTo(this.getBody())}else{e.appendTo(this.getBody())}e.show();e.select();e.edit();this.getRows().reset();if(this.getParam("ALLOW_ROWS_SORT")){this.rowsSortable.reinit()}if(this.getParam("ALLOW_COLUMNS_SORT")){this.colsSortable.reinit()}this.hideEmptyStub();return e},hideRowsEditor(){this.editableRows.forEach((t=>{BX.Dom.remove(t.getNode())}));this.editableRows=[]},saveRows(){const t=this.getRowEditorValue(true);this.emitAsync("onAddRowsAsync",{rows:t}).then((t=>{t.forEach(((t,e)=>{const i=this.editableRows[e];if(i){i.editCancel();i.unselect();i.makeCountable();i.setId(t.id);i.setActions(t.actions);i.setCellsContent(t.columns)}}));this.bindOnRowEvents();this.updateCounterDisplayed();this.updateCounterSelected();this.editableRows=[]}))},getRealtime(){return this.cache.remember("realtime",(()=>new BX.Grid.Realtime({grid:this})))}}})();(function(){BX.namespace("BX.Grid");BX.Grid.Updater=function(t){this.parent=t};BX.Grid.Updater.prototype.getParent=function(){return this.parent};BX.Grid.Updater.prototype.updateHeadRows=function(t){let e;if(BX.type.isArray(t)&&t.length>0){e=this.getParent().getHeaders();e.forEach((e=>{e=BX.cleanNode(e);t.forEach((t=>{if(BX.type.isDomNode(t)){e.appendChild(BX.clone(t))}}))}))}};BX.Grid.Updater.prototype.appendHeadRows=function(t){let e;if(BX.type.isArray(t)&&t.length>0){e=this.getParent().getHeaders();e.forEach((e=>{t.forEach((t=>{if(BX.type.isDomNode(t)){e.appendChild(BX.clone(t))}}))}))}};BX.Grid.Updater.prototype.prependHeadRows=function(t){let e;if(BX.type.isArray(t)&&t.length>0){e=this.getParent().getHeaders();e.forEach((e=>{e=BX.cleanNode(e);t.forEach((t=>{if(BX.type.isDomNode(t)){e.prepend(BX.clone(t))}}))}))}};BX.Grid.Updater.prototype.updateBodyRowById=function(t,e){if((BX.type.isNumber(t)||BX.type.isNotEmptyString(t))&&BX.type.isDomNode(e)){const i=this.getParent().getRows().getById(t);if(i){const t=i.getNode();BX.insertAfter(e,t);BX.remove(t)}}};BX.Grid.Updater.prototype.updateBodyRows=function(t){if(BX.type.isArray(t)){const e=this.getParent().getBody();e.innerHTML="";t.forEach((t=>{Boolean(t)&&e.appendChild(t)}))}};BX.Grid.Updater.prototype.appendBodyRows=function(t){let e;if(BX.type.isArray(t)){e=this.getParent().getBody();t.forEach((t=>{if(BX.type.isDomNode(t)){e.appendChild(t)}}))}};BX.Grid.Updater.prototype.prependBodyRows=function(t){let e;if(BX.type.isArray(t)){e=this.getParent().getBody();t.forEach((t=>{if(BX.type.isDomNode(t)){BX.prepend(e,t)}}))}};BX.Grid.Updater.prototype.updateFootRows=function(t){let e;if(BX.type.isArray(t)){e=BX.cleanNode(this.getParent().getFoot());t.forEach((t=>{if(BX.type.isDomNode(t)){e.appendChild(t)}}))}};BX.Grid.Updater.prototype.updateCounterTotal=function(t){let e;if(BX.type.isDomNode(t)){e=BX.cleanNode(this.getParent().getCounterTotal());e.appendChild(t)}};BX.Grid.Updater.prototype.updatePagination=function(t){const e=this.getParent().getPagination().getContainer();if(e){e.innerHTML="";if(BX.type.isDomNode(t)){e.appendChild(t)}}};BX.Grid.Updater.prototype.updateMoreButton=function(t){if(BX.type.isDomNode(t)){const e=BX.Grid.Utils.closestParent(this.getParent().getMoreButton().getNode());e.innerHTML="";e.appendChild(t)}};BX.Grid.Updater.prototype.updateGroupActions=function(t){const e=this.parent.getActionsPanel();if(Boolean(e)&&BX.type.isDomNode(t)){const i=e.getPanel();if(BX.type.isDomNode(i)){i.innerHTML="";const e=BX.firstChild(t);if(BX.type.isDomNode(e)){i.appendChild(e)}}}};BX.Grid.Updater.prototype.updateContainer=function(t){if(BX.Type.isDomNode(t)){this.getParent().getContainer().className=t.className}}})();(function(){BX.Reflection.namespace("BX.Grid");BX.Grid.ImageField=function(t,e){this.parent=t;this.options=e;this.cache=new BX.Cache.MemoryCache};BX.Grid.ImageField.prototype={getPreview(){return this.cache.remember("preview",(()=>BX.create("img",{props:{className:"main-grid-image-editor-preview"},attrs:{src:this.options.VALUE}})))},getFileInput(){return this.cache.remember("fileInput",(()=>BX.create("input",{props:{className:"main-grid-image-editor-file-input"},attrs:{type:"file",accept:"image/*",name:this.options.NAME},events:{change:function(t){const e=new FileReader;e.onload=function(t){this.getPreview().src=t.currentTarget.result}.bind(this);e.readAsDataURL(t.target.files[0]);BX.Dom.remove(this.getFakeField());BX.Dom.append(this.getFileInput(),this.getLayout());BX.Dom.removeClass(this.getRemoveButton(),"ui-btn-disabled");BX.Dom.style(this.getPreview(),null)}.bind(this)}})))},getUploadButton(){return this.cache.remember("uploadButton",(()=>BX.create("button",{props:{className:"ui-btn ui-btn-xs"},text:this.parent.getParam("MAIN_UI_GRID_IMAGE_EDITOR_BUTTON_EDIT"),events:{click:function(t){t.preventDefault();this.getFileInput().click()}.bind(this)}})))},getRemoveButton(){return this.cache.remember("removeButton",(()=>BX.create("button",{props:{className:"ui-btn ui-btn-xs ui-btn-danger"},events:{click:function(t){t.preventDefault();BX.Dom.append(this.getFakeField(),this.getLayout());BX.Dom.remove(this.getFileInput());BX.Dom.addClass(this.getRemoveButton(),"ui-btn-disabled");BX.Dom.style(this.getPreview(),{opacity:.4})}.bind(this)},text:this.parent.getParam("MAIN_UI_GRID_IMAGE_EDITOR_BUTTON_REMOVE")})))},getFakeField(){return this.cache.remember("deleted",(()=>BX.create("input",{props:{className:"main-grid-image-editor-fake-file-input"},attrs:{type:"hidden",name:this.options.NAME,value:"null"}})))},getLayout(){return this.cache.remember("layout",(()=>BX.create("div",{props:{className:"main-grid-image-editor main-grid-editor"},attrs:{name:this.options.NAME},children:[BX.create("div",{props:{className:"main-grid-image-editor-left"},children:[this.getPreview()]}),BX.create("div",{props:{className:"main-grid-image-editor-right"},children:[this.getUploadButton(),this.getRemoveButton()]}),this.getFileInput()]})))}}})();let _=t=>t,_t,_t2;(function(){BX.namespace("BX.Grid");BX.Grid.InlineEditor=function(t,e){this.parent=null;this.types=null;this.isDropdownChangeEventSubscribed=false;this.init(t,e)};BX.Grid.InlineEditor.prototype={init(parent,types){this.parent=parent;try{this.types=eval(types)}catch{this.types=null}},createContainer(){return BX.create("div",{props:{className:this.parent.settings.get("classEditorContainer")}})},createTextarea(t,e){return BX.create("textarea",{props:{className:[this.parent.settings.get("classEditor"),this.parent.settings.get("classEditorTextarea")].join(" ")},attrs:{name:t.NAME,style:`height:${e}px`},html:t.VALUE||""})},createInput(t){let e=this.parent.settings.get("classEditorText");const i={value:t.VALUE!==undefined&&t.VALUE!==null?BX.util.htmlspecialcharsback(t.VALUE):"",name:t.NAME!==undefined&&t.NAME!==null?t.NAME:""};if(t.TYPE===this.types.CHECKBOX){e=this.parent.settings.get("classEditorCheckbox");i.type="checkbox";i.checked=i.value=="Y"}if(t.TYPE===this.types.DATE){e=[e,this.parent.settings.get("classEditorDate")].join(" ")}if(t.TYPE===this.types.NUMBER){e=[e,this.parent.settings.get("classEditorNumber")].join(" ");i.type="number"}if(t.TYPE===this.types.RANGE){e=[e,this.parent.settings.get("classEditorRange")].join(" ");i.type="range";if(BX.type.isPlainObject(t.DATA)){i.min=t.DATA.MIN||"0";i.max=t.DATA.MAX||99999;i.step=t.DATA.STEP||""}}if(BX.type.isNotEmptyString(t.PLACEHOLDER)){i.placeholder=BX.util.htmlspecialchars(t.PLACEHOLDER)}if(t.DISABLED){i.disabled=true}e=[this.parent.settings.get("classEditor"),e].join(" ");return BX.create("input",{props:{className:e,id:`${t.NAME}_control`},attrs:i})},createCustom(t){let e=this.parent.settings.get("classEditorCustom");e=[this.parent.settings.get("classEditor"),e].join(" ");return BX.create("div",{props:{className:e},attrs:{"data-name":t.NAME},html:t.VALUE||""})},createMoney(t){const e=t.VALUE;const i=[];const s=e.PRICE||{};s.PLACEHOLDER=t.PLACEHOLDER||"";i.push(this.createMoneyPrice(s));if(BX.type.isArray(t.CURRENCY_LIST)&&t.CURRENCY_LIST.length>0){const s=e.CURRENCY||{};s.DATA={ITEMS:t.CURRENCY_LIST};s.HTML_ENTITY=t.HTML_ENTITY||false;i.push(this.createMoneyCurrency(s))}if(BX.type.isNotEmptyObject(e.HIDDEN)){for(const t in e.HIDDEN){if(e.HIDDEN.hasOwnProperty(t)&&BX.type.isNotEmptyString(t)){const s=this.createInput({NAME:t,VALUE:e.HIDDEN[t],TYPE:this.types.TEXT});s.type="hidden";i.push(s)}}}let n=this.parent.settings.get("classEditorMoney");n=[this.parent.settings.get("classEditor"),n].join(" ");const o=e.ATTRIBUTES||{};o["data-name"]=t.NAME;return BX.create("div",{props:{className:n},attrs:o,children:i})},createMoneyPrice(t){t.TYPE=this.types.NUMBER;const e=this.createInput(t);e.classList.add("main-grid-editor-money-price");main_core.Event.bind(e,"change",(t=>{const e=t.target.parentNode;const i=e.querySelector(".main-grid-editor-money-currency");const s={field:e,values:{price:t.target.value||"",currency:i.dataset.value||""}};main_core_events.EventEmitter.emit("Grid.MoneyField::change",s)}));return e},createMoneyCurrency(t){const e=this.createDropdown(t);e.dataset.menuOffsetLeft=15;e.dataset.menuMaxHeight=200;e.classList.add("main-grid-editor-money-currency");if(t.DISABLED===true){e.classList.remove("main-dropdown");e.dataset.disabled=true}if(!this.isDropdownChangeEventSubscribed){this.isDropdownChangeEventSubscribed=true;main_core_events.EventEmitter.subscribe("Dropdown::change",(t=>{const[e]=t.getData();if(!BX.type.isNotEmptyString(e)){return}const i=BX.Main.dropdownManager.getById(e);if(i.dropdown&&i.dropdown.classList.contains("main-grid-editor-money-currency")){const t=i.dropdown.parentNode;const e=t.querySelector(".main-grid-editor-money-price");const s={field:t,values:{price:e.value||"",currency:i.dropdown.dataset.value||""}};main_core_events.EventEmitter.emit("Grid.MoneyField::change",s)}}))}return e},createOutput(t){return BX.create("output",{props:{className:this.parent.settings.get("classEditorOutput")||""},attrs:{for:`${t.NAME}_control`},text:t.VALUE||""})},getDropdownValueItemByValue(t,e){const i=String(e);const s=t.filter((t=>String(t.VALUE)===i));return s.length>0?s[0]:t[0]},createDropdown(t){const e=this.getDropdownValueItemByValue(t.DATA.ITEMS,t.VALUE);const i="HTML_ENTITY"in t&&t.HTML_ENTITY===true;return BX.create("div",{props:{className:[this.parent.settings.get("classEditor"),"main-dropdown main-grid-editor-dropdown"].join(" "),id:`${t.NAME}_control`},attrs:{name:t.NAME,tabindex:"0","data-items":JSON.stringify(t.DATA.ITEMS),"data-value":e.VALUE,"data-html-entity":t.HTML_ENTITY},children:[BX.create("span",{props:{className:"main-dropdown-inner"},html:i?e.NAME:null,text:i?null:e.NAME})]})},createMultiselect(t){const e=[];const i=(()=>{if(BX.Type.isArrayFilled(t.VALUE)){return t.VALUE.map((i=>{var s;const n=this.getDropdownValueItemByValue(t.DATA.ITEMS,i);e.push(n);const o=(s=n.HTML)!=null?s:BX.util.htmlspecialchars(n.NAME);const a=BX.Tag.render(_t||(_t=_`
							<span class="main-ui-square">
								<span class="main-ui-square-item">${0}</span>
								<span class="main-ui-item-icon main-ui-square-delete"></span>
							</span>
						`),o);BX.Dom.attr(a,"data-item",n);return a}))}return[]})();const s=BX.Tag.render(_t2||(_t2=_`
				<div
					class="main-grid-editor main-ui-control main-ui-multi-select"
					name="${0}"
					id="${0}"
				>
					<span class="main-ui-square-container">${0}</span>
					<span class="main-ui-hide main-ui-control-value-delete">
						<span class="main-ui-control-value-delete-item"></span>
					</span>
					<span class="main-ui-square-search">
						<input type="text" class="main-ui-square-search-item">
					</span>
				</div>
			`),BX.Text.encode(t.NAME),`${BX.Text.encode(t.NAME)}_control`,i);BX.Dom.attr(s,{"data-params":{isMulti:true},"data-items":t.DATA.ITEMS,"data-value":e});return s},validateEditObject(t){return BX.type.isPlainObject(t)&&"TYPE"in t&&"NAME"in t&&"VALUE"in t&&(!("items"in t)||BX.type.isArray(t.items)&&t.items.length)},initCalendar(t){BX.calendar({node:t.target,field:t.target})},bindOnRangeChange(t,e){function i(t,e){BX.html(e,t.value);const i=parseFloat(t.value);const s=parseFloat(t.getAttribute("max"));const n=parseFloat(t.getAttribute("min"));const o=16;const a=s-n;const r=(i-n)/a*100;const l=Math.round(o*r/100)-o/2;e.style.left=`${r}%`;e.style.marginLeft=`${-l}px`}setTimeout((()=>{i(t,e)}),0);BX.bind(t,"input",(()=>{i(t,e)}))},createImageEditor(t){return new BX.Grid.ImageField(this.parent,t).getLayout()},getEditor(t,e){let i;let s;const n=this.createContainer();if(this.validateEditObject(t)){t.VALUE=t.VALUE===null?"":t.VALUE;switch(t.TYPE){case this.types.TEXT:{i=this.createInput(t);BX.bind(i,"click",(t=>{t.stopPropagation()}));BX.bind(i,"keydown",BX.delegate(this._onControlKeydown,this));break}case this.types.DATE:{i=this.createInput(t);BX.bind(i,"click",this.initCalendar);BX.bind(i,"click",(t=>{t.stopPropagation()}));BX.bind(i,"keydown",BX.delegate(this._onControlKeydown,this));break}case this.types.NUMBER:{i=this.createInput(t);BX.bind(i,"click",(t=>{t.stopPropagation()}));BX.bind(i,"keydown",BX.delegate(this._onControlKeydown,this));break}case this.types.RANGE:{i=this.createInput(t);s=this.createOutput(t);this.bindOnRangeChange(i,s);BX.bind(i,"click",(t=>{t.stopPropagation()}));BX.bind(i,"keydown",BX.delegate(this._onControlKeydown,this));break}case this.types.CHECKBOX:{i=this.createInput(t);BX.bind(i,"click",(t=>{t.stopPropagation()}));BX.bind(i,"keydown",BX.delegate(this._onControlKeydown,this));break}case this.types.TEXTAREA:{i=this.createTextarea(t,e);BX.bind(i,"click",(t=>{t.stopPropagation()}));BX.bind(i,"keydown",BX.delegate(this._onControlKeydown,this));break}case this.types.DROPDOWN:{i=this.createDropdown(t);break}case this.types.MULTISELECT:{i=this.createMultiselect(t);break}case this.types.IMAGE:{i=this.createImageEditor(t);break}case this.types.MONEY:{i=this.createMoney(t);BX.bind(i,"keydown",BX.delegate(this._onControlKeydown,this));break}case this.types.CUSTOM:{i=this.createCustom(t);requestAnimationFrame((()=>{const e=t.HTML||t.VALUE||null;if(e){const t=BX.processHTML(e);t.SCRIPT.forEach((t=>{if(t.isInternal&&t.JS){BX.evalGlobal(t.JS)}}))}}));BX.bind(i,"click",(t=>{t.stopPropagation()}));BX.bind(i,"keydown",BX.delegate(this._onControlKeydown,this));break}default:{break}}}if(BX.type.isDomNode(s)){n.appendChild(s)}if(BX.type.isDomNode(i)){n.appendChild(i)}return n},_onControlKeydown(t){if(t.code==="Enter"){t.preventDefault();const e=BX.Grid.Utils.getBySelector(this.parent.getContainer(),"#grid_save_button > button",true);if(e){BX.fireEvent(e,"click")}}}}})();class Label{}Label.Color={DEFAULT:"ui-label-default",DANGER:"ui-label-danger",SUCCESS:"ui-label-success",WARNING:"ui-label-warning",PRIMARY:"ui-label-primary",SECONDARY:"ui-label-secondary",LIGHTGREEN:"ui-label-lightgreen",LIGHTBLUE:"ui-label-lightblue",LIGHT:"ui-label-light"};Label.RemoveButtonType={INSIDE:"main-grid-tag-remove-inside",OUTSIDE:"main-grid-tag-remove-outside"};const namespace$3=main_core.Reflection.namespace("BX.Grid");namespace$3.Label=Label;(function(){BX.namespace("BX.Grid");BX.Grid.Loader=function(t){this.parent=null;this.container=null;this.windowHeight=null;this.tbodyPos=null;this.headerPos=null;this.lastPosTop=null;this.lastBottomPos=null;this.table=null;this.loader=null;this.adjustLoaderOffset=this.adjustLoaderOffset.bind(this);this.init(t)};BX.Grid.Loader.prototype={init(t){this.parent=t;this.table=this.parent.getTable();this.loader=new BX.Loader({target:this.getContainer()})},adjustLoaderOffset(){this.windowHeight=BX.height(window);this.tbodyPos=BX.pos(this.table.tBodies[0]);this.headerPos=BX.pos(this.table.tHead);let t=window.scrollY;if(this.parent.isIE()){t=document.documentElement.scrollTop}let e=t+this.windowHeight-this.tbodyPos.top;let i=t-this.tbodyPos.top;if(e>this.tbodyPos.bottom-this.tbodyPos.top){e=this.tbodyPos.bottom-this.tbodyPos.top}if(i<this.headerPos.height){i=this.headerPos.height}else{e-=i;e+=this.headerPos.height}requestAnimationFrame((()=>{if(i!==this.lastPosTop){this.getContainer().style.transform=`translate3d(0px, ${i}px, 0)`}if(e!==this.lastBottomPos){this.getContainer().style.height=`${e}px`}this.lastPosTop=i;this.lastBottomPos=e}))},getContainer(){if(!this.container){this.container=BX.Grid.Utils.getByClass(this.parent.getContainer(),this.parent.settings.get("classLoader"),true)}return this.container},show(){if(!this.loader.isShown()){this.adjustLoaderOffset();this.getContainer().style.display="block";this.getContainer().style.opacity="1";this.getContainer().style.visibility="visible";const t=this.parent.getRows().getCountDisplayed();if(t>0&&t<=2){this.loader.setOptions({size:60});this.loader.show()}else{this.loader.setOptions({size:110});this.loader.show()}}},hide(){if(this.loader.isShown()){this.adjustLoaderOffset();this.loader.hide().then((()=>{this.getContainer().style.display="none"}))}}}})();(function(){BX.namespace("BX.Main");if(BX.Main.gridManager){return}BX.Main.gridManager={data:[],push(t,e){if(BX.type.isNotEmptyString(t)&&e){const i={id:t,instance:e,old:null};if(this.getById(t)===null){this.data.push(i)}else{this.data[0]=i}}},getById(t){const e=this.data.filter((e=>e.id===t||e.id.replace("main_grid_","")===t));return e.length===1?e[0]:null},getInstanceById(t){const e=this.getById(t);return BX.type.isPlainObject(e)?e.instance:null},reload(t,e){const i=this.getInstanceById(t);if(i){i.reload(e)}},getDataIndex(t){let e=null;this.data.forEach(((i,s)=>{if(i.id===t){e=s}}));return e},destroy(t){if(BX.type.isNotEmptyString(t)){const e=this.getInstanceById(t);if(e instanceof BX.Main.grid){e.destroy();const i=this.getDataIndex(t);if(i!==null){delete this.data[i]}}}}}})();(function(){BX.namespace("BX.Grid");BX.Grid.Message=function(t,e){this.parent=null;this.types=null;this.messages=null;this.popup=null;this.init(t,e)};BX.Grid.Message.prototype={init(t,e){this.parent=t;this.types=e;this.show();BX.addCustomEvent("BX.Main.grid:paramsUpdated",BX.proxy(this.onUpdated,this))},onUpdated(){this.show()},getData(){return this.parent.arParams.MESSAGES},isNeedShow(){return this.getData().length>0},show(){if(this.isNeedShow()){this.getPopup().setContent(this.getContent());this.getPopup().show()}},getContent(){const t=this.getData();let e=null;if(BX.type.isArray(t)&&t.length>0){const i={block:"main-grid-messages",content:[]};t.forEach((t=>{const e={block:"main-grid-message",mix:`main-grid-message-${t.TYPE.toLowerCase()}`,content:[]};if(BX.type.isNotEmptyString(t.TITLE)){e.content.push({block:"main-grid-message-title",content:BX.create("div",{html:t.TITLE}).innerText})}if(BX.type.isNotEmptyString(t.TEXT)){e.content.push({block:"main-grid-message-text",content:BX.create("div",{html:t.TEXT}).innerText})}i.content.push(e)}));e=BX.decl(i)}return e},getPopup(){if(this.popup===null){this.popup=new BX.PopupWindow(this.getPopupId(),null,{autoHide:true,overlay:.3,minWidth:400,maxWidth:800,contentNoPaddings:true,closeByEsc:true,buttons:[new BX.PopupWindowButton({text:this.parent.getParam("CLOSE"),className:"webform-small-button-blue webform-small-button",events:{click(){this.popupWindow.close()}}})]})}return this.popup},getPopupId(){return`${this.parent.getContainerId()}-main-grid-message`}}})();(function(){BX.namespace("BX.Grid");BX.Grid.observer={handlers:[],add(t,e,i,s){BX.bind(t,e,s?BX.proxy(i,s):i)}}})();(function(){BX.namespace("BX.Grid");BX.Grid.Pagesize=function(t){this.parent=null;this.init(t)};BX.Grid.Pagesize.prototype={init(t){this.parent=t;BX.addCustomEvent("Dropdown::change",BX.proxy(this.onChange,this))},destroy(){BX.removeCustomEvent("Dropdown::change",BX.proxy(this.onChange,this))},onChange(t,e,i,s,n){const o=this;if(t===`${this.parent.getContainerId()}_${this.parent.settings.get("pageSizeId")}`&&n>=0){this.parent.tableFade();this.parent.getUserOptions().setPageSize(n,(()=>{o.parent.reloadTable();BX.onCustomEvent(o.parent.getContainer(),"Grid::pageSizeChanged",[o.parent])}))}}}})();(function(){BX.namespace("BX.Grid");BX.Grid.Pagination=function(t){this.parent=null;this.container=null;this.links=null;this.init(t)};BX.Grid.Pagination.prototype={init(t){this.parent=t},getParent(){return this.parent},getContainer(){if(!this.container){this.container=BX.Grid.Utils.getByClass(this.getParent().getContainer(),this.getParent().settings.get("classPagination"),true)}return this.container},getLinks(){const t=this;const e=BX.Grid.Utils.getByTag(this.getContainer(),"a");this.links=[];if(e){this.links=e.map((e=>new BX.Grid.Element(e,t.getParent())))}return this.links},getLink(t){let e=null;let i;if(BX.type.isDomNode(t)){i=this.getLinks().filter((e=>t===e.getNode()));if(i.length>0){e=i[0]}}return e}}})();(function(){BX.namespace("BX.Grid");BX.Grid.PinHeader=function(t){this.parent=null;this.table=null;this.header=null;this.container=null;this.parentNodeResizeObserver=null;const e=this.getAdminPanel();if(e){this.mo=new MutationObserver(this.onAdminPanelMutation.bind(this));this.mo.observe(document.documentElement,{attributes:true})}this.init(t)};BX.Grid.PinHeader.prototype={init(t){this.parent=t;this.rect=BX.pos(this.parent.getHead());this.gridRect=BX.pos(this.parent.getTable());let e=BX.Grid.Utils.getBySelector(document,"#workarea-content",true);if(!e){e=this.parent.getContainer().parentNode;e=e?e.parentNode:e}if(e){this.parentNodeResizeObserver=new BX.ResizeObserver(BX.proxy(this.refreshRect,this));this.parentNodeResizeObserver.observe(e)}this.create(true);document.addEventListener("scroll",BX.proxy(this._onScroll,this),BX.Grid.Utils.listenerParams({passive:true}));document.addEventListener("resize",BX.proxy(this._onResize,this),BX.Grid.Utils.listenerParams({passive:true}));BX.addCustomEvent("Grid::updated",BX.proxy(this._onGridUpdate,this));BX.addCustomEvent("Grid::resize",BX.proxy(this._onGridUpdate,this));BX.bind(window,"resize",BX.proxy(this._onGridUpdate,this))},refreshRect(){this.gridRect=BX.pos(this.parent.getTable());this.rect=BX.pos(this.parent.getHead())},_onGridUpdate(){const t=this.isPinned();BX.remove(this.getContainer());this.create();t&&this.pin();this.table=null;this.refreshRect();this._onScroll();BX.onCustomEvent(window,"Grid::headerUpdated",[])},create(t){const e=BX.Grid.Utils.getByTag(this.parent.getHead(),"th");const i=BX.clone(this.parent.getHead());const s=BX.Grid.Utils.getByTag(i,"th");const n=function(){e.forEach(((t,i)=>{let n=BX.width(t);if(i>0){n-=parseInt(BX.style(t,"border-left-width"));n-=parseInt(BX.style(t,"border-right-width"))}s[i].firstElementChild&&(s[i].firstElementChild.style.width=`${n}px`);if(e.length-1>i){s[i].style.width=`${n}px`}}))};t?setTimeout(n,0):n();this.container=BX.decl({block:"main-grid-fixed-bar",mix:"main-grid-fixed-top",attrs:{style:`width: ${BX.width(this.parent.getContainer())}px`},content:{block:"main-grid-table",tag:"table",content:i}});this.container.hidden=true;this.parent.getWrapper().appendChild(this.container)},getContainer(){return this.container},getFixedTable(){return this.table||(this.table=BX.Grid.Utils.getByTag(this.getContainer(),"table",true))},getAdminPanel(){if(!this.adminPanel){this.adminPanel=document.querySelector(".adm-header")}return this.adminPanel},isAdminPanelPinned(){return BX.hasClass(document.documentElement,"adm-header-fixed")},getPinOffset(){const t=this.getAdminPanel();if(t&&this.isAdminPanelPinned()){return BX.Text.toNumber(BX.style(t,"height"))}return 0},pin(){const t=this.getContainer();if(t){t.hidden=false}BX.onCustomEvent(window,"Grid::headerPinned",[])},unpin(){const t=this.getContainer();if(t){t.hidden=true}BX.onCustomEvent(window,"Grid::headerUnpinned",[])},stopPin(){BX.Grid.Utils.styleForEach([this.getContainer()],{position:"absolute",top:`${this.gridRect.bottom-this.rect.height-this.gridRect.top}px`,"box-shadow":"none"})},startPin(){BX.Grid.Utils.styleForEach([this.getContainer()],{position:"fixed",top:`${this.getPinOffset()}px`,"box-shadow":""})},isPinned(){return!this.getContainer().hidden},_onScroll(){let t=0;if(this.scrollRect){t=this.scrollRect.scrollTop}else if(document.scrollingElement){this.scrollRect=document.scrollingElement}else if(document.documentElement.scrollTop>0){this.scrollRect=document.documentElement}else if(document.body.scrollTop>0){this.scrollRect=document.body}if(this.gridRect.bottom>t+this.rect.height){this.startPin();const e=this.getPinOffset();if(this.rect.top-e<=t){!this.isPinned()&&this.pin()}else{this.isPinned()&&this.unpin()}}else{this.stopPin()}},onAdminPanelMutation(){this._onScroll()},_onResize(){this.rect=BX.pos(this.parent.getHead())}}})();(function(){BX.namespace("BX.Grid");BX.Grid.PinPanel=function(t){this.parent=null;this.panel=null;this.isSelected=null;this.offset=null;this.animationDuration=null;this.pinned=false;this.init(t)};BX.Grid.PinPanel.prototype={init(t){this.parent=t;this.offset=10;this.animationDuration=200;this.panel=this.getPanel();this.bindOnRowsEvents()},destroy(){this.unbindOnRowsEvents()},bindOnRowsEvents(){BX.addCustomEvent("Grid::thereSelectedRows",BX.proxy(this._onThereSelectedRows,this));BX.addCustomEvent("Grid::allRowsSelected",BX.proxy(this._onThereSelectedRows,this));BX.addCustomEvent("Grid::noSelectedRows",BX.proxy(this._onNoSelectedRows,this));BX.addCustomEvent("Grid::allRowsUnselected",BX.proxy(this._onNoSelectedRows,this));BX.addCustomEvent("Grid::updated",BX.proxy(this._onNoSelectedRows,this))},unbindOnRowsEvents(){BX.removeCustomEvent("Grid::thereSelectedRows",BX.proxy(this._onThereSelectedRows,this));BX.removeCustomEvent("Grid::allRowsSelected",BX.proxy(this._onThereSelectedRows,this));BX.removeCustomEvent("Grid::noSelectedRows",BX.proxy(this._onNoSelectedRows,this));BX.removeCustomEvent("Grid::allRowsUnselected",BX.proxy(this._onNoSelectedRows,this));BX.removeCustomEvent("Grid::updated",BX.proxy(this._onNoSelectedRows,this))},bindOnWindowEvents(){BX.bind(window,"resize",BX.proxy(this._onResize,this));document.addEventListener("scroll",BX.proxy(this._onScroll,this),BX.Grid.Utils.listenerParams({passive:true}))},unbindOnWindowEvents(){BX.unbind(window,"resize",BX.proxy(this._onResize,this));document.removeEventListener("scroll",BX.proxy(this._onScroll,this),BX.Grid.Utils.listenerParams({passive:true}))},getPanel(){this.panel=this.panel||this.parent.getActionsPanel().getPanel();return this.panel},getScrollBottom(){return BX.scrollTop(window)+this.getWindowHeight()},getPanelRect(){if(!BX.type.isPlainObject(this.panelRect)){this.panelRect=BX.pos(this.getPanel())}return this.panelRect},getPanelPrevBottom(){const t=BX.previousSibling(this.getPanel());return BX.pos(t).bottom+parseFloat(BX.style(t,"margin-bottom"))},getWindowHeight(){this.windowHeight=this.windowHeight||BX.height(window);return this.windowHeight},pinPanel(t){const e=this.getPanel();const i=BX.width(this.getPanel().parentNode);const s=BX.height(this.getPanel().parentNode);const n=BX.pos(this.parent.getBody());const o=this.getStartDiffPanelPosition();e.parentNode.style.setProperty("height",`${s}px`);e.style.setProperty("transform",`translateY(${o}px)`);e.classList.add("main-grid-fixed-bottom");e.style.setProperty("width",`${i}px`);e.style.removeProperty("position");e.style.removeProperty("top");requestAnimationFrame((()=>{if(t!==false){e.style.setProperty("transition","transform 200ms ease")}e.style.setProperty("transform","translateY(0)")}));if(this.isNeedPinAbsolute()&&!this.absolutePin){this.absolutePin=true;e.style.removeProperty("transition");e.style.setProperty("position","absolute");e.style.setProperty("top",`${n.top}px`)}if(!this.isNeedPinAbsolute()&&this.absolutePin){this.absolutePin=false}this.adjustPanelPosition();this.pinned=true},unpinPanel(t){const e=this.getPanel();const i=BX.pos(e);const s=BX.pos(e.parentNode);const n=Math.abs(i.bottom-s.bottom);if(t!==false){e.style.setProperty("transition","transform 200ms ease")}const o=n<i.height?`${n}px`:"100%";e.style.setProperty("transform",`translateY(${o})`);const a=function(e,i){if(t!==false){return setTimeout(e,i)}e()};a((()=>{e.parentNode.style.removeProperty("height");e.classList.remove("main-grid-fixed-bottom");e.style.removeProperty("transition");e.style.removeProperty("transform");e.style.removeProperty("width");e.style.removeProperty("position");e.style.removeProperty("top")}),t===false?0:200);this.pinned=false},isSelectedRows(){return this.isSelected},isNeedPinAbsolute(){return BX.pos(this.parent.getBody()).top+this.getPanelRect().height>=this.getScrollBottom()},isNeedPin(){return this.getScrollBottom()-this.getPanelRect().height<=this.getPanelPrevBottom()},adjustPanelPosition(){const t=window.pageXOffset;this.lastScrollX=this.lastScrollX===null?t:this.lastScrollX;BX.Grid.Utils.requestAnimationFrame(BX.proxy((function(){if(t!==this.lastScrollX){const e=this.getPanelRect();BX.style(this.getPanel(),"left",`${e.left-t}px`)}}),this));this.lastScrollX=t},pinController(t){if(this.getPanel()){if(!this.isPinned()&&this.isNeedPin()&&this.isSelectedRows()){return this.pinPanel(t)}if(this.isPinned()&&!this.isNeedPin()||!this.isSelectedRows()){this.unpinPanel(t)}}},getEndDiffPanelPosition(){const t=BX.pos(this.getPanel());const e=BX.pos(BX.previousSibling(this.getPanel()));const i=BX.scrollTop(window);const s=i+BX.height(window);let n=t.height+this.offset;const o=e.bottom+parseFloat(BX.style(this.getPanel(),"margin-top"));if(o<s&&o+t.height>s){n=Math.abs(s-(o+t.height))}return n},getStartDiffPanelPosition(){const t=BX.pos(this.getPanel());const e=BX.scrollTop(window);const i=e+BX.height(window);let s=t.height;if(t.bottom>i&&t.top<i){s=t.bottom-i}return s},isPinned(){return this.pinned},_onThereSelectedRows(){this.bindOnWindowEvents();this.isSelected=true;if(this.lastIsSelected){this.pinController()}else{this.lastIsSelected=true;this.pinController()}},_onNoSelectedRows(){this.unbindOnWindowEvents();this.isSelected=false;this.pinController();this.lastIsSelected=false},_onScroll(){this.pinController(false)},_onResize(){this.windowHeight=BX.height(window);this.panel=this.parent.getActionsPanel().getPanel();this.panelRect=this.getPanel().getBoundingClientRect();this.pinController(false)}}})();let _$1=t=>t,_t$1,_t2$1,_t3,_t4,_t5;class Realtime extends main_core_events.EventEmitter{constructor(t){super();this.setEventNamespace("BX.Grid.Realtime");this.options={...t}}addRow(t){const{grid:e}=this.options;const i=e.getTemplateRow();i.makeCountable();e.hideEmptyStub();if(main_core.Type.isNumber(t.id)||main_core.Type.isStringFilled(t.id)){i.setId(t.id)}else{throw new ReferenceError("id is not number or string")}if(main_core.Type.isArrayFilled(t.actions)){i.setActions(t.actions)}if(main_core.Type.isPlainObject(t.columns)){i.setCellsContent(t.columns)}if(main_core.Type.isPlainObject(t.cellActions)){i.setCellActions(t.cellActions)}if(main_core.Type.isPlainObject(t.counters)){const e=Object.entries(t.counters).reduce(((t,[e,i])=>{if(main_core.Type.isPlainObject(i)){var s;t[e]={...i,isDouble:(s=i.isDouble)!=null?s:false,secondaryColor:i.secondaryColor,animation:main_core.Text.toBoolean(i.animation)}}return t}),{});i.setCounters(e)}if(t.prepend===true){i.prependTo(e.getBody())}else if(t.append===true){i.appendTo(e.getBody())}else if(main_core.Type.isNumber(t.insertBefore)||main_core.Type.isStringFilled(t.insertBefore)){const s=e.getRows().getById(t.insertBefore);if(s){BX.Dom.insertBefore(i.getNode(),s.getNode())}}else if(main_core.Type.isNumber(t.insertAfter)||main_core.Type.isStringFilled(t.insertAfter)){const s=e.getRows().getById(t.insertAfter);if(s){BX.Dom.insertAfter(i.getNode(),s.getNode())}}else{throw new ReferenceError("prepend, append, insertBefore or insertAfter not filled")}i.show();if(t.animation!==false){i.enableAbsolutePosition();const t=e.getRows().getSourceBodyChild().filter((t=>t.rowIndex>i.getIndex()));const s=document.createElement("tr");main_core.Dom.style(s,{height:"0px",transition:"200ms height linear"});main_core.Dom.append(s,e.getBody());const n=i.getHeight();main_core.Dom.style(s,"height",`${n}px`);t.forEach((t=>{main_core.Dom.style(t,{transition:"200ms transform linear",transform:`translateY(${n}px) translateZ(0)`})}));main_core.Dom.addClass(i.getNode(),"main-ui-grid-show-new-row");main_core.Event.bind(i.getNode(),"animationend",(e=>{if(e.animationName==="showNewRow"){t.forEach((t=>{main_core.Dom.style(t,{transition:null,transform:null})}));main_core.Dom.remove(s);i.disableAbsolutePosition();main_core.Dom.removeClass(i.getNode(),"main-ui-grid-show-new-row")}}))}e.getRows().reset();e.bindOnRowEvents();e.updateCounterDisplayed();e.updateCounterSelected();if(e.getParam("ALLOW_ROWS_SORT")){e.rowsSortable.reinit()}if(e.getParam("ALLOW_COLUMNS_SORT")){e.colsSortable.reinit()}}showStub(t={}){const e=document.createElement("tr");main_core.Dom.addClass(e,"main-grid-row main-grid-row-empty main-grid-row-body");const i=document.createElement("td");main_core.Dom.addClass(i,"main-grid-cell main-grid-cell-center");const s=this.options.grid.getRows().getHeadFirstChild().getCells().length;main_core.Dom.attr(i,"colspan",s);const n=(()=>{if(main_core.Type.isPlainObject(t.content)){const e=[];if(main_core.Type.isStringFilled(t.content.title)){e.push(main_core.Tag.render(_t$1||(_t$1=_$1`
							<div class="main-grid-empty-block-title">
								${0}
							</div>
						`),t.content.title))}if(main_core.Type.isStringFilled(t.content.description)){e.push(main_core.Tag.render(_t2$1||(_t2$1=_$1`
							<div class="main-grid-empty-block-description">
								${0}
							</div>
						`),t.content.description))}return e}if(main_core.Type.isStringFilled(t.content)||main_core.Type.isDomNode(t.content)){return t.content}return[main_core.Tag.render(_t3||(_t3=_$1`<div class="main-grid-empty-image"></div>`)),main_core.Tag.render(_t4||(_t4=_$1`<div class="main-grid-empty-text">${0}</div>`),this.options.grid.getParam("EMPTY_STUB_TEXT"))]})();const o=main_core.Tag.render(_t5||(_t5=_$1`
			<div class="main-grid-empty-block">
				<div class="main-grid-empty-inner">
					${0}
				</div>
			</div>
		`),n);main_core.Dom.append(o,i);main_core.Dom.append(i,e);const a=this.options.grid.getBody().querySelector(".main-grid-row-empty");if(a){main_core.Dom.remove(a)}main_core.Dom.append(e,this.options.grid.getBody());this.options.grid.getRows().getBodyChild().forEach((t=>{t.hide()}));this.options.grid.adjustEmptyTable(this.options.grid.getRows().getSourceBodyChild())}}const namespace$4=main_core.Reflection.namespace("BX.Grid");namespace$4.Realtime=Realtime;(function(){BX.namespace("BX.Grid");BX.Grid.Resize=function(t){this.parent=null;this.lastRegisterButtons=null;this.init(t)};BX.Grid.Resize.prototype={init(t){this.parent=t;BX.addCustomEvent(window,"Grid::updated",BX.proxy(this.registerTableButtons,this));BX.addCustomEvent(window,"Grid::headerUpdated",BX.proxy(this.registerPinnedTableButtons,this));this.registerTableButtons();this.registerPinnedTableButtons()},destroy(){BX.removeCustomEvent(window,"Grid::updated",BX.proxy(this.registerTableButtons,this));BX.removeCustomEvent(window,"Grid::headerUpdated",BX.proxy(this.registerPinnedTableButtons,this));BX.type.isArray(this.lastRegisterButtons)&&this.lastRegisterButtons.forEach(jsDD.unregisterObject);(this.getButtons()||[]).forEach(jsDD.unregisterObject)},registerTableButtons(){(this.getButtons()||[]).forEach(this.register,this);this.registerPinnedTableButtons()},register(t){if(BX.type.isDomNode(t)){t.onbxdragstart=BX.delegate(this._onDragStart,this);t.onbxdragstop=BX.delegate(this._onDragEnd,this);t.onbxdrag=BX.delegate(this._onDrag,this);jsDD.registerObject(t)}},registerPinnedTableButtons(){if(this.parent.getParam("ALLOW_PIN_HEADER")){const t=this.getPinnedTableButtons();if(BX.type.isArray(this.lastRegisterButtons)&&this.lastRegisterButtons.length>0){this.lastRegisterButtons.forEach(jsDD.unregisterObject)}this.lastRegisterButtons=t;(this.getPinnedTableButtons()||[]).forEach(this.register,this)}},getButtons(){return BX.Grid.Utils.getByClass(this.parent.getRows().getHeadFirstChild().getNode(),this.parent.settings.get("classResizeButton"))},getPinnedTableButtons(){return BX.Grid.Utils.getByClass(this.parent.getPinHeader().getFixedTable(),this.parent.settings.get("classResizeButton"))},_onDragStart(){const t=BX.findParent(jsDD.current_node,{className:this.parent.settings.get("classHeadCell")});const e=this.parent.getRows().getHeadFirstChild().getCells();const i=Object.keys(e);let s;this.__overlay=BX.create("div",{props:{className:"main-grid-cell-overlay"}});BX.append(this.__overlay,t);this.__resizeCell=t.cellIndex;i.forEach((t=>{if(!BX.hasClass(e[t],"main-grid-special-empty")){let i=BX.width(e[t]);if(t>0){i-=parseInt(BX.style(e[t],"border-left-width"));i-=parseInt(BX.style(e[t],"border-right-width"))}BX.width(e[t],i);s=BX.firstChild(e[t]);BX.width(s,i)}}))},_onDrag(t){const e=this.parent.getTable();const i=this.parent.getParam("ALLOW_PIN_HEADER")?this.parent.getPinHeader().getFixedTable():null;const s=e.rows[0].cells[this.__resizeCell];let n;let o;const a=BX.pos(s);const r=parseFloat(s.style.width);let l;t-=a.left;l=t;if(a.width>r){t=a.width}t=l>t?l:t;t=Math.max(t,80);if(t!==a.width){const e=this.parent.getAllRows()[0].querySelectorAll(".main-grid-fixed-column").length;let s=this.parent.getColumnByIndex(this.__resizeCell-e);s.forEach((e=>{e.style.width=`${t}px`;e.style.minWidth=`${t}px`;e.style.maxWidth=`${t}px`;BX.Dom.style(e.firstElementChild,"width",`${t}px`)}));if(s[0].classList.contains("main-grid-fixed-column")){s=this.parent.getColumnByIndex(this.__resizeCell-e+1);s.forEach((e=>{e.style.width=`${t}px`;e.style.minWidth=`${t}px`;e.style.maxWidth=`${t}px`}))}this.parent.adjustFixedColumnsPosition();this.parent.adjustFadePosition(this.parent.getFadeOffset());if(BX.type.isDomNode(i)&&BX.type.isDomNode(i.rows[0])){n=i.rows[0].cells[this.__resizeCell];o=BX.firstChild(n);o.style.width=`${t}px`;o.style.minWidth=`${t}px`;n.style.width=`${t}px`;n.style.minWidth=`${t}px`}}BX.onCustomEvent(window,"Grid::columnResize",[])},_onDragEnd(){this.saveSizes();const t=BX.findParent(jsDD.current_node,{className:this.parent.settings.get("classHeadCell")});const e=t.querySelector(".main-grid-cell-overlay");if(e){BX.Dom.remove(e)}},getColumnSizes(){const t=this.parent.getRows().getHeadFirstChild().getCells();const e={};let i;[].forEach.call(t,(t=>{i=BX.data(t,"name");if(BX.type.isNotEmptyString(i)){e[i]=BX.width(t)}}),this);return e},saveSizes(){this.parent.getUserOptions().setColumnSizes(this.getColumnSizes(),1)}}})();let _$2=t=>t,_t$2,_t2$2,_t3$1,_t4$1,_t5$1,_t6,_t7,_t8,_t9,_t10,_t11,_t12,_t13,_t14,_t15,_t16;(function(){BX.namespace("BX.Grid");BX.Grid.Row=function(t,e){this.node=null;this.checkbox=null;this.sort=null;this.actions=null;this.settings=null;this.index=null;this.actionsButton=null;this.parent=null;this.depth=null;this.parentId=null;this.editData=null;this.custom=null;this.onElementClick=this.onElementClick.bind(this);this.init(t,e);this.initElementsEvents()};BX.Grid.Row.prototype={init(t,e){if(BX.type.isDomNode(e)){this.node=e;this.parent=t;this.settings=new BX.Grid.Settings;this.bindNodes=[];if(this.isBodyChild()){this.bindNodes=[].slice.call(this.node.parentNode.querySelectorAll(`tr[data-bind="${this.getId()}"]`));if(this.bindNodes.length>0){this.node.addEventListener("mouseover",this.onMouseOver.bind(this));this.node.addEventListener("mouseleave",this.onMouseLeave.bind(this));this.bindNodes.forEach((function(t){t.addEventListener("mouseover",this.onMouseOver.bind(this));t.addEventListener("mouseleave",this.onMouseLeave.bind(this));t.addEventListener("click",(()=>{if(this.isSelected()){this.unselect()}else{this.select()}}))}),this)}}if(this.parent.getParam("ALLOW_CONTEXT_MENU")){BX.bind(this.getNode(),"contextmenu",BX.delegate(this._onRightClick,this))}}},onMouseOver(){this.node.classList.add("main-grid-row-over");this.bindNodes.forEach((t=>{t.classList.add("main-grid-row-over")}))},onMouseLeave(){this.node.classList.remove("main-grid-row-over");this.bindNodes.forEach((t=>{t.classList.remove("main-grid-row-over")}))},isCustom(){if(this.custom===null){this.custom=BX.hasClass(this.getNode(),this.parent.settings.get("classRowCustom"))}return this.custom},_onRightClick(t){t.preventDefault();if(!this.isHeadChild()){this.showActionsMenu(t)}},getDefaultAction(){return BX.data(this.getNode(),"default-action")},getEditorValue(){const t=this;const e=this.getCells();const i={};let s;[].forEach.call(e,(e=>{s=t.getCellEditorValue(e);if(BX.type.isArray(s)){s.forEach((t=>{i[t.NAME]=t.VALUE===undefined?"":t.VALUE;if(t.hasOwnProperty("RAW_NAME")&&t.hasOwnProperty("RAW_VALUE")){i[`${t.NAME}_custom`]=i[`${t.NAME}_custom`]||{};i[`${t.NAME}_custom`][t.RAW_NAME]=i[`${t.NAME}_custom`][t.RAW_NAME]||t.RAW_VALUE}}))}else if(s){i[s.NAME]=s.VALUE===undefined?"":s.VALUE}}));return i},editGetValues(){return this.getEditorValue()},getCellEditorValue(t){const e=BX.Grid.Utils.getByClass(t,this.parent.settings.get("classEditor"),true);let i=null;if(BX.type.isDomNode(e)){if(BX.hasClass(e,"main-grid-editor-checkbox")){i={NAME:e.getAttribute("name"),VALUE:e.checked?"Y":"N"}}else if(BX.hasClass(e,"main-grid-editor-custom")){i=this.getCustomValue(e)}else if(BX.hasClass(e,"main-grid-editor-money")){i=this.getMoneyValue(e)}else if(BX.hasClass(e,"main-ui-multi-select")){i=this.getMultiSelectValues(e)}else{i=this.getImageValue(e)}}return i},isEdit(){return BX.hasClass(this.getNode(),"main-grid-row-edit")},hide(){BX.addClass(this.getNode(),this.parent.settings.get("classHide"))},show(){BX.Dom.attr(this.getNode(),"hidden",null);BX.removeClass(this.getNode(),this.parent.settings.get("classHide"))},isShown(){return!BX.hasClass(this.getNode(),this.parent.settings.get("classHide"))},isNotCount(){return BX.hasClass(this.getNode(),this.parent.settings.get("classNotCount"))},getContentContainer(t){if(BX.Type.isDomNode(t)){const e=t.closest(".main-grid-cell");if(BX.Type.isDomNode(e)){return e.querySelector(".main-grid-cell-content")}}return t},getContent(t){const e=this.getContentContainer(t);let i;if(BX.type.isDomNode(e)){i=BX.html(e)}return i},getMoneyValue(t){const e=[];const i={PRICE:{},CURRENCY:{},HIDDEN:{}};const s=t.getAttribute("data-name");const n=[].slice.call(t.querySelectorAll("input"));n.forEach((t=>{e.push({NAME:s,RAW_NAME:t.name,RAW_VALUE:t.value||"",VALUE:t.value||""});if(t.classList.contains("main-grid-editor-money-price")){i.PRICE={NAME:t.name,VALUE:t.value}}else if(t.type===" hidden"){i.HIDDEN[t.name]=t.value}}));const o=t.querySelector(".main-grid-editor-dropdown");if(o){const t=o.getAttribute("name");if(BX.type.isNotEmptyString(t)){e.push({NAME:s,RAW_NAME:t,RAW_VALUE:o.dataset.value||"",VALUE:o.dataset.value||""});i.CURRENCY={NAME:t,VALUE:o.dataset.value}}}e.push({NAME:s,VALUE:i});return e},getCustomValue(t){const e=new Map;const i=t.getAttribute("data-name");const s=[].slice.call(t.querySelectorAll("input, select, textarea"));s.forEach((t=>{if(t.name===""){return}if(t.hasAttribute("data-ignore-field")){return}let s={NAME:i,RAW_NAME:t.name,RAW_VALUE:t.value,VALUE:t.value};switch(t.tagName){case"SELECT":if(t.multiple){const i=[];t.querySelectorAll("option").forEach((t=>{if(t.selected){i.push(t.value)}}));s.RAW_VALUE=i;s.VALUE=i;e.set(t.name,s)}else{e.set(t.name,s)}break;case"INPUT":switch(t.type.toUpperCase()){case"RADIO":if(t.checked){e.set(t.name,s)}break;case"CHECKBOX":if(t.checked){if(this.isMultipleCustomValue(t.name)){if(e.has(t.name)){s=e.get(t.name);s.RAW_VALUE.push(t.value);s.VALUE.push(t.value)}else{s.RAW_VALUE=[t.value];s.VALUE=[t.value]}}e.set(t.name,s)}break;case"FILE":s.RAW_VALUE=t.files[0];s.VALUE=t.files[0];e.set(t.name,s);break;default:if(this.isMultipleCustomValue(t.name)){if(e.has(t.name)){s=e.get(t.name);s.RAW_VALUE.push(t.value);s.VALUE.push(t.value)}else{s.RAW_VALUE=[t.value];s.VALUE=[t.value]}}e.set(t.name,s)}break;default:e.set(t.name,s);break}}));const n=[];e.forEach((t=>{n.push(t)}));return n},isMultipleCustomValue(t){return t.length>2&&t.lastIndexOf("[]")===t.length-2},getImageValue(t){let e=null;if(BX.hasClass(t,"main-grid-image-editor")){const i=t.querySelector(".main-grid-image-editor-file-input");if(i){e={NAME:i.name,VALUE:i.files[0]}}else{const i=t.querySelector(".main-grid-image-editor-fake-file-input");if(i){e={NAME:i.name,VALUE:i.value}}}}else if(t.value){e={NAME:t.getAttribute("name"),VALUE:t.value}}else{e={NAME:t.getAttribute("name"),VALUE:BX.data(t,"value")}}return e},getMultiSelectValues(t){const e=JSON.parse(BX.data(t,"value"));return{NAME:t.getAttribute("name"),VALUE:main_core.Type.isArrayFilled(e)?e:""}},getEditorContainer(t){return BX.Grid.Utils.getByClass(t,this.parent.settings.get("classEditorContainer"),true)},getCollapseButton(){if(!this.collapseButton){this.collapseButton=BX.Grid.Utils.getByClass(this.getNode(),this.parent.settings.get("classCollapseButton"),true)}return this.collapseButton},stateLoad(){BX.addClass(this.getNode(),this.parent.settings.get("classRowStateLoad"))},stateUnload(){BX.removeClass(this.getNode(),this.parent.settings.get("classRowStateLoad"))},stateExpand(){BX.addClass(this.getNode(),this.parent.settings.get("classRowStateExpand"))},stateCollapse(){BX.removeClass(this.getNode(),this.parent.settings.get("classRowStateExpand"))},getParentId(){if(this.parentId===null){this.parentId=BX.data(this.getNode(),"parent-id");if(typeof this.parentId!=="undefined"&&this.parentId!==null){this.parentId=this.parentId.toString()}}return this.parentId},getDataset(){return this.getNode().dataset},getDepth(){if(this.depth===null){this.depth=BX.data(this.getNode(),"depth")}return this.depth},setDepth(t){t=parseInt(t);if(BX.type.isNumber(t)){const e=t-parseInt(this.getDepth());const i=this.parent.getRows();this.getDataset().depth=t;this.getShiftCells().forEach((e=>{BX.data(e,"depth",t);BX.style(e,"padding-left",`${t*20}px`)}));i.getRowsByParentId(this.getId(),true).forEach((t=>{const i=parseInt(e)+parseInt(t.getDepth());t.getDataset().depth=i;t.getShiftCells().forEach((t=>{BX.data(t,"depth",i);BX.style(t,"padding-left",`${i*20}px`)}))}))}},setParentId(t){this.getDataset().parentId=t},getShiftCells(){return BX.Grid.Utils.getBySelector(this.getNode(),'td[data-shift="true"]')},showChildRows(){const t=this.getChildren();const e=this.isCustom();t.forEach((t=>{t.show();if(!e&&t.isExpand()){t.showChildRows()}}));this.parent.updateCounterDisplayed();this.parent.updateCounterSelected();this.parent.adjustCheckAllCheckboxes();this.parent.adjustRows()},getChildren(){const t=this.isCustom()?"getRowsByGroupId":"getRowsByParentId";const e=this.isCustom()?this.getGroupId():this.getId();return this.parent.getRows()[t](e,true)},hideChildRows(){const t=this.getChildren();t.forEach((t=>{t.hide()}));this.parent.updateCounterDisplayed();this.parent.updateCounterSelected();this.parent.adjustCheckAllCheckboxes();this.parent.adjustRows()},isChildsLoaded(){if(!BX.type.isBoolean(this.childsLoaded)){this.childsLoaded=this.isCustom()||BX.data(this.getNode(),"child-loaded")==="true"}return this.childsLoaded},expand(){const t=this;this.stateExpand();if(this.isChildsLoaded()){this.showChildRows()}else{this.stateLoad();this.loadChildRows((e=>{e.reverse().forEach((e=>{BX.insertAfter(e,t.getNode())}));t.parent.getRows().reset();t.parent.bindOnRowEvents();if(t.parent.getParam("ALLOW_ROWS_SORT")){t.parent.getRowsSortable().reinit()}if(t.parent.getParam("ALLOW_COLUMNS_SORT")){t.parent.getColsSortable().reinit()}t.stateUnload();BX.data(t.getNode(),"child-loaded","true");t.parent.updateCounterDisplayed();t.parent.updateCounterSelected();t.parent.adjustCheckAllCheckboxes()}))}},collapse(){this.stateCollapse();this.hideChildRows()},isExpand(){return BX.hasClass(this.getNode(),this.parent.settings.get("classRowStateExpand"))},toggleChildRows(){if(this.isExpand()){this.collapse()}else{this.expand()}},loadChildRows(t){if(BX.type.isFunction(t)){const e=this;let i=parseInt(this.getDepth());const s=this.parent.getUserOptions().getAction("GRID_GET_CHILD_ROWS");i=BX.type.isNumber(i)?i+1:1;this.parent.getData().request("","POST",{action:s,parent_id:this.getId(),depth:i},null,(function(){const i=this.getRowsByParentId(e.getId());t.apply(null,[i])}))}},update(t,e,i){t=t||"";const s=this.parent.getUserOptions().getAction("GRID_UPDATE_ROW");const n=this.getDepth();const o=this.getId();const a=this.getParentId();const r={id:o,parentId:a,action:s,depth:n,data:t};const l=this;this.stateLoad();this.parent.getData().request(e,"POST",r,null,(function(){const e=this.getBodyRows();l.parent.getUpdater().updateBodyRows(e);l.stateUnload();l.parent.getRows().reset();l.parent.getUpdater().updateFootRows(this.getFootRows());l.parent.getUpdater().updatePagination(this.getPagination());l.parent.getUpdater().updateMoreButton(this.getMoreButton());l.parent.getUpdater().updateCounterTotal(this.getCounterTotal());l.parent.bindOnRowEvents();l.parent.adjustEmptyTable(e);l.parent.bindOnMoreButtonEvents();l.parent.bindOnClickPaginationLinks();l.parent.updateCounterDisplayed();l.parent.updateCounterSelected();if(l.parent.getParam("ALLOW_COLUMNS_SORT")){l.parent.colsSortable.reinit()}if(l.parent.getParam("ALLOW_ROWS_SORT")){l.parent.rowsSortable.reinit()}BX.onCustomEvent(window,"Grid::rowUpdated",[{id:o,data:t,grid:l.parent,response:this}]);BX.onCustomEvent(window,"Grid::updated",[l.parent]);if(BX.type.isFunction(i)){i({id:o,data:t,grid:l.parent,response:this})}}))},remove(t,e,i){t=t||"";const s=this.parent.getUserOptions().getAction("GRID_DELETE_ROW");const n=this.getDepth();const o=this.getId();const a=this.getParentId();const r={id:o,parentId:a,action:s,depth:n,data:t};const l=this;this.stateLoad();this.parent.getData().request(e,"POST",r,null,(function(){const e=this.getBodyRows();l.parent.getUpdater().updateBodyRows(e);l.stateUnload();l.parent.getRows().reset();l.parent.getUpdater().updateFootRows(this.getFootRows());l.parent.getUpdater().updatePagination(this.getPagination());l.parent.getUpdater().updateMoreButton(this.getMoreButton());l.parent.getUpdater().updateCounterTotal(this.getCounterTotal());l.parent.bindOnRowEvents();l.parent.adjustEmptyTable(e);l.parent.bindOnMoreButtonEvents();l.parent.bindOnClickPaginationLinks();l.parent.updateCounterDisplayed();l.parent.updateCounterSelected();if(l.parent.getParam("ALLOW_COLUMNS_SORT")){l.parent.colsSortable.reinit()}if(l.parent.getParam("ALLOW_ROWS_SORT")){l.parent.rowsSortable.reinit()}BX.onCustomEvent(window,"Grid::rowRemoved",[{id:o,data:t,grid:l.parent,response:this}]);BX.onCustomEvent(window,"Grid::updated",[l.parent]);if(BX.type.isFunction(i)){i({id:o,data:t,grid:l.parent,response:this})}}))},editCancel(){const t=this.getCells();const e=this;let i;[].forEach.call(t,(t=>{i=e.getEditorContainer(t);if(BX.type.isDomNode(i)){BX.remove(e.getEditorContainer(t));BX.show(e.getContentContainer(t))}}));BX.removeClass(this.getNode(),"main-grid-row-edit")},getCellByIndex(t){return this.getCells()[t]},getEditDataByCellIndex(index){return eval(BX.data(this.getCellByIndex(index),"edit"))},getCellNameByCellIndex(t){return BX.data(this.getCellByIndex(t),"name")},resetEditData(){this.editData=null},setEditData(t){this.editData=t},getEditData(){if(this.editData===null){const t=this.parent.getParam("EDITABLE_DATA");const e=this.getId();if(BX.type.isPlainObject(t)&&e in t){this.editData=t[e]}else{this.editData={}}}return this.editData},getCellEditDataByCellIndex(t){const e=this.getEditData();let i=null;t=parseInt(t);if(BX.type.isNumber(t)&&BX.type.isPlainObject(e)){const s=this.parent.getRows().getHeadFirstChild().getEditDataByCellIndex(t);if(BX.type.isPlainObject(s)){i=s;i.VALUE=e[s.NAME]}}return i},edit(){const t=this.getCells();const e=this;let i;let s;let n;let o;[].forEach.call(t,((t,a)=>{if(t.dataset.editable==="true"){try{i=e.getCellEditDataByCellIndex(a)}catch(t){throw new Error(t)}if(e.parent.getEditor().validateEditObject(i)){o=e.getContentContainer(t);n=BX.height(o);s=e.parent.getEditor().getEditor(i,n);if(!e.getEditorContainer(t)&&BX.type.isDomNode(s)){t.appendChild(s);BX.hide(o)}}}}));BX.addClass(this.getNode(),"main-grid-row-edit")},setDraggable(t){if(t){BX.removeClass(this.getNode(),this.parent.settings.get("classDisableDrag"));this.parent.getRowsSortable().register(this.getNode())}else{BX.addClass(this.getNode(),this.parent.settings.get("classDisableDrag"));this.parent.getRowsSortable().unregister(this.getNode())}},isDraggable(){return!BX.hasClass(this.getNode(),this.parent.settings.get("classDisableDrag"))},getNode(){return this.node},getIndex(){return this.getNode().rowIndex},getId(){return String(BX.data(this.getNode(),"id"))},getGroupId(){return BX.data(this.getNode(),"group-id").toString()},getObserver(){return BX.Grid.observer},getCheckbox(){if(!this.checkbox){this.checkbox=BX.Grid.Utils.getByClass(this.getNode(),this.settings.get("classRowCheckbox"),true)}return this.checkbox},hasActionsButton(){return BX.Type.isDomNode(this.getActionsButton())},getActionsMenu(){if(!this.actionsMenu&&this.hasActionsButton()){const t=this.getActionsButton().getBoundingClientRect();this.actionsMenu=BX.PopupMenu.create(`main-grid-actions-menu-${this.getId()}`,this.getActionsButton(),this.getMenuItems(),{autoHide:true,offsetTop:-(t.height/2+26),offsetLeft:30,angle:{position:"left",offset:t.height/2-8},events:{onPopupClose:BX.delegate(this._onCloseMenu,this),onPopupShow:BX.delegate(this._onPopupShow,this)}});BX.addCustomEvent("Grid::updated",(()=>{if(this.actionsMenu){this.actionsMenu.destroy();this.actionsMenu=null}}));BX.bind(this.actionsMenu.popupWindow.popupContainer,"click",BX.delegate((function(t){const e=this.getActionsMenu();if(e){const i=BX.getEventTarget(t);const s=BX.findParent(i,{className:"menu-popup-item"},10);if(!s||!s.dataset.preventCloseContextMenu){e.close()}}}),this))}return this.actionsMenu},_onCloseMenu(){},_onPopupShow(t){t.setBindElement(this.getActionsButton())},actionsMenuIsShown(){return this.getActionsMenu().popupWindow.isShown()},showActionsMenu(t){BX.fireEvent(document.body,"click");this.getActionsMenu().popupWindow.show();if(t){this.getActionsMenu().popupWindow.popupContainer.style.top=`${t.pageY-25+BX.PopupWindow.getOption("offsetTop")}px`;this.getActionsMenu().popupWindow.popupContainer.style.left=`${t.pageX+20+BX.PopupWindow.getOption("offsetLeft")}px`}},closeActionsMenu(){if(this.actionsMenu&&this.actionsMenu.popupWindow){this.actionsMenu.popupWindow.close()}},getMenuItems(){return this.getActions()||[]},getActions(){try{this.actions=this.actions||eval(BX.data(this.getActionsButton(),this.settings.get("dataActionsKey")))}catch{this.actions=null}return this.actions},getActionsButton(){if(!this.actionsButton){this.actionsButton=BX.Grid.Utils.getByClass(this.getNode(),this.settings.get("classRowActionButton"),true)}return this.actionsButton},initSelect(){if(this.isSelected()&&!BX.hasClass(this.getNode(),this.settings.get("classCheckedRow"))){BX.addClass(this.getNode(),this.settings.get("classCheckedRow"))}},getParentNode(){let t;try{t=this.getNode().parentNode}catch{t=null}return t},getParentNodeName(){let t;try{t=this.getParentNode().nodeName}catch{t=null}return t},isSelectable(){return!this.isEdit()||this.parent.getParam("ALLOW_EDIT_SELECTION")},select(){let t;if(this.isSelectable()&&(this.parent.getParam("ADVANCED_EDIT_MODE")||!this.parent.getRows().hasEditable())){t=this.getCheckbox();if(t&&!BX.data(t,"disabled")){BX.addClass(this.getNode(),this.settings.get("classCheckedRow"));this.bindNodes.forEach((function(t){BX.addClass(t,this.settings.get("classCheckedRow"))}),this);t.checked=true}}},unselect(){if(this.isSelectable()){BX.removeClass(this.getNode(),this.settings.get("classCheckedRow"));this.bindNodes.forEach((function(t){BX.removeClass(t,this.settings.get("classCheckedRow"))}),this);if(this.getCheckbox()){this.getCheckbox().checked=false}}},getCells(){return this.getNode().cells},isSelected(){return this.getCheckbox()&&this.getCheckbox().checked||BX.hasClass(this.getNode(),this.settings.get("classCheckedRow"))},isHeadChild(){return this.getParentNodeName()==="THEAD"&&BX.hasClass(this.getNode(),this.settings.get("classHeadRow"))},isBodyChild(){return BX.hasClass(this.getNode(),this.settings.get("classBodyRow"))&&!BX.hasClass(this.getNode(),this.settings.get("classEmptyRows"))},isFootChild(){return this.getParentNodeName()==="TFOOT"&&BX.hasClass(this.getNode(),this.settings.get("classFootRow"))},prependTo(t){BX.Dom.prepend(this.getNode(),t)},appendTo(t){BX.Dom.append(this.getNode(),t)},setId(t){BX.Dom.attr(this.getNode(),"data-id",t)},setActions(t){const e=this.getNode().querySelector(".main-grid-cell-action");if(e){let i=e.querySelector(".main-grid-row-action-button");if(!i){i=BX.Dom.create({tag:"div",props:{className:"main-grid-row-action-button"}});const t=this.getContentContainer(e);BX.Dom.append(i,t)}BX.Dom.attr(i,{href:"#","data-actions":t});this.actions=t;if(this.actionsMenu){this.actionsMenu.destroy();this.actionsMenu=null}}},makeCountable(){BX.Dom.removeClass(this.getNode(),"main-grid-not-count")},makeNotCountable(){BX.Dom.addClass(this.getNode(),"main-grid-not-count")},getColumnOptions(t){const e=this.parent.getParam("COLUMNS_ALL");if(BX.Type.isPlainObject(e)&&Reflect.has(e,t)){return e[t]}return null},setCellsContent(t){const e=this.parent.getRows().getHeadFirstChild();[...this.getCells()].forEach(((i,s)=>{const n=e.getCellNameByCellIndex(s);if(Reflect.has(t,n)){const e=this.getColumnOptions(n);const s=this.getContentContainer(i);const o=t[n];if(e.type==="labels"&&BX.Type.isArray(o)){const t=o.map((t=>{const e=BX.Tag.render(_t$2||(_t$2=_$2`
								<span class="ui-label ${0}"></span>
							`),t.color);if(t.light!==true){BX.Dom.addClass(e,"ui-label-fill")}if(BX.Type.isPlainObject(t.events)){if(Reflect.has(t.events,"click")){BX.Dom.addClass(e,"ui-label-link")}this.bindOnEvents(e,t.events)}const i=(()=>{if(BX.Type.isStringFilled(t.html)){return t.html}return t.text})();const s=BX.Tag.render(_t2$2||(_t2$2=_$2`
								<span class="ui-label-inner">${0}</span>
							`),i);BX.Dom.append(s,e);if(BX.Type.isPlainObject(t.removeButton)){const i=(()=>{if(t.removeButton.type===BX.Grid.Label.RemoveButtonType.INSIDE){return BX.Tag.render(_t3$1||(_t3$1=_$2`
											<span class="ui-label-icon"></span>
										`))}return BX.Tag.render(_t4$1||(_t4$1=_$2`
										<span class="main-grid-label-remove-button ${0}"></span>
									`),t.removeButton.type)})();if(BX.Type.isPlainObject(t.removeButton.events)){this.bindOnEvents(i,t.removeButton.events)}BX.Dom.append(i,e)}return e}));const e=BX.Tag.render(_t5$1||(_t5$1=_$2`
							<div class="main-grid-labels">${0}</div>
						`),t);BX.Dom.clean(s);const i=s.querySelector(".main-grid-labels");if(BX.Type.isDomNode(i)){BX.Dom.replace(i,e)}else{BX.Dom.append(e,s)}}else if(e.type==="tags"&&BX.Type.isPlainObject(o)){const t=o.items.map((t=>{const e=BX.Tag.render(_t6||(_t6=_$2`
								<span class="main-grid-tag"></span>
							`));this.bindOnEvents(e,t.events);if(t.active===true){BX.Dom.addClass(e,"main-grid-tag-active")}const i=(()=>{if(BX.Type.isStringFilled(t.html)){return t.html}return BX.Text.encode(t.text)})();const s=BX.Tag.render(_t7||(_t7=_$2`
								<span class="main-grid-tag-inner">${0}</span>
							`),i);BX.Dom.append(s,e);if(t.active===true){const i=BX.Tag.render(_t8||(_t8=_$2`
									<span class="main-grid-tag-remove"></span>
								`));BX.Dom.append(i,e);if(BX.Type.isPlainObject(t.removeButton)){this.bindOnEvents(i,t.removeButton.events)}}return e}));const e=BX.Tag.render(_t9||(_t9=_$2`
							<span class="main-grid-tags">${0}</span>
						`),t);const i=BX.Tag.render(_t10||(_t10=_$2`
							<span class="main-grid-tag-add"></span>
						`));if(BX.Type.isPlainObject(o.addButton)){this.bindOnEvents(i,o.addButton.events)}BX.Dom.append(i,e);const n=s.querySelector(".main-grid-tags");if(BX.Type.isDomNode(n)){BX.Dom.replace(n,e)}else{BX.Dom.append(e,s)}}else if(BX.Type.isDomNode(o)){BX.Dom.append(o,s)}else{BX.Runtime.html(s,o)}}}))},getCellById(t){const e=this.parent.getRows().getHeadFirstChild();return[...this.getCells()].find(((i,s)=>e.getCellNameByCellIndex(s)===t))},isTemplate(){return this.isBodyChild()&&/^template_\d$/.test(this.getId())},enableAbsolutePosition(){const t=[...this.parent.getRows().getHeadFirstChild().getCells()];const e=t.map((t=>BX.Dom.style(t,"width")));const i=this.getCells();e.forEach(((t,e)=>{BX.Dom.style(i[e],"width",t)}));BX.Dom.style(this.getNode(),"position","absolute")},disableAbsolutePosition(){BX.Dom.style(this.getNode(),"position",null)},getHeight(){return BX.Text.toNumber(BX.Dom.style(this.getNode(),"height"))},setCellActions(t){Object.entries(t).forEach((([t,e])=>{const i=this.getCellById(t);if(i){const t=i.querySelector(".main-grid-cell-inner");if(t){const i=(()=>{const e=t.querySelector(".main-grid-cell-content-actions");if(e){BX.Dom.clean(e);return e}const i=BX.Tag.render(_t11||(_t11=_$2`
								<div class="main-grid-cell-content-actions"></div>
							`));BX.Dom.append(i,t);return i})();if(BX.Type.isArrayFilled(e)){e.forEach((t=>{const e=(()=>{if(BX.Type.isArrayFilled(t.class)){return t.class.join(" ")}return t.class})();const s=BX.Tag.render(_t12||(_t12=_$2`
									<span class="main-grid-cell-content-action ${0}"></span>
								`),e);if(BX.Type.isPlainObject(t.events)){this.bindOnEvents(s,t.events)}if(BX.Type.isPlainObject(t.attributes)){BX.Dom.attr(s,t.attributes)}BX.Dom.append(s,i)}))}}}}))},initElementsEvents(){const buttons=[...this.getNode().querySelectorAll(".main-grid-cell [data-events]")];if(BX.Type.isArrayFilled(buttons)){buttons.forEach((button=>{const events=eval(BX.Dom.attr(button,"data-events"));if(BX.Type.isPlainObject(events)){BX.Dom.attr(button,"data-events",null);this.bindOnEvents(button,events)}}))}},onElementClick(t){t.stopPropagation()},bindOnEvents(button,events){if(BX.Type.isDomNode(button)&&BX.Type.isPlainObject(events)){BX.Event.bind(button,"click",this.onElementClick.bind(this));const target=(()=>{const t=BX.Dom.attr(button,"data-target");if(t){return button.closest(t)}return button})();const event=new BX.Event.BaseEvent({data:{button:button,target:target,row:this}});event.setTarget(target);Object.entries(events).forEach((([eventName,handler])=>{const preparedHandler=eval(handler);BX.Event.bind(button,eventName,preparedHandler.bind(null,event))}))}},setCounters(t){if(BX.Type.isPlainObject(t)){Object.entries(t).forEach((([t,e])=>{const i=this.getCellById(t);if(BX.Type.isDomNode(i)){const t=i.querySelector(".main-grid-cell-inner");const s=(()=>{const t=i.querySelector(".main-grid-cell-counter");if(BX.Type.isDomNode(t)){return t}return BX.Tag.render(_t13||(_t13=_$2`
								<span class="main-grid-cell-counter"></span>
							`))})();const n=(()=>{const t=s.querySelector(".ui-counter");if(BX.Type.isDomNode(t)){return t}const e=BX.Tag.render(_t14||(_t14=_$2`
								<span class="ui-counter"></span>
							`));BX.Dom.append(e,s);return e})();if(BX.Type.isPlainObject(e.events)){this.bindOnEvents(n,e.events)}const o=(()=>{const t=n.querySelector(".ui-counter-inner");if(BX.Type.isDomNode(t)){return t}const e=BX.Tag.render(_t15||(_t15=_$2`
								<span class="ui-counter-inner"></span>
							`));BX.Dom.append(e,n);return e})();if(e.isDouble){const t=(()=>{const t=n.querySelector(".ui-counter-secondary");if(BX.Type.isDomNode(t)){return t}const e=BX.Tag.render(_t16||(_t16=_$2`
									<span class="ui-counter-secondary"></span>
								`));BX.Dom.append(e,n);return e})();if(BX.Type.isStringFilled(e.secondaryColor)){Object.values(BX.Grid.Counters.Color).forEach((e=>{BX.Dom.removeClass(t,e)}));BX.Dom.addClass(t,e.secondaryColor)}}if(BX.Type.isStringFilled(e.type)){Object.values(BX.Grid.Counters.Type).forEach((t=>{BX.Dom.removeClass(s,`main-grid-cell-counter-${t}`)}));BX.Dom.addClass(s,`main-grid-cell-counter-${e.type}`)}if(BX.Type.isStringFilled(e.color)){Object.values(BX.Grid.Counters.Color).forEach((t=>{BX.Dom.removeClass(n,t)}));BX.Dom.addClass(n,e.color)}if(BX.Type.isStringFilled(e.size)){Object.values(BX.Grid.Counters.Size).forEach((t=>{BX.Dom.removeClass(n,t)}));BX.Dom.addClass(n,e.size)}if(BX.Type.isStringFilled(e.class)){BX.Dom.addClass(n,e.class)}if(BX.Type.isStringFilled(e.value)||BX.Type.isNumber(e.value)){const t=BX.Text.toNumber(o.innerText);const i=BX.Text.toNumber(e.value);if(i>0){if(i<100){o.innerText=e.value}else{o.innerText="99+"}if(e.animation!==false){if(i!==t){if(i>t){BX.Dom.addClass(o,"ui-counter-plus")}else{BX.Dom.addClass(o,"ui-counter-minus")}}BX.Event.bindOnce(o,"animationend",(t=>{if(t.animationName==="uiCounterPlus"||t.animationName==="uiCounterMinus"){BX.Dom.removeClass(o,["ui-counter-plus","ui-counter-minus"])}}))}}}if(BX.Text.toNumber(e.value)>0){const i=e.type===BX.Grid.Counters.Type.RIGHT?"right":"left";if(i==="left"){BX.Dom.prepend(s,t)}else if(i==="right"){BX.Dom.append(s,t)}}else{const t=`main-grid-cell-counter-${BX.Grid.Counters.Type.LEFT_ALIGNED}`;if(BX.Dom.hasClass(s,t)){BX.remove(n)}else{BX.remove(s)}}}}))}}}})();(function(){BX.namespace("BX.Grid");BX.Grid.Rows=function(t){this.parent=null;this.rows=null;this.headChild=null;this.bodyChild=null;this.footChild=null;this.init(t)};BX.Grid.Rows.prototype={init:function(t){this.parent=t},reset:function(){this.rows=null;this.headChild=null;this.bodyChild=null;this.footChild=null},enableDragAndDrop:function(){this.parent.arParams["ALLOW_ROWS_SORT"]=true;if(!(this.parent.getRowsSortable()instanceof BX.Grid.RowsSortable)){this.parent.rowsSortable=new BX.Grid.RowsSortable(this.parent)}},disableDragAndDrop:function(){this.parent.arParams["ALLOW_ROWS_SORT"]=false;if(this.parent.getRowsSortable()instanceof BX.Grid.RowsSortable){this.parent.getRowsSortable().destroy();this.parent.rowsSortable=null}},getFootLastChild:function(){return this.getLast(this.getFootChild())},getFootFirstChild:function(){return this.getFirst(this.getFootChild())},getBodyLastChild:function(){return this.getLast(this.getBodyChild())},getBodyFirstChild:function(){return this.getFirst(this.getBodyChild())},getHeadLastChild:function(){return this.getLast(this.getHeadChild())},getHeadFirstChild:function(){return this.getFirst(this.getHeadChild())},getEditSelectedValues:function(t){var e=this.getSelected(t);var i={};e.forEach((function(t){i[t.getId()]=t.editGetValues()}));return i},getSelectedIds:function(t){return this.getSelected(t).map((function(t){return t.getId()}))},initSelected:function(){var t=this.getSelected();if(BX.type.isArray(t)&&t.length){t.forEach((function(t){t.initSelect()}));this.parent.enableActionsPanel()}},editSelected:function(){this.getSelected().forEach((function(t){t.edit()}));BX.onCustomEvent(window,"Grid::thereEditedRows",[])},editSelectedCancel:function(t){this.getSelected(t).forEach((function(t){t.editCancel()}));BX.onCustomEvent(window,"Grid::noEditedRows",[])},isSelected:function(){return this.getBodyChild().some((function(t){return t.isShown()&&t.isSelected()}))},isAllSelected:function(){return!this.getBodyChild().filter((function(t){return!!t.getCheckbox()&&t.getCheckbox().disabled!==true})).some((function(t){return!t.isSelected()}))},getParent:function(){return this.parent},getCountSelected:function(){var t;try{t=this.getSelected().filter((function(t){return!t.isNotCount()&&t.isShown()})).length}catch(e){t=0}return t},getCountDisplayed:function(){var t;try{t=this.getBodyChild().filter((function(t){return t.isShown()&&!t.isNotCount()})).length}catch(e){t=0}return t},addRows:function(t){var e=BX.findChild(this.getParent().getTable(),{tag:"TBODY"},true,false);t.forEach((function(t){e.appendChild(t)}))},getRows:function(){var t;var e=this;if(!this.rows){t=[].slice.call(this.getParent().getTable().querySelectorAll("tr[data-id], thead > tr"));this.rows=t.map((function(t){return new BX.Grid.Row(e.parent,t)}))}return this.rows},getSelected:function(t){return this.getBodyChild(t).filter((function(t){return t.isShown()&&t.isSelected()}))},normalizeNode:function(t){if(!BX.hasClass(t,this.getParent().settings.get("classBodyRow"))){t=BX.findParent(t,{className:this.getParent().settings.get("classBodyRow")},true,false)}return t},getById:function(t){return this.getBodyChild().find((function(e){return String(e.getId())===String(t)}))||null},get:function(t){if(BX.Type.isDomNode(t)){const e=t.closest(".main-grid-row");if(BX.Type.isDomNode(e)){const t=this.getRows().find((t=>t.getNode()===e));if(t){return t}}}return null},getLast:function(t){var e;try{e=t[t.length-1]}catch(t){e=null}return e},getFirst:function(t){var e;try{e=t[0]}catch(t){e=null}return e},getHeadChild:function(){this.headChild=this.headChild||this.getRows().filter((function(t){return t.isHeadChild()}));return this.headChild},getBodyChild:function(t){return this.getRows().filter((function(e){return e.isBodyChild()&&(!e.isTemplate()||t)}))},getFootChild:function(){this.footChild=this.footChild||this.getRows().filter((function(t){return t.isFootChild()}));return this.footChild},selectAll:function(){this.getRows().map((function(t){t.isShown()&&t.select()}))},unselectAll:function(){this.getRows().map((function(t){t.unselect()}))},getByIndex:function(t){var e=this.getBodyChild().filter((function(t){return t})).filter((function(e){return e.getNode().rowIndex===t}));return e.length?e[0]:null},getRowsByParentId:function(t,e){var i=[];var s=this;if(!t){return i}t=t.toString();function n(t){s.getBodyChild().forEach((function(s){if(s.getParentId()===t){i.push(s);e&&n(s.getId())}}),s)}n(t);return i},getRowsByGroupId:function(t){var e=[];var i=this;if(!t){return e}t=t.toString();function s(t){i.getBodyChild().forEach((function(i){if(i.getGroupId()===t&&!i.isCustom()){e.push(i)}}),i)}s(t);return e},getExpandedRows:function(){return this.getRows().filter((function(t){return t.isShown()&&t.isExpand()}))},getIdsExpandedRows:function(){return this.getExpandedRows().map((function(t){return t.getId()}))},getIdsCollapsedGroups:function(){return this.getRows().filter((function(t){return t.isCustom()&&!t.isExpand()})).map((function(t){return t.getId()}))},getSourceRows:function(){return BX.Grid.Utils.getBySelector(this.getParent().getTable(),[".main-grid-header > tr",".main-grid-header + tbody > tr"].join(", "))},getSourceBodyChild:function(){return this.getSourceRows().filter((function(t){return BX.Grid.Utils.closestParent(t).nodeName==="TBODY"}))},getSourceHeadChild:function(){return this.getSourceRows().filter((function(t){return BX.Grid.Utils.closestParent(t).nodeName==="THEAD"}))},getSourceFootChild:function(){return this.getSourceRows().filter((function(t){return BX.Grid.Utils.closestParent(t).nodeName==="TFOOT"}))},hasEditable:function(){return this.getBodyChild().some((function(t){return t.isEdit()}))},insertAfter:function(t,e){const i=this.getById(t);const s=this.getById(e);if(i&&s){BX.Dom.insertAfter(i.getNode(),s.getNode());this.reset()}},insertBefore:function(t,e){const i=this.getById(t);const s=this.getById(e);if(i&&s){BX.Dom.insertBefore(i.getNode(),s.getNode());this.reset()}}}})();(function(){BX.namespace("BX.Grid");BX.Grid.RowDragEvent=function(t){this.allowMoveRow=true;this.allowInsertBeforeTarget=true;this.dragItem=null;this.targetItem=null;this.eventName=t||"";this.errorMessage=""};BX.Grid.RowDragEvent.prototype={allowMove(){this.allowMoveRow=true;this.errorMessage=""},allowInsertBefore(){this.allowInsertBeforeTarget=true},disallowMove(t){this.allowMoveRow=false;this.errorMessage=t||""},disallowInsertBefore(){this.allowInsertBeforeTarget=false},getDragItem(){return this.dragItem},getTargetItem(){return this.targetItem},getEventName(){return this.eventName},setDragItem(t){return this.dragItem=t},setTargetItem(t){return this.targetItem=t},setEventName(t){return this.eventName=t},isAllowedMove(){return this.allowMoveRow},isAllowedInsertBefore(){return this.allowInsertBeforeTarget},getErrorMessage(){return this.errorMessage}};BX.Grid.RowsSortable=function(t){this.parent=null;this.list=null;this.setDefaultProps();this.init(t)};BX.Grid.RowsSortable.prototype={init(t){this.parent=t;this.list=this.getList();this.prepareListItems();jsDD.Enable();if(!this.inited){this.inited=true;this.onscrollDebounceHandler=BX.debounce(this._onWindowScroll,300,this);if(!this.parent.getParam("ALLOW_ROWS_SORT_IN_EDIT_MODE",false)){BX.addCustomEvent("Grid::thereEditedRows",BX.proxy(this.disable,this));BX.addCustomEvent("Grid::noEditedRows",BX.proxy(this.enable,this))}document.addEventListener("scroll",this.onscrollDebounceHandler,BX.Grid.Utils.listenerParams({passive:true}))}},destroy(){if(!this.parent.getParam("ALLOW_ROWS_SORT_IN_EDIT_MODE",false)){BX.removeCustomEvent("Grid::thereEditedRows",BX.proxy(this.disable,this));BX.removeCustomEvent("Grid::noEditedRows",BX.proxy(this.enable,this))}document.removeEventListener("scroll",this.onscrollDebounceHandler,BX.Grid.Utils.listenerParams({passive:true}));this.unregisterObjects()},_onWindowScroll(){this.windowScrollTop=BX.scrollTop(window);this.rowsRectList=null},disable(){this.unregisterObjects()},enable(){this.reinit()},reinit(){this.unregisterObjects();this.setDefaultProps();this.init(this.parent)},getList(){return this.parent.getRows().getSourceBodyChild()},unregisterObjects(){this.list.forEach(this.unregister,this)},prepareListItems(){this.list.forEach(this.register,this)},register(t){const e=this.parent.getRows();const i=e.get(t);if(i&&i.isDraggable()){t.onbxdragstart=BX.delegate(this._onDragStart,this);t.onbxdrag=BX.delegate(this._onDrag,this);t.onbxdragstop=BX.delegate(this._onDragEnd,this);jsDD.registerObject(t)}},unregister(t){jsDD.unregisterObject(t)},getIndex(t){return BX.Grid.Utils.getIndex(this.list,t)},calcOffset(){let t=this.dragRect.height;if(this.additionalDragItems.length>0){this.additionalDragItems.forEach((e=>{t+=e.clientHeight}))}return t},getTheadCells(t){return[].map.call(t,((e,i)=>({block:"",tag:"th",attrs:{style:`width: ${BX.width(t[i])}px;`}})))},createFake(){const t=[];this.cloneDragItem=BX.clone(this.dragItem);this.cloneDragAdditionalDragItems=[];this.cloneDragAdditionalDragItemRows=[];const e=this.getTheadCells(this.dragItem.cells);t.push(this.cloneDragItem);this.additionalDragItems.forEach((function(e){const i=BX.clone(e);t.push(i);this.cloneDragAdditionalDragItems.push(i);this.cloneDragAdditionalDragItemRows.push(new BX.Grid.Row(this.parent,i))}),this);const i=BX.width(this.parent.getTable());this.fake=BX.decl({block:"main-grid-fake-container",attrs:{style:`position: absolute; top: ${this.getDragStartRect().top}px; width: ${i}px`},content:{block:"main-grid-table",mix:"main-grid-table-fake",tag:"table",attrs:{style:`width: ${i}px`},content:[{block:"main-grid-header",tag:"thead",content:{block:"main-grid-row-head",tag:"tr",content:e}},{block:"",tag:"tbody",content:t}]}});BX.insertAfter(this.fake,this.parent.getTable());this.cloneDragItem=new BX.Grid.Row(this.parent,this.cloneDragItem);return this.fake},getDragStartRect(){return BX.pos(this.dragItem,this.parent.getTable())},_onDragStart(){this.moved=false;this.dragItem=jsDD.current_node;this.targetItem=this.dragItem;this.additionalDragItems=this.getAdditionalDragItems(this.dragItem);this.dragIndex=this.getIndex(this.dragItem);this.dragRect=this.getRowRect(this.dragItem,this.dragIndex);this.offset=this.calcOffset();this.dragStartOffset=jsDD.start_y-this.dragRect.top;this.dragEvent=new BX.Grid.RowDragEvent;this.dragEvent.setEventName("BX.Main.grid:rowDragStart");this.dragEvent.setDragItem(this.dragItem);this.dragEvent.setTargetItem(this.targetItem);this.dragEvent.allowInsertBefore();const t=this.parent.getRows().get(this.dragItem);this.startDragDepth=t.getDepth();this.startDragParentId=t.getParentId();this.createFake();BX.addClass(this.parent.getContainer(),this.parent.settings.get("classOnDrag"));BX.addClass(this.dragItem,this.parent.settings.get("classDragActive"));BX.onCustomEvent(window,"BX.Main.grid:rowDragStart",[this.dragEvent,this.parent])},getAdditionalDragItems(t){const e=this.parent.getRows();return e.getRowsByParentId(e.get(t).getId(),true).map((t=>t.getNode()))},moveRow(t,e,i){if(t){const s=BX.type.isNumber(i)?i:300;t.style.transition=`${s}ms`;t.style.transform=`translate3d(0px, ${e}px, 0px)`}},getDragOffset(){return jsDD.y-this.dragRect.top-this.dragStartOffset},getWindowScrollTop(){if(this.windowScrollTop===null){this.windowScrollTop=BX.scrollTop(window)}return this.windowScrollTop},getSortOffset(){return jsDD.y},getRowRect(t,e){if(!this.rowsRectList){this.rowsRectList={};this.list.forEach((function(t,e){this.rowsRectList[e]=t.getBoundingClientRect()}),this)}return this.rowsRectList[e]},getRowCenter(t,e){const i=this.getRowRect(t,e);return i.top+this.getWindowScrollTop()+i.height/2},isDragToBottom(t,e){const i=this.getRowCenter(t,e);const s=this.getSortOffset();return e>this.dragIndex&&i<s},isMovedToBottom(t){return t.style.transform===`translate3d(0px, ${-this.offset}px, 0px)`},isDragToTop(t,e){const i=this.getRowCenter(t,e);const s=this.getSortOffset();return e<this.dragIndex&&i>s},isMovedToTop(t){return t.style.transform===`translate3d(0px, ${this.offset}px, 0px)`},isDragToBack(t,e){const i=this.getRowCenter(t,e);const s=this.dragIndex;const n=jsDD.y;return e>s&&n<i||e<s&&n>i},isMoved(t){return t.style.transform!=="translate3d(0px, 0px, 0px)"&&t.style.transform!==""},_onDrag(){const t=0;const e=0;this.moveRow(this.dragItem,this.getDragOffset(),t);this.moveRow(this.fake,this.getDragOffset(),t);BX.Grid.Utils.styleForEach(this.additionalDragItems,{transition:`${t}ms`,transform:`translate3d(0px, ${this.getDragOffset()}px, 0px)`});this.list.forEach((function(t,i){if(Boolean(t)&&t!==this.dragItem&&!this.additionalDragItems.includes(t)){if(this.isDragToTop(t,i)&&!this.isMovedToTop(t)){this.targetItem=t;this.moveRow(t,this.offset);this.dragEvent.setEventName("BX.Main.grid:rowDragMove");this.dragEvent.setTargetItem(this.targetItem);BX.onCustomEvent(window,"BX.Main.grid:rowDragMove",[this.dragEvent,this.parent]);this.checkError(this.dragEvent);this.updateProperties(this.dragItem,this.targetItem);this.isDragetToTop=true;this.moved=true}if(this.isDragToBottom(t,i)&&!this.isMovedToBottom(t)){this.targetItem=this.findNextVisible(this.list,i);this.moveRow(t,-this.offset);this.dragEvent.setEventName("BX.Main.grid:rowDragMove");this.dragEvent.setTargetItem(this.targetItem);BX.onCustomEvent(window,"BX.Main.grid:rowDragMove",[this.dragEvent,this.parent]);this.checkError(this.dragEvent);this.updateProperties(this.dragItem,this.targetItem);this.isDragetToTop=false;if(this.targetItem){this.moved=true}}if(this.isDragToBack(t,i)&&this.isMoved(t)){this.moveRow(t,e);this.targetItem=t;if(this.isDragetToTop){this.targetItem=this.findNextVisible(this.list,i)}this.moved=true;this.dragEvent.setEventName("BX.Main.grid:rowDragMove");this.dragEvent.setTargetItem(this.targetItem);BX.onCustomEvent(window,"BX.Main.grid:rowDragMove",[this.dragEvent,this.parent]);this.checkError(this.dragEvent);this.updateProperties(this.dragItem,this.targetItem)}}}),this)},createError(t,e){const i=BX.decl({block:"main-grid-error",content:e||""});Boolean(t)&&t.appendChild(i);setTimeout((()=>{BX.addClass(i,"main-grid-error-show")}),0);return i},checkError(t){if(!t.isAllowedMove()&&!this.error){this.error=this.createError(this.fake,t.getErrorMessage())}if(t.isAllowedMove()&&this.error){BX.remove(this.error);this.error=null}},findNextVisible(t,e){let i=null;const s=this.parent.getRows();t.forEach(((t,n)=>{if(!i&&n>e){const e=s.get(t);if(e&&e.isShown()){i=t}}}));return i},updateProperties(t,e){const i=this.parent.getRows();const s=i.get(t);let n=0;let o=0;if(e){const t=i.get(e);n=t.getDepth();o=t.getParentId()}s.setDepth(n);s.setParentId(o);this.cloneDragItem.setDepth(n);this.cloneDragAdditionalDragItemRows.forEach((function(t,e){t.setDepth(BX.data(this.additionalDragItems[e],"depth"))}),this)},resetDragProperties(){const t=this.parent.getRows().get(this.dragItem);t.setDepth(this.startDragDepth);t.setParentId(this.startDragParentId)},_onDragOver(){},_onDragLeave(){},_onDragEnd(){BX.onCustomEvent(window,"BX.Main.grid:rowDragEnd",[this.dragEvent,this.parent]);BX.removeClass(this.parent.getContainer(),this.parent.settings.get("classOnDrag"));BX.removeClass(this.dragItem,this.parent.settings.get("classDragActive"));BX.Grid.Utils.styleForEach(this.list,{transition:"",transform:""});if(this.dragEvent.isAllowedMove()){this.sortRows(this.dragItem,this.targetItem);this.sortAdditionalDragItems(this.dragItem,this.additionalDragItems);this.list=this.getList();this.parent.getRows().reset();const t=this.parent.getRows().get(this.dragItem);const e=this.parent.getRows().getBodyChild().map((t=>t.getId()));if(this.parent.getParam("ALLOW_ROWS_SORT_INSTANT_SAVE",true)){this.saveRowsSort(e)}BX.onCustomEvent(window,"Grid::rowMoved",[e,t,this.parent])}else{this.resetDragProperties()}BX.remove(this.fake);this.setDefaultProps()},sortAdditionalDragItems(t,e){e.reduce(((t,e)=>{Boolean(e)&&BX.insertAfter(e,t);return e}),t)},sortRows(t,e){if(e){e.parentNode.insertBefore(t,e)}else if(this.moved){t.parentNode.appendChild(t)}},saveRowsSort(t){const e={ids:t,action:this.parent.getUserOptions().getAction("GRID_SAVE_ROWS_SORT")};this.parent.getData().request(null,"POST",e)},setDefaultProps(){this.moved=false;this.dragItem=null;this.targetItem=null;this.dragRect=null;this.dragIndex=null;this.offset=null;this.realX=null;this.realY=null;this.dragStartOffset=null;this.windowScrollTop=null;this.rowsRectList=null;this.error=false}}})();(function(){BX.namespace("BX.Grid");BX.Grid.Settings=function(){this.settings={};this.defaultSettings={classContainer:"main-grid",classWrapper:"main-grid-wrapper",classTable:"main-grid-table",classScrollContainer:"main-grid-container",classFadeContainer:"main-grid-fade",classFadeContainerRight:"main-grid-fade-right",classFadeContainerLeft:"main-grid-fade-left",classNavPanel:"main-grid-nav-panel",classActionPanel:"main-grid-action-panel",classCursor:"main-grid-cursor",classRowCustom:"main-grid-row-custom",classMoreButton:"main-grid-more-btn",classRow:"main-grid-row",classHeadRow:"main-grid-row-head",classBodyRow:"main-grid-row-body",classFootRow:"main-grid-row-foot",classDataRows:"main-grid-row-data",classPanels:"main-grid-bottom-panels",classCellHeadContainer:"main-grid-cell-head-container",classCellHeadOndrag:"main-grid-cell-head-ondrag",classEmptyRows:"main-grid-row-empty",classEmptyBlock:"main-grid-empty-block",classCheckAllCheckboxes:"main-grid-check-all",classCheckedRow:"main-grid-row-checked",classRowCheckbox:"main-grid-row-checkbox",classPagination:"main-grid-panel-cell-pagination",classActionCol:"main-grid-cell-action",classCounterDisplayed:"main-grid-counter-displayed",classCounterSelected:"main-grid-counter-selected",classCounterTotal:"main-grid-panel-total",classTableFade:"main-grid-table-fade",classDragActive:"main-grid-on-row-drag",classResizeButton:"main-grid-resize-button",classOnDrag:"main-grid-ondrag",classDisableDrag:"main-grid-row-drag-disabled",classPanelCellContent:"main-grid-panel-content",classCollapseButton:"main-grid-plus-button",classRowStateLoad:"main-grid-load-row",classRowStateExpand:"main-grid-row-expand",classHeaderSortable:"main-grid-col-sortable",classHeaderNoSortable:"main-grid-col-no-sortable",classCellStatic:"main-grid-cell-static",classHeadCell:"main-grid-cell-head",classPageSize:"main-grid-panel-select-pagesize",classGroupEditButton:"main-grid-control-panel-action-edit",classGroupDeleteButton:"main-grid-control-panel-action-remove",classGroupActionsDisabled:"main-grid-control-panel-action-icon-disable",classPanelButton:"ui-btn",classPanelApplyButton:"main-grid-control-panel-apply-button",classPanelCheckbox:"main-grid-panel-checkbox",classEditor:"main-grid-editor",classEditorContainer:"main-grid-editor-container",classEditorText:"main-grid-editor-text",classEditorDate:"main-grid-editor-date",classEditorNumber:"main-grid-editor-number",classEditorRange:"main-grid-editor-range",classEditorCheckbox:"main-grid-editor-checkbox",classEditorTextarea:"main-grid-editor-textarea",classEditorCustom:"main-grid-editor-custom",classEditorMoney:"main-grid-editor-money",classCellContainer:"main-grid-cell-content",classEditorOutput:"main-grid-editor-output",classSettingsWindow:"main-grid-settings-window",classSettingsWindowColumn:"main-grid-settings-window-list-item",classSettingsWindowColumnLabel:"main-grid-settings-window-list-item-label",classSettingsWindowColumnEditState:"main-grid-settings-window-list-item-edit",classSettingsWindowColumnEditInput:"main-grid-settings-window-list-item-edit-input",classSettingsWindowColumnEditButton:"main-grid-settings-window-list-item-edit-button",classSettingsWindowColumnCheckbox:"main-grid-settings-window-list-item-checkbox",classSettingsWindowShow:"main-grid-settings-window-show",classSettingsWindowSelectAll:"main-grid-settings-window-select-all",classSettingsWindowUnselectAll:"main-grid-settings-window-unselect-all",classSettingsWindowSearchSectionsWrapper:"main-grid-settings-window-search-section-wrapper",classSettingsWindowSearchActiveSectionIcon:"main-grid-settings-window-search-section-item-icon-active",classSettingsWindowSearchSectionInput:"main-grid-settings-window-search-section-input",classSettingsWindowSearchSectionItemHidden:"main-grid-settings-window-list-item-hidden",classSettingsWindowSearchSectionItemVisible:"main-grid-settings-window-list-item-visible",classSettingsButton:"main-grid-interface-settings-icon",classSettingsButtonActive:"main-grid-interface-settings-icon-active",classSettingsWindowClose:"main-grid-settings-window-actions-item-close",classSettingsWindowReset:"main-grid-settings-window-actions-item-reset",classSettingsWindowColumnChecked:"main-grid-settings-window-list-item-checked",classShowAnimation:"main-grid-show-popup-animation",classCloseAnimation:"main-grid-close-popup-animation",classLoader:"main-grid-loader-container",classLoaderShow:"main-grid-show-loader",classLoaderHide:"main-grid-hide-loader",classRowError:"main-grid-error",loaderHideAnimationName:"hideLoader",classHide:"main-grid-hide",classEar:"main-grid-ear",classEarLeft:"main-grid-ear-left",classEarRight:"main-grid-ear-right",classNotCount:"main-grid-not-count",classCounter:"main-grid-panel-counter",classForAllCounterEnabled:"main-grid-panel-counter-for-all-enable",classLoad:"load",classRowActionButton:"main-grid-row-action-button",classDropdown:"main-dropdown",classPanelControl:"main-grid-panel-control",classPanelControlContainer:"main-grid-panel-control-container",classForAllCheckbox:"main-grid-for-all-checkbox",classDisable:"main-grid-disable",dataActionsKey:"actions",updateActionMore:"more",classShow:"show",classGridShow:"main-grid-show",updateActionPagination:"pagination",updateActionSort:"sort",ajaxIdDataProp:"ajaxid",pageSizeId:"grid_page_size",sortableRows:true,sortableColumns:true,animationDuration:300};this.prepare()};BX.Grid.Settings.prototype={prepare(){this.settings=this.defaultSettings},getDefault(){return this.defaultSettings},get(t){let e;try{e=this.getDefault()[t]}catch{e=null}return e},getList(){return this.getDefault()}}})();const namespace$5=main_core.Reflection.namespace("BX.Grid.SettingsWindow");const SAVE_FOR_ALL="forAll";const SAVE_FOR_ME="forMe";class CheckboxList{constructor(t){this.params={};this.options={};this.stickyColumns=new Set;this.popup=null;this.popupItems=null;this.params=t;this.grid=t.grid;this.parent=t.parent;this.options=this.grid.arParams.CHECKBOX_LIST_OPTIONS;this.useSearch=Boolean(this.grid.arParams.ENABLE_FIELDS_SEARCH);this.useSectioning=main_core.Type.isArrayFilled(this.options.sections);this.isForAllValue=false}getPopup(){if(!this.popup){this.createPopup()}return this.popup}createPopup(){if(this.popup){return}const{useSearch:t,useSectioning:e,params:{title:i,placeholder:s,emptyStateTitle:n,emptyStateDescription:o,allSectionsDisabledTitle:a}}=this;const r={parentType:"grid"};this.popup=new ui_dialogs_checkboxList.CheckboxList({context:r,popupOptions:{width:1100},columnCount:4,lang:{title:i,placeholder:s,emptyStateTitle:n,emptyStateDescription:o,allSectionsDisabledTitle:a},sections:this.getSections(),categories:this.getCategories(),options:this.getOptions(),events:{onApply:t=>this.onApply(t),onDefault:t=>this.onDefault(t)},params:{useSearch:t,useSectioning:e,destroyPopupAfterClose:false,closeAfterApply:false,isEditableOptionsTitle:true},customFooterElements:this.getCustomFooterElements()})}getSections(){var t;const e=(t=this.options.sections)!=null?t:[];const i=[];e.forEach((t=>{const{id:e,name:s,selected:n}=t;i.push({key:e,title:s,value:n})}));return i}getCategories(){var t;const e=(t=this.options.categories)!=null?t:[];const i=[];if(e.length===0){this.getSections().forEach((t=>{const{key:e,title:s}=t;i.push({key:e,title:s,sectionKey:e})}));return i}e.forEach((t=>{const{title:e,sectionKey:s,key:n}=t;i.push({title:e,sectionKey:s,key:n})}));return i}getOptions(){var t,e,i,s;const n=this.options;const o=(t=n.columns)!=null?t:[];const a=(e=n.columnsWithSections)!=null?e:[];const r=[];const l=(i=(s=this.grid.getUserOptions().getCurrentOptions())==null?void 0:s.custom_names)!=null?i:{};if(this.useSectioning){for(const t in a){a[t].forEach((e=>{const{id:i,default:s}=e;let{name:n}=e;if(main_core.Type.isPlainObject(l)&&Object.hasOwn(l,"id")){n=l[i]}r.push({title:main_core.Text.decode(n),value:this.isChecked(i),categoryKey:t,defaultValue:s,id:i});this.prepareColumnParams(e)}))}return r}o.forEach((t=>{const{id:e,name:i,default:s}=t;r.push({title:main_core.Text.decode(i),value:this.isChecked(e),defaultValue:s,id:e});this.prepareColumnParams(t)}));return r}isChecked(t){var e;const i=(e=this.options.checked)!=null?e:[];return i.includes(t)}prepareColumnParams(t){const{sticked:e,id:i}=t;if(e){this.stickyColumns.add(i)}}getCustomFooterElements(){if(this.isAdmin()){const{arParams:t,containerId:e}=this.parent;return[{type:"textToggle",id:`${e}-${SAVE_FOR_ALL}`,title:t.SETTINGS_FOR_LABEL,dataItems:[{value:SAVE_FOR_ME,label:t.SETTINGS_FOR_FOR_ME_LABEL},{value:SAVE_FOR_ALL,label:t.SETTINGS_FOR_FOR_ALL_LABEL}],onClick:t=>{this.isForAllValue=t===SAVE_FOR_ALL}}]}return[]}show(){this.popup.show()}getStickedColumns(){const{ALLOW_STICKED_COLUMNS:t,HAS_STICKED_COLUMNS:e}=this.parent.arParams;if(t&&e){return this.stickyColumns.values()}return[]}onApply(t){const{fields:e,data:i}=t.data;if(this.isForAll()){const t={CONFIRM:true,CONFIRM_MESSAGE:this.grid.getParam("SETTINGS_FOR_ALL_CONFIRM_MESSAGE")};this.grid.confirmDialog(t,(()=>this.saveColumnsAndHidePopup(e,i)))}else{this.saveColumnsAndHidePopup(e,i)}}saveColumnsAndHidePopup(t,e){this.saveColumns(t,e);this.popup.hide()}saveColumns(t,e){const i=this.grid.getUserOptions();const s=this.getColumnNames(e);const n=this.getStickedColumns();const o=[{action:i.getAction("GRID_SET_COLUMNS"),columns:t.join(",")},{action:i.getAction("SET_CUSTOM_NAMES"),custom_names:s},{action:i.getAction("GRID_SET_STICKED_COLUMNS"),stickedColumns:n}];if(this.isForAll()){o.push({action:i.getAction("GRID_SAVE_SETTINGS"),view_id:"default",set_default_settings:"Y",delete_user_settings:"Y"})}i.batch(o,(()=>this.grid.reloadTable()))}getColumnNames(t){var e;const i=this.options;const s=(e=i.columns)!=null?e:[];const n={};const{titles:o}=t;if(!main_core.Type.isObjectLike(o)){return{}}s.forEach((t=>{const e=t.id;if(main_core.Type.isStringFilled(o[e])&&o[e]!==t.name){n[e]=o[e]}else if(main_core.Type.isStringFilled(this.parent.arParams.DEFAULT_COLUMNS[e].name)&&this.parent.arParams.DEFAULT_COLUMNS[e].name!==t.name){n[e]=t.name}}));return n}onDefault(t){const e={CONFIRM:true,CONFIRM_MESSAGE:this.grid.arParams.CONFIRM_RESET_MESSAGE};this.grid.confirmDialog(e,(()=>{this.grid.getUserOptions().reset(this.isForAll(),(()=>{this.reset();this.grid.reloadTable(null,null,(()=>{this.popup.options.forEach((t=>{this.grid.gridSettings.select(t.id,t.defaultValue===true)}))}))}))}));t.preventDefault();return t}sortItems(){}reset(){this.options.checked=[];this.popup.options.filter((t=>t.defaultValue)).forEach((t=>{this.options.checked.push(t.id)}));this.close()}getSelectedColumns(){return this.getPopup().getSelectedOptions()}close(){var t;(t=this.popup)==null?void 0:t.destroy()}isForAll(){return this.isForAllValue}isAdmin(){var t;return Boolean((t=this.parent.arParams.IS_ADMIN)!=null?t:false)}getPopupItems(){return this.options.columns}getItems(){return this.getPopup().getOptions()}select(t,e=true){var i,s;if(((i=this.getPopup())==null?void 0:(s=i.selectOption)==null?void 0:s.length)===1&&e===false){return}this.getPopup().selectOption(t,e)}saveColumnsByNames(t,e){this.getItems().filter((e=>t.includes(e.id))).forEach((t=>this.select(t.id)));this.getPopup().apply();if(main_core.Type.isFunction(e)){e()}}}namespace$5.CheckboxList=CheckboxList;(function(){BX.namespace("BX.Grid.SettingsWindow");BX.Grid.SettingsWindow.Column=function(t,e){this.node=null;this.label=null;this.checkbox=null;this.editButton=null;this.settings=null;this.parent=null;this.default=null;this.defaultTitle=null;this.state=null;this.lastTitle=null;this.init(t,e)};BX.Grid.SettingsWindow.Column.inited={};BX.Grid.SettingsWindow.Column.prototype={init:function(t,e){this.parent=t;this.node=e;try{this.lastTitle=e.querySelector("label").innerText.trim()}catch(t){}this.updateState();if(!BX.Grid.SettingsWindow.Column.inited[this.getId()]){BX.Grid.SettingsWindow.Column.inited[this.getId()]=true;BX.bind(this.getEditButton(),"click",BX.proxy(this.onEditButtonClick,this));BX.bind(this.getStickyButton(),"click",BX.proxy(this.onStickyButtonClick,this))}},getStickyButton:function(){return this.node.querySelector(".main-grid-settings-window-list-item-sticky-button")},isSticked:function(){return this.node.classList.contains("main-grid-settings-window-list-item-sticked")},onStickyButtonClick:function(){if(this.isSticked()){this.unstick()}else{this.stick()}},stick:function(){this.node.classList.add("main-grid-settings-window-list-item-sticked")},unstick:function(){this.node.classList.remove("main-grid-settings-window-list-item-sticked")},onEditButtonClick:function(t){t.stopPropagation();this.isEditEnabled()?this.disableEdit():this.enableEdit()},setState:function(t){this.state=t},getState:function(){return this.state},updateState:function(){this.setState({selected:this.isSelected(),sticked:this.isSticked(),title:this.getTitle()})},restoreState:function(){var t=this.getState();t.selected?this.select():this.unselect();t.sticked?this.stick():this.unstick();this.setTitle(t.title)},getId:function(){return this.getNode().dataset.name},getTitle:function(){return this.getLabel().innerText},setTitle:function(t){this.getLabel().innerText=!!t&&t!=="undefined"?t:this.getDefaultTitle()},isEdited:function(){return this.getTitle()!==this.getDefaultTitle()},getSettings:function(){if(this.settings===null){var t=this.parent.getParam("DEFAULT_COLUMNS");this.settings=this.getId()in t?t[this.getId()]:{}}return this.settings},isDefault:function(){if(this.default===null){var t=this.getSettings();this.default="default"in t?t.default:false}return this.default},restore:function(){this.isDefault()?this.select():this.unselect();this.setTitle(this.getDefaultTitle());this.node.dataset.stickedDefault==="true"?this.stick():this.unstick();this.disableEdit();this.updateState()},getDefaultTitle:function(){if(this.defaultTitle===null){var t=this.getSettings();this.defaultTitle="name"in t?t.name:this.lastTitle}return this.defaultTitle},getNode:function(){return this.node},getLabel:function(){if(this.label===null){this.label=BX.Grid.Utils.getByTag(this.getNode(),"label",true);BX.Event.bind(this.label,"paste",this.onLabelPaste.bind(this));BX.Event.bind(this.label,"keydown",this.onLabelKeydown.bind(this))}return this.label},onLabelPaste:function(t){t.preventDefault();if(t.clipboardData&&t.clipboardData.getData){var e=t.clipboardData.getData("text/plain");var i=BX.Text.encode(e);var s=i.trim().replace(new RegExp("\t","g")," ").replace(new RegExp("\n","g")," ").replace(/ +(?= )/g,"");document.execCommand("insertHTML",false,s)}},onLabelKeydown:function(t){if(t.keyCode===13){t.preventDefault()}},getCheckbox:function(){if(this.checkbox===null){this.checkbox=BX.Grid.Utils.getBySelector(this.getNode(),'input[type="checkbox"]',true)}return this.checkbox},getEditButton:function(){if(this.editButton===null){this.editButton=BX.Grid.Utils.getByClass(this.getNode(),this.parent.settings.get("classSettingsWindowColumnEditButton"),true)}return this.editButton},enableEdit:function(){this.getLabel().contentEditable=true;this.getCheckbox().disabled=true;this.adjustCaret()},disableEdit:function(){this.getLabel().contentEditable=false;this.getCheckbox().disabled=false},isEditEnabled:function(){return this.getLabel().isContentEditable},isSelected:function(){return this.getCheckbox().checked},select:function(){this.getCheckbox().checked=true},unselect:function(){this.getCheckbox().checked=false},adjustCaret:function(){var t=document.createRange();var e=window.getSelection();var i=this.getLabel().innerText.length;var s=this.getLabel().childNodes;var n=s[s.length-1];t.setStart(n,i);t.setEnd(n,i);t.collapse(true);e.removeAllRanges();e.addRange(t);BX.fireEvent(this.getNode(),"focus")}}})();let _$3=t=>t,_t$3;(function(){BX.namespace("BX.Grid.SettingsWindow");BX.Grid.SettingsWindow.Manager=function(t){this.parent=null;this.fieldsSettingsInstance=null;this.init(t)};BX.Grid.SettingsWindow.Manager.prototype={init(t){this.parent=t;BX.bind(this.parent.getContainer(),"click",BX.proxy(this._onContainerClick,this));BX.addCustomEvent(window,"Grid::columnMoved",BX.proxy(this._onColumnMoved,this))},destroy(){BX.unbind(this.parent.getContainer(),"click",BX.proxy(this._onContainerClick,this));BX.removeCustomEvent(window,"Grid::columnMoved",BX.proxy(this._onColumnMoved,this));this.getPopup().close()},_onContainerClick(t){if(BX.hasClass(t.target,this.parent.settings.get("classSettingsButton"))){this._onSettingsButtonClick(t)}},_onSettingsButtonClick(){this.getFieldsSettingsInstance().then((t=>{this.fieldsSettingsInstance=t;this.fieldsSettingsInstance.show();BX.onCustomEvent(window,"BX.Grid.SettingsWindow:show",[this.fieldsSettingsInstance])}))},getFieldsSettingsInstance(){if(this.fieldsSettingsInstance){return Promise.resolve(this.fieldsSettingsInstance)}return new Promise((t=>{const e=this.createFieldsSettingsInstance();t(e)}))},createFieldsSettingsInstance(){let t=null;const{parent:e}=this;const i={grid:e,parent:e,isUseLazyLoadColumns:this.useLazyLoadColumns(),title:this.getPopupTitle(),placeholder:e.getParam("SETTINGS_FIELD_SEARCH_PLACEHOLDER"),emptyStateTitle:e.getParam("SETTINGS_FIELD_SEARCH_EMPTY_STATE_TITLE"),emptyStateDescription:e.getParam("SETTINGS_FIELD_SEARCH_EMPTY_STATE_DESCRIPTION"),allSectionsDisabledTitle:e.getParam("SETTINGS_FIELD_SEARCH_ALL_SECTIONS_DISABLED")};if(this.useCheckboxList()){t=new BX.Grid.SettingsWindow.CheckboxList(i)}else{t=new BX.Grid.SettingsWindow.Popup(i)}t.createPopup();BX.onCustomEvent(window,"BX.Grid.SettingsWindow:init",[t]);return t},useCheckboxList(){var t;return Boolean(this.parent.getParam("USE_CHECKBOX_LIST_FOR_SETTINGS_POPUP"))&&main_core.Type.isFunction((t=BX.UI)==null?void 0:t.CheckboxList)},useLazyLoadColumns(){return Boolean(this.parent.getParam("LAZY_LOAD"))},_onColumnMoved(){this.sortItems();this.reset()},sortItems(){this.getPopup().sortItems()},reset(){this.getPopup().reset()},getSelectedColumns(){return this.getPopup().getSelectedColumns()},getPopup(){if(this.fieldsSettingsInstance===null){this.fieldsSettingsInstance=this.createFieldsSettingsInstance()}return this.fieldsSettingsInstance},getPopupTitle(){const t=this.parent.getParam("SETTINGS_WINDOW_TITLE");const e=this.parent.getParam("SETTINGS_TITLE");const i=main_core.Tag.render(_t$3||(_t$3=_$3`<div></div>`));if(main_core.Type.isStringFilled(t)){i.innerHTML=`<span>${e} &laquo;${t}&raquo;</span>`;return i.firstChild.innerText}const s=BX.Main.gridManager.data.length;if(s===1){const t=document.getElementById("pagetitle");const s=main_core.Type.isDomNode(t)&&main_core.Type.isStringFilled(t.innerText)?`&laquo;${main_core.Text.encode(t.innerText)}&raquo;`:"";i.innerHTML=`<span>${e} ${s}</span>`;return i.firstChild.innerText}return e},getShowedColumns(){const t=[];const e=this.parent.getRows().getHeadFirstChild().getCells();[].slice.call(e).forEach((e=>{if("name"in e.dataset){t.push(e.dataset.name)}}));return t},getItems(){return this.getPopup().getItems()},saveColumns(t,e){this.getPopup().saveColumnsByNames(t,e)},select(t,e=true){this.getPopup().select(t,e)}}})();let _$4=t=>t,_t$4,_t2$3;const namespace$6=main_core.Reflection.namespace("BX.Grid.SettingsWindow");class Popup{constructor(t){this.options={};this.items=null;this.popupItems=null;this.popup=null;this.filterSectionsSearchInput=null;this.filterSections=null;this.allColumns=null;this.applyButton=null;this.resetButton=null;this.cancelButton=null;this.selectAllButton=null;this.unselectAllButton=null;this.options=t;this.grid=t.grid;this.parent=t.parent}getPopup(){if(!this.popup){this.createPopup()}return this.popup}createPopup(){if(this.popup){return}const t=20;const e=20;const i=document.body.offsetWidth>1e3?1e3:document.body.offsetWidth-t-e;const{title:s}=this.options;this.popup=new main_popup.Popup(this.getPopupId(),null,{titleBar:s,autoHide:false,overlay:.6,width:i,closeIcon:true,closeByEsc:true,contentNoPaddings:true,content:this.getSourceContent(),events:{onPopupClose:this.onPopupClose.bind(this)}});this.getItems().forEach((t=>{main_core.Event.bind(t.getNode(),"click",this.onItemClick.bind(this));main_core.Event.bind(t.getNode(),"animationend",this.onAnimationEnd.bind(this,t.getNode()))}));main_core.Event.bind(this.getResetButton(),"click",this.onResetButtonClick.bind(this));main_core.Event.bind(this.getApplyButton(),"click",this.onApplyButtonClick.bind(this));main_core.Event.bind(this.getCancelButton(),"click",this.popup.close.bind(this.popup));main_core.Event.bind(this.getSelectAllButton(),"click",this.onSelectAll.bind(this));main_core.Event.bind(this.getUnselectAllButton(),"click",this.onUnselectAll.bind(this));if(main_core.Type.isObjectLike(this.grid.arParams.COLUMNS_ALL_WITH_SECTIONS)&&Object.keys(this.grid.arParams.COLUMNS_ALL_WITH_SECTIONS).length>0){this.prepareFilterSections()}if(this.grid.arParams.ENABLE_FIELDS_SEARCH){this.prepareFilterSectionsSearchInput()}}show(){this.popup.show()}close(){this.onPopupClose()}onPopupClose(){this.emitSaveEvent();this.restoreLastColumns();this.disableAllColumnsLabelEdit();this.adjustActionButtonsState()}emitSaveEvent(){main_core_events.EventEmitter.emit(window,"BX.Grid.SettingsWindow:close",[this,this.parent])}restoreLastColumns(){this.getItems().forEach((t=>t.restoreState()))}disableAllColumnsLabelEdit(){this.getItems().forEach((t=>t.disableEdit()))}getPopupId(){return`${this.grid.getContainerId()}-grid-settings-window`}getSourceContent(){const t=this.grid.settings.get("classSettingsWindow");const e=this.grid.getContainer().querySelector(`.${t}`);if(!this.options.isUseLazyLoadColumns){return e}const i=e.querySelector(".main-grid-settings-window-list");i.innerHTML="";const s=new main_loader.Loader({target:i});void s.show();this.fetchColumns().then((t=>{t.forEach((t=>{this.prepareColumnOptions(t);main_core.Dom.append(this.createColumnElement(t),i)}));this.hideAndDestroyLoader();this.reset();this.getItems().forEach((t=>{main_core.Event.bind(t.getNode(),"click",this.onItemClick)}));const s=main_core.Tag.render(_t$4||(_t$4=_$4`
					<div class="main-grid-popup-window-buttons-wrapper"></div>
				`));main_core.Dom.append(e.querySelector(".popup-window-buttons"),s);requestAnimationFrame((()=>{main_core.Dom.style(s,{width:`${this.getPopupContainer().clientWidth}px`});main_core.Dom.append(s,this.getPopupContainer())}))})).catch((t=>{console.error(t)}));return e}fetchColumns(){const t=new BX.Promise;const e=this.grid.getParam("LAZY_LOAD");const i=this.grid.getId();if(main_core.Type.isPlainObject(e)){const{controller:s,GET_LIST:n}=e;if(main_core.Type.isNil(s)){ajax({url:n,method:"GET",dataType:"json",onsuccess:t.fulfill.bind(t)})}else{main_core.ajax.runAction(`${s}.getColumnsList`,{method:"GET",data:{gridId:i}}).then(t.fulfill.bind(t))}}return t}prepareColumnOptions(t){if(!main_core.Type.isPlainObject(t)){return}const e=this.grid.getUserOptions().getCurrentOptions().custom_names;if(main_core.Type.isPlainObject(e)&&t.id in e){t.name=e[t.id]}if(this.grid.getColumnHeaderCellByName(t.id)){t.selected=true}}createColumnElement(t){const e=`${t.id}-checkbox`;const i=t.selected?" checked":"";return main_core.Tag.render(_t2$3||(_t2$3=_$4`
			<div data-name=${0} class='main-grid-settings-window-list-item'>
				<input
					id='${0}'
					type='checkbox'
					class='main-grid-settings-window-list-item-checkbox${0})'
				>
				<label
					for='${0}'
					class='main-grid-settings-window-list-item-label'
				>
					${0}
				</label>
				<span class='main-grid-settings-window-list-item-edit-button'></span>
			</div>
		`),t.id,e,i,e,t.name)}hideAndDestroyLoader(t){void t.hide().then((()=>t.destroy()))}onItemClick(){this.adjustActionButtonsState()}onAnimationEnd(t){const e=main_core.Dom.hasClass(t,this.grid.settings.get("classSettingsWindowSearchSectionItemHidden"))?"none":"inline-block";main_core.Dom.style(t,{display:e})}adjustActionButtonsState(){if(this.getSelectedColumns().length>0){this.enableActions();return}this.disableActions()}getSelectedColumns(){const t=[];this.getItems().forEach((e=>{if(e.isSelected()){t.push(e.getId())}}));return t}getItems(){if(this.items===null){const{grid:t}=this;const e=this.getPopupItems();this.items=[...e].map((e=>new BX.Grid.SettingsWindow.Column(t,e)))}return this.items}getPopupItems(){if(!this.popupItems){const t=this.getPopupContentContainer();const e=this.grid.settings.get("classSettingsWindowColumn");this.popupItems=t.getElementsByClassName(e)}return this.popupItems}enableActions(){const t=this.getApplyButton();if(t){main_core.Dom.removeClass(t,this.grid.settings.get("classDisable"))}}prepareFilterSectionsSearchInput(){const t=this.getFilterSectionsSearchInput();main_core.Event.bind(t,"input",this.onFilterSectionSearchInput.bind(this));main_core.Event.bind(t.previousElementSibling,"click",this.onFilterSectionSearchInputClear.bind(this))}getFilterSectionsSearchInput(){if(!this.filterSectionsSearchInput){const t=this.grid.settings.get("classSettingsWindowSearchSectionInput");this.filterSectionsSearchInput=this.getPopupContentContainer().querySelector(`.${t}`)}return this.filterSectionsSearchInput}onFilterSectionSearchInput(){let t=this.filterSectionsSearchInput.value;if(t.length>0){t=t.toLowerCase()}this.items.forEach((e=>{const i=e.lastTitle.toLowerCase();const s=e.getNode();if(t.length>0&&!i.includes(t)){main_core.Dom.removeClass(s,this.grid.settings.get("classSettingsWindowSearchSectionItemVisible"));main_core.Dom.addClass(s,this.grid.settings.get("classSettingsWindowSearchSectionItemHidden"))}else{main_core.Dom.removeClass(s,this.grid.settings.get("classSettingsWindowSearchSectionItemHidden"));main_core.Dom.addClass(s,this.grid.settings.get("classSettingsWindowSearchSectionItemVisible"));main_core.Dom.style(s,{display:"inline-block"})}}))}onFilterSectionSearchInputClear(){this.filterSectionsSearchInput.value="";this.onFilterSectionSearchInput()}getResetButton(){if(this.resetButton===null){this.resetButton=document.getElementById(this.getResetButtonId())}return this.resetButton}getResetButtonId(){return`${this.grid.getContainerId()}-grid-settings-reset-button`}onResetButtonClick(){const t={CONFIRM:true,CONFIRM_MESSAGE:this.grid.arParams.CONFIRM_RESET_MESSAGE};this.grid.confirmDialog(t,(()=>{this.enableWait(this.getApplyButton());this.grid.getUserOptions().reset(this.isForAll(),(()=>{this.grid.reloadTable(null,null,(()=>{this.restoreColumns();this.disableWait(this.getApplyButton());this.popup.close()}))}))}))}restoreColumns(){this.getItems().forEach((t=>t.restore()));this.sortItems();this.reset()}sortItems(){const t=this.getShowedColumns();const e={};this.getAllColumns().forEach((t=>{e[t]=t}));let i=0;Object.keys(e).forEach((s=>{if(this.isShowedColumn(s)){e[s]=t[i];i++}const n=this.getColumnByName(e[s]);if(n){main_core.Dom.append(n,n.parentNode)}}))}getShowedColumns(){return this.parent.gridSettings.getSelectedColumns()}getColumnByName(t){return BX.Grid.Utils.getBySelector(this.getPopupContainer(),`.${this.grid.settings.get("classSettingsWindowColumn")}[data-name="${t}"]`,true)}isShowedColumn(t){return this.getSelectedColumns().includes(t)}getAllColumns(){if(!this.allColumns){this.allColumns=this.getItems().map((t=>t.getId()))}return this.allColumns}reset(){this.popupItems=null;this.allColumns=null;this.items=null}getApplyButton(){if(this.applyButton===null){this.applyButton=document.getElementById(this.getApplyButtonId())}return this.applyButton}getApplyButtonId(){return`${this.grid.getContainerId()}-grid-settings-apply-button`}onApplyButtonClick(){const t={CONFIRM:this.isForAll(),CONFIRM_MESSAGE:this.grid.getParam("SETTINGS_FOR_ALL_CONFIRM_MESSAGE")};this.grid.confirmDialog(t,(()=>this.onApplyConfirmDialogButton()),(()=>this.unselectForAllCheckbox()))}onApplyConfirmDialogButton(){this.enableWait(this.getApplyButton());this.saveColumns(this.getSelectedColumns(),(()=>{this.popup.close();this.disableWait(this.getApplyButton());this.unselectForAllCheckbox()}));this.emitSaveEvent()}enableWait(t){main_core.Dom.addClass(t,"ui-btn-wait");main_core.Dom.removeClass(t,"popup-window-button")}disableWait(t){main_core.Dom.removeClass(t,"ui-btn-wait");main_core.Dom.addClass(t,"popup-window-button")}saveColumns(t,e){const i=this.grid.getUserOptions();const s=this.getColumnNames();const n=this.getStickedColumns();const o=[{action:i.getAction("GRID_SET_COLUMNS"),columns:t.join(",")},{action:i.getAction("SET_CUSTOM_NAMES"),custom_names:s},{action:i.getAction("GRID_SET_STICKED_COLUMNS"),stickedColumns:n}];if(this.isForAll()){o.push({action:i.getAction("GRID_SAVE_SETTINGS"),view_id:"default",set_default_settings:"Y",delete_user_settings:"Y"})}i.batch(o,(()=>this.grid.reloadTable(null,null,e)));this.updateColumnsState()}getColumnNames(){const t={};this.getItems().forEach((e=>{if(e.isEdited()){t[e.getId()]=e.getTitle()}}));return t}getStickedColumns(){return this.getItems().reduce(((t,e)=>{if(e.isSticked()){t.push(e.getId())}return t}),[])}updateColumnsState(){this.getItems().forEach((t=>t.updateState()))}isForAll(){const t=this.getForAllCheckbox();return t&&Boolean(t.checked)}unselectForAllCheckbox(){const t=this.getForAllCheckbox();if(t){t.checked=null}}getForAllCheckbox(){return this.getPopupContainer().querySelector(".main-grid-settings-window-for-all-checkbox")}getPopupContainer(){return this.getPopup().getPopupContainer()}getPopupContentContainer(){return this.getPopup().getContentContainer()}getCancelButton(){if(this.cancelButton===null){this.cancelButton=document.getElementById(this.getCancelButtonId())}return this.cancelButton}getCancelButtonId(){return`${this.grid.getContainerId()}-grid-settings-cancel-button`}getSelectAllButton(){if(!this.selectAllButton){const t=this.grid.settings.get("classSettingsWindowSelectAll");this.selectAllButton=this.getPopupContentContainer().querySelector(`.${t}`)}return this.selectAllButton}onSelectAll(){this.selectAll();this.enableActions()}selectAll(){this.getItems().forEach((t=>t.select()))}getUnselectAllButton(){if(!this.unselectAllButton){const t=this.grid.settings.get("classSettingsWindowUnselectAll");this.unselectAllButton=this.getPopupContentContainer().querySelector(`.${t}`)}return this.unselectAllButton}onUnselectAll(){this.unselectAll();this.disableActions()}disableActions(){const t=this.getApplyButton();if(t){main_core.Dom.addClass(t,this.grid.settings.get("classDisable"))}}unselectAll(){this.getItems().forEach((t=>t.unselect()))}prepareFilterSections(){const t=this.getFilterSections();for(const e of t){main_core.Event.bind(e,"click",this.onFilterSectionClick.bind(this,e))}}getFilterSections(){if(!this.filterSections){var t;const e=this.grid.settings.get("classSettingsWindowSearchSectionsWrapper");const i=this.getPopupContentContainer().querySelector(`.${e}`);this.filterSections=(t=i.children)!=null?t:new HTMLCollection}return this.filterSections}onFilterSectionClick(t){var e;const i=this.grid.settings.get("classSettingsWindowSearchActiveSectionIcon");const s=(e=t.dataset)==null?void 0:e.uiGridFilterSectionButton;const n=document.querySelector(`[data-ui-grid-filter-section='${s}']`);if(main_core.Dom.hasClass(t.firstChild,i)){main_core.Dom.removeClass(t.firstChild,i);main_core.Dom.hide(n)}else{main_core.Dom.addClass(t.firstChild,i);main_core.Dom.show(n)}}select(t,e=true){const i=this.getItems().find((e=>e.getId()===t));if(e){i==null?void 0:i.select()}else{i==null?void 0:i.unselect()}}saveColumnsByNames(t,e){this.saveColumns(t,e)}}namespace$6.Popup=Popup;(function(){BX.namespace("BX.Grid");BX.Grid.UserOptions=function(t,e,i,s){this.options=null;this.actions=null;this.parent=null;this.url=null;this.init(t,e,i,s)};BX.Grid.UserOptions.prototype={init(parent,userOptions,userOptionsActions,url){this.url=url;this.parent=parent;try{this.options=eval(userOptions)}catch{console.warn("BX.Grid.UserOptions.init: Failed parse user options json string")}try{this.actions=eval(userOptionsActions)}catch{console.warn("BX.Grid.UserOptions.init: Failed parse user options actions json string")}},getCurrentViewName(){const t=this.getOptions();return"current_view"in t?t.current_view:null},getViewsList(){const t=this.getOptions();return"views"in t?t.views:{}},getCurrentOptions(){const t=this.getCurrentViewName();const e=this.getViewsList();let i=null;if(t in e){i=e[t]}if(!BX.type.isPlainObject(i)){i={}}return i},getUrl(t){return BX.util.add_url_param(this.url,{GRID_ID:this.parent.getContainerId(),bxajaxid:this.parent.getAjaxId(),action:t})},getOptions(){return this.options||{}},getActions(){return this.actions},getAction(t){let e=null;try{e=this.getActions()[t]}catch{e=null}return e},update(t){this.options=t},setColumns(t,e){const i=this.getCurrentOptions();if(BX.type.isPlainObject(i)){i.columns=t.join(",");this.save(this.getAction("GRID_SET_COLUMNS"),{columns:i.columns},e)}return this},setColumnsNames(t,e){const i={view_id:"default"};if(BX.type.isPlainObject(i)){i.custom_names=t;this.save(this.getAction("SET_CUSTOM_NAMES"),i,e)}return this},setColumnSizes(t,e){this.save(this.getAction("GRID_SET_COLUMN_SIZES"),{sizes:t,expand:e})},reset(t,e){let i={};if(t){i={view_id:"default",set_default_settings:"Y",delete_user_settings:"Y",view_settings:this.getCurrentOptions()}}this.save(this.getAction("GRID_RESET"),i,e)},setSort(t,e,i){if(t&&e){this.save(this.getAction("GRID_SET_SORT"),{by:t,order:e},i)}return this},setPageSize(t,e){if(BX.type.isNumber(parseInt(t))){this.save(this.getAction("GRID_SET_PAGE_SIZE"),{pageSize:t},e)}},setExpandedRows(t,e){BX.type.isArray(t)&&this.save(this.getAction("GRID_SET_EXPANDED_ROWS"),{ids:t},e)},setCollapsedGroups(t,e){BX.type.isArray(t)&&this.save(this.getAction("GRID_SET_COLLAPSED_GROUPS"),{ids:t},e)},resetExpandedRows(){this.save(this.getAction("GRID_RESET_EXPANDED_ROWS"),{})},saveForAll(t){this.save(this.getAction("GRID_SAVE_SETTINGS"),{view_id:"default",set_default_settings:"Y",delete_user_settings:"Y",view_settings:this.getCurrentOptions()},t)},batch(t,e){this.save(this.getAction("GRID_SAVE_BATH"),{bath:t},e)},save(t,e,i){const s=this;BX.ajax.post(this.getUrl(t),e,(t=>{try{t=JSON.parse(t);if(!t.error){s.update(t);if(BX.type.isFunction(i)){i(t)}BX.onCustomEvent(s.parent.getContainer(),"Grid::optionsChanged",[s.parent])}}catch{}}))}}})();(function(){BX.namespace("BX.Grid");BX.Grid.Utils={ajaxUrl(t,e){return this.addUrlParams(t,{bxajaxid:e})},addUrlParams(t,e){return BX.util.add_url_param(t,e)},arrayMove(t,e,i){if(i>=t.length){let e=i-t.length;while(e--+1){t.push(undefined)}}t.splice(i,0,t.splice(e,1)[0]);return t},getIndex(t,e){return[].indexOf.call(t||[],e)},getNext(t){if(t){return t.nextElementSibling||null}},getPrev(t){if(t){return t.previousElementSibling||null}},closestParent(t,e){if(t){if(!e){return t.parentNode||null}return BX.findParent(t,{className:e})}},closestChilds(t){if(t){return t.children||null}},collectionSort(t,e){let i;let s;let n;let o;let a;if(t&&e&&t!==e&&t.parentNode===e.parentNode){i=this.closestParent(e);s=this.closestChilds(i);n=s.length;o=this.getIndex(s,t);a=this.getIndex(s,e);if(n===a){i.appendChild(e)}if(o>a){i.insertBefore(t,e)}if(o<a&&n!==a){i.insertBefore(t,this.getNext(e))}}},getColumn(t,e){const i=this.getIndex(this.closestChilds(this.closestParent(e)),e);const s=[];[].forEach.call(t.rows,(t=>{s.push(t.cells[i])}));return s},styleForEach(t,e){e=BX.type.isPlainObject(e)?e:null;const i=Object.keys(e);[].forEach.call(t||[],(t=>{i.forEach((i=>{BX.style(t,i,e[i])}))}))},requestAnimationFrame(){const t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)};t.apply(window,arguments)},getByClass(t,e,i){let s=[];if(e){s=t?t.getElementsByClassName(e):[];if(i){s=s.length>0?s[0]:null}else{s=[].slice.call(s)}}return s},getByTag(t,e,i){let s=[];if(e){s=t?t.getElementsByTagName(e):[];if(i){s=s.length>0?s[0]:null}else{s=[].slice.call(s)}}return s},getBySelector(t,e,i){let s=[];if(e){if(i){s=t?t.querySelector(e):null}else{s=t?t.querySelectorAll(e):[];s=[].slice.call(s)}}return s},listenerParams(t){try{window.addEventListener("test",null,t)}catch{t=false}return t}}})()})(this.window=this.window||{},BX.UI,BX.UI,BX,BX.Event,BX,BX.Main);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:91:"/bitrix/components/bitrix/crm.deal.details/templates/.default/script.min.js?172873318410638";s:6:"source";s:71:"/bitrix/components/bitrix/crm.deal.details/templates/.default/script.js";s:3:"min";s:75:"/bitrix/components/bitrix/crm.deal.details/templates/.default/script.min.js";s:3:"map";s:75:"/bitrix/components/bitrix/crm.deal.details/templates/.default/script.map.js";}"*/
this.BX=this.BX||{};this.BX.Crm=this.BX.Crm||{};(function(e,t,n,i,a,r){"use strict";function s(e,t){o(e,t);t.add(e)}function l(e,t,n){o(e,t);t.set(e,n)}function o(e,t){if(t.has(e)){throw new TypeError("Cannot initialize the same private elements twice on an object")}}function c(e,t,n){if(!t.has(e)){throw new TypeError("attempted to get private field on non-instance")}return n}var u=new WeakMap;var v=new WeakMap;var b=new WeakMap;var d=new WeakMap;var E=new WeakMap;var h=new WeakSet;var p=new WeakSet;var g=new WeakSet;var f=new WeakSet;var T=new WeakSet;var m=new WeakSet;var M=new WeakSet;var w=new WeakSet;var _=new WeakSet;var S=new WeakSet;var C=new WeakSet;var D=function(){babelHelpers.createClass(e,null,[{key:"productsTabId",get:function e(){return"tab_products"}}]);function e(t){babelHelpers.classCallCheck(this,e);s(this,C);s(this,S);s(this,_);s(this,w);s(this,M);s(this,m);s(this,T);s(this,f);s(this,g);s(this,p);s(this,h);l(this,u,{writable:true,value:void 0});l(this,v,{writable:true,value:void 0});l(this,b,{writable:true,value:void 0});l(this,d,{writable:true,value:void 0});l(this,E,{writable:true,value:null});babelHelpers.classPrivateFieldSet(this,u,t.onboardingData);babelHelpers.classPrivateFieldSet(this,v,t.contentContainer);babelHelpers.classPrivateFieldSet(this,b,t.serviceUrl);babelHelpers.classPrivateFieldSet(this,d,t.dealDetailManager)}babelHelpers.createClass(e,[{key:"processOnboarding",value:function e(){if(!c(this,g,H).call(this)){return}var t=babelHelpers.classPrivateFieldGet(this,u).chain;var n=babelHelpers.classPrivateFieldGet(this,u).chainStep;var i=babelHelpers.classPrivateFieldGet(this,u).successDealGuideIsOver;if(t===0){if(n<1){c(this,f,O).call(this)}if(n<2){c(this,w,R).call(this)}}else if(t===1&&n===0){c(this,_,F).call(this)}if(!i){c(this,S,L).call(this)}}}]);return e}();function I(){return babelHelpers.classPrivateFieldGet(this,v)}function A(){return c(this,h,I).call(this).querySelector(".main-buttons")}function H(){if(r.PopupWindowManager&&r.PopupWindowManager.isAnyPopupShown()){return false}return true}function O(){var e={title:t.Loc.getMessage("CRM_DEAL_DETAIL_WAREHOUSE_AUTOMATIC_RESERVATION_GUIDE_TITLE"),text:t.Loc.getMessage("CRM_DEAL_DETAIL_WAREHOUSE_AUTOMATIC_RESERVATION_GUIDE_TEXT")};if(babelHelpers.classPrivateFieldGet(this,d).isTabButtonVisible(D.productsTabId)){c(this,m,y).call(this)}else{c(this,M,P).call(this)}}function k(e){var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var a={title:t.Loc.getMessage("CRM_DEAL_DETAIL_WAREHOUSE_AUTOMATIC_RESERVATION_GUIDE_TITLE"),text:t.Loc.getMessage("CRM_DEAL_DETAIL_WAREHOUSE_AUTOMATIC_RESERVATION_GUIDE_TEXT")};return new i.Guide({steps:[{target:e,title:a.title,text:a.text,position:"bottom",events:n}],onEvents:true})}function y(){var e=this;var n=babelHelpers.classPrivateFieldGet(this,d).getTabMenuItemContainer(D.productsTabId);var i=c(this,T,k).call(this,n,{onClose:function e(){t.userOptions.save("crm","warehouse-onboarding","firstChainStage",1)}});i.showNextStep();var a=babelHelpers.classPrivateFieldGet(this,d).getTabManager().getTabMenuContainer();var r=function n(){if(!babelHelpers.classPrivateFieldGet(e,d).isTabButtonVisible(D.productsTabId)){i.close();t.Event.unbind(window,"resize",n)}};t.Event.bind(window,"resize",r);t.Event.bindOnce(a,"mousedown",(function(){i.close();t.Event.unbind(window,"resize",r)}))}function P(){var e=this;var i=babelHelpers.classPrivateFieldGet(this,d).getTabManager().getMoreButton();var a=new BX.SpotLight({id:"".concat(D.productsTabId,"_spotlight"),targetElement:i,autoSave:true,targetVertex:"middle-center",zIndex:200});a.show();a.container.style.pointerEvents="none";var r=function i(r){var l=r.target.getMoreMenu();var o=babelHelpers.classPrivateFieldGet(e,d).getTabManager().getMoreMenu();if(l===o){a.close();var u=c(e,T,k).call(e,babelHelpers.classPrivateFieldGet(e,d).getTabFromMoreMenu(D.productsTabId));var v=l.getMenuContainer();var b=setTimeout((function(){u.showNextStep();BX.bindOnce(v,"click",h);var e=u.getPopup();n.EventEmitter.subscribeOnce(e,"onClose",E);var i=u.getPopup().getContentContainer().parentNode;BX.bind(i,"mouseenter",(function(){r.target.showMoreMenu()}));BX.bind(i,"mouseleave",(function(){var e=setTimeout((function(){r.target.closeMoreMenu()}),300);t.Event.bindOnce(o.getMenuContainer(),"mouseenter",(function(){clearTimeout(e)}))}))}),50);var E=function e(a){t.userOptions.save("crm","warehouse-onboarding","firstChainStage",1);t.Event.unbind(window,"resize",s);t.Event.unbind(v,"click",h);n.EventEmitter.unsubscribe("BX.Main.InterfaceButtons:onMoreMenuShow",i)};var h=function e(){t.userOptions.save("crm","warehouse-onboarding","firstChainStage",1);u.close()};t.Event.bind(o.getMenuContainer(),"click",E);n.EventEmitter.subscribeOnce("BX.Main.InterfaceButtons:onMoreMenuClose",(function(n){var i=n.target.getMoreMenu();var a=babelHelpers.classPrivateFieldGet(e,d).getTabManager().getMoreMenu();if(i===a){clearTimeout(b);t.Event.unbind(v,"click",h);u.close()}}))}};n.EventEmitter.subscribe("BX.Main.InterfaceButtons:onMoreMenuShow",r);var s=function i(){if(babelHelpers.classPrivateFieldGet(e,d).isTabButtonVisible(D.productsTabId)){a.close();c(e,m,y).call(e);t.Event.unbind(window,"resize",i);n.EventEmitter.unsubscribe("BX.Main.InterfaceButtons:onMoreMenuShow",r)}};t.Event.bind(window,"resize",s)}function R(){var e=this;var i=c(this,h,I).call(this).querySelector(".main-buttons");var a=function a(r){var s=babelHelpers.slicedToArray(r.data,1),l=s[0];var o=function e(){var n=l.getActiveHint();if(n!==null){n.close();t.Event.unbind(i,"click",e)}};t.Event.bind(i,"click",o);var c=l.products;var u="";if(c instanceof Array){var v=c.find((function(e){return!e.getModel().isService()}));if(v){u=v.getId()}}if(!u){return}l.showFieldTourHint("STORE_INFO",{title:t.Loc.getMessage("CRM_DEAL_DETAIL_WAREHOUSE_PRODUCT_STORE_GUIDE_TITLE"),text:t.Loc.getMessage("CRM_DEAL_DETAIL_WAREHOUSE_PRODUCT_STORE_GUIDE_TEXT")},(function(){t.userOptions.save("crm","warehouse-onboarding","firstChainStage",2);BX.ajax.post(babelHelpers.classPrivateFieldGet(e,b),{ACTION:"FIX_FIRST_ONBOARD_CHAIN_VIEW"});t.Event.unbind(i,"click",o);n.EventEmitter.unsubscribe("onDemandRecalculateWrapper",a)}),["RESERVE_INFO"],u)};n.EventEmitter.subscribe("onDemandRecalculateWrapper",a)}function F(){var e=this;var a=function a(r){if(babelHelpers.classPrivateFieldGet(e,E)!==null){babelHelpers.classPrivateFieldGet(e,E).close()}var s=c(e,p,A).call(e);var l=document.querySelector('[data-cid="OPPORTUNITY_WITH_CURRENCY"]');var o=l&&l.querySelector(".crm-entity-widget-payment-add-box");if(o!==null){var u=l.querySelector(".ui-entity-editor-block-context-menu");var v=l.querySelector(".ui-entity-editor-draggable-btn");var b={title:t.Loc.getMessage("CRM_DEAL_DETAIL_WAREHOUSE_ADD_DOCUMENT_GUIDE_TITLE"),text:t.Loc.getMessage("CRM_DEAL_DETAIL_WAREHOUSE_ADD_DOCUMENT_GUIDE_TEXT")};var d=new i.Guide({steps:[{target:o,title:b.title,text:b.text,events:{onClose:function e(){t.Event.unbind(s,"click",h);t.Event.unbind(u,"click",h);t.Event.unbind(v,"mousedown",h)}}}],onEvents:true});babelHelpers.classPrivateFieldSet(e,E,d);var h=function e(){t.Event.unbind(s,"click",e);n.EventEmitter.unsubscribe("PaymentDocuments.EntityEditor:changeDocuments",a);d.close();t.userOptions.save("crm","warehouse-onboarding","secondChainStage",1)};d.showNextStep();t.Event.bind(d.getPopup().closeIcon,"click",h);t.Event.bind(s,"click",h);t.Event.bind(o,"click",h);t.Event.bind(u,"click",h);t.Event.bind(v,"mousedown",h)}};n.EventEmitter.subscribe("PaymentDocuments.EntityEditor:changeDocuments",a)}function L(){var e=this;var i=function i(a){if(a.data[1].currentStepId==="WON"&&a.data[1].currentSemantics==="success"){n.EventEmitter.unsubscribe("Crm.EntityProgress.Saved",i);var r=function i(a){n.EventEmitter.unsubscribe("BX.Crm.Timeline.Items.FinalSummaryDocuments:onHistoryNodeAdded",i);BX.onCustomEvent(window,"OpenEntityDetailTab",["main"]);var r=babelHelpers.slicedToArray(a.data,1),s=r[0];var l={x:0,y:0};var o=setInterval((function(){var n=s.querySelector(".crm-entity-stream-content-document-description");if(n===null){return}var i=t.Dom.getPosition(n);if(i.x===0&&i.y===0){return}if(i.x!==l.x||i.y!==l.y){l.x=i.x;l.y=i.y;return}clearInterval(o);var a=c(e,C,G).call(e,n,{onClose:function e(){t.userOptions.save("crm","warehouse-onboarding","successDealGuideIsOver",true);v()}});var r=c(e,h,I).call(e);var u=c(e,p,A).call(e);var v=function e(){t.Event.unbind(r,"click",a.close.bind(a));t.Event.unbind(u,"click",a.close.bind(a))};window.scrollTo(0,i.y-250);a.showNextStep();t.Event.bind(u,"click",a.close.bind(a));setTimeout((function(){t.Event.bind(r,"click",a.close.bind(a))}),3e3)}),100)};n.EventEmitter.subscribe("BX.Crm.Timeline.Items.FinalSummaryDocuments:onHistoryNodeAdded",r)}};n.EventEmitter.subscribe("Crm.EntityProgress.Saved",i)}function G(e){var n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var a={title:t.Loc.getMessage("CRM_DEAL_DETAIL_WAREHOUSE_SUCCESS_DEAL_GUIDE_TITLE"),text:t.Loc.getMessage("CRM_DEAL_DETAIL_WAREHOUSE_SUCCESS_DEAL_GUIDE_TEXT")};return new i.Guide({steps:[{target:e,title:a.title,text:a.text,position:"bottom",events:n}],onEvents:true})}function W(e,t,n){U(e,t);t.set(e,n)}function U(e,t){if(t.has(e)){throw new TypeError("Cannot initialize the same private elements twice on an object")}}var B=new WeakMap;var X=new WeakMap;var x=new WeakMap;var N=new WeakMap;var V=function(){function e(n){babelHelpers.classCallCheck(this,e);W(this,B,{writable:true,value:void 0});W(this,X,{writable:true,value:void 0});W(this,x,{writable:true,value:null});W(this,N,{writable:true,value:new t.Cache.MemoryCache});babelHelpers.classPrivateFieldSet(this,B,n.guid);babelHelpers.classPrivateFieldSet(this,X,BX.Crm.EntityDetailManager.get(babelHelpers.classPrivateFieldGet(this,B)))}babelHelpers.createClass(e,[{key:"getContainer",value:function e(){var t=this;return babelHelpers.classPrivateFieldGet(this,N).remember("container",(function(){return document.getElementById(babelHelpers.classPrivateFieldGet(t,B)+"_container")}))}},{key:"getDealDetailManager",value:function e(){return babelHelpers.classPrivateFieldGet(this,X)}},{key:"enableOnboardingChain",value:function e(t,n){if(babelHelpers.classPrivateFieldGet(this,x)===null&&this.getDealDetailManager()!==null){babelHelpers.classPrivateFieldSet(this,x,new D({onboardingData:t,contentContainer:this.getContainer(),serviceUrl:n,dealDetailManager:this.getDealDetailManager()}));babelHelpers.classPrivateFieldGet(this,x).processOnboarding()}}}]);return e}();e.DealManager=V})(this.BX.Crm.Deal=this.BX.Crm.Deal||{},BX,BX.Event,BX.UI.Tour,BX,BX.Main);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:91:"/bitrix/components/bitrix/tasks.iframe.popup/templates/.default/logic.min.js?17287331847131";s:6:"source";s:72:"/bitrix/components/bitrix/tasks.iframe.popup/templates/.default/logic.js";s:3:"min";s:76:"/bitrix/components/bitrix/tasks.iframe.popup/templates/.default/logic.min.js";s:3:"map";s:76:"/bitrix/components/bitrix/tasks.iframe.popup/templates/.default/logic.map.js";}"*/
BX.namespace("Tasks.Component");BX.Tasks.Component.IframePopup=function(t){this.opts=BX.merge({},t);this.vars={skip:true,callbacks:{},resizeInterval:false,resizeLock:true,lastHeight:false};this.sys={scope:null};this.instances={win:false};this.ctrls={iframe:null,wrap:null,close:null};this.setCallbacks(t.callbacks);this.bindEvents()};BX.mergeEx(BX.Tasks.Component.IframePopup.prototype,{add:function(t){this.edit(0,t)},view:function(t){this.open("view",t)},edit:function(t,e){this.open("edit",t,{urlParams:e})},open:function(t,e,n){e=parseInt(e);if(isNaN(e)||e<0){return}n=n||{};var i=this.getPath(t,e,n.urlParams);if(BX.Bitrix24&&"PageSlider"in BX.Bitrix24){BX.Bitrix24.PageSlider.open(i)}else{this.toggleLoading(true);this.getWindow().show();this.getWindow().setBindElement(this.getWindowCoords());this.getWindow().adjustPosition();this.getIframe().src=i}},close:function(){this.getWindow().close()},bindEvents:function(){BX.bind(window,"resize",BX.throttle(this.onWindowResize,100,this));BX.addCustomEvent(window,"tasksIframeLoad",this.onContentLoaded.bind(this));BX.addCustomEvent(window,"tasksIframeUnload",this.onContentUnLoaded.bind(this))},bindInnerDocumentEvents:function(){var t=this.getContentDocument();if(t){BX.bind(t,"keydown",this.onInnerDocumentKeyDown.bind(this))}},getIframe:function(){if(this.ctrls.iframe===null){this.ctrls.iframe=BX.create("iframe",{attrs:{scrolling:"no",frameBorder:"0"}})}return this.ctrls.iframe},getWindow:function(){if(this.instances.win===false){this.instances.win=new BX.PopupWindow("tasks-iframe-popup",{top:0,left:0},{autoHide:false,closeByEsc:true,content:this.getIframeContainer(),overlay:true,lightShadow:false,closeIcon:true,contentNoPaddings:true,draggable:false,titleBar:true,events:{onPopupClose:BX.delegate(this.onPopupClose,this),onPopupShow:BX.delegate(this.onPopupOpen,this)}});this.ctrls.close=BX.create("div",{props:{className:"hidden"},attrs:{id:"tasks-popup-close",title:BX.message("TASKS_TIP_COMPONENT_TEMPLATE_CLOSE_WINDOW")},events:{click:BX.delegate(this.onCloseClicked,this)},children:[BX.create("span")]});BX.insertAfter(this.ctrls.close,BX("popup-window-overlay-tasks-iframe-popup"))}return this.instances.win},setTitle:function(t,e){var n="";if(t!=false){t=t=="view"?"VIEW":"EDIT";e=parseInt(e);if(isNaN(e)||e<=0){e=0}if(t=="EDIT"&&e==0){t="NEW"}n=BX.message("TASKS_TIP_COMPONENT_TEMPLATE_"+t+"_TASK_TITLE");if(e>0){n=n.replace("#TASK_ID#",e)}}this.getWindow().setTitleBar(n)},getPath:function(t,e,n){t=t=="view"?"view":"edit";e=parseInt(e);var i=this.opts.pathToTasks.replace("#task_id#",e);i=i+(i.indexOf("?")==-1?"?":"&")+"IFRAME=Y";if(BX.type.isPlainObject(n)){for(var s in n){i+="&"+s+"="+encodeURIComponent(n[s])}}i=i.replace("#action#",t);return i},getWindowCoords:function(){var t=BX.pos(this.getIframeContainer()).width;var e=BX.GetWindowSize().innerWidth;var n=BX.GetWindowScrollPos().scrollTop;return{left:Math.floor((e-t)/2),top:30+n}},getContentDocument:function(){var t=this.getIframe();var e=null;if(t.contentDocument){e=t.contentDocument}if(t.contentWindow){e=t.contentWindow.document}return e&&e.body?e:null},getIframeContainer:function(){if(this.ctrls.wrap===null){this.ctrls.wrap=this.ctrls.wrap=BX.create("div",{props:{className:"tasks-iframe-wrap loading fixedHeight"},attrs:{id:"tasks-iframe-wrap"},children:[this.getIframe()]})}return this.ctrls.wrap},getContentContainer:function(){var t=this.getContentDocument();if(t){return t.getElementById("tasks-content-outer")}return null},onCloseClicked:function(){this.getWindow().close()},onTaskGlobalEvent:function(t,e){if(BX.type.isNotEmptyString(t)){var n=t.toString().toUpperCase();e=e||{};e.task=e.task||{};e.options=e.options||{};var i=[];var s=parseInt(e.task.ID);if(n=="DELETE"&&!isNaN(s)&&s){i.push(e.task.ID)}else if(n=="ADD"||n=="UPDATE"){if(e.taskUgly){i.push(e.taskUgly)}else{return}}if(!e.options.STAY_AT_PAGE){this.close()}if(typeof this.vars.callbacks[n]!="undefined"&&this.vars.callbacks[n]!==false){var o=this.vars.callbacks[n];if(BX.type.isString(o)){o=BX.Tasks.deReference(o,window)}if(BX.type.isFunction(o)){o.apply(window,i)}}}},onContentLoaded:function(){var t=this.getContentDocument();if(t){var e=this.parseUrl(t.location.pathname);if(e){this.setTitle(e.action,e.taskId)}}this.toggleLoading(false);this.startMonitorContent();this.bindInnerDocumentEvents()},onContentUnLoaded:function(){this.setTitle(false);this.stopMonitorContent()},onPopupOpen:function(){BX.toggleClass(this.ctrls.close,"hidden");this.toggleLoading(true)},onPopupClose:function(){BX.toggleClass(this.ctrls.close,"hidden");this.lockHeight();this.stopMonitorContent();this.toggleLoading(true);this.vars.lastHeight=false;this.getIframe().src="about:blank"},onWindowResize:function(){if(this.getWindow().isShown()){this.getWindow().setBindElement(this.getWindowCoords())}},onContentResize:function(){if(this.getWindow().isShown()&&!this.vars.resizeLock){var t=this.getContentDocument();if(t){var e=this.getContentContainer();if(e){var n=e.offsetHeight;if(n!=this.vars.lastHeight){this.getIframeContainer().style.height=n+"px";this.vars.lastHeight=n;this.unLockHeight()}this.getWindow().popupContainer.style.marginBottom="40px";this.getWindow().resizeOverlay()}}}},onInnerDocumentKeyDown:function(t){if(BX.Tasks.Util.isEsc(t)){this.close()}},lockHeight:function(){this.toggleFixedHeight(true)},unLockHeight:function(){this.toggleFixedHeight(false)},toggleFixedHeight:function(t){BX[t?"addClass":"removeClass"](this.getIframeContainer(),"fixedHeight")},toggleLoading:function(t){BX[t?"addClass":"removeClass"](this.getIframeContainer(),"loading")},stopMonitorContent:function(){this.vars.resizeLock=true},startMonitorContent:function(){this.vars.resizeLock=false;if(this.vars.resizeInterval===false){this.vars.resizeInterval=setInterval(BX.proxy(this.onContentResize,this),300)}},setCallbacks:function(t){if(BX.type.isPlainObject(t)){BX.Tasks.each(t,function(t,e){if(t=="#SHOW_ADDED_TASK_DETAIL#"){return}if(t!==false&&(BX.type.isFunction(t)||BX.type.isNotEmptyString(t))){this.vars.callbacks[e]=t}}.bind(this))}},showCreateForm:function(){this.add()},parseUrl:function(t){var e=this.opts.pathToTasks;if(e){e=e.toLowerCase().replace("#action#","(view|edit){1}").replace("#task_id#","(\\d+)");var n=t.match(new RegExp(e));if(n&&BX.type.isArray(n)){var i=n[1]||false;var s=n[2]||false;if(i&&s){return{action:i,taskId:parseInt(s)}}}}return null},onTaskAdded:function(t,e,n,i,s){BX.onCustomEvent(this,"onTaskAdded",[t,e,n,i,s])},onTaskChanged:function(t,e,n,i,s){BX.onCustomEvent(this,"onTaskChanged",[t,e,n,i,s])},onTaskDeleted:function(t){BX.onCustomEvent(this,"onTaskDeleted",[t])}});BX.Tasks.Component.IframePopup.create=function(t){if(window.top!=window){return}if(typeof BX.Tasks.Singletons=="undefined"){BX.Tasks.Singletons={}}if(typeof BX.Tasks.Singletons.iframePopup=="undefined"){BX.Tasks.Singletons.iframePopup=new BX.Tasks.Component.IframePopup(t);window.taskIFramePopup=BX.Tasks.Singletons.iframePopup;window.BX.TasksIFrameInst=BX.Tasks.Singletons.iframePopup}else{BX.Tasks.Singletons.iframePopup.setCallbacks(t.callbacks)}return BX.Tasks.Singletons.iframePopup};
/* End */
;
; /* Start:"a:4:{s:4:"full";s:93:"/bitrix/components/bitrix/crm.entity.details/templates/.default/script.min.js?172873318227852";s:6:"source";s:73:"/bitrix/components/bitrix/crm.entity.details/templates/.default/script.js";s:3:"min";s:77:"/bitrix/components/bitrix/crm.entity.details/templates/.default/script.min.js";s:3:"map";s:77:"/bitrix/components/bitrix/crm.entity.details/templates/.default/script.map.js";}"*/
BX.namespace("BX.Crm");if(typeof BX.Crm.EntityDetailManager==="undefined"){BX.Crm.EntityDetailManager=function(){this._id="";this._settings={};this._container=null;this._entityTypeId=0;this._entityId=0;this._serviceUrl="";this._tabManager=null;this._overlay=null;this._pageUrlCopyButton=null;this._externalEventHandler=null;this._externalRequestData=null};BX.Crm.EntityDetailManager.prototype={initialize:function(t,e){this._id=BX.type.isNotEmptyString(t)?t:BX.util.getRandomString(4);this._settings=e?e:{};this._entityTypeId=BX.prop.getInteger(this._settings,"entityTypeId",0);this._entityId=BX.prop.getInteger(this._settings,"entityId",0);this._serviceUrl=BX.prop.getString(this._settings,"serviceUrl","");this._container=BX(BX.prop.get(this._settings,"containerId"));this._tabManager=BX.Crm.EntityDetailTabManager.create(this._id,{container:BX(BX.prop.get(this._settings,"tabContainerId")),menuId:BX.prop.get(this._settings,"tabMenuContainerId"),data:BX.prop.getArray(this._settings,"tabs")});if(this._entityId<=0){this._overlay=BX.create("div",{attrs:{className:"crm-entity-overlay"}});this._container.appendChild(this._overlay);if(window===window.top){this._overlay.style.position="absolute";this._overlay.style.top=this._overlay.style.left=this._overlay.style.right="-15px"}}this._pageUrlCopyButton=BX("page_url_copy_btn");if(this._pageUrlCopyButton){this._pageUrlCopyButton.title=this.getMessage("copyPageUrl");BX.bind(this._pageUrlCopyButton,"click",BX.delegate(this.onCopyCurrentPageUrl,this))}BX.addCustomEvent(window,"OpenEntityDetailTab",BX.delegate(this.onTabOpenRequest,this));this._externalRequestData={};this._externalEventHandler=BX.delegate(this.onExternalEvent,this);BX.addCustomEvent(window,"onLocalStorageSet",this._externalEventHandler);BX.addCustomEvent(window,"BX.Crm.EntityEditor:onFailedValidation",this.onFailedValidation.bind(this));this.doInitialize()},doInitialize:function(){},getId:function(){return this._id},getMessage:function(t){return BX.prop.getString(BX.Crm.EntityDetailManager.messages,t,t)},getEntityTypeId:function(){return this._entityTypeId},getEntityTypeName:function(){return BX.CrmEntityType.resolveName(this._entityTypeId)},getEntityId:function(){return this._entityId},getCurrentPageUrl:function(){return BX.util.remove_url_param(window.location.href,["IFRAME","IFRAME_TYPE"])},getEntityListUrl:function(t){return BX.prop.getString(BX.Crm.EntityDetailManager.entityListUrls,t,"")},getEntityCreateUrl:function(t){return BX.CrmEntityManager.getCurrent().getEntityCreateUrl(t)},getTabManager:function(){return this._tabManager},prepareCreationUrlParams:function(t){},onCopyCurrentPageUrl:function(t){var e=this.getCurrentPageUrl();if(!BX.clipboard.copy(e)){return}var i=new BX.PopupWindow("crm_page_url_clipboard_copy",this._pageUrlCopyButton,{content:this.getMessage("pageUrlCopied"),darkMode:true,autoHide:true,zIndex:1e3,angle:true,offsetLeft:20,bindOptions:{position:"top"}});i.show();setTimeout((function(){i.close()}),1500)},onTabOpenRequest:function(t){var e=this._tabManager.findItemById(t);if(e){this._tabManager.selectItem(e)}},isTabButtonVisible:function(t){const e=this._tabManager.findItemById(t);if(e){return this._tabManager.isVisibleItemMenu(e)}return false},getTabMenuItemContainer:function(t){const e=this._tabManager.findItemById(t);if(e){return e.getMenuContainer()}return null},getTabFromMoreMenu:function(t){const e=this._tabManager.getMoreMenu();if(e){const i=e.getMenuItem(t);const n=i&&i.getContainer();if(BX.Type.isDomNode(n)){return n}}return null},processRemoval:function(){this._detetionConfirmDlgId="entity_details_deletion_confirm";var t=BX.Crm.ConfirmationDialog.get(this._detetionConfirmDlgId);if(!t){t=BX.Crm.ConfirmationDialog.create(this._detetionConfirmDlgId,{title:this.getMessage("deletionDialogTitle"),content:this.getMessage("deletionConfirmDialogContent")})}t.open().then(BX.delegate(this.onRemovalConfirm,this))},remove:function(){if(this._serviceUrl===""){throw"Crm.EntityDetailManager: The 'serviceUrl' parameter is not defined or empty."}BX.ajax({url:this._serviceUrl,method:"POST",dataType:"json",data:{ACTION:"DELETE",ACTION_ENTITY_TYPE_ID:this._entityTypeId,ACTION_ENTITY_ID:this._entityId},onsuccess:BX.delegate(this.onRemovalRequestSuccess,this)})},exclude:function(){if(this._serviceUrl===""){throw"Crm.EntityDetailManager: The 'serviceUrl' parameter is not defined or empty."}BX.ajax({url:this._serviceUrl,method:"POST",dataType:"json",data:{ACTION:"EXCLUDE",ACTION_ENTITY_TYPE_ID:this._entityTypeId,ACTION_ENTITY_ID:this._entityId},onsuccess:BX.delegate(this.onExclusionRequestSuccess,this)})},processExclusion:function(){this._exclusionConfirmDlgId="entity_details_exclusion_confirm";var t=BX.Crm.ConfirmationDialog.get(this._exclusionConfirmDlgId);if(!t){t=BX.Crm.ConfirmationDialog.create(this._exclusionConfirmDlgId,{title:this.getMessage("exclusionDialogTitle"),content:this.getMessage("exclusionConfirmDialogContent")+" <a href=\"javascript: top.BX.Helper.show('redirect=detail&code=7362845');\">"+this.getMessage("exclusionConfirmDialogContentHelp")+"</a>"})}t.open().then(BX.delegate(this.onExclusionConfirm,this))},createEntity:function(t,e){var i=("details_"+this.getEntityTypeName()+"_"+this.getEntityId()+"_"+BX.util.getRandomString(12)).toLowerCase();var n={external_context:i};this.prepareCreationUrlParams(n);var r=BX.prop.getObject(e,"urlParams",null);if(r){n=BX.mergeEx(n,r)}BX.CrmEntityManager.createEntity(t,{urlParams:n}).then(function(t){this._externalRequestData[i]={context:i,wnd:BX.prop.get(t,"wnd",null)}}.bind(this))},createQuote:function(){this.createEntity(BX.CrmEntityType.names.quote)},createOrder:function(){this.createEntity(BX.CrmEntityType.names.order)},createInvoice:function(){this.createEntity(BX.CrmEntityType.names.invoice)},createDeal:function(){this.createEntity(BX.CrmEntityType.names.deal)},onRemovalConfirm:function(t){if(BX.prop.getBoolean(t,"cancel",true)){return}this.remove()},onRemovalRequestSuccess:function(t){var e=BX.prop.getString(t,"ERROR","");if(e!==""){var i=BX.Crm.NotificationDialog.create("entity_details_deletion_error",{title:this.getMessage("deletionDialogTitle"),content:e});i.open();return}window.top.BX.UI.Notification.Center.notify({autoHideDelay:5e3,content:this.getMessage("deletionWarning"),actions:[{title:this.getMessage("goToDetails"),events:{click:function(t,e,i){e.close();var n=t.target.ownerDocument.defaultView;if(!n){n=window}if(n.BX.Helper){n.BX.Helper.show("redirect=detail&code=8969825")}}}}]});var n=BX.Crm.Page.getTopSlider();var r=null;if(n){r={sliderUrl:n.getUrl()}}BX.Crm.EntityEvent.fireDelete(this._entityTypeId,this._entityId,"",r);r["id"]=this._entityId;BX.onCustomEvent(window,BX.Crm.EntityEvent.names.delete,[r]);if(n){window.setTimeout((function(){n.close(true)}),100)}else{var a=this.getEntityListUrl(BX.CrmEntityType.resolveName(this._entityTypeId));if(a!==""){window.location.href=a}}},onExclusionConfirm:function(t){if(BX.prop.getBoolean(t,"cancel",true)){return}this.exclude()},onExclusionRequestSuccess:function(t){var e=BX.prop.getString(t,"ERROR","");if(e!==""){var i=BX.Crm.NotificationDialog.create("entity_details_exclusion_error",{title:this.getMessage("exclusionDialogTitle"),content:e});i.open();return}var n=BX.Crm.Page.getTopSlider();var r=null;if(n){r={sliderUrl:n.getUrl()}}BX.Crm.EntityEvent.fireDelete(this._entityTypeId,this._entityId,"",r);r["id"]=this._entityId;BX.onCustomEvent(window,BX.Crm.EntityEvent.names.delete,[r]);if(n){window.setTimeout((function(){n.close(true)}),100)}else{var a=this.getEntityListUrl(BX.CrmEntityType.resolveName(this._entityTypeId));if(a!==""){window.location.href=a}}},onExternalEvent:function(t){var e=BX.prop.getString(t,"key","");var i=BX.prop.getObject(t,"value",{});this.processExternalEvent(e,i);if(e===BX.Crm.EntityEvent.names.invalidate){var n=BX.prop.getInteger(i,"entityId",0);var r=BX.prop.getInteger(i,"entityTypeId",0);if(r===this.getEntityTypeId()&&n===this.getEntityId()){window.location.reload(true)}return}if(e!=="onCrmEntityCreate"){return}var a=BX.prop.getString(i,"context","");var o=BX.prop.getObject(this._externalRequestData,a,null);if(!o){return}delete this._externalRequestData[a];var s=BX.prop.get(o,"wnd",null);if(s){s.close()}},processExternalEvent:function(t,e){return false},prepareAnalyticParams:function(t,e){return null},onFailedValidation:function(t,e){if(typeof BX.Crm.EntityEditor==="undefined"||!(t instanceof BX.Crm.EntityEditor)||t.getEntityId()!==this.getEntityId()){return}var i=this._tabManager._items[0];if(i instanceof BX.Crm.EntityDetailTab&&!i.isActive()){i.setActive(true);for(var n=1,r=this._tabManager._items.length;n<r;n++){var a=this._tabManager._items[n];a.setActive(false)}var o=e.getTopmostField();if(o){setTimeout((function(){o.focus()}),350)}}}};BX.Crm.EntityDetailManager.items={};BX.Crm.EntityDetailManager.get=function(t){return BX.type.isNotEmptyString(t)&&this.items.hasOwnProperty(t)?this.items[t]:null};if(typeof BX.Crm.EntityDetailManager.entityListUrls==="undefined"){BX.Crm.EntityDetailManager.entityListUrls={}}if(typeof BX.Crm.EntityDetailManager.messages==="undefined"){BX.Crm.EntityDetailManager.messages={}}BX.Crm.EntityDetailManager.create=function(t,e){var i=new BX.Crm.EntityDetailManager;i.initialize(t,e);this.items[i.getId()]=i;return i}}if(typeof BX.Crm.LeadDetailManager==="undefined"){BX.Crm.LeadDetailManager=function(){BX.Crm.LeadDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.LeadDetailManager,BX.Crm.EntityDetailManager);BX.Crm.LeadDetailManager.prototype.doInitialize=function(){BX.addCustomEvent(window,"Crm.EntityConverter.Converted",BX.delegate(this.onConversionComplete,this));BX.addCustomEvent(window,"Crm.EntityProgress.Saved",BX.delegate(this.onProgressSave,this));BX.addCustomEvent(window,"CrmCreateQuoteFromLead",BX.delegate(this.onCreateQuote,this));BX.addCustomEvent(window,"CrmCreateOrderFromLead",BX.delegate(this.onCreateOrder,this))};BX.Crm.LeadDetailManager.prototype.processConversionCompletion=function(t){if(window.top!==window){window.setTimeout((function(){window.location.reload(true)}),0);return}var e=BX.prop.getString(t,"redirectUrl","");if(e!==""&&!BX.prop.getBoolean(t,"isRedirected",false)){window.setTimeout((function(){window.location.replace(e)}),0);t["isRedirected"]=true}};BX.Crm.LeadDetailManager.prototype.processStatusSave=function(t){var e=BX.prop.getString(t,"currentSemantics","");var i=BX.prop.getString(t,"previousSemantics","");if(i===e){return}if(i==="success"||e==="success"){window.setTimeout((function(){window.location.reload(true)}),0)}};BX.Crm.LeadDetailManager.prototype.processExternalEvent=function(t,e){if(t!=="onCrmEntityConvert"){return false}if(BX.prop.getInteger(e,"entityTypeId",0)!==BX.CrmEntityType.enumeration.lead||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return false}this.processConversionCompletion(e);return true};BX.Crm.LeadDetailManager.prototype.onConversionComplete=function(t,e){if(BX.prop.getInteger(e,"entityTypeId",0)!==BX.CrmEntityType.enumeration.lead||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return}this.processConversionCompletion(e)};BX.Crm.LeadDetailManager.prototype.onProgressSave=function(t,e){if(BX.prop.getInteger(e,"entityTypeId",0)!==BX.CrmEntityType.enumeration.lead||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return}this.processStatusSave(e)};BX.Crm.LeadDetailManager.prototype.onCreateQuote=function(){this.createQuote()};BX.Crm.LeadDetailManager.prototype.onCreateOrder=function(){this.createOrder()};BX.Crm.LeadDetailManager.prototype.prepareCreationUrlParams=function(t){t["lead_id"]=this.getEntityId()};BX.Crm.LeadDetailManager.create=function(t,e){var i=new BX.Crm.LeadDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.ContactDetailManager==="undefined"){BX.Crm.ContactDetailManager=function(){BX.Crm.ContactDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.ContactDetailManager,BX.Crm.EntityDetailManager);BX.Crm.ContactDetailManager.prototype.doInitialize=function(){BX.addCustomEvent(window,"CrmCreateQuoteFromContact",BX.delegate(this.onCreateQuote,this));BX.addCustomEvent(window,"CrmCreateInvoiceFromContact",BX.delegate(this.onCreateInvoice,this));BX.addCustomEvent(window,"CrmCreateDealFromContact",BX.delegate(this.onCreateDeal,this));BX.addCustomEvent(window,"CrmCreateOrderFromContact",BX.delegate(this.onCreateOrder,this))};BX.Crm.ContactDetailManager.prototype.onCreateQuote=function(){this.createQuote()};BX.Crm.ContactDetailManager.prototype.onCreateOrder=function(){this.createOrder()};BX.Crm.ContactDetailManager.prototype.onCreateInvoice=function(){this.createInvoice()};BX.Crm.ContactDetailManager.prototype.onCreateDeal=function(){this.createDeal()};BX.Crm.ContactDetailManager.prototype.prepareCreationUrlParams=function(t){t["contact_id"]=this.getEntityId()};BX.Crm.ContactDetailManager.create=function(t,e){var i=new BX.Crm.ContactDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.CompanyDetailManager==="undefined"){BX.Crm.CompanyDetailManager=function(){BX.Crm.CompanyDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.CompanyDetailManager,BX.Crm.EntityDetailManager);BX.Crm.CompanyDetailManager.prototype.doInitialize=function(){BX.addCustomEvent(window,"CrmCreateQuoteFromCompany",BX.delegate(this.onCreateQuote,this));BX.addCustomEvent(window,"CrmCreateInvoiceFromCompany",BX.delegate(this.onCreateInvoice,this));BX.addCustomEvent(window,"CrmCreateDealFromCompany",BX.delegate(this.onCreateDeal,this));BX.addCustomEvent(window,"CrmCreateOrderFromCompany",BX.delegate(this.onCreateOrder,this))};BX.Crm.CompanyDetailManager.prototype.onCreateQuote=function(){this.createQuote()};BX.Crm.CompanyDetailManager.prototype.onCreateOrder=function(){this.createOrder()};BX.Crm.CompanyDetailManager.prototype.onCreateInvoice=function(){this.createInvoice()};BX.Crm.CompanyDetailManager.prototype.onCreateDeal=function(){this.createDeal()};BX.Crm.CompanyDetailManager.prototype.prepareCreationUrlParams=function(t){t["company_id"]=this.getEntityId()};BX.Crm.CompanyDetailManager.create=function(t,e){var i=new BX.Crm.CompanyDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.DealRecurringDetailManager==="undefined"){BX.Crm.DealRecurringDetailManager=function(){BX.Crm.DealRecurringDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.DealRecurringDetailManager,BX.Crm.EntityDetailManager);BX.Crm.DealRecurringDetailManager.prototype.doInitialize=function(){BX.addCustomEvent(window,"CrmDealRecurringExpose",BX.delegate(this.onExposeDeal,this))};BX.Crm.DealRecurringDetailManager.prototype.onExposeDeal=function(t,e){if(BX.prop.getInteger(e,"entityTypeId",0)!==BX.CrmEntityType.enumeration.dealrecurring||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return}window.setTimeout((function(){window.location.reload(true)}),0)};BX.Crm.DealRecurringDetailManager.create=function(t,e){var i=new BX.Crm.DealRecurringDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.DealDetailManager==="undefined"){BX.Crm.DealDetailManager=function(){BX.Crm.DealDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.DealDetailManager,BX.Crm.EntityDetailManager);BX.Crm.DealDetailManager.prototype.doInitialize=function(){};BX.Crm.DealDetailManager.prototype.prepareCreationUrlParams=function(t){t["deal_id"]=this.getEntityId()};BX.Crm.DealDetailManager.create=function(t,e){var i=new BX.Crm.DealDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.OrderDetailManager==="undefined"){BX.Crm.OrderDetailManager=function(){BX.Crm.OrderDetailManager.superclass.constructor.apply(this)};BX.extend(BX.Crm.OrderDetailManager,BX.Crm.EntityDetailManager);BX.Crm.OrderDetailManager.prototype.doInitialize=function(){BX.addCustomEvent(window,"Crm.EntityProgress.Saved",BX.delegate(this.onProgressSave,this));BX.addCustomEvent(window,"Crm.EntityProgress.onSaveBefore",BX.delegate(this.onProgressSaveBefore,this));this.subscribeToProductRowSummaryEvents();this._isProductListFocusing=false;this._cancelReason=""};BX.Crm.OrderDetailManager.prototype.onProgressSave=function(t,e){if(BX.prop.getInteger(e,"entityTypeId",0)!==BX.CrmEntityType.enumeration.order||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return}var i=BX.prop.getObject(e,"requestData",{});var n=BX.prop.getString(i,"ERROR","");if(BX.type.isNotEmptyString(n)){var r=t.getStepById(BX.prop.getString(i,"STATUS_ID",""));if(r){var a=t.findStepInfoIndex(r.getId());if(a>=0){var o=t._stepInfos[a];t.adjustSteps(r.getIndex(),r.getBackgroundColor());t.setCurrentStep(o)}}var s=BX.Crm.NotificationDialog.create("entity_details_cancel_error",{title:BX.prop.getString(i,"ERROR_TITLE",""),content:n});s.open()}};BX.Crm.OrderDetailManager.prototype.onProgressSaveBefore=function(t,e){if(BX.prop.getString(e,"TYPE","")!==BX.CrmEntityType.names.order||BX.prop.getInteger(e,"ID",0)!==this.getEntityId()){return}var i=BX.CrmOrderStatusManager.current;if(BX.type.isPlainObject(i.saveParams)){var n=this.getEntityId();for(var r in i.saveParams){BX.CrmOrderStatusManager.statusInfoValues[n][r]=i.saveParams[r];e[r]=i.saveParams[r]}}e["STATE_SUCCESS"]=i.isSuccess?"Y":"N"};BX.Crm.OrderDetailManager.prototype.subscribeToProductRowSummaryEvents=function(){BX.addCustomEvent(window,"BX.UI.EntityEditorProductRowSummary:onDetailProductListLinkClick",(()=>{BX.onCustomEvent(window,"OpenEntityDetailTab",["tab_products"])}));const t=()=>{const i=()=>{BX.onCustomEvent(window,"onFocusToProductList")};BX.addCustomEvent(window,"crmOrderProductListInit",i);e();const n=()=>{BX.removeCustomEvent("BX.UI.EntityEditorProductRowSummary:onAddNewRowInProductList",t);BX.addCustomEvent(window,"BX.UI.EntityEditorProductRowSummary:onAddNewRowInProductList",e);BX.removeCustomEvent("crmOrderProductListInit",i);BX.removeCustomEvent("crmOrderProductListFocused",n)};BX.addCustomEvent(window,"crmOrderProductListFocused",n)};BX.addCustomEvent(window,"BX.UI.EntityEditorProductRowSummary:onAddNewRowInProductList",t);const e=()=>{if(this._isProductListFocusing){return}else{this._isProductListFocusing=true}BX.onCustomEvent(window,"OpenEntityDetailTab",["tab_products"]);setTimeout((()=>{BX.onCustomEvent(window,"onFocusToProductList")}),200)};BX.addCustomEvent(window,"crmOrderProductListFocused",(()=>{this._isProductListFocusing=false}))};BX.Crm.OrderDetailManager.prototype.getMessage=function(t){var e=BX.Crm.OrderDetailManager.messages;return e.hasOwnProperty(t)?e[t]:BX.Crm.OrderDetailManager.superclass.getMessage.apply(this,arguments)};BX.Crm.OrderDetailManager.create=function(t,e){var i=new BX.Crm.OrderDetailManager;i.initialize(t,e);BX.Crm.EntityDetailManager.items[i.getId()]=i;return i}}if(typeof BX.Crm.EntityDetailFactory==="undefined"){BX.Crm.EntityDetailFactory={create:function(t,e){var i=BX.prop.getInteger(e,"entityTypeId",BX.CrmEntityType.enumeration.undefined);if(i===BX.CrmEntityType.enumeration.lead){return BX.Crm.LeadDetailManager.create(t,e)}else if(i===BX.CrmEntityType.enumeration.dealrecurring){return BX.Crm.DealRecurringDetailManager.create(t,e)}else if(i===BX.CrmEntityType.enumeration.deal){return BX.Crm.DealDetailManager.create(t,e)}else if(i===BX.CrmEntityType.enumeration.contact){return BX.Crm.ContactDetailManager.create(t,e)}else if(i===BX.CrmEntityType.enumeration.company){return BX.Crm.CompanyDetailManager.create(t,e)}else if(i===BX.CrmEntityType.enumeration.order){return BX.Crm.OrderDetailManager.create(t,e)}return BX.Crm.EntityDetailManager.create(t,e)}}}if(typeof BX.Crm.EntityDetailTabManager==="undefined"){BX.Crm.EntityDetailTabManager=function(){this._id="";this._container=null;this._items=null;this._menuManager=null};BX.Crm.EntityDetailTabManager.prototype={initialize:function(id,settings){this._id=BX.type.isNotEmptyString(id)?id:BX.util.getRandomString(4);settings=settings?settings:{};this._container=BX.prop.getElementNode(settings,"container");var tabsById={};BX.prop.getArray(settings,"data").forEach(function(t){if(!tabsById[t["id"]]){tabsById[t["id"]]=t}}.bind(this));this._menuManager=BX.Main.interfaceButtonsManager.getById(BX.prop.getString(settings,"menuId"));var firstItem=null;this._items=[];this._menuManager.getAllItems().forEach(function(t){if(firstItem===null){firstItem=t}var e=tabsById[t.dataset.id];if(!e){return}this._items.push(BX.Crm.EntityDetailTab.create(e["id"],{manager:this,data:e,container:this._container.querySelector('[data-tab-id="'+e["id"]+'"]'),menuContainer:t}))}.bind(this));var activeItem=this._menuManager.getActive();if(activeItem["DATA_ID"]==="main"&&firstItem.dataset.id!==activeItem["DATA_ID"]){const firstItemData=this._menuManager.getItemData(firstItem);const script=firstItemData["ON_CLICK"];if(BX.type.isNotEmptyString(script)){eval(script)}}},getId:function(){return this._id},findItemById:function(t){for(var e=0,i=this._items.length;e<i;e++){var n=this._items[e];if(n.getId()===t){return n}}return null},selectItem:function(t){for(var e=0,i=this._items.length;e<i;e++){var n=this._items[e];n.setActive(n===t)}},processItemSelect:function(t){this.selectItem(t)},isVisibleItemMenu:function(t){const e=t.getMenuContainer();if(e){return!this._menuManager.isDisabled(e)&&this._menuManager.isVisibleItem(e)}return false},getTabMenuContainer:function(){return this._menuManager.itemsContainer},getMoreButton:function(){return this._menuManager.getMoreButton()},getMoreMenu:function(){const t=this._menuManager.getMoreMenu();return t?t:null}};BX.Crm.EntityDetailTabManager.items={};BX.Crm.EntityDetailTabManager.create=function(t,e){var i=new BX.Crm.EntityDetailTabManager;i.initialize(t,e);this.items[i.getId()]=i;return i}}if(typeof BX.Crm.EntityDetailTab==="undefined"){BX.Crm.EntityDetailTab=function(){this._id="";this._data={};this._manager=null;this._container=null;this._menuContainer=null;this.onMenuClick=this.onMenuClick.bind(this);this._isActive=false;this._isEnabled=false;this._loader=null};BX.Crm.EntityDetailTab.prototype={initialize:function(t,e){this._id=BX.type.isNotEmptyString(t)?t:BX.util.getRandomString(4);e=e?e:{};this._data=BX.prop.getObject(e,"data",{});this._manager=BX.prop.get(e,"manager",null);this._container=BX.prop.getElementNode(e,"container");this._menuContainer=BX.prop.getElementNode(e,"menuContainer");this._isActive=BX.prop.getBoolean(this._data,"active",false);this._isEnabled=BX.prop.getBoolean(this._data,"enabled",true);BX.addCustomEvent(this._manager.getId()+"_click_"+this._id,this.onMenuClick);var i=BX.prop.getObject(this._data,"loader",null);if(i){i["tabId"]=this._id;i["container"]=this._container;this._loader=BX.Crm.EditorTabLazyLoader.create(this._id,i)}},getId:function(){return this._id},getMenuContainer:function(){return this._menuContainer},isEnabled:function(){return this._isEnabled},isActive:function(){return this._isActive},setActive:function(t){t=!!t;if(this._isActive===t){return}this._isActive=t;if(this._isActive){if(this._loader&&!this._loader.isLoaded()){this._loader.load()}this.showTab()}else{this.hideTab()}},showTab:function(){BX.addClass(this._container,"crm-entity-section-tab-content-show");BX.removeClass(this._container,"crm-entity-section-tab-content-hide");BX.addClass(this._menuContainer,"main-buttons-item-active");this._container.style.display="";this._container.style.position="absolute";this._container.style.top=0;this._container.style.left=0;this._container.style.width="100%";var t=new BX.easing({duration:350,start:{opacity:0,translateX:100},finish:{opacity:100,translateX:0},transition:BX.easing.makeEaseOut(BX.easing.transitions.quart),step:BX.delegate((function(t){this._container.style.opacity=t.opacity/100;this._container.style.transform="translateX("+t.translateX+"%)"}),this),complete:BX.delegate((function(){BX.removeClass(this._container,"crm-entity-section-tab-content-show");this._container.style.cssText="";BX.onCustomEvent(window,"onEntityDetailsTabShow",[this])}),this)});t.animate()},hideTab:function(){BX.addClass(this._container,"crm-entity-section-tab-content-hide");BX.removeClass(this._container,"crm-entity-section-tab-content-show");BX.removeClass(this._menuContainer,"main-buttons-item-active");var t=new BX.easing({duration:350,start:{opacity:100},finish:{opacity:0},transition:BX.easing.makeEaseOut(BX.easing.transitions.quart),step:BX.delegate((function(t){this._container.style.opacity=t.opacity/100}),this),complete:BX.delegate((function(){this._container.style.display="none";this._container.style.transform="translateX(100%)";this._container.style.opacity=0}),this)});t.animate()},onMenuClick:function(){if(!this._isEnabled){return}if(this._loader&&!this._loader.isLoaded()){this._loader.load()}this._manager.processItemSelect(this)}};BX.Crm.EntityDetailTab.create=function(t,e){var i=new BX.Crm.EntityDetailTab;i.initialize(t,e);return i}}if(typeof BX.Crm.EditorTabLazyLoader==="undefined"){BX.Crm.EditorTabLazyLoader=function(){this._id="";this._settings={};this._container=null;this._serviceUrl="";this._tabId="";this._params={};this._isRequestRunning=false;this._isLoaded=false};BX.Crm.EditorTabLazyLoader.prototype={initialize:function(t,e){this._id=BX.type.isNotEmptyString(t)?t:"crm_lf_disp_"+Math.random().toString().substring(2);this._settings=e?e:{};this._container=BX(BX.prop.get(this._settings,"container",""));if(!this._container){throw"Error: Could not find container."}this._tabId=BX.prop.getString(this._settings,"tabId","");if(this._tabId===""){throw"Error: Could not find tab id."}this._params=BX.prop.getObject(this._settings,"componentData",{});this._ajaxComponentActionParams=BX.prop.getObject(this._params,"ajaxComponentActionParams",{});this._useAjaxComponentAction=BX.type.isNotEmptyObject(this._ajaxComponentActionParams);if(this._useAjaxComponentAction){this._componentName=BX.prop.getString(this._ajaxComponentActionParams,"componentName","");if(this._componentName===""){throw"Error. Could not find component name."}this._actionName=BX.prop.getString(this._ajaxComponentActionParams,"actionName","");if(this._actionName===""){throw"Error. Could not find action name."}this._signedParameters=BX.prop.getString(this._ajaxComponentActionParams,"signedParameters","");if(this._signedParameters===""){throw"Error. Could not find signed parameters."}this._template=BX.prop.getString(this._params,"template","");if(this._template===""){throw"Error. Could not find template."}}else{this._serviceUrl=BX.prop.getString(this._settings,"serviceUrl","");if(this._serviceUrl===""){throw"Error. Could not find service url."}}},getId:function(){return this._id},isLoaded:function(){return this._isLoaded},load:function(){if(this._isLoaded){return}var t=this._params;t["TAB_ID"]=this._tabId;this._startRequest(t)},_startRequest:function(t){if(this._isRequestRunning){return false}this._isRequestRunning=true;if(this._useAjaxComponentAction){BX.ajax.runComponentAction(this._componentName,this._actionName,{signedParameters:this._signedParameters,data:{template:this._template}}).then(this._onRequestSuccess.bind(this),this._onRequestFailure.bind(this))}else{BX.ajax({url:this._serviceUrl,method:"POST",dataType:"html",data:{LOADER_ID:this._id,PARAMS:t},onsuccess:BX.delegate(this._onRequestSuccess,this),onfailure:BX.delegate(this._onRequestFailure,this)})}return true},_onRequestSuccess:function(t){this._isRequestRunning=false;if(this._useAjaxComponentAction){t=BX.prop.getObject(t,"data",{});t=BX.prop.getString(t,"html",null)}BX.html(this._container,t);this._isLoaded=true},_onRequestFailure:function(t){this._isRequestRunning=false;this._isLoaded=true}};BX.Crm.EditorTabLazyLoader.items={};BX.Crm.EditorTabLazyLoader.create=function(t,e){var i=new BX.Crm.EditorTabLazyLoader;i.initialize(t,e);this.items[i.getId()]=i;return i}}
/* End */
;
; /* Start:"a:4:{s:4:"full";s:97:"/bitrix/components/bitrix/crm.entity.progressbar/templates/.default/script.min.js?172873318323475";s:6:"source";s:77:"/bitrix/components/bitrix/crm.entity.progressbar/templates/.default/script.js";s:3:"min";s:81:"/bitrix/components/bitrix/crm.entity.progressbar/templates/.default/script.min.js";s:3:"map";s:81:"/bitrix/components/bitrix/crm.entity.progressbar/templates/.default/script.map.js";}"*/
BX.namespace("BX.Crm");if(typeof BX.Crm.EntityDetailProgressControl==="undefined"){BX.Crm.EntityDetailProgressControl=function(){this._id="";this._settings={};this._container=null;this._entityId=0;this._entityTypeId=0;this._stepInfoTypeId="";this._currentStepId="";this._previousStepId="";this._currentSemantics="";this._previousSemantics="";this._manager=null;this._stepInfos=null;this._steps=[];this._terminationDlg=null;this._failureDlg=null;this._isReadOnly=false;this._terminationControl=null;this._permissionChecker=null;this._beforeFailureDialogOpenStepId=null;this._entityEditorDialog=null;this._entityEditorDialogHandler=BX.delegate(this.onEntityEditorDialogClose,this)};BX.Crm.EntityDetailProgressControl.prototype={initialize:function(t,e){this._id=BX.type.isNotEmptyString(t)?t:BX.util.getRandomString(4);this._settings=e?e:{};this._container=BX(BX.prop.getString(this._settings,"containerId",""));this._entityId=BX.prop.getNumber(this._settings,"entityId",0);this._entityTypeId=BX.prop.getNumber(this._settings,"entityTypeId",0);this._entityType=BX.CrmEntityType.resolveName(this._entityTypeId);this._currentStepId=BX.prop.getString(this._settings,"currentStepId","");this._currentSemantics=BX.prop.getString(this._settings,"currentSemantics","");this._stepInfoTypeId=BX.prop.getString(this._settings,"stepInfoTypeId","");this._isReadOnly=BX.prop.getBoolean(this._settings,"readOnly",false);if(this._entityTypeId===BX.CrmEntityType.enumeration.deal){this._manager=BX.CrmDealStageManager.current}else if(this._entityTypeId===BX.CrmEntityType.enumeration.dealrecurring){this._manager=BX.CrmDealRecurringStageManager.current}if(this._entityTypeId===BX.CrmEntityType.enumeration.quote){this._manager=BX.CrmQuoteStatusManager.current}else if(this._entityTypeId===BX.CrmEntityType.enumeration.lead){this._manager=BX.CrmLeadStatusManager.current;this._terminationControl=BX.CrmLeadTerminationControl.create(this._id,BX.CrmParamBag.create({entityId:this._entityId,typeId:BX.prop.getInteger(e,"conversionTypeId",BX.CrmLeadConversionType.general),canConvert:BX.prop.getBoolean(e,"canConvert",false),conversionScheme:BX.prop.get(e,"conversionScheme",null),converterId:BX.prop.getString(e,"converterId",null),permissionCheckCallback:this.isHasPermissionToMoveSuccessStage.bind(this),showPermissionErrorCallback:this.showMissPermissionError.bind(this)}))}else if(this._entityTypeId===BX.CrmEntityType.enumeration.order){this._manager=BX.CrmOrderStatusManager.current}else if(this._entityTypeId===BX.CrmEntityType.enumeration.ordershipment){this._manager=BX.CrmOrderShipmentStatusManager.current}this._stepInfos=this._manager.getInfos(this._stepInfoTypeId);var i=this.findStepInfoIndex(this._currentStepId);var s=this._stepInfos[i];for(var n=0,r=this._stepInfos.length;n<r;n++){var o=this._stepInfos[n];var a=BX.prop.getString(o,"id","");var l=this.getStepContainer(a);if(!l){continue}var p=l.querySelector(".crm-entity-section-status-step-item-text");if(p.scrollWidth>p.clientWidth){BX.addClass(l,"crm-entity-section-status-step-hover");l.style.maxWidth=p.scrollWidth+23+"px"}const t=BX.Crm.EntityDetailProgressStep.create(a,{name:o["name"],hint:BX.prop.getString(o,"hint",""),sort:BX.prop.getNumber(o,"sort",0),semantics:BX.prop.getString(o,"semantics",""),index:n,isPassed:i>=0&&n<=i,isReadOnly:this._isReadOnly,isVisible:l.style.display!=="none",container:l,control:this});this._steps.push(t)}if(i>=0){this.adjustStepsByCurrentStep();this.adjustStepDisabling()}BX.addCustomEvent(window,"Crm.EntityModel.Change",this.onEntityModelChange.bind(this));BX.addCustomEvent(window,"BX.Crm.EntityEditor:onEntityReload",this.onEntityReload.bind(this))},onEntityReload(t){const{entityId:e,entityTypeName:i,entityData:s}=t;const{entityFieldName:n}=this.getSettings();if(this.getEntityId()!==e||this.getEntityTypeName()!==i||n===""){return}const r=s[n];if(r===this.getCurrentStepId()){return}this.setCurrentStepByIdAndAdjustSteps(r)},onEntityModelChange(t,e){if(BX.prop.getInteger(e,"entityTypeId",0)!==this.getEntityTypeId()||BX.prop.getInteger(e,"entityId",0)!==this.getEntityId()){return}const{entityFieldName:i}=this.getSettings();if(i===""){return}if(!BX.prop.getBoolean(e,"forAll",false)&&i!==BX.prop.getString(e,"fieldName","")){return}const s=t.getField(i,"");if(s===this.getCurrentStepId()){return}this.setCurrentStepByIdAndAdjustSteps(s)},getPermissionChecker(){if(this._permissionChecker===null){const t=this._stepInfos??this._manager.getInfos(this._stepInfoTypeId);this._permissionChecker=BX.Crm.Stage.PermissionChecker.createFromStageInfos(t)}return this._permissionChecker},isHasPermissionToMove(t){return this.getPermissionChecker().isHasPermissionToMove(this.getCurrentStepId(),t)},isHasPermissionToMoveTerminationStages(){return this.getPermissionChecker().isHasPermissionToMoveAtLeastOneTerminationStage(this.getCurrentStepId())},isHasPermissionToMoveFailureStages(){return this.getPermissionChecker().isHasPermissionToMoveAtLeastOneFailureStage(this.getCurrentStepId())},isHasPermissionToMoveSuccessStage(){return this.getPermissionChecker().isHasPermissionToMoveSuccessStage(this.getCurrentStepId())},getTerminationSemantics(){return["success","failure"]},isTerminationSemantics(t){return this.getTerminationSemantics().includes(t)},showMissPermissionError(){this.getPermissionChecker().showMissPermissionError()},getSettings(){return this._settings},getEntityId:function(){return this._entityId},getEntityTypeId:function(){return this._entityTypeId},getEntityTypeName:function(){return BX.CrmEntityType.resolveName(this._entityTypeId)},getCurrentStepId:function(){return this._currentStepId},getCurrentStepName:function(){var t=this.findStepInfoIndex(this._currentStepId);return t>=0?this._stepInfos[t]["name"]:"["+this._currentStepId+"]"},getCurrentSemantics:function(){return this._currentSemantics},getStepContainer:function(t){return this._container.querySelector('.crm-entity-section-status-step[data-id="'+t+'"]')},getTerminationStep:function(){return this._steps.length>0?this._steps[this._steps.length-1]:null},getStepInfo(t){return this._stepInfos[t]},getStepById:function(t){for(var e=0,i=this._steps.length;e<i;e++){var s=this._steps[e];if(s.getId()===t){return s}}return null},findStepInfoIndex:function(t){for(var e=0,i=this._stepInfos.length;e<i;e++){if(this._stepInfos[e]["id"]===t){return e}}return-1},isStepDisable(t){const e=this.getStepById(t);if(!e){return false}if(this.isTerminationSemantics(e.getSemantics())){return!this.isHasPermissionToMoveTerminationStages()}return!this.isHasPermissionToMove(e.getId())},findStepInfoBySemantics:function(t){for(var e=0,i=this._stepInfos.length;e<i;e++){var s=this._stepInfos[e];var n=BX.type.isNotEmptyString(s["semantics"])?s["semantics"]:"";if(t===n){return s}}return null},findAllStepInfoBySemantics:function(t){var e=[];for(var i=0,s=this._stepInfos.length;i<s;i++){var n=this._stepInfos[i];var r=BX.prop.getString(n,"semantics","");if(t===r){e.push(n)}}return e},setCurrentStep:function(t,e){const i=t.id;if(this._currentStepId===i){return false}if(BX.prop.getBoolean(e,"keepPreviousStep",true)){this._previousStepId=this._currentStepId;this._previousSemantics=this._currentSemantics}this._currentStepId=i;var s=t["semantics"];if(this._currentSemantics!==s){this._currentSemantics=s}this.adjustStepsVisibility();this.adjustFinalStepName();this.adjustStepDisabling();BX.onCustomEvent(window,"Crm.EntityProgress.Change",[this,{entityTypeId:this._entityTypeId,entityId:this._entityId,currentStepId:this._currentStepId,semantics:this._currentSemantics}]);return true},setCurrentStepByIdAndAdjustSteps(t){const e=this.findStepInfoIndex(t);if(e<0){return}const i=this.getStepInfo(e);const s=BX.Crm.EntityDetailProgressControl.getStepColor(i);this.setCurrentStep(i);this.adjustSteps(e,s)},adjustFinalStepName:function(){var t=this.findStepInfoBySemantics("success");if(t){var e=this.findStepInfoIndex(t["id"]);if(e>=0){this._steps[e].setDisplayName(this._currentSemantics==="process"?BX.prop.getString(this._settings,"terminationTitle",""):"")}}},adjustStepsVisibility:function(){for(var t=0,e=this._steps.length;t<e;t++){var i=this._steps[t];var s=true;var n=i.getSemantics();if(this._currentSemantics==="process"||this._currentSemantics==="success"){s=n==="process"||n==="success"}else{if(n==="success"){s=false}else if(n==="failure"||n==="apology"){s=i.getId()===this._currentStepId}}i.setVisible(s)}},adjustSteps:function(t,e){if(t>=this._steps.length){t=this._steps.length-1}let i,s;for(i=t,s=this._steps.length;i<s;i++){this._steps[i].recoverColors();this._steps[i].saveStyles()}let n=BX.Crm.EntityDetailProgressStep.calculateTextColor(e);for(i=0,s=t;i<=s;i++){this._steps[i].setColor(n);this._steps[i].setBackgroundColor(e)}for(i=0,s=t;i<=s;i++){this._steps[i].saveStyles()}},adjustStepDisabling:function(){for(let t=0,e=this._steps.length;t<e;t++){if(this.isStepDisable(this._steps[t].getId())){this._steps[t].setDisabled()}else{this._steps[t].removeDisabled()}}},setStepColorsBefore:function(t){var e=t.calculateTextColor();var i=t.getBackgroundColor();for(var s=0,n=t.getIndex();s<=n;s++){this._steps[s].setColor(e);this._steps[s].setBackgroundColor(i)}},recoverStepColorsBefore:function(t){for(var e=0,i=t.getIndex();e<=i;e++){this._steps[e].recoverStyles()}},save:function(){var t=BX.prop.getString(this._settings,"serviceUrl");var e=this.getCurrentStepId();var i=this.getEntityTypeName();var s=this.getEntityId();if(t===""||e===""||i===""||s<=0){return}var n={ACTION:"SAVE_PROGRESS",VALUE:e,TYPE:i,ID:s,sessid:BX.bitrix_sessid()};BX.onCustomEvent(this,"Crm.EntityProgress.onSaveBefore",[this,n]);BX.ajax({url:t,method:"POST",dataType:"json",data:n,onsuccess:BX.delegate(this.onSaveRequestSuccess,this)})},onSaveRequestSuccess:function(t){var e=BX.prop.getObject(t,"CHECK_ERRORS",null);if(e){this.openEntityEditorDialog({title:this._manager.getMessage("checkErrorTitle"),helpData:{text:this._manager.getMessage("checkErrorHelp"),code:this._manager.getMessage("checkErrorHelpArticleCode")},fieldNames:Object.keys(e),initData:BX.prop.getObject(t,"EDITOR_INIT_DATA",null),context:BX.prop.getObject(t,"CONTEXT",null)});return}const i=BX.prop.getString(t,"ERROR",null);if(i){BX.UI.Notification.Center.notify({content:i,autoHideDelay:5e3});this.setCurrentStepByIdAndAdjustSteps(this._previousStepId);return}BX.onCustomEvent(window,"Crm.EntityProgress.Saved",[this,{entityTypeId:this._entityTypeId,entityId:this._entityId,currentStepId:this._currentStepId,currentSemantics:this._currentSemantics,previousStepId:this._previousStepId,previousSemantics:this._previousSemantics,requestData:t}])},openEntityEditorDialog:function(t){BX.Crm.PartialEditorDialog.close("progressbar-entity-editor");this._entityEditorDialog=BX.Crm.PartialEditorDialog.create("progressbar-entity-editor",{title:BX.prop.getString(t,"title","Please fill in all required fields"),entityTypeId:this._entityTypeId,entityId:this._entityId,fieldNames:BX.prop.getArray(t,"fieldNames",[]),helpData:BX.prop.getObject(t,"helpData",null),context:BX.prop.getObject(t,"context",null)});window.setTimeout(function(){this._entityEditorDialog.open();BX.addCustomEvent(window,"Crm.PartialEditorDialog.Close",this._entityEditorDialogHandler)}.bind(this),150)},onEntityEditorDialogClose:function(t,e){if(!(this._entityTypeId===BX.prop.getInteger(e,"entityTypeId",0)&&this._entityId===BX.prop.getInteger(e,"entityId",0))){return}this._entityEditorDialog=null;BX.removeCustomEvent(window,"Crm.PartialEditorDialog.Close",this._entityEditorDialogHandler);if(BX.prop.getBoolean(e,"isCancelled",true)&&this._previousStepId!==""){this.setCurrentStepByIdAndAdjustSteps(this._previousStepId)}},openTerminationDialog:function(){if(this._terminationDlg){this._terminationDlg.close();this._terminationDlg=null}const t=this.findAllStepInfoBySemantics("apology");this._terminationDlg=BX.CrmProcessTerminationDialog.create(this._id+"_TERMINATION",BX.CrmParamBag.create({title:this._manager.getMessage("dialogTitle"),failureTitle:t.length>0?this._manager.getMessage("failureTitle"):"",success:this.findStepInfoBySemantics("success"),failure:this.findStepInfoBySemantics("failure"),apologies:t,callback:this.onTerminationDialogClose.bind(this),buttonPrepareCallback:this.terminationButtonPrepareCallback.bind(this),terminationControl:this._terminationControl}));this._terminationDlg.open()},terminationButtonPrepareCallback(t,e){if(this.isHasPermissionToMove(e.id)){return}if(e.semantics==="failure"&&this.isHasPermissionToMoveFailureStages()){return}BX.Dom.addClass(t,"--disabled")},closeTerminationDialog:function(){if(!this._terminationDlg){return}this._terminationDlg.close(false);this._terminationDlg=null},onTerminationDialogClose:function(dialog,params){if(this._terminationDlg!==dialog){return}this.closeTerminationDialog();let stepId=BX.type.isNotEmptyString(params.result)?params.result:"";let stepIndex=this.findStepInfoIndex(stepId);if(stepIndex<0){this.adjustStepsByCurrentStep();return}let stepInfo=this._stepInfos[stepIndex];let openFailureDialog=false;const failure=this.findStepInfoBySemantics("failure");if(failure&&failure["id"]===stepId){openFailureDialog=true;if(!this.isHasPermissionToMove(stepId)){const t=this.findAllStepInfoBySemantics("apology").find((t=>this.isHasPermissionToMove(t.id)));if(!this.isHasPermissionToMoveFailureStages()||!t){this.showMissPermissionError();this.adjustStepsByCurrentStep();return}stepId=t.id;stepIndex=this.findStepInfoIndex(stepId);stepInfo={...t}}}else if(stepInfo["semantics"]==="success"){if(!this.isHasPermissionToMove(stepId)){this.showMissPermissionError();this.adjustStepsByCurrentStep();return}if(typeof stepInfo["hasParams"]!=="undefined"&&stepInfo["hasParams"]===true){openFailureDialog=true}else{const finalScript=BX.prop.getString(this._settings,"finalScript","");if(finalScript!==""){eval(finalScript);return}const finalUrl=BX.prop.getString(this._settings,"finalUrl","");if(finalUrl!==""){window.location=finalUrl;return}}}this._beforeFailureDialogOpenStepId=openFailureDialog?this._currentStepId:null;this.setCurrentStep(stepInfo);this.adjustSteps(stepIndex,BX.Crm.EntityDetailProgressControl.getStepColor(stepInfo));if(openFailureDialog){this.openFailureDialog();return}this.save()},openFailureDialog:function(){if(this._failureDlg){this._failureDlg.close();this._failureDlg=null}const t=this.findStepInfoIndex(this._currentStepId);const e=t>=0?this._stepInfos[t]:null;const i=e?e["id"]:"";const s=this.findAllStepInfoBySemantics("apology");this._failureDlg=BX.CrmProcessFailureDialog.create(this._id+"_FAILURE",BX.CrmParamBag.create({entityType:this._entityType,entityId:this._entityId,initValue:i,failureTitle:s.length>0?this._manager.getMessage("failureTitle"):"",selectorTitle:this._manager.getMessage("selectorTitle"),success:this.findStepInfoBySemantics("success"),failure:this.findStepInfoBySemantics("failure"),apologies:s,callback:this.onFailureDialogClose.bind(this)}));BX.addCustomEvent("CrmProcessFailureDialogContentCreated",this.onCrmProcessFailureDialogContentCreated.bind(this));this._failureDlg.open()},closeFailureDialog:function(){if(!this._failureDlg){return}this._failureDlg.close(false);this._failureDlg=null},onFailureDialogClose:function(dialog,params){if(this._failureDlg!==dialog){return}let stepInfo,stepIndex;BX.onCustomEvent(this,"CrmProgressControlBeforeFailureDialogClose",[this,this._failureDlg]);this.closeFailureDialog();let bid=BX.type.isNotEmptyString(params["bid"])?params["bid"]:"";if(bid!=="accept"){if(this._previousStepId!==""){this.setCurrentStepByIdAndAdjustSteps(this._previousStepId)}return}const id=BX.type.isNotEmptyString(params.result)?params.result:"";const fromId=this._beforeFailureDialogOpenStepId??this._currentStepId;if(!this.getPermissionChecker().isHasPermissionToMove(fromId,id)){this.showMissPermissionError();if(this._previousStepId!==""){this.setCurrentStepByIdAndAdjustSteps(this._previousStepId)}return}stepIndex=this.findStepInfoIndex(id);if(stepIndex>=0){stepInfo=this._stepInfos[stepIndex];if(stepInfo.semantics==="success"){const finalScript=BX.prop.getString(this._settings,"finalScript","");if(finalScript!==""){eval(finalScript);return}const finalUrl=BX.prop.getString(this._settings,"finalUrl","");if(finalUrl!==""){window.location=finalUrl;return}const verboseMode=BX.prop.getBoolean(this._settings,"verboseMode",false);if(verboseMode){if(this._previousStepId!==""){this.setCurrentStepByIdAndAdjustSteps(this._previousStepId)}this.openTerminationDialog();return}}this.setCurrentStep(stepInfo,{keepPreviousStep:false});this.adjustSteps(stepIndex,BX.Crm.EntityDetailProgressControl.getStepColor(stepInfo));this.save()}},onCrmProcessFailureDialogContentCreated(t,e){if(this._failureDlg!==t){return}const i=this._beforeFailureDialogOpenStepId??this.getCurrentStepId();const s=e.querySelectorAll(".crm-list-end-deal-button-wrapper");s.forEach((t=>{const e=t.querySelector("input");if(!e){return}const s=e.value;if(this.getPermissionChecker().isHasPermissionToMove(i,s)){return}BX.Dom.addClass(t,"--disabled");e.onclick=t=>{this.showMissPermissionError();t.preventDefault()}}))},processStepHover:function(t){if(t.isDisabled()){return}if(t.getIndex()<this._steps.length-1){this.setStepColorsBefore(t)}},processStepLeave:function(t){if(t.getIndex()<this._steps.length-1){this.recoverStepColorsBefore(t)}},processStepSelect:function(t){if(this._isReadOnly){return}this.closeTerminationDialog();if(BX.type.isFunction(this._manager["admitChange"])){this._manager.admitChange(this._currentStepId,t.getId()).then(function(t){if(!BX.prop.getBoolean(t,"succeeded",false)){return}var e=this.getStepById(BX.prop.getString(t,"currentId",""));if(e){this.setupStep(e)}}.bind(this))}else{this.setupStep(t)}},setupStep:function(t){if(this._entityEditorDialog!==null){return}var e=this.findStepInfoIndex(t.getId());if(e<0){return}var i=this._stepInfos[e];var s=i["semantics"];if(s==="failure"||s==="apology"||s==="success"&&(this._terminationControl||this.findStepInfoBySemantics("failure"))){if(this._terminationControl&&!this._terminationControl.isEnabled()){return}if(!this.isHasPermissionToMoveTerminationStages()){this.showMissPermissionError();return}this.adjustSteps(t.getIndex(),t.getBackgroundColor());this.openTerminationDialog()}else{if(!this.isHasPermissionToMove(t.getId())){this.showMissPermissionError();return}this.adjustSteps(t.getIndex(),t.getBackgroundColor());if(this._currentStepId!==i["id"]&&this.setCurrentStep(i)){this.save()}}},adjustStepsByCurrentStep:function(){const t=this.findStepInfoIndex(this._currentStepId);if(t<0){return}this.adjustSteps(t,BX.Crm.EntityDetailProgressControl.getStepColor(this._stepInfos[t]))}};if(typeof BX.Crm.EntityDetailProgressControl.defaultColors==="undefined"){BX.Crm.EntityDetailProgressControl.defaultColors={}}BX.Crm.EntityDetailProgressControl.getStepColor=function(t){var e=BX.prop.getString(t,"color");if(e!==""){return e}var i=BX.prop.getString(t,"semantics");return BX.Crm.EntityDetailProgressControl.defaultColors[i]};BX.Crm.EntityDetailProgressControl.create=function(t,e){var i=new BX.Crm.EntityDetailProgressControl;i.initialize(t,e);return i}}if(typeof BX.Crm.EntityDetailProgressStep==="undefined"){BX.Crm.EntityDetailProgressStep=function(){this._id="";this._settings={};this._control=null;this._container=null;this._element=null;this._clickHandler=BX.delegate(this.onClick,this);this._hoverHandler=BX.delegate(this.onMouseHover,this);this._leaveHandler=BX.delegate(this.onMouseLeave,this);this._isVisible=true;this._isDisabled=false;this._displayName=""};BX.Crm.EntityDetailProgressStep.prototype={initialize:function(t,e){this._id=BX.type.isNotEmptyString(t)?t:BX.util.getRandomString(4);this._settings=e?e:{};this._control=BX.prop.get(this._settings,"control");this._container=BX.prop.getElementNode(this._settings,"container");this._element=this._container.querySelector(".crm-entity-section-status-step-item-text");BX.bind(this._container,"click",this._clickHandler);BX.bind(this._element,"mouseenter",this._hoverHandler);BX.bind(this._element,"mouseleave",this._leaveHandler);if(BX.prop.getBoolean(this._settings,"isPassed",false)){this._element.style.color=this.calculateTextColor()}this.saveStyles();this._isVisible=BX.prop.getBoolean(this._settings,"isVisible",true)},getId:function(){return this._id},getIndex:function(){return BX.prop.getNumber(this._settings,"index",0)},isVisible:function(){return this._isVisible},setVisible:function(t){t=!!t;if(this._isVisible===t){return}this._isVisible=t;this._container.style.display=t?"":"none"},getSemantics:function(){return BX.prop.getString(this._settings,"semantics","")},getDisplayName:function(){return this._displayName},setDisplayName:function(t){this._displayName=t;if(this._element){this._element.innerHTML=BX.util.htmlspecialchars(this._displayName!==""?this._displayName:BX.prop.getString(this._settings,"name",this._id))}},onMouseHover:function(t){this._control.processStepHover(this)},onMouseLeave:function(t){this._control.processStepLeave(this)},onClick:function(t){this._control.processStepSelect(this)},calculateTextColor:function(){var t=this._element.getAttribute("data-base-color")?this._element.attributes["data-base-color"].value:getComputedStyle(this._element).borderBottomColor;return BX.Crm.EntityDetailProgressStep.calculateTextColor(t)},getBackgroundColor:function(){return this._element.getAttribute("data-base-color")?this._element.attributes["data-base-color"].value:getComputedStyle(this._element).borderBottomColor},setBackgroundColor:function(t){var e=encodeURIComponent(t);this._element.style.borderImage=BX.Crm.EntityDetailProgressStep.backgroundImageCss.replace(/#COLOR1#/gi,e).replace(/#COLOR2#/gi,e)},setColor:function(t){this._element.style.color=t},recoverColors:function(){var t=encodeURIComponent(BX.Crm.EntityDetailProgressStep.defaultBackgroundColor);if(this._element.getAttribute("data-base-color")){this._element.style.color="";var e=encodeURIComponent(this._element.getAttribute("data-base-color"));this._element.style.borderImage=BX.Crm.EntityDetailProgressStep.backgroundImageCss.replace(/#COLOR1#/gi,e).replace(/#COLOR2#/gi,t)}else{this._element.style.cssText=""}},saveStyles:function(){if(this._element.getAttribute("style")){BX.adjust(this._element,{attrs:{"data-style":this._element.getAttribute("style")}})}},recoverStyles:function(){this._element.style.cssText=this._element.getAttribute("data-style")?this._element.getAttribute("data-style"):""},isDisabled:function(){return this._isDisabled},setDisabled:function(){if(this._isDisabled){return}BX.addClass(this._container,"--disabled");this._isDisabled=true},removeDisabled:function(){if(!this._isDisabled){return}BX.removeClass(this._container,"--disabled");this._isDisabled=false}};if(BX.Crm.EntityDetailProgressStep.backgroundImageCss==="undefined"){BX.Crm.EntityDetailProgressStep.backgroundImageCss=""}if(BX.Crm.EntityDetailProgressStep.defaultBackgroundColor==="undefined"){BX.Crm.EntityDetailProgressStep.defaultBackgroundColor=""}BX.Crm.EntityDetailProgressStep.calculateTextColor=function(t){var e,i,s;if(t>7){var n=t.split("(")[1].split(")")[0];n=n.split(",");e=parseInt(n[0]);i=parseInt(n[1]);s=parseInt(n[2])}else{if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(t)){var r=t.substring(1).split("");if(r.length===3){r=[r[0],r[0],r[1],r[1],r[2],r[2]]}r="0x"+r.join("");e=r>>16&255;i=r>>8&255;s=r&255}}var o=.21*e+.72*i+.07*s;return o<145?"#fff":"#333"};BX.Crm.EntityDetailProgressStep.create=function(t,e){var i=new BX.Crm.EntityDetailProgressStep;i.initialize(t,e);return i}}
/* End */
;
; /* Start:"a:4:{s:4:"full";s:89:"/bitrix/components/bitrix/crm.entity.editor/templates/.default/script.js?1728733184707975";s:6:"source";s:72:"/bitrix/components/bitrix/crm.entity.editor/templates/.default/script.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
BX.namespace("BX.Crm");

//region EDITOR
if(typeof BX.Crm.EntityEditor === "undefined")
{
	BX.Crm.EntityEditor = function()
	{
		this._id = "";
		this._settings = {};

		this._entityTypeId = 0;
		this._entityId = 0;

		this._userFieldManager = null;
		this._dupControlManager = null;
		this._bizprocManager = null;
		this._attributeManager = null;

		this._container = null;
		this._buttonContainer = null;
		this._createSectionButton = null;
		this._configMenuButton = null;
		this._configIcon = null;

		this._pageTitle = null;
		this._pageTitleInput = null;
		this._buttonWrapper = null;
		this._editPageTitleButton = null;
		this._copyPageUrlButton = null;

		this._formElement = null;
		this._ajaxForm = null;
		this._afterFormSubmitHandler = BX.delegate(this.onAfterFormSubmit, this);
		this._cancelFormSubmitHandler = BX.delegate(this.onCancelFormSubmit, this);

		this._controllers = null;
		this._controls = null;
		this._activeControls = null;
		this._toolPanel = null;

		this._model = null;
		this._scheme = null;
		this._config = null;
		this._context = null;
		this._contextId = "";
		this._externalContextId = "";

		this._mode = BX.Crm.EntityEditorMode.intermediate;

		this._isNew = false;
		this._readOnly = false;
		this._haslayout = false;

		this._enableRequiredUserFieldCheck = true;
		this._enableAjaxForm = true;
		this._enableSectionEdit = false;
		this._enableSectionCreation = false;
		this._enableModeToggle = true;
		this._enableVisibilityPolicy = true;
		this._enablePageTitleControls = true;
		this._enableCommunicationControls = true;
		this._enableToolPanel = true;
		this._enableBottomPanel = true;
		this._enableFieldsContextMenu = true;
		this._enableExternalLayoutResolvers = false;
		this._showEmptyFields = false;

		this._serviceUrl = "";
		this._htmlEditorConfigs = null;

		this._areAvailableSchemeElementsChanged = false;
		this._availableSchemeElements = null;

		this._dragPlaceHolder = null;
		this._dragContainerController = null;
		this._dropHandler = BX.delegate(this.onDrop, this);

		this._pageTitleExternalClickHandler = BX.delegate(this.onPageTitleExternalClick, this);
		this._pageTitleKeyPressHandler = BX.delegate(this.onPageTitleKeyPress, this);

		this._modeChangeNotifier = null;
		this._controlChangeNotifier = null;

		this._validators = null;
		this._modeSwitch = null;
		this._delayedSaveHandle = 0;

		this._isEmbedded = false;
		this._isRequestRunning = false;
		this._isConfigMenuShown = false;
		this._isReleased = false;

		this._enableCloseConfirmation = true;
		this._closeConfirmationHandler = BX.delegate(this.onCloseConfirmButtonClick, this);
		this._cancelConfirmationHandler = BX.delegate(this.onCancelConfirmButtonClick, this);

		this._sliderOpenHandler = BX.delegate(this.onSliderOpen, this);
		this._sliderCloseHandler = BX.delegate(this.onSliderClose, this);
		this._entityUpdateHandler = BX.delegate(this.onEntityUpdate, this);

		this._helpWrapper = null;
		this._dragConfig = {};
	};
	BX.Crm.EntityEditor.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._model = BX.prop.get(this._settings, "model", null);
			this._scheme = BX.prop.get(this._settings, "scheme", null);
			this._config = BX.prop.get(this._settings, "config", null);

			this._serviceUrl = BX.prop.getString(this._settings, "serviceUrl", "");
			this._entityTypeId = BX.prop.getInteger(this._settings, "entityTypeId", 0);
			this._entityId = BX.prop.getInteger(this._settings, "entityId", 0);
			this._isNew = this._entityId <= 0;

			this._isEmbedded = BX.prop.getBoolean(this._settings, "isEmbedded", false);

			var container = BX.prop.get(this._settings, "container");
			if(!BX.type.isElementNode(container))
			{
				container = BX(BX.prop.get(this._settings, "containerId"));
			}

			this._container = container;
			if(!BX.type.isElementNode(container))
			{
				throw "Crm.EntityEditor: Could not find settings param 'container'.";
			}

			this._parentContainer = BX.findParent(this._container, { className: "crm-entity-section" }, false);
			this._buttonContainer = BX(BX.prop.get(this._settings, "buttonContainerId"));
			this._createSectionButton = BX(BX.prop.get(this._settings, "createSectionButtonId"));
			this._configMenuButton = BX(BX.prop.get(this._settings, "configMenuButtonId"));
			this._configIcon = BX(BX.prop.get(this._settings, "configIconId"));

			this._enableVisibilityPolicy = BX.prop.getBoolean(this._settings, "enableVisibilityPolicy", true);
			this._enableCommunicationControls = BX.prop.getBoolean(this._settings, "enableCommunicationControls", true);
			this._enablePageTitleControls = BX.prop.getBoolean(this._settings, "enablePageTitleControls", true);
			if(this._enablePageTitleControls)
			{
				this._pageTitle = BX("pagetitle");
				this._buttonWrapper = BX("pagetitle_btn_wrapper");
				this._editPageTitleButton = BX("pagetitle_edit");
				this._copyPageUrlButton = BX("page_url_copy_btn");
			}

			this.adjustSize();
			this.adjustTitle();

			//region Form
			this._formElement = BX.create("form", {props: { name: this._id + "_form"}});
			this._container.appendChild(this._formElement);

			this._enableRequiredUserFieldCheck = BX.prop.getBoolean(this._settings, "enableRequiredUserFieldCheck", true);

			this._enableAjaxForm = BX.prop.getBoolean(this._settings, "enableAjaxForm", true);
			if(this._enableAjaxForm)
			{
				this.initializeAjaxForm();
			}
			//endregion

			//region Duplicate manager
			var duplicateControlConfig = BX.prop.getObject(this._settings, "duplicateControl", {});
			if(this._ajaxForm)
			{
				duplicateControlConfig["form"] = this._ajaxForm;
			}

			this._dupControlManager = BX.Crm.EntityEditorDupManager.create(
				this._id.toLowerCase() + "_dup",
				duplicateControlConfig
			);
			//endregion

			this._context = BX.prop.getObject(this._settings, "context", {});
			this._contextId = BX.prop.getString(this._settings, "contextId", "");
			this._externalContextId = BX.prop.getString(this._settings, "externalContextId", "");

			this._readOnly = BX.prop.getBoolean(this._settings, "readOnly", false);
			if(this._readOnly)
			{
				this._enableSectionEdit = this._enableSectionCreation = false;
			}
			else
			{
				this._enableSectionEdit = BX.prop.getBoolean(this._settings, "enableSectionEdit", false);
				this._enableSectionCreation = BX.prop.getBoolean(this._settings, "enableSectionCreation", false);
			}

			this._userFieldManager = BX.prop.get(this._settings, "userFieldManager", null);

			this._bizprocManager = BX.prop.get(this._settings, "bizprocManager", null);
			if(this._bizprocManager)
			{
				this._bizprocManager._editor = this;
			}

			this._restPlacementTabManager = BX.prop.get(this._settings, "restPlacementTabManager", null);
			if(this._restPlacementTabManager)
			{
				this._restPlacementTabManager._editor = this;
			}

			this._modeChangeNotifier = BX.CrmNotifier.create(this);
			this._controlChangeNotifier = BX.CrmNotifier.create(this);

			this._availableSchemeElements = this._scheme.getAvailableElements();

			this._controllers = [];
			this._controls = [];
			this._activeControls = [];
			this._modeSwitch = BX.Crm.EntityEditorModeSwitch.create(this._id, { editor: this });

			this._htmlEditorConfigs = BX.prop.getObject(this._settings, "htmlEditorConfigs", {});

			var elements = this._scheme.getElements();

			var initialMode = BX.Crm.EntityEditorMode.view;
			if(!this._readOnly)
			{
				initialMode = BX.Crm.EntityEditorMode.parse(BX.prop.getString(this._settings, "initialMode", ""));
			}
			this._mode = initialMode !== BX.Crm.EntityEditorMode.intermediate ? initialMode : BX.Crm.EntityEditorMode.view;

			this._enableModeToggle = false;
			if(!this._readOnly)
			{
				this._enableModeToggle = BX.prop.getBoolean(this._settings, "enableModeToggle", true);
			}

			if(this._isNew && !this._readOnly)
			{
				this._mode = BX.Crm.EntityEditorMode.edit;
			}

			var i, length;
			var controllerData = BX.prop.getArray(this._settings, "controllers", []);
			for(i = 0, length = controllerData.length; i < length; i++)
			{
				var controller = this.createController(controllerData[i]);
				if(controller)
				{
					this._controllers.push(controller);
				}
			}

			var element, control;
			for(i = 0, length = elements.length; i < length; i++)
			{
				element = elements[i];
				control = this.createControl(
					element.getType(),
					element.getName(),
					{ schemeElement: element, mode: BX.Crm.EntityEditorMode.view }
				);

				if(!control)
				{
					continue;
				}

				this._controls.push(control);
			}

			if(this._mode === BX.Crm.EntityEditorMode.edit && this._controls.length > 0)
			{
				for(i = 0, length = this._controls.length; i < length; i++)
				{
					control = this._controls[i];
					//Enable edit mode for required fields only.
					var priority = control.getEditPriority();
					if(priority === BX.Crm.EntityEditorPriority.high)
					{
						control.setMode(BX.Crm.EntityEditorMode.edit, { notify: false });
					}
				}

				if(this.getActiveControlCount() === 0)
				{
					this._controls[0].setMode(BX.Crm.EntityEditorMode.edit, { notify: false });
				}
			}

			//region Validators
			this._validators = [];
			var validatorConfigs = BX.prop.getArray(this._settings, "validators", []);
			for(i = 0, length = validatorConfigs.length; i < length; i++)
			{
				var validator = this.createValidator(validatorConfigs[i]);
				if(validator)
				{
					this._validators.push(validator);
				}
			}
			//endregion

			this._modeChangeNotifier.notify([ this ]);

			this._enableToolPanel = BX.prop.getBoolean(this._settings, "enableToolPanel", true);
			if(this._enableToolPanel)
			{
				this._toolPanel = BX.Crm.EntityEditorToolPanel.create(
					this._id,
					{
						container: this._isEmbedded ? this._formElement : document.body,
						editor: this,
						visible: false
					}
				);
			}

			this._enableBottomPanel = BX.prop.getBoolean(this._settings, "enableBottomPanel", true);
			this._enableFieldsContextMenu = BX.prop.getBoolean(this._settings, "enableFieldsContextMenu", true);
			this._enableExternalLayoutResolvers = BX.prop.getBoolean(this._settings, "enableExternalLayoutResolvers", false);
			this._showEmptyFields = BX.prop.getBoolean(this._settings, "showEmptyFields", false);

			BX.addCustomEvent(
				window,
				"Crm.InterfaceToolbar.MenuBuild",
				BX.delegate(this.onInterfaceToolbarMenuBuild, this)
			);

			//region D&D Config
			this._dragConfig = {};

			var sectionDragModes = {};
			sectionDragModes[BX.Crm.EntityEditorMode.names.view]
				= sectionDragModes[BX.Crm.EntityEditorMode.names.edit]
				= BX.prop.getBoolean(this._settings, "enableSectionDragDrop", true);

			this._dragConfig[BX.Crm.EditorDragObjectType.section] =
				{
					scope: BX.Crm.EditorDragScope.form,
					modes: sectionDragModes
				};

			var fieldDragModes = {};
			fieldDragModes[BX.Crm.EntityEditorMode.names.view]
				= fieldDragModes[BX.Crm.EntityEditorMode.names.edit]
				= BX.prop.getBoolean(this._settings, "enableFieldDragDrop", true);

			this._dragConfig[BX.Crm.EditorDragObjectType.field] =
				{
					scope: BX.Crm.EditorDragScope.form,
					modes: fieldDragModes
				};

			if(this.canChangeScheme())
			{
				this._dragContainerController = BX.Crm.EditorDragContainerController.create(
					"editor_" + this.getId(),
					{
						charge: BX.Crm.EditorSectionDragContainer.create({ editor: this }),
						node: this._formElement
					}
				);
				this._dragContainerController.addDragFinishListener(this._dropHandler);
			}
			//endregion

			this.layout();

			BX.bind(window, "resize", BX.debounce(BX.delegate(this.onResize, this), 50));
			//BX.bind(window, "resize", BX.delegate(this.onResize, this));

			BX.addCustomEvent("SidePanel.Slider:onOpenComplete", this._sliderOpenHandler);
			BX.addCustomEvent("SidePanel.Slider:onClose", this._sliderCloseHandler);

			BX.addCustomEvent("onCrmEntityUpdate", this._entityUpdateHandler);

			var eventArgs =
				{
					id: this._id,
					externalContext: this._externalContextId,
					context: this._contextId,
					entityTypeId: this._entityTypeId,
					entityId: this._entityId,
					model: this._model
				};
			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onInit", [ this, eventArgs ]);
		},
		release: function()
		{
			//console.log("EntityEditor::release: %s", this.getId());

			if(this._dragContainerController)
			{
				this._dragContainerController.removeDragFinishListener(this._dropHandler);
				this._dragContainerController.release();
				this._dragContainerController = null;
			}

			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				this._controls[i].clearLayout();
			}

			BX.removeCustomEvent("onCrmEntityUpdate", this._entityUpdateHandler);
			BX.removeCustomEvent("SidePanel.Slider:onOpenComplete", this._sliderOpenHandler);
			BX.removeCustomEvent("SidePanel.Slider:onClose", this._sliderCloseHandler);

			this.releaseAjaxForm();
			this._container = BX.remove(this._container);

			this._haslayout = false;
			this._isReleased = true;
		},
		clone: function(params)
		{
			//var settings = Object.assign({}, this._settings);
			var wrapper = BX(BX.prop.get(params, "wrapper"));
			if(!BX.type.isElementNode(wrapper))
			{
				throw "Crm.EntityEditor: Could not find param 'wrapper'.";
			}

			var id = BX.prop.getString(params, "id", "");
			if(id === "")
			{
				id = BX.util.getRandomString(4);
			}

			var container = BX.create(
				"DIV",
				{
					props: { id: id.toLowerCase() + "_container",  className: "crm-entity-card-container-content" }
				}
			);
			wrapper.appendChild(container);

			var settings = BX.clone(this._settings);
			delete settings["containerId"];
			settings["container"] = container;

			return BX.Crm.EntityEditor.create(id, settings);
		},
		onSliderOpen: function(event)
		{
			//Reset close confirmation flag
			this._enableCloseConfirmation = true;
			var eventArgs =
				{
					id: this._id,
					externalContext: this._externalContextId,
					context: this._contextId,
					entityTypeId: this._entityTypeId,
					entityId: this._entityId,
					model: this._model
				};
			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onOpen", [ this, eventArgs ]);
		},
		onSliderClose: function(event)
		{
			if(!this._enableCloseConfirmation)
			{
				return;
			}

			var slider = top.BX.SidePanel.Instance.getSliderByWindow(window);
			if(slider !== event.getSlider())
			{
				return;
			}

			if(!slider.isOpen())
			{
				return;
			}

			if(!this.hasChangedControls() && !this.hasChangedControllers())
			{
				return;
			}

			event.denyAction();

			if(BX.Crm.EditorAuxiliaryDialog.isItemOpened("close_confirmation"))
			{
				return;
			}

			BX.Crm.EditorAuxiliaryDialog.create(
				"close_confirmation",
				{
					title: BX.message("CRM_EDITOR_CONFIRMATION"),
					content: BX.message("CRM_EDITOR_CLOSE_CONFIRMATION"),
					zIndex: 100,
					buttons:
						[
							{
								id: "close",
								type: BX.Crm.DialogButtonType.accept,
								text: BX.message("JS_CORE_WINDOW_CLOSE"),
								callback: this._closeConfirmationHandler
							},
							{
								id: "cancel",
								type: BX.Crm.DialogButtonType.cancel,
								text: BX.message("JS_CORE_WINDOW_CANCEL"),
								callback: this._closeConfirmationHandler
							}
						]
				}
			).open();
		},
		onCloseConfirmButtonClick: function(button)
		{
			button.getDialog().close();

			if(button.getId() === "close")
			{
				this._enableCloseConfirmation = false;
				top.BX.SidePanel.Instance.getSliderByWindow(window).close();
			}
		},
		onCancelConfirmButtonClick: function(button)
		{
			button.getDialog().close();

			if(button.getId() === "yes")
			{
				this.innerCancel();
			}
		},
		onEntityUpdate: function(eventParams)
		{
			if(this._isReleased)
			{
				return;
			}

			if(this._entityTypeId === BX.prop.getInteger(eventParams, "entityTypeId", 0)
				&& this._entityId === BX.prop.getInteger(eventParams, "entityId", 0)
				&& this !== BX.prop.get(eventParams, "sender", 0)
			)
			{
				var data = BX.prop.getObject(eventParams, "entityData", null);
				if(data)
				{
					this._model.setData(data, { enableNotification: false });

					this.adjustTitle();
					this.adjustSize();

					this.refreshLayout({ reset: true });
				}
			}
		},
		initializeAjaxForm: function()
		{
			if(this._ajaxForm)
			{
				return;
			}

			this._ajaxForm = BX.Crm.AjaxForm.create(
				this._id,
				{
					elementNode: this._formElement,
					config:
					{
						url: this._serviceUrl,
						method: "POST",
						dataType: "json",
						processData : true,
						onsuccess: BX.delegate(this.onSaveSuccess, this),
						data:
						{
							"ACTION": "SAVE",
							"ACTION_ENTITY_ID": this._entityId,
							"ACTION_ENTITY_TYPE": BX.CrmEntityType.resolveAbbreviation(
								BX.CrmEntityType.resolveName(this._entityTypeId)
							),
							"ENABLE_REQUIRED_USER_FIELD_CHECK": this._enableRequiredUserFieldCheck ? 'Y' : 'N'
						}
					}
				}
			);

			//Prevent submit form by Enter if only one input on form
			this._formElement.setAttribute("onsubmit", "return false;");

			BX.addCustomEvent(this._ajaxForm, "onAfterSubmit", this._afterFormSubmitHandler);
			BX.addCustomEvent(this._ajaxForm, "onSubmitCancel", this._cancelFormSubmitHandler);
		},
		releaseAjaxForm: function()
		{
			if(!this._ajaxForm)
			{
				return;
			}

			BX.removeCustomEvent(this._ajaxForm, "onAfterSubmit", this._afterFormSubmitHandler);
			BX.removeCustomEvent(this._ajaxForm, "onSubmitCancel", this._cancelFormSubmitHandler);
			this._ajaxForm = null;
		},
		getId: function()
		{
			return this._id;
		},
		getEntityTypeId: function()
		{
			return this._entityTypeId;
		},
		getEntityTypeName: function()
		{
			return BX.CrmEntityType.resolveName(this._entityTypeId);
		},
		getEntityId: function()
		{
			return this._entityId;
		},
		getOwnerInfo: function()
		{
			return this._model.getOwnerInfo();
		},
		getMode: function()
		{
			return this._mode;
		},
		getModel: function()
		{
			return this._model;
		},
		getContextId: function()
		{
			return this._contextId;
		},
		getContext: function()
		{
			return this._context;
		},
		getExternalContextId: function()
		{
			return this._externalContextId;
		},
		getScheme: function()
		{
			return this._scheme;
		},
		isVisible: function()
		{
			return this._container.offsetParent !== null;
		},
		isVisibilityPolicyEnabled: function()
		{
			return this._enableVisibilityPolicy;
		},
		isSectionEditEnabled: function()
		{
			return this._enableSectionEdit;
		},
		isSectionCreationEnabled: function()
		{
			return this._enableSectionCreation && this.canChangeScheme();
		},
		isFieldsContextMenuEnabled: function()
		{
			return this._enableFieldsContextMenu;
		},
		isModeToggleEnabled: function()
		{
			return this._enableModeToggle;
		},
		isPersistent: function()
		{
			return(this._entityId > 0 && this._entityId === this._model.getIntegerField("ID", 0));
		},
		isNew: function()
		{
			return this._isNew;
		},
		isReadOnly: function()
		{
			return this._readOnly;
		},
		isEmbedded: function()
		{
			return this._isEmbedded;
		},
		isEditInViewEnabled: function()
		{
			return this._entityId > 0;
		},
		isNeedToDisplayEmptyFields: function()
		{
			return this._showEmptyFields;
		},
		areCommunicationControlsEnabled: function()
		{
			return this._enableCommunicationControls;
		},
		prepareFieldLayoutOptions: function(field)
		{
			var hasContent = field.hasContentToDisplay();
			var result = { isNeedToDisplay: (hasContent || this._showEmptyFields) };
			if(this._enableExternalLayoutResolvers)
			{
				var eventArgs =
					{
						id: this._id,
						field: field,
						hasContent: hasContent,
						showEmptyFields: this._showEmptyFields,
						layoutOptions: result
					};

				BX.onCustomEvent(
					window,
					"BX.Crm.EntityEditor:onResolveFieldLayoutOptions",
					[ this, eventArgs ]
				);
			}
			return result;
		},
		getEntityCreateUrl: function(entityTypeName)
		{
			if(entityTypeName === BX.CrmEntityType.names.contact)
			{
				return BX.prop.getString(this._settings, "contactCreateUrl", "");
			}
			else if(entityTypeName === BX.CrmEntityType.names.company)
			{
				return BX.prop.getString(this._settings, "companyCreateUrl", "");
			}
			return "";
		},
		getEntityEditUrl: function(entityTypeName, entityId)
		{
			var url = "";
			if(entityTypeName === BX.CrmEntityType.names.contact)
			{
				url = BX.prop.getString(this._settings, "contactEditUrl", "");
			}
			else if(entityTypeName === BX.CrmEntityType.names.company)
			{
				url = BX.prop.getString(this._settings, "companyEditUrl", "");
			}

			if(url !== "")
			{
				url = url.replace("#id#", entityId, "gi");
			}

			return url;
		},
		getEntityRequisiteSelectUrl: function(entityTypeName, entityId)
		{
			var url = "";
			if(entityTypeName === BX.CrmEntityType.names.contact)
			{
				url = BX.prop.getString(this._settings, "contactRequisiteSelectUrl", "").replace(/#contact_id#/gi, entityId);
			}
			else if(entityTypeName === BX.CrmEntityType.names.company)
			{
				url = BX.prop.getString(this._settings, "companyRequisiteSelectUrl", "").replace(/#company_id#/gi, entityId);
			}
			return url;
		},
		getRequisiteEditUrl: function(id)
		{
			return BX.prop.getString(this._settings, "requisiteEditUrl", "").replace(/#requisite_id#/gi, id);
		},
		getDetailManager: function()
		{
			if(typeof(BX.Crm.EntityDetailManager) === "undefined")
			{
				return null;
			}

			return BX.Crm.EntityDetailManager.get(BX.prop.getString(this._settings, "detailManagerId", ""));
		},
		getUserFieldManager: function()
		{
			return this._userFieldManager;
		},
		getBizprocManager: function()
		{
			return this._bizprocManager;
		},
		getAttributeManager: function()
		{
			if(!this._attributeManager)
			{
				var settings = this.getAttributeManagerSettings();
				if(settings)
				{
					this._attributeManager = BX.Crm.EntityFieldAttributeManager.create(
						this._id,
						{
							entityTypeId: this.getEntityTypeId(),
							entityScope: BX.prop.getString(settings, "ENTITY_SCOPE", ""),
							isPermitted: BX.prop.getBoolean(settings, "IS_PERMITTED", true),
							lockScript: BX.prop.getString(settings, "LOCK_SCRIPT", ""),
							captions: BX.prop.getObject(settings, "CAPTIONS", {})
						}
					);
				}
			}
			return this._attributeManager;
		},
		getHtmlEditorConfig: function(fieldName)
		{
			return BX.prop.getObject(this._htmlEditorConfigs, fieldName, null);
		},
		//region Validators
		createValidator: function(settings)
		{
			settings["editor"] = this;
			return BX.Crm.EntityEditorValidatorFactory.create(
				BX.prop.getString(settings, "type", ""),
				settings
			);
		},
		//endregion
		//region Controls & Events
		getControlByIndex: function(index)
		{
			return (index >= 0 && index < this._controls.length) ? this._controls[index] : null;
		},
		getControlIndex: function(control)
		{
			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				if(this._controls[i] === control)
				{
					return i;
				}
			}
			return -1;
		},
		getControls: function()
		{
			return this._controls;
		},
		getControlCount: function()
		{
			return this._controls.length;
		},
		createControl: function(type, controlId, settings)
		{
			settings["serviceUrl"] = this._serviceUrl;
			settings["container"] = this._formElement;
			settings["model"] = this._model;
			settings["editor"] = this;

			return BX.Crm.EntityEditorControlFactory.create(type, controlId, settings);
		},
		addControlAt: function(control, index)
		{
			var options = {};
			if(index < this._controls.length)
			{
				options["anchor"] = this._controls[index].getWrapper();
				this._controls.splice(index, 0, control);
			}
			else
			{
				this._controls.push(control);
			}
			control.layout(options);
		},
		moveControl: function(control, index)
		{
			var qty = this._controls.length;
			var lastIndex = qty - 1;
			if(index < 0  || index > qty)
			{
				index = lastIndex;
			}

			var currentIndex = this.getControlIndex(control);
			if(currentIndex < 0 || currentIndex === index)
			{
				return false;
			}

			control.clearLayout();
			this._controls.splice(currentIndex, 1);
			qty--;

			var anchor = index < qty
				? this._controls[index].getWrapper()
				: null;

			if(index < qty)
			{
				this._controls.splice(index, 0, control);
			}
			else
			{
				this._controls.push(control);
			}

			if(anchor)
			{
				control.layout({ anchor: anchor });
			}
			else
			{
				control.layout();
			}

			this._config.moveSchemeElement(control.getSchemeElement(), index);
		},
		removeControl: function(control)
		{
			var index = this.getControlIndex(control);
			if(index < 0)
			{
				return false;
			}

			this.processControlRemove(control);
			control.clearLayout();
			this._controls.splice(index, 1);
		},
		getControlById: function(id)
		{
			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				var control = this._controls[i];
				if(control.getId() === id)
				{
					return control;
				}

				var child = control.getChildById(id);
				if(child)
				{
					return child;
				}
			}
			return null;
		},
		getControlByIdRecursive: function(name, controls)
		{
			var res;

			if(!controls)
			{
				controls = this.getControls();
			}

			for (var i=0; i < controls.length; i++)
			{
				if (!controls[i] instanceof BX.Crm.EntityEditorControl)
				{
					continue;
				}

				if(controls[i].getId() === name)
				{
					return controls[i];
				}
				else if (controls[i] instanceof BX.Crm.EntityEditorSection)
				{
					if(res = this.getControlByIdRecursive(name, controls[i].getChildren()))
					{
						return res;
					}
				}
			}

			return null;
		},
		getAllControls: function(controls)
		{
			var result = [], res;

			if(!controls)
			{
				controls = this.getControls();
			}

			for (var i=0; i < controls.length; i++)
			{
				if (controls[i] instanceof BX.Crm.EntityEditorControl)
				{
					if (controls[i] instanceof BX.Crm.EntityEditorSection)
					{
						if(res = this.getAllControls(controls[i].getChildren()))
						{
							result = result.concat(res);
						}
					}
					else
					{
						result.push(controls[i]);
					}
				}
			}

			return result;
		},
		getActiveControlCount: function()
		{
			return this._activeControls.length;
		},
		getActiveControlIndex: function(control)
		{
			var length = this._activeControls.length;
			if(length === 0)
			{
				return -1;
			}

			for(var i = 0; i < length; i++)
			{
				if(this._activeControls[i] === control)
				{
					return i;
				}
			}
			return -1;
		},
		getActiveControlById: function(id, recursive)
		{
			recursive = !!recursive;
			var length = this._activeControls.length;
			if(length === 0)
			{
				return null;
			}

			for(var i = 0; i < length; i++)
			{
				var control = this._activeControls[i];
				if(control.getId() === id)
				{
					return control;
				}

				if(recursive)
				{
					var child = control.getChildById(id);
					if(child)
					{
						return child;
					}
				}
			}
			return null;
		},
		getActiveControlByIndex: function(index)
		{
			return index >= 0 && index < this._activeControls.length ? this._activeControls[index] : null;
		},
		registerActiveControl: function(control)
		{
			var index = this.getActiveControlIndex(control);
			if(index >= 0)
			{
				return;
			}

			this._activeControls.push(control);
			control.setActive(true);
			if(this._mode !== BX.Crm.EntityEditorMode.edit)
			{
				this._mode = BX.Crm.EntityEditorMode.edit;
				this._modeChangeNotifier.notify([ this ]);
			}
		},
		unregisterActiveControl: function(control)
		{
			var index = this.getActiveControlIndex(control);
			if(index < 0)
			{
				return;
			}

			this._activeControls.splice(index, 1);
			control.setActive(false);
			if(this._activeControls.length === 0 && this._mode !== BX.Crm.EntityEditorMode.view)
			{
				this._mode = BX.Crm.EntityEditorMode.view;
				this._modeChangeNotifier.notify([ this ]);
			}
		},
		releaseActiveControls: function(options)
		{
			//region Release Event
			var eventArgs =
				{
					id: this._id,
					externalContext: this._externalContextId,
					context: this._contextId,
					entityTypeId: this._entityTypeId,
					entityId: this._entityId,
					model: this._model
				};
			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onRelease", [ this, eventArgs ]);
			//endregion

			for(var i = 0, length = this._activeControls.length; i < length; i++)
			{
				var control = this._activeControls[i];
				control.setActive(false);
				control.toggleMode(false, options);
			}
			this._activeControls = [];
		},
		hasChangedControls: function()
		{
			for(var i = 0, length = this._activeControls.length; i < length; i++)
			{
				if(this._activeControls[i].isChanged())
				{
					return true;
				}
			}
			return false;
		},
		hasChangedControllers: function()
		{
			for(var i = 0, length = this._controllers.length; i < length; i++)
			{
				if(this._controllers[i].isChanged())
				{
					return true;
				}
			}
			return false;
		},
		isWaitingForInput: function()
		{
			if(this._mode !== BX.Crm.EntityEditorMode.edit)
			{
				return false;
			}

			for(var i = 0, length = this._activeControls.length; i < length; i++)
			{
				if(this._activeControls[i].isWaitingForInput())
				{
					return true;
				}
			}
			return false;
		},
		processControlModeChange: function(control)
		{
			if(control.getMode() === BX.Crm.EntityEditorMode.edit)
			{
				this.registerActiveControl(control);
			}
			else //BX.Crm.EntityEditorMode.view
			{
				this.unregisterActiveControl(control);
			}

			if(this.getActiveControlCount() > 0)
			{
				this.showToolPanel();
			}
			else
			{
				this.hideToolPanel();
			}
		},
		processControlChange: function(control, params)
		{
			if(!this._enableCloseConfirmation)
			{
				this._enableCloseConfirmation = true;
			}

			this.showToolPanel();
			this._controlChangeNotifier.notify([ params ]);
		},
		processControlAdd: function(control)
		{
			this.removeAvailableSchemeElement(control.getSchemeElement());
		},
		processControlMove: function(control)
		{
		},
		processControlRemove: function(control)
		{
			if(control instanceof BX.Crm.EntityEditorField || control instanceof BX.Crm.EntityEditorSubsection)
			{
				this.addAvailableSchemeElement(control.getSchemeElement());
			}
			else if(control instanceof BX.Crm.EntityEditorSection)
			{
				var children = control.getChildren();
				for(var i= 0, length = children.length; i < length; i++)
				{
					this.addAvailableSchemeElement(children[i].getSchemeElement());
				}
			}
		},
		//endregion
		//region Available Scheme Elements
		getAvailableSchemeElements: function()
		{
			return this._availableSchemeElements;
		},
		addAvailableSchemeElement: function(schemeElement)
		{
			this._availableSchemeElements.push(schemeElement);
			this._areAvailableSchemeElementsChanged = true;
			this.notifyAvailableSchemeElementsChanged();
		},
		removeAvailableSchemeElement: function(element)
		{
			var index = this.getAvailableSchemeElementIndex(element);
			if(index < 0)
			{
				return;
			}

			this._availableSchemeElements.splice(index, 1);
			this._areAvailableSchemeElementsChanged = true;
			this.notifyAvailableSchemeElementsChanged();
		},
		getAvailableSchemeElementIndex: function(element)
		{
			var schemeElements = this._availableSchemeElements;
			for(var i = 0, length = schemeElements.length; i < length; i++)
			{
				if(schemeElements[i] === element)
				{
					return i;
				}
			}
			return -1;
		},
		getAvailableSchemeElementByName: function(name)
		{
			var schemeElements = this._availableSchemeElements;
			for(var i = 0, length = schemeElements.length; i < length; i++)
			{
				var schemeElement = schemeElements[i];
				if(schemeElement.getName() === name)
				{
					return schemeElement;
				}
			}
			return null;
		},
		hasAvailableSchemeElements: function()
		{
			return (this._availableSchemeElements.length > 0);
		},
		getSchemeElementByName: function(name)
		{
			return this._scheme.findElementByName(name, { isRecursive: true });
		},
		notifyAvailableSchemeElementsChanged: function()
		{
			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				this._controls[i].processAvailableSchemeElementsChange();
			}
		},
		//endregion
		//region Controllers
		createController: function(data)
		{
			return BX.Crm.EntityEditorControllerFactory.create(
				BX.prop.getString(data, "type", ""),
				BX.prop.getString(data, "name", ""),
				{
					config: BX.prop.getObject(data, "config", {}),
					model: this._model,
					editor: this
				}
			);
		},
		processControllerChange: function(controller)
		{
			if(!this._enableCloseConfirmation)
			{
				this._enableCloseConfirmation = true;
			}

			this.showToolPanel();
		},
		//endregion
		//region Layout
		getContainer: function()
		{
			return this._container;
		},
		prepareContextDataLayout: function(context, parentName)
		{
			for(var key in context)
			{
				if(!context.hasOwnProperty(key))
				{
					continue;
				}

				var item = context[key];
				var name = key;
				if(BX.type.isNotEmptyString(parentName))
				{
					name = parentName + "[" + name + "]";
				}
				if(BX.type.isPlainObject(item))
				{
					this.prepareContextDataLayout(item, name);
				}
				else
				{
					this._formElement.appendChild(
						BX.create("input", { props: { type: "hidden", name: name, value: item } })
					);
				}
			}
		},
		hasLayout: function()
		{
			return this._haslayout;
		},
		layout: function()
		{
			var eventArgs = { cancel: false };
			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onBeforeLayout", [ this, eventArgs ]);
			if(eventArgs["cancel"])
			{
				return;
			}

			this.prepareContextDataLayout(this._context, "");

			if(this._toolPanel)
			{
				this._toolPanel.layout();
			}

			if(this._createSectionButton)
			{
				if(this.isSectionCreationEnabled())
				{
					BX.bind(this._createSectionButton, "click", BX.delegate(this.onCreateSectionButtonClick, this));
				}
				else
				{
					this._createSectionButton.style.display = "none";
				}
			}

			if(this._configMenuButton)
			{
				BX.bind(this._configMenuButton, "click", BX.delegate(this.onConfigMenuButtonClick, this));
			}

			var enableInlineEditSpotlight = BX.prop.getBoolean(this._settings, "enableInlineEditSpotlight", false);

			var userFieldLoaders =
				{
					edit: BX.Crm.EntityUserFieldLayoutLoader.create(
						this._id,
						{ mode: BX.Crm.EntityEditorMode.edit, enableBatchMode: true, owner: this }
					),
					view: BX.Crm.EntityUserFieldLayoutLoader.create(
						this._id,
						{ mode: BX.Crm.EntityEditorMode.view, enableBatchMode: true, owner: this }
					)
				};

			var i, length, control;
			for(i = 0, length = this._controls.length; i < length; i++)
			{
				control = this._controls[i];
				var mode = control.getMode();

				var layoutOptions =
					{
						userFieldLoader: userFieldLoaders[BX.Crm.EntityEditorMode.getName(mode)],
						enableFocusGain: !this._isEmbedded
					};

				if(i === 0 && enableInlineEditSpotlight && mode === BX.Crm.EntityEditorMode.view)
				{
					layoutOptions["lighting"] =
						{
							id: BX.prop.getString(this._settings, "inlineEditSpotlightId", ""),
							text: this.getMessage("inlineEditHint")
						};
				}

				control.layout(layoutOptions);

				if(mode === BX.Crm.EntityEditorMode.edit)
				{
					this.registerActiveControl(control);
				}
			}

			for(var key in userFieldLoaders)
			{
				if(userFieldLoaders.hasOwnProperty(key))
				{
					userFieldLoaders[key].runBatch();
				}
			}

			if(this.getActiveControlCount() > 0)
			{
				this.showToolPanel();
			}

			if(this._model.isCaptionEditable())
			{
				BX.bind(
					this._pageTitle,
					"click",
					BX.delegate(this.onPageTileClick, this)
				);

				if(this._editPageTitleButton)
				{
					BX.bind(
						this._editPageTitleButton,
						"click",
						BX.delegate(this.onPageTileClick, this)
					);
				}
			}

			if(this._mode === BX.Crm.EntityEditorMode.edit && this._dupControlManager.isEnabled())
			{
				this._dupControlManager.search();
			}

			if(this._enableBottomPanel && this._buttonContainer)
			{
				this._buttonContainer.style.display = "";
			}

			this.adjustButtons();
			this._haslayout = true;

			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onLayout", [ this ]);
		},
		refreshLayout: function(options)
		{
			var userFieldLoaders =
				{
					edit: BX.Crm.EntityUserFieldLayoutLoader.create(
						this._id,
						{ mode: BX.Crm.EntityEditorMode.edit, enableBatchMode: true, owner: this }
					),
					view: BX.Crm.EntityUserFieldLayoutLoader.create(
						this._id,
						{ mode: BX.Crm.EntityEditorMode.view, enableBatchMode: true, owner: this }
					)
				};


			if(!BX.type.isPlainObject(options))
			{
				options = {};
			}

			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				var control = this._controls[i];
				var mode = control.getMode();

				var layoutOptions = BX.mergeEx(
					options,
					{
						userFieldLoader: userFieldLoaders[BX.Crm.EntityEditorMode.getName(mode)],
						enableFocusGain: !this._isEmbedded
					}
				);
				control.refreshLayout(layoutOptions);
			}

			for(var key in userFieldLoaders)
			{
				if(userFieldLoaders.hasOwnProperty(key))
				{
					userFieldLoaders[key].runBatch();
				}
			}

			this.adjustButtons();

			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onRefreshLayout", [ this ]);
		},
		//endregion
		switchControlMode: function(control, mode, options)
		{
			if(!this.isModeToggleEnabled())
			{
				return;
			}

			if(mode === BX.Crm.EntityEditorMode.view)
			{
				if(control.checkModeOption(BX.Crm.EntityEditorModeOptions.saveOnExit))
				{
					this._modeSwitch.getQueue().add(control, BX.Crm.EntityEditorMode.view);
					this._modeSwitch.run();
				}
				else
				{
					control.setMode(mode, { options: options, notify: true });
					control.refreshLayout();
				}
			}
			else// if(mode === BX.Crm.EntityEditorMode.edit)
			{
				if(!BX.Crm.EntityEditorModeOptions.check(options, BX.Crm.EntityEditorModeOptions.exclusive))
				{
					control.setMode(BX.Crm.EntityEditorMode.edit, { options: options, notify: true });
					control.refreshLayout();
				}
				else
				{
					var queuedControlQty = 0;
					for(var i = 0, length = this._activeControls.length; i < length; i++)
					{
						var activeControl = this._activeControls[i];
						if(activeControl.checkModeOption(BX.Crm.EntityEditorModeOptions.saveOnExit))
						{
							this._modeSwitch.getQueue().add(activeControl, BX.Crm.EntityEditorMode.view, options);
							queuedControlQty++;
						}
					}

					if(queuedControlQty > 0)
					{
						this._modeSwitch.getQueue().add(control, BX.Crm.EntityEditorMode.edit, options);
						this._modeSwitch.run();
					}
					else
					{
						control.setMode(BX.Crm.EntityEditorMode.edit, { options: options, notify: true });
						control.refreshLayout();
					}
				}
			}
		},
		switchToViewMode: function(options)
		{
			this.releaseActiveControls(options);
			this.hideToolPanel();
		},
		switchTitleMode: function(mode)
		{
			if(mode === BX.Crm.EntityEditorMode.edit)
			{
				this._pageTitle.style.display = "none";

				if(this._buttonWrapper)
				{
					this._buttonWrapper.style.display = "none";
				}

				this._pageTitleInput = BX.create(
					"input",
					{
						props:
						{
							type: "text",
							className: "pagetitle-item crm-pagetitle-item",
							value: this._model.getCaption()
						}
					}
				);
				//this._pageTitle.parentNode.insertBefore(this._pageTitleInput, this._buttonWrapper);
				this._pageTitle.parentNode.insertBefore(this._pageTitleInput, this._pageTitle);
				this._pageTitleInput.focus();

				window.setTimeout(
					BX.delegate(
						function()
							{
								BX.bind(document, "click", this._pageTitleExternalClickHandler);
								BX.bind(this._pageTitleInput, "keyup", this._pageTitleKeyPressHandler);
							},
						this
					),
					300
				);
			}
			else
			{
				if(this._pageTitleInput)
				{
					this._pageTitleInput = BX.remove(this._pageTitleInput);
				}

				this._pageTitle.innerHTML = BX.util.htmlspecialchars(this._model.getCaption());
				this._pageTitle.style.display = "";

				if(this._buttonWrapper)
				{
					this._buttonWrapper.style.display = "";
				}

				BX.unbind(document, "click", this._pageTitleExternalClickHandler);
				BX.unbind(this._pageTitleInput, "keyup", this._pageTitleKeyPressHandler);

				this.adjustTitle();
			}
		},
		adjustTitle: function()
		{
			if(!this._enablePageTitleControls)
			{
				return;
			}

			if(!this._buttonWrapper)
			{
				return;
			}

			var caption = this._model.getCaption().trim();
			var captionTail = "";

			document.title = caption;
			if (BX.getClass("BX.SidePanel.Instance.updateBrowserTitle"))
			{
				BX.SidePanel.Instance.updateBrowserTitle();
			}

			var match = caption.match(/\s+\S+\s*$/);
			if(match)
			{
				captionTail = caption.substr(match["index"]);
				caption = caption.substr(0, match["index"]);
			}
			else
			{
				captionTail = caption;
				caption = "";
			}

			BX.cleanNode(this._buttonWrapper);
			if(captionTail !== "")
			{
				this._buttonWrapper.appendChild(document.createTextNode(captionTail));
			}
			if(this._editPageTitleButton)
			{
				this._buttonWrapper.appendChild(this._editPageTitleButton);
			}
			if(this._copyPageUrlButton)
			{
				this._buttonWrapper.appendChild(this._copyPageUrlButton);
			}

			this._pageTitle.innerHTML = BX.util.htmlspecialchars(caption);
		},
		adjustSize: function()
		{
			if(!this._enablePageTitleControls)
			{
				return;
			}

			if(!this._pageTitle)
			{
				return;
			}

			var wrapper = this._pageTitle.parentNode ? this._pageTitle.parentNode : this._pageTitle;
			BX.addClass(wrapper, "crm-pagetitle")
			var enableNarrowSize = wrapper.offsetWidth <= 480 && this._model.getCaption().length >= 40;
			if(enableNarrowSize && !BX.hasClass(wrapper, "pagetitle-narrow"))
			{
				BX.addClass(wrapper, "pagetitle-narrow");
			}
			else if(!enableNarrowSize && BX.hasClass(wrapper, "pagetitle-narrow"))
			{
				BX.removeClass(wrapper, "pagetitle-narrow");
			}

		},
		adjustButtons: function()
		{
			//Move configuration menu button to last section if bottom panel is hidden.
			if(this._config.isScopeToggleEnabled() && !this._enableBottomPanel && this._controls.length > 0)
			{
				this._controls[this._controls.length - 1].ensureButtonPanelWrapperCreated().appendChild(
					BX.create(
						"span",
						{
							props:
								{
									className: this._config.getScope() === BX.Crm.EntityConfigScope.common
										? "crm-entity-card-common" : "crm-entity-card-private"
								},
							events: { click: BX.delegate(this.onConfigMenuButtonClick, this) }
						}
					)
				);
			}
		},
		showToolPanel: function()
		{
			if(!this._toolPanel || this._toolPanel.isVisible())
			{
				return;
			}

			this._toolPanel.setVisible(true);
			if(this._parentContainer)
			{
				this._parentContainer.style.paddingBottom = "50px";

				document.body.style.paddingBottom = "60px";
				document.body.style.height = "auto";
			}
		},
		hideToolPanel: function()
		{
			if(!this._toolPanel || !this._toolPanel.isVisible())
			{
				return;
			}

			this._toolPanel.setVisible(false);
			if(this._parentContainer)
			{
				this._parentContainer.style.paddingBottom = "";

				document.body.style.paddingBottom = "";
				document.body.style.height = "";
			}
		},
		showMessageDialog: function(id, title, content)
		{
			var dlg = BX.Crm.EditorAuxiliaryDialog.create(
				id,
				{
					title: title,
					content: content,
					buttons:
						[
							{
								id: "continue",
								type: BX.Crm.DialogButtonType.accept,
								text: BX.message("CRM_EDITOR_CONTINUE"),
								callback: function(button) { button.getDialog().close(); }
							}
						]
				}
			);
			dlg.open();
		},
		addModeChangeListener: function(listener)
		{
			this._modeChangeNotifier.addListener(listener);
		},
		removeModeChangeListener: function(listener)
		{
			this._modeChangeNotifier.removeListener(listener);
		},
		addControlChangeListener: function(listener)
		{
			this._controlChangeNotifier.addListener(listener);
		},
		removeControlChangeListener: function(listener)
		{
			this._controlChangeNotifier.removeListener(listener);
		},
		getMessage: function(name)
		{
			var m = BX.Crm.EntityEditor.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getFormElement: function()
		{
			return this._formElement;
		},
		isChanged: function()
		{
			return this._isNew || this.hasChangedControls() || this.hasChangedControllers();
		},
		savePageTitle: function()
		{
			if(!this._pageTitleInput)
			{
				return;
			}

			var title = BX.util.trim(this._pageTitleInput.value);
			if(title === "")
			{
				return;
			}

			this._model.setCaption(title);
			var data =
				{
					"ACTION": "SAVE",
					"ACTION_ENTITY_ID": this._entityId,
					"ACTION_ENTITY_TYPE": BX.CrmEntityType.resolveAbbreviation(
						BX.CrmEntityType.resolveName(this._entityTypeId)
					),
					"PARAMS": BX.prop.getObject(this._context, "PARAMS", {})
				};

			this._model.prepareCaptionData(data);

			for(var i = 0, length = this._controllers.length; i < length; i++)
			{
				data = this._controllers[i].onBeforesSaveControl(data);
			}

			BX.ajax(
				{
					url: this._serviceUrl,
					method: "POST",
					dataType: "json",
					data: data,
					onsuccess: BX.delegate(this.onSaveSuccess, this)
				}
			);
		},
		saveChanged: function()
		{
			if(!this._isNew && !this.hasChangedControls() && !this.hasChangedControllers() && !this.isWaitingForInput())
			{
				this._modeSwitch.reset();
				this.releaseActiveControls();
				this.refreshLayout({ reset: true });
				this.hideToolPanel();
			}
			else
			{
				this._modeSwitch.reset();
				this._modeSwitch.getQueue().addBatch(this._activeControls, BX.Crm.EntityEditorMode.view);
				this._modeSwitch.run();
			}
		},
		saveDelayed: function(delay)
		{
			if(typeof(delay) === "undefined")
			{
				delay = 0;
			}

			if(this._delayedSaveHandle > 0)
			{
				window.clearTimeout(this._delayedSaveHandle);
			}
			this._delayedSaveHandle = window.setTimeout(BX.delegate(this.save, this), delay);
		},
		save: function()
		{
			if(this._toolPanel)
			{
				this._toolPanel.setLocked(true);
			}

			var result = BX.Crm.EntityValidationResult.create();
			this.validate(result).then(
				BX.delegate(
					function()
					{
						if(this._bizprocManager)
						{
							return this._bizprocManager.onBeforeSave(result);
						}

						var promise = new BX.Promise();
						window.setTimeout(function(){ promise.fulfill(); }, 0);
						return promise;
					},
					this
				)
			).then(
				BX.delegate(
					function()
					{
						if(result.getStatus())
						{
							this.innerSave();
							if(this._bizprocManager)
							{
								this._bizprocManager.onAfterSave();
							}
						}
						else
						{
							if(this.isVisible())
							{
								var field = result.getTopmostField();
								if(field)
								{
									field.focus();
								}
							}

							if(this._toolPanel)
							{
								this._toolPanel.setLocked(false);
							}

							BX.onCustomEvent(window, "BX.Crm.EntityEditor:onFailedValidation", [ this, result ]);
						}
					},
					this
				)
			);

			if(this._delayedSaveHandle > 0)
			{
				this._delayedSaveHandle = 0;
			}
		},
		saveControl: function(control)
		{
			if(this._entityId <= 0)
			{
				return;
			}

			var result = BX.Crm.EntityValidationResult.create();
			control.validate(result);

			if(!result.getStatus())
			{
				return;
			}

			var data =
			{
				"ACTION": "SAVE",
				"ACTION_ENTITY_ID": this._entityId,
				"ACTION_ENTITY_TYPE": BX.CrmEntityType.resolveAbbreviation(
					BX.CrmEntityType.resolveName(this._entityTypeId)
				)
			};

			data = BX.mergeEx(data, this._context);
			control.save();
			control.prepareSaveData(data);

			for(var i = 0, length = this._controllers.length; i < length; i++)
			{
				data = this._controllers[i].onBeforesSaveControl(data);
			}

			BX.ajax(
				{
					method: "POST",
					dataType: "json",
					url: this._serviceUrl,
					data: data,
					onsuccess: BX.delegate(this.onSaveSuccess, this)
				}
			);
		},
		saveData: function(data)
		{
			if(this._entityId <= 0)
			{
				return;
			}

			data = BX.mergeEx(data, this._context);
			data = BX.mergeEx(
				data,
				{
					"ACTION": "SAVE",
					"ACTION_ENTITY_ID": this._entityId,
					"ACTION_ENTITY_TYPE": BX.CrmEntityType.resolveAbbreviation(
						BX.CrmEntityType.resolveName(this._entityTypeId)
					)
				}
			);

			BX.ajax(
				{
					method: "POST",
					dataType: "json",
					url: this._serviceUrl,
					data: data,
					onsuccess: BX.delegate(this.onSaveSuccess, this)
				}
			);
		},
		validate: function(result)
		{
			for(var i = 0, length = this._activeControls.length; i < length; i++)
			{
				this._activeControls[i].validate(result);
			}

			var promise = new BX.Promise();
			this._userFieldManager.validate(result).then(
				BX.delegate(function() { promise.fulfill(); }, this)
			);
			return promise;
		},
		isRequestRunning: function()
		{
			return this._isRequestRunning;
		},
		innerSave: function()
		{
			if(this._isRequestRunning)
			{
				return;
			}

			var i, length;
			for(i = 0, length = this._controllers.length; i < length; i++)
			{
				this._controllers[i].onBeforeSubmit();
			}

			for(i = 0, length = this._activeControls.length; i < length; i++)
			{
				var control = this._activeControls[i];

				control.save();
				control.onBeforeSubmit();

				if(control.isSchemeChanged())
				{
					this._config.updateSchemeElement(control.getSchemeElement());
				}
			}

			if(this._areAvailableSchemeElementsChanged)
			{
				this._scheme.setAvailableElements(this._availableSchemeElements);
				this._areAvailableSchemeElementsChanged = false;
			}

			if(this._config && this._config.isChanged())
			{
				this._config.save(false);
			}

			//region Rise Save Event
			var eventArgs =
				{
					id: this._id,
					externalContext: this._externalContextId,
					context: this._contextId,
					entityTypeId: this._entityTypeId,
					entityId: this._entityId,
					model: this._model,
					cancel: false
				};

			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onSave", [ this, eventArgs ]);

			var enableCloseConfirmation = BX.prop.getBoolean(
				eventArgs,
				"enableCloseConfirmation",
				null
			);
			if(BX.type.isBoolean(enableCloseConfirmation))
			{
				this._enableCloseConfirmation = enableCloseConfirmation;
			}

			if(eventArgs["cancel"])
			{
				return;
			}

			if(this._ajaxForm)
			{
				var detailManager = this.getDetailManager();
				if(detailManager)
				{
					var params =  detailManager.prepareAnalyticParams(
						this._entityId > 0 ? "update" : "create",
						{ embedded: this.isEmbedded() ? "Y" : "N" }
					);

					if(params)
					{
						this._ajaxForm.addUrlParams(params);
					}
				}

				this._ajaxForm.submit();
			}
			//endregion
		},
		cancel: function()
		{
			//region Rise Cancel Event
			var eventArgs =
				{
					id: this._id,
					externalContext: this._externalContextId,
					context: this._contextId,
					entityTypeId: this._entityTypeId,
					entityId: this._entityId,
					model: this._model,
					cancel: false
				};

			BX.onCustomEvent(window, "BX.Crm.EntityEditor:onCancel", [ this, eventArgs ]);

			var enableCloseConfirmation = BX.prop.getBoolean(
				eventArgs,
				"enableCloseConfirmation",
				null
			);
			if(BX.type.isBoolean(enableCloseConfirmation))
			{
				this._enableCloseConfirmation = enableCloseConfirmation;
			}

			if(eventArgs["cancel"])
			{
				return;
			}
			//endregion

			if(this.hasChangedControls() || this.hasChangedControllers())
			{
				window.setTimeout(
					BX.delegate(this.openCancellationConfirmationDialog, this),
					250
				);
				return;
			}

			this.innerCancel();
		},
		innerCancel: function()
		{
			var i, length;
			for(i = 0, length = this._controllers.length; i < length; i++)
			{
				this._controllers[i].innerCancel();
			}

			this.rollback();

			if(this._isNew)
			{
				this.refreshLayout();
				if(typeof(top.BX.SidePanel) !== "undefined")
				{
					this._enableCloseConfirmation = false;
					window.setTimeout(
						function ()
						{
							var slider = top.BX.SidePanel.Instance.getSliderByWindow(window);
							if(slider && slider.isOpen())
							{
								slider.close(false);
							}
						},
						250
					);
				}
			}
			else
			{
				this.switchToViewMode({ refreshLayout: false });
				this.refreshLayout();
			}
		},
		openCancellationConfirmationDialog: function()
		{
			BX.Crm.EditorAuxiliaryDialog.create(
				"cancel_confirmation",
				{
					title: BX.message("CRM_EDITOR_CONFIRMATION"),
					content: BX.message("CRM_EDITOR_CANCEL_CONFIRMATION"),
					buttons:
						[
							{
								id: "yes",
								type: BX.Crm.DialogButtonType.accept,
								text: BX.message("CRM_EDITOR_YES"),
								callback: this._cancelConfirmationHandler
							},
							{
								id: "no",
								type: BX.Crm.DialogButtonType.cancel,
								text: BX.message("CRM_EDITOR_NO"),
								callback: this._cancelConfirmationHandler
							}
						]
				}
			).open();
		},
		rollback: function()
		{
			this._model.rollback();

			var i, length;
			for(i = 0, length = this._controllers.length; i < length; i++)
			{
				this._controllers[i].rollback();
			}

			for(i = 0, length = this._activeControls.length; i < length; i++)
			{
				this._activeControls[i].rollback();
			}

			if(this._areAvailableSchemeElementsChanged)
			{
				this._availableSchemeElements = this._scheme.getAvailableElements();
				this._areAvailableSchemeElementsChanged = false;
			}
		},
		addSchemeElementAt: function(schemeElement, index)
		{
			if(this._config)
			{
				this._config.addSchemeElementAt(schemeElement, index);
			}
		},
		updateSchemeElement: function(schemeElement)
		{
			if(this._config)
			{
				this._config.updateSchemeElement(schemeElement);
			}
		},
		removeSchemeElement: function(schemeElement)
		{
			if(this._config)
			{
				this._config.removeSchemeElement(schemeElement);
			}
		},
		canChangeScheme: function()
		{
			return this._config && this._config.isChangeable();
		},
		isSchemeChanged: function()
		{
			return this._config && this._config.isChanged();
		},
		saveScheme: function()
		{
			return this._config && this._config.save(false);
		},
		saveSchemeChanges: function()
		{
			this.commitSchemeChanges();
			return this._config && this._config.save(false);
		},
		commitSchemeChanges: function()
		{
			for(var i = 0, length = this._controls.length; i < length; i++)
			{
				this._controls[i].commitSchemeChanges();
			}

			if(this._areAvailableSchemeElementsChanged)
			{
				this._scheme.setAvailableElements(this._availableSchemeElements);
				this._areAvailableSchemeElementsChanged = false;
			}
		},
		onSaveSuccess: function(result)
		{
			this._isRequestRunning = false;

			if(this._enableCloseConfirmation)
			{
				this._enableCloseConfirmation = false;
			}

			if(this._toolPanel)
			{
				this._toolPanel.setLocked(false);
				this._toolPanel.clearErrors();
			}

			//region Event Params
			var eventParams = BX.prop.getObject(result, "EVENT_PARAMS", {});
			eventParams["entityTypeId"] = this._entityTypeId;

			var entityInfo = BX.prop.getObject(result, "ENTITY_INFO", null);
			if(entityInfo)
			{
				eventParams["entityInfo"] = entityInfo;
			}

			var slider = BX.Crm.Page.getTopSlider();
			if(slider)
			{
				eventParams["sliderUrl"] = slider.getUrl();
			}
			//endregion

			var checkErrors = BX.prop.getObject(result, "CHECK_ERRORS", null);
			var error = BX.prop.getString(result, "ERROR", "");
			if(checkErrors || error !== "")
			{
				if(checkErrors)
				{
					var firstField = null;
					var errorMessages = [];
					for(var fieldId in checkErrors)
					{
						if(!checkErrors.hasOwnProperty(fieldId))
						{
							return;
						}

						var field = this.getActiveControlById(fieldId, true);
						if(field)
						{
							field.showError(checkErrors[fieldId]);
							if(!firstField)
							{
								firstField = field;
							}
						}
						else
						{
							errorMessages.push(checkErrors[fieldId]);
						}
					}

					if(firstField)
					{
						firstField.scrollAnimate();
					}

					error = errorMessages.join("<br/>");
				}

				if(error !== "" && this._toolPanel)
				{
					this._toolPanel.addError(error);
				}

				eventParams["checkErrors"] = checkErrors;
				eventParams["error"] = error;

				if(this._isNew)
				{
					BX.onCustomEvent(window, "onCrmEntityCreateError", [eventParams]);
				}
				else
				{
					eventParams["entityId"] = this._entityId;
					BX.onCustomEvent(window, "onCrmEntityUpdateError", [eventParams]);
				}

				this.releaseAjaxForm();
				this.initializeAjaxForm();

				return;
			}

			var entityData = BX.prop.getObject(result, "ENTITY_DATA", null);
			eventParams["entityData"] = entityData;
			eventParams["isCancelled"] = false;

			if(this._isNew)
			{
				this._entityId = BX.prop.getInteger(result, "ENTITY_ID", 0);
				if(this._entityId <= 0)
				{
					if(this._toolPanel)
					{
						this._toolPanel.addError(this.getMessage("couldNotFindEntityIdError"));
					}
					return;
				}

				//fire onCrmEntityCreate
				BX.Crm.EntityEvent.fireCreate(this._entityTypeId, this._entityId, this._externalContextId, eventParams);

				eventParams["sender"] = this;
				eventParams["entityId"] = this._entityId;

				BX.onCustomEvent(window, "onCrmEntityCreate", [eventParams]);

				if(BX.prop.getBoolean(eventParams, "isCancelled", true))
				{
					this._entityId = 0;

					this.rollback();

					this.releaseAjaxForm();
					this.initializeAjaxForm();

					return;
				}

				this._isNew = false;
			}
			else
			{
				//fire onCrmEntityUpdate
				BX.Crm.EntityEvent.fireUpdate(this._entityTypeId, this._entityId, this._externalContextId, eventParams);

				eventParams["sender"] = this;
				eventParams["entityId"] = this._entityId;
				BX.onCustomEvent(window, "onCrmEntityUpdate", [eventParams]);

				if(BX.prop.getBoolean(eventParams, "isCancelled", true))
				{
					this.rollback();

					this.releaseAjaxForm();
					this.initializeAjaxForm();

					return;
				}
			}

			var redirectUrl = BX.prop.getString(result, "REDIRECT_URL", "");

			var additionalEventParams = BX.prop.getObject(result, "EVENT_PARAMS", null);
			if(additionalEventParams)
			{
				var eventName = BX.prop.getString(additionalEventParams, "name", "");
				var eventArgs = BX.prop.getObject(additionalEventParams, "args", null);
				if(eventName !== "" && eventArgs !== null)
				{
					if(redirectUrl !== "")
					{
						eventArgs["redirectUrl"] = redirectUrl;
					}
					BX.localStorage.set(eventName, eventArgs, 10);
				}
			}

			if(this._isReleased)
			{
				return;
			}

			if(redirectUrl !== "" && !this._isEmbedded)
			{
				window.location.replace(
					BX.util.add_url_param(
						redirectUrl,
						{ "IFRAME": "Y", "IFRAME_TYPE": "SIDE_SLIDER" }
					)
				);
			}
			else
			{
				if(BX.type.isPlainObject(entityData))
				{
					//Notification event is disabled because we will call "refreshLayout" for all controls at the end.
					this._model.setData(entityData, { enableNotification: false });
				}

				this.adjustTitle();
				this.adjustSize();
				this.releaseAjaxForm();
				this.initializeAjaxForm();

				for(var i = 0, length = this._controllers.length; i < length; i++)
				{
					this._controllers[i].onAfterSave();
				}

				//console.log("switchToViewMode");

				if(this._modeSwitch.isRunning())
				{
					this._modeSwitch.complete();
				}
				else
				{
					this.switchToViewMode({ refreshLayout: false });
				}

				this.refreshLayout({ reset: true });
				this.hideToolPanel();
			}
		},
		formatMoney: function(sum, currencyId, callback)
		{
			BX.ajax(
				{
					url: BX.prop.getString(this._settings, "serviceUrl", ""),
					method: "POST",
					dataType: "json",
					data:
					{
						"ACTION": "GET_FORMATTED_SUM",
						"CURRENCY_ID": currencyId,
						"SUM": sum
					},
					onsuccess: callback
				}
			);
		},
		findOption: function (value, options)
		{
			for(var i = 0, l = options.length; i < l; i++)
			{
				if(value === options[i].VALUE)
				{
					return options[i].NAME;
				}
			}
			return value;
		},
		prepareConfigMenuItems: function()
		{
			var items = [];
			var callback = BX.delegate(this.onMenuItemClick, this);

			items.push(
				{
					id: "switchToPersonalConfig",
					text: this.getMessage("switchToPersonalConfig"),
					onclick: callback,
					className: this._config.getScope() === BX.Crm.EntityConfigScope.personal
						? "menu-popup-item-accept" : "menu-popup-item-none"
				}
			);

			items.push(
				{
					id: "switchToCommonConfig",
					text: this.getMessage("switchToCommonConfig"),
					onclick: callback,
					className: this._config.getScope() === BX.Crm.EntityConfigScope.common
						? "menu-popup-item-accept" : "menu-popup-item-none"
				}
			);

			if(this.canChangeScheme())
			{
				items.push({ delimiter: true });

				items.push(
					{
						id: "resetConfig",
						text: this.getMessage("resetConfig"),
						onclick: callback,
						className: "menu-popup-item-none"
					}
				);

				if(BX.prop.getBoolean(this._settings, "enableSettingsForAll", false))
				{
					items.push(
						{
							id: "forceCommonConfigForAllUsers",
							text: this.getMessage("forceCommonConfigForAllUsers"),
							onclick: callback,
							className: "menu-popup-item-none"
						}
					);
				}
			}

			return items;
		},
		getServiceUrl: function()
		{
			return this._serviceUrl;
		},
		loadCustomHtml: function(actionName, actionData, callback)
		{
			actionData["ACTION"] = actionName;
			actionData["ACTION_ENTITY_ID"] = this._entityId;
			BX.ajax(
				{
					url: this._serviceUrl,
					method: "POST",
					dataType: "html",
					data: actionData,
					onsuccess: callback
				}
			);
		},
		onAfterFormSubmit: function(sender, eventArgs)
		{
			this._isRequestRunning = true;
			if(this._toolPanel)
			{
				this._toolPanel.setLocked(true);
			}
		},
		onCancelFormSubmit: function(sender, eventArgs)
		{
			this._isRequestRunning = false;
			if(this._toolPanel)
			{
				this._toolPanel.setLocked(false);
			}
		},
		//region Duplicate Control
		isDuplicateControlEnabled: function()
		{
			return this._dupControlManager.isEnabled();
		},
		getDuplicateManager: function()
		{
			return this._dupControlManager;
		},
		//endregion
		//region Events
		onResize: function(e)
		{
			this.adjustSize();
		},
		onPageTileClick: function(e)
		{
			if(this._readOnly)
			{
				return
			}

			if(this.isChanged())
			{
				this.showMessageDialog(
					"titleEditDenied",
					this.getMessage("titleEdit"),
					this.getMessage("titleEditUnsavedChanges")
				);
				return;
			}

			this.switchTitleMode(BX.Crm.EntityEditorMode.edit);
		},
		onCreateSectionButtonClick: function(e)
		{
			if(!this.isSectionCreationEnabled())
			{
				return;
			}

			var index = this.getControlCount();
			var name = "user_" + BX.util.getRandomString(8).toLowerCase();

			var schemeElement = BX.Crm.EntitySchemeElement.create(
				{
					type: "section",
					name: name,
					title: this.getMessage("newSectionTitle")
				}
			);

			this.addSchemeElementAt(schemeElement, index);

			var control = this.createControl(
				"section",
				name,
				{
					schemeElement: schemeElement,
					model: this._model,
					container: this._formElement
				}
			);
			this.addControlAt(control, index);
			this.saveScheme();

			control.setMode(BX.Crm.EntityEditorMode.edit, { notify: false });
			control.refreshLayout();
			control.setTitleMode(BX.Crm.EntityEditorMode.edit);
			this.registerActiveControl(control);
		},
		onConfigMenuButtonClick: function(e)
		{
			if(this._isConfigMenuShown)
			{
				return;
			}

			var menuItems = this.prepareConfigMenuItems();
			if(menuItems.length > 0)
			{
				BX.PopupMenu.show(
					this._id + "_config_menu",
					BX.getEventTarget(e),
					menuItems,
					{
						angle: false,
						autoHide: true,
						closeByEsc: true,
						events:
							{
								onPopupShow: function(){ this._isConfigMenuShown = true; }.bind(this),
								onPopupClose: function(){ BX.PopupMenu.destroy(this._id + "_config_menu"); }.bind(this),
								onPopupDestroy: function(){ this._isConfigMenuShown = false; }.bind(this)
							}
					}
				);
			}
		},
		onPageTitleExternalClick: function(e)
		{
			var target = BX.getEventTarget(e);
			if(target !== this._pageTitleInput)
			{
				this.savePageTitle();
				this.switchTitleMode(BX.Crm.EntityEditorMode.view);
			}
		},
		onPageTitleKeyPress: function(e)
		{
			var c = e.keyCode;
			if(c === 13)
			{
				this.savePageTitle();
				this.switchTitleMode(BX.Crm.EntityEditorMode.view);
			}
			else if(c === 27)
			{
				this.switchTitleMode(BX.Crm.EntityEditorMode.view);
			}
		},
		onInterfaceToolbarMenuBuild: function(sender, eventArgs)
		{
			var menuItems = BX.prop.getArray(eventArgs, "items", null);
			if(!menuItems)
			{
				return;
			}

			var configMenuItems = this.prepareConfigMenuItems();
			if(configMenuItems.length > 0)
			{
				if(menuItems.length > 0)
				{
					menuItems.push({ delimiter: true });
				}

				for(var i = 0, length = configMenuItems.length; i < length; i++)
				{
					menuItems.push(configMenuItems[i]);
				}
			}
		},
		//endregion
		//region Configuration
		onMenuItemClick: function(event, menuItem)
		{
			var id = BX.prop.getString(menuItem, "id", "");
			if(id === "resetConfig")
			{
				this.resetConfig();
			}
			else if(id === "switchToPersonalConfig")
			{
				this.setConfigScope(BX.Crm.EntityConfigScope.personal);
			}
			else if(id === "switchToCommonConfig")
			{
				this.setConfigScope(BX.Crm.EntityConfigScope.common);
			}
			else if(id === "forceCommonConfigForAllUsers")
			{
				this.forceCommonConfigScopeForAll();
			}

			if(menuItem.menuWindow)
			{
				menuItem.menuWindow.close();
			}
		},
		setConfigScope: function(scope)
		{
			if(this._config.getScope() === scope)
			{
				return;
			}

			this._config.setScope(scope).then(
				function()
				{
					var eventArgs = { id: this._id, scope: scope, enableReload: true };
					BX.onCustomEvent(window, "BX.Crm.EntityEditor:onConfigScopeChange", [ this, eventArgs ]);

					if(eventArgs["enableReload"] && !this._isEmbedded)
					{
						window.location.reload(true);
					}
				}.bind(this)
			);
		},
		forceCommonConfigScopeForAll: function()
		{
			this._config.forceCommonScopeForAll().then(
				function()
				{
					var scope = this._config.getScope();
					var eventArgs = { id: this._id, scope: scope, enableReload: true };
					BX.onCustomEvent(window, "BX.Crm.EntityEditor:onForceCommonConfigScopeForAll", [ this, eventArgs ]);

					if(eventArgs["enableReload"] && !this._isEmbedded && scope !== BX.Crm.EntityConfigScope.common)
					{
						window.location.reload(true);
					}
				}.bind(this)
			);
		},
		resetConfig: function()
		{
			this._config.reset(false).then(
				function()
				{
					var scope = this._config.getScope();
					var eventArgs = { id: this._id, scope: scope, enableReload: true };
					BX.onCustomEvent(window, "BX.Crm.EntityEditor:onConfigReset", [ this, eventArgs ]);

					if(eventArgs["enableReload"] && !this._isEmbedded)
					{
						window.location.reload(true);
					}
				}.bind(this)
			);
		},
		getConfigOption: function(name, defaultValue)
		{
			return this._config.getOption(name, defaultValue);
		},
		setConfigOption: function(name, value)
		{
			return this._config.setOption(name, value);
		},
		getAttributeManagerSettings: function()
		{
			return BX.prop.getObject(this._settings, "attributeConfig", null);
		},
		//endregion
		//region Options
		getOption: function(name, defaultValue)
		{
			return BX.prop.getString(this._settings["options"], name, defaultValue);
		},
		setOption: function(name, value)
		{
			if(typeof(value) === "undefined" || value === null)
			{
				return;
			}

			if(BX.prop.getString(this._settings["options"], name, null) === value)
			{
				return;
			}

			this._settings["options"][name] = value;
		},
		//endregion
		//region D&D
		getDragConfig: function(typeId)
		{
			return BX.prop.getObject(this._dragConfig, typeId, {});
		},
		hasPlaceHolder: function()
		{
			return !!this._dragPlaceHolder;
		},
		createPlaceHolder: function(index)
		{
			var qty = this.getControlCount();
			if(index < 0 || index > qty)
			{
				index = qty > 0 ? qty : 0;
			}

			if(this._dragPlaceHolder)
			{
				if(this._dragPlaceHolder.getIndex() === index)
				{
					return this._dragPlaceHolder;
				}

				this._dragPlaceHolder.clearLayout();
				this._dragPlaceHolder = null;
			}

			this._dragPlaceHolder = BX.Crm.EditorDragSectionPlaceholder.create(
				{
					container: this._formElement,
					anchor: (index < qty) ? this._controls[index].getWrapper() : null,
					index: index
				}
			);

			this._dragPlaceHolder.layout();
			return this._dragPlaceHolder;
		},
		getPlaceHolder: function()
		{
			return this._dragPlaceHolder;
		},
		removePlaceHolder: function()
		{
			if(this._dragPlaceHolder)
			{
				this._dragPlaceHolder.clearLayout();
				this._dragPlaceHolder = null;
			}
		},
		processDraggedItemDrop: function(dragContainer, draggedItem)
		{
			var containerCharge = dragContainer.getCharge();
			if(!((containerCharge instanceof BX.Crm.EditorSectionDragContainer) && containerCharge.getEditor() === this))
			{
				return;
			}

			var context = draggedItem.getContextData();
			var contextId = BX.type.isNotEmptyString(context["contextId"]) ? context["contextId"] : "";
			if(contextId !== BX.Crm.EditorSectionDragItem.contextId)
			{
				return;
			}

			var itemCharge = typeof(context["charge"]) !== "undefined" ?  context["charge"] : null;
			if(!(itemCharge instanceof BX.Crm.EditorSectionDragItem))
			{
				return;
			}

			var control = itemCharge.getControl();
			if(!control)
			{
				return;
			}

			var currentIndex = this.getControlIndex(control);
			if(currentIndex < 0)
			{
				return;
			}

			var placeholder = this.getPlaceHolder();
			var placeholderIndex = placeholder ? placeholder.getIndex() : -1;
			if(placeholderIndex < 0)
			{
				return;
			}

			var index = placeholderIndex <= currentIndex ? placeholderIndex : (placeholderIndex - 1);
			if(index !== currentIndex)
			{
				this.moveControl(control, index);
				this.saveScheme();
			}
		},
		onDrop: function(dragContainer, draggedItem, x, y)
		{
			this.processDraggedItemDrop(dragContainer, draggedItem);
		},
		//endregion
		//region Permissions
		canCreateContact: function()
		{
			return BX.prop.getBoolean(this._settings, "canCreateContact", false);
		},
		canCreateCompany: function()
		{
			return BX.prop.getBoolean(this._settings, "canCreateCompany", false);
		},
		//endregion
		addHelpLink: function(data)
		{
			if(!this._helpWrapper)
			{
				this._helpWrapper = BX.create("DIV", { props: { className: "crm-entity-card-widget-help" } });
				this._container.append(this._helpWrapper);

				var link = BX.create("A",
					{
						props: { className: "crm-entity-card-widget-help-link" },
						text: BX.prop.getString(data, "text", "For Your information")
					}
				);
				var url = BX.prop.getString(data, "url", "");
				if(url !== "")
				{
					link.href = helpUrl;
					link.target = "_blank";
				}
				else
				{
					link.href = "#";
					BX.bind(
						link,
						"click",
						function(e) {
							window.top.BX.Helper.show("redirect=detail&code=" + BX.prop.getString(data, "code", ""));
							e.preventDefault();
						}
					);
				}
				this._helpWrapper.appendChild(link);
			}
		},
		getConfigScope: function()
		{
			return this._config.getScope();
		}
	};
	BX.Crm.EntityEditor.defaultInstance = null;
	BX.Crm.EntityEditor.items = {};
	BX.Crm.EntityEditor.get = function(id)
	{
		return this.items.hasOwnProperty(id) ? this.items[id] : null;
	};
	if(typeof(BX.Crm.EntityEditor.messages) === "undefined")
	{
		BX.Crm.EntityEditor.messages = {};
	}
	BX.Crm.EntityEditor.setDefault = function(instance)
	{
		BX.Crm.EntityEditor.defaultInstance = instance;
	};
	BX.Crm.EntityEditor.getDefault = function()
	{
		return BX.Crm.EntityEditor.defaultInstance;
	};
	BX.Crm.EntityEditor.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditor();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	};
}
//endregion

//region ENTITY EDITOR MODE QUEUE
if(typeof BX.Crm.EntityEditorModeQueue === "undefined")
{
	BX.Crm.EntityEditorModeQueue = function()
	{
		this._id = "";
		this._settings = {};
		this._items = [];
	};
	BX.Crm.EntityEditorModeQueue.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
		},
		findIndex: function(control)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				if(this._items[i]["control"] === control)
				{
					return i;
				}
			}
			return -1;
		},
		getLength: function ()
		{
			return this._items.length;
		},
		add: function(control, mode, options)
		{
			if(typeof(options) === "undefined")
			{
				options = BX.Crm.EntityEditorModeOptions.none;
			}
			var index = this.findIndex(control);
			if(index >= 0)
			{
				this._items[index] = { control: control, mode: mode, options: options };
			}
			else
			{
				this._items.push({ control: control, mode: mode, options: options });
			}
		},
		addBatch: function(controls, mode, options)
		{
			for(var i = 0, length = controls.length; i < length; i++)
			{
				this.add(controls[i], mode, options);
			}
		},
		remove: function(control)
		{
			var index = this.findIndex(control);
			if(index >= 0)
			{
				this._items.splice(index, 1)
			}
		},
		clear: function()
		{
			this._items = [];
		},
		process: function()
		{
			var length = this._items.length;
			if(length === 0)
			{
				return 0;
			}

			for(var i = 0; i < length; i++)
			{
				var item = this._items[i];
				item["control"].setMode(item["mode"], { options: item["options"], notify: true });
			}

			return length;
		}
	};
	BX.Crm.EntityEditorModeQueue.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorModeQueue();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region ENTITY EDITOR MODE SWITCH
if(typeof BX.Crm.EntityEditorModeSwitch === "undefined")
{
	BX.Crm.EntityEditorModeSwitch = function()
	{
		this._id = "";
		this._settings = {};
		this._queue = null;
		this._isRunning = false;
		this._runHandle = 0;
	};
	BX.Crm.EntityEditorModeSwitch.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._editor = BX.prop.get(this._settings, "editor");
			this._queue = BX.Crm.EntityEditorModeQueue.create(this._id, {});
		},
		getQueue: function()
		{
			return this._queue;
		},
		reset: function()
		{
			this._queue.clear();
			this._isRunning = false;
		},
		isRunning: function()
		{
			return this._isRunning;
		},
		run: function()
		{
			if(this._isRunning)
			{
				return;
			}

			if(this._runHandle > 0)
			{
				window.clearTimeout(this._runHandle);
			}
			this._runHandle = window.setTimeout(BX.delegate(this.doRun, this), 50);
		},
		doRun: function()
		{
			this._editor.saveDelayed();

			this._isRunning = true;
			this._runHandle = 0;
		},
		complete: function ()
		{
			this._queue.process();
			this.reset();
		}
	};
	BX.Crm.EntityEditorModeSwitch.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorModeSwitch();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region EDITOR MODE
if(typeof BX.Crm.EntityEditorMode === "undefined")
{
	BX.Crm.EntityEditorMode =
	{
		intermediate: 0,
		edit: 1,
		view: 2,
		names: { view: "view",  edit: "edit" },
		getName: function(id)
		{
			if(id === this.edit)
			{
				return this.names.edit;
			}
			else if(id === this.view)
			{
				return this.names.view;
			}
			return "";
		},
		parse: function(str)
		{
			str = str.toLowerCase();
			if(str === this.names.edit)
			{
				return this.edit;
			}
			else if(str === this.names.view)
			{
				return this.view;
			}
			return this.intermediate;
		}
	};
}
//endregion

//region EDITOR MODE OPTIONS
if(typeof BX.Crm.EntityEditorModeOptions === "undefined")
{
	BX.Crm.EntityEditorModeOptions =
	{
		none: 0,
		exclusive:  0x1,
		individual: 0x2,
		saveOnExit: 0x40,
		check: function(options, option)
		{
			return((options & option) === option);
		}
	};
}
//endregion

//region EDITOR CONTROL OPTIONS
if(typeof BX.Crm.EntityEditorControlOptions === "undefined")
{
	BX.Crm.EntityEditorControlOptions =
	{
		none: 0,
		showAlways: 1,
		check: function(options, option)
		{
			return((options & option) === option);
		}
	};
}
//endregion

//region EDITOR PRIORITY
if(typeof BX.Crm.EntityEditorPriority === "undefined")
{
	BX.Crm.EntityEditorPriority =
	{
		undefined: 0,
		normal: 1,
		high: 2
	};
}
//endregion

//region EDITOR MODE SWITCH TYPE
if(typeof BX.Crm.EntityEditorModeSwitchType === "undefined")
{
	BX.Crm.EntityEditorModeSwitchType =
		{
			none:       0x0,
			common:     0x1,
			button:     0x2,
			content:    0x4,
			check: function(options, option)
			{
				return((options & option) === option);
			}
		};
}
//endregion

//region DIALOG
if(typeof BX.Crm.EditorDialogButton === "undefined")
{
	BX.Crm.EditorDialogButton = function()
	{
		this._id = "";
		this._type = BX.Crm.DialogButtonType.undefined;
		this._settings = {};
		this._dialog = null;
		this._keyPressHandler = BX.delegate(this.onKeyPress, this);
	};
	BX.Crm.EditorDialogButton.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._type = BX.prop.getInteger(this._settings, "type", BX.Crm.DialogButtonType.undefined);
			this._dialog = BX.prop.get(this._settings, "dialog", null);
		},
		bind: function()
		{
			if(this._type === BX.Crm.DialogButtonType.accept)
			{
				BX.bind(document, "keydown", this._keyPressHandler);
			}
		},
		unbind: function()
		{
			if(this._type === BX.Crm.DialogButtonType.accept)
			{
				BX.unbind(document, "keydown", this._keyPressHandler);
			}
		},
		onKeyPress: function(e)
		{
			if(this._type !== BX.Crm.DialogButtonType.accept)
			{
				return;
			}

			e = e || window.event;
			if (e.keyCode === 13)
			{
				//Enter key
				this.onClick(e);
			}
		},
		getId: function()
		{
			return this._id;
		},
		getDialog: function()
		{
			return this._dialog;
		},
		prepareContent: function()
		{
			if(this._type === BX.Crm.DialogButtonType.accept)
			{
				return (
					new BX.UI.SaveButton(
						{
							text : BX.prop.getString(this._settings, "text", this._id),
							events: { click: BX.delegate(this.onClick, this) }
						}
					)
				);
			}
			else if(this._type === BX.Crm.DialogButtonType.cancel)
			{
				return (
					new BX.UI.CancelButton(
						{
							text : BX.prop.getString(this._settings, "text", this._id),
							events: { click: BX.delegate(this.onClick, this) }
						}
					)
				);
			}
			else
			{
				return (
					new BX.UI.Button(
						{
							text : BX.prop.getString(this._settings, "text", this._id),
							events: { click: BX.delegate(this.onClick, this) }
						}
					)
				);
			}
		},
		onClick: function(e)
		{
			var callback = BX.prop.getFunction(this._settings, "callback", null);
			if(callback)
			{
				callback(this);
			}
		}
	};
	BX.Crm.EditorDialogButton.create = function(id, settings)
	{
		var self = new BX.Crm.EditorDialogButton();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EditorAuxiliaryDialog === "undefined")
{
	BX.Crm.EditorAuxiliaryDialog = function()
	{
		this._id = "";
		this._settings = {};

		this._popup = null;
		this._buttons = null;
	};
	BX.Crm.EditorAuxiliaryDialog.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
		},
		getSetting: function(name, defaultValue)
		{
			return BX.prop.get(this._settings, name, defaultValue);
		},
		getId: function()
		{
			return this._id;
		},
		open: function()
		{
			this._popup = new BX.PopupWindow(
				this._id,
				BX.prop.getElementNode(this._settings, "anchor", null),
				{
					autoHide: false,
					draggable: false,
					closeByEsc: true,
					offsetLeft: 0,
					offsetTop: 0,
					zIndex: BX.prop.getInteger(this._settings, "zIndex", 0),
					bindOptions: { forceBindPosition: true },
					titleBar: BX.prop.getString(this._settings, "title", "No title"),
					content: BX.prop.getString(this._settings, "content", ""),
					buttons: this.prepareButtons(),
					events:
					{
						onPopupShow: BX.delegate(this.onPopupShow, this),
						onPopupClose: BX.delegate(this.onPopupClose, this),
						onPopupDestroy: BX.delegate(this.onPopupDestroy, this)
					}
				}
			);
			this._popup.show();
		},
		close: function()
		{
			if(this._popup)
			{
				this._popup.close();
			}
		},
		isOpen: function()
		{
			return this._popup && this._popup.isShown();
		},
		prepareButtons: function()
		{
			var results = [];

			this._buttons = [];
			var data = BX.prop.getArray(this._settings, "buttons", []);
			for(var i = 0, length = data.length; i < length; i++)
			{
				var buttonData = data[i];
				buttonData["dialog"] = this;
				var button = BX.Crm.EditorDialogButton.create(
					BX.prop.getString(buttonData, "id", ""),
					buttonData
				);
				this._buttons.push(button);
				results.push(button.prepareContent());
			}

			return results;
		},
		bind: function()
		{
			for(var i = 0, length = this._buttons.length; i < length; i++)
			{
				this._buttons[i].bind();
			}
		},
		unbind: function()
		{
			for(var i = 0, length = this._buttons.length; i < length; i++)
			{
				this._buttons[i].unbind();
			}
		},
		onPopupShow: function()
		{
			this.bind();
		},
		onPopupClose: function()
		{
			this.unbind();

			if(this._popup)
			{
				this._popup.destroy();
			}
		},
		onPopupDestroy: function()
		{
			if(this._popup)
			{
				this._popup = null;
			}
			delete BX.Crm.EditorAuxiliaryDialog.items[this.getId()];
		}
	};
	BX.Crm.EditorAuxiliaryDialog.items = {};

	BX.Crm.EditorAuxiliaryDialog.isItemOpened = function(id)
	{
		return this.items.hasOwnProperty(id) && this.items[id].isOpen();
	};
	BX.Crm.EditorAuxiliaryDialog.hasOpenItems = function()
	{
		for(var key in this.items)
		{
			if(!this.items.hasOwnProperty(key))
			{
				continue;
			}

			if(this.items[key].isOpen())
			{
				return true;
			}
		}
		return false;
	};
	BX.Crm.EditorAuxiliaryDialog.create = function(id, settings)
	{
		var self = new BX.Crm.EditorAuxiliaryDialog();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	};
}
//endregion

//region FILE STORAGE TYPE
if(typeof BX.Crm.EditorFileStorageType === "undefined")
{
	BX.Crm.EditorFileStorageType =
	{
		undefined: 0,
		file: 1,
		webdav: 2,
		diskfile: 3
	};
}
//endregion

//region VALIDATION
if(typeof BX.Crm.EntityValidator === "undefined")
{
	BX.Crm.EntityValidator = function()
	{
		this._settings = {};
		this._editor = null;
		this._data = null;
	};
	BX.Crm.EntityValidator.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};
			this._editor = BX.prop.get(this._settings, "editor", null);
			this._data = BX.prop.getObject(this._settings, "data", {});

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		release: function()
		{
		},
		getData: function()
		{
			return this._data;
		},
		getDataStringParam: function(name, defaultValue)
		{
			return BX.prop.getString(this._data, name, defaultValue);
		},
		getErrorMessage: function()
		{
			return BX.prop.getString(this._settings, "message", "");
		},
		validate: function(result)
		{
			return true;
		},
		processControlChange: function(control)
		{
		}
	};
}

if(typeof BX.Crm.EntityPersonValidator === "undefined")
{
	BX.Crm.EntityPersonValidator = function()
	{
		BX.Crm.EntityPersonValidator.superclass.constructor.apply(this);
	};

	BX.extend(BX.Crm.EntityPersonValidator, BX.Crm.EntityValidator);

	BX.Crm.EntityPersonValidator.prototype.doInitialize = function()
	{
		this._nameField = this._editor.getControlById(
			this.getDataStringParam("nameField", "")
		);
		if(this._nameField)
		{
			this._nameField.addValidator(this);
		}

		this._lastNameField = this._editor.getControlById(
			this.getDataStringParam("lastNameField", "")
		);
		if(this._lastNameField)
		{
			this._lastNameField.addValidator(this);
		}
	};
	BX.Crm.EntityPersonValidator.prototype.release = function()
	{
		if(this._nameField)
		{
			this._nameField.removeValidator(this);
		}

		if(this._lastNameField)
		{
			this._lastNameField.removeValidator(this);
		}
	};
	BX.Crm.EntityPersonValidator.prototype.validate = function(result)
	{
		var isNameActive = this._nameField.isActive();
		var isLastNameActive = this._lastNameField.isActive();

		if(!isNameActive && !isLastNameActive)
		{
			return true;
		}

		var name = isNameActive ? this._nameField.getRuntimeValue() : this._nameField.getValue();
		var lastName = isLastNameActive ? this._lastNameField.getRuntimeValue() : this._lastNameField.getValue();

		if(name !== "" || lastName !== "")
		{
			return true;
		}

		if(name === "" && isNameActive)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this._nameField }));
			this._nameField.showError(this.getErrorMessage());
		}

		if(lastName === "" && isLastNameActive)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this._lastNameField }));
			this._lastNameField.showError(this.getErrorMessage());
		}

		return false;
	};
	BX.Crm.EntityPersonValidator.prototype.processFieldChange = function(field)
	{
		if(field !== this._nameField && field !== this._lastNameField)
		{
			return;
		}

		if(this._nameField)
		{
			this._nameField.clearError();
		}

		if(this._lastNameField)
		{
			this._lastNameField.clearError();
		}
	};
	BX.Crm.EntityPersonValidator.create = function(settings)
	{
		var self = new BX.Crm.EntityPersonValidator();
		self.initialize(settings);
		return self;
	};
}

if(typeof BX.Crm.EntityValidationError === "undefined")
{
	BX.Crm.EntityValidationError = function()
	{
		this._settings = {};
		this._field = null;
		this._message = "";
	};
	BX.Crm.EntityValidationError.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};
			this._field = BX.prop.get(this._settings, "field", null);
			this._message = BX.prop.getString(this._settings, "message", "");
		},
		getField: function()
		{
			return this._field;
		},
		getMessage: function()
		{
			return this._message;
		}
	};
	BX.Crm.EntityValidationError.create = function(settings)
	{
		var self = new BX.Crm.EntityValidationError();
		self.initialize(settings);
		return self;
	};
}

if(typeof BX.Crm.EntityValidationResult === "undefined")
{
	BX.Crm.EntityValidationResult = function()
	{
		this._settings = {};
		this._errors = [];
	};
	BX.Crm.EntityValidationResult.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};
		},
		getStatus: function()
		{
			return this._errors.length === 0;
		},
		addError: function(error)
		{
			this._errors.push(error);
		},
		getErrors: function()
		{
			return this._errors;
		},
		addResult: function(result)
		{
			var errors = result.getErrors();
			for(var i = 0, length = errors.length; i < length; i++)
			{
				this._errors.push(errors[i]);
			}
		},
		getTopmostField: function()
		{
			var field = null;
			var top = null;
			for(var i = 0, length = this._errors.length; i < length; i++)
			{
				var currentField = this._errors[i].getField();
				if(!field)
				{
					field = currentField;
					top = currentField.getPosition()["top"];
					continue;

				}
				var pos = currentField.getPosition();
				if(!pos)
				{
					continue;
				}

				var currentFieldTop = currentField.getPosition()["top"];
				if(currentFieldTop < top)
				{
					field = currentField;
					top = currentFieldTop;
				}
			}

			return field;
		}
	};
	BX.Crm.EntityValidationResult.create = function(settings)
	{
		var self = new BX.Crm.EntityValidationResult();
		self.initialize(settings);
		return self;
	};
}
//endregion

//region ENTITY CONFIGURATION SCOPE
if(typeof BX.Crm.EntityConfigScope === "undefined")
{
	BX.Crm.EntityConfigScope =
	{
		undefined: '',
		personal:  'P',
		common: 'C'
	};

	if(typeof(BX.Crm.EntityConfigScope.captions) === "undefined")
	{
		BX.Crm.EntityConfigScope.captions = {};
	}

	BX.Crm.EntityConfigScope.setCaptions = function(captions)
	{
		if(BX.type.isPlainObject(captions))
		{
			this.captions = captions;
		}
	};

	BX.Crm.EntityConfigScope.getCaption = function(scope)
	{
		return BX.prop.getString(this.captions, scope, scope);
	};
}
//endregion

//region CONFIG
if(typeof BX.Crm.EntityConfig === "undefined")
{
	BX.Crm.EntityConfig = function()
	{
		this._id = "";
		this._settings = {};
		this._scope = BX.Crm.EntityConfigScope.undefined;
		this._enableScopeToggle = true;

		this._canUpdatePersonalConfiguration = true;
		this._canUpdateCommonConfiguration = false;

		this._data = {};
		this._items = [];
		this._options = {};

		this._serviceUrl = "";
		this._isChanged = false;
	};
	BX.Crm.EntityConfig.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._scope = BX.prop.getString(this._settings, "scope", BX.Crm.EntityConfigScope.personal);
			this._enableScopeToggle = BX.prop.getBoolean(this._settings, "enableScopeToggle", true);

			this._canUpdatePersonalConfiguration = BX.prop.getBoolean(this._settings, "canUpdatePersonalConfiguration", true);
			this._canUpdateCommonConfiguration = BX.prop.getBoolean(this._settings, "canUpdateCommonConfiguration", false);

			this._data = BX.prop.getArray(this._settings, "data", []);

			this._items = [];
			for(var i = 0, length = this._data.length; i < length; i++)
			{
				var item = this._data[i];
				var type = BX.prop.getString(item, "type", "");
				if(type === "section")
				{
					this._items.push(BX.Crm.EntityConfigSection.create({ data: item }));
				}
				else
				{
					this._items.push(BX.Crm.EntityConfigField.create({ data: item }));
				}
			}

			this._options = BX.prop.getObject(this._settings, "options", {});
			this._serviceUrl = BX.prop.getString(this._settings, "serviceUrl", "");
		},
		findItemByName: function(name)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				var item = this._items[i];
				if(item.getName() === name)
				{
					return item;
				}
			}
			return null;
		},
		findItemIndexByName: function(name)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				var item = this._items[i];
				if(item.getName() === name)
				{
					return i;
				}
			}
			return -1;
		},
		toJSON: function()
		{
			var result = [];
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				result.push(this._items[i].toJSON());
			}
			return result;
		},
		addSchemeElementAt: function(schemeElement, index)
		{
			var data = schemeElement.createConfigItem();
			var item = schemeElement.getType() === "section"
				? BX.Crm.EntityConfigSection.create({ data: data })
				: BX.Crm.EntityConfigField.create({ data: data });

			if(index >= 0 && index < this._items.length)
			{
				this._items.splice(index, 0, item);
			}
			else
			{
				this._items.push(item);
			}

			this._isChanged = true;
		},
		moveSchemeElement: function(schemeElement, index)
		{
			var qty = this._items.length;
			var lastIndex = qty - 1;
			if(index < 0  || index > qty)
			{
				index = lastIndex;
			}

			var currentIndex = this.findItemIndexByName(schemeElement.getName());
			if(currentIndex < 0 || currentIndex === index)
			{
				return;
			}

			var item = this._items[currentIndex];
			this._items.splice(currentIndex, 1);

			qty--;

			if(index < qty)
			{
				this._items.splice(index, 0, item);
			}
			else
			{
				this._items.push(item);
			}

			this._isChanged = true;
		},
		updateSchemeElement: function(schemeElement)
		{
			var index;
			var parentElement = schemeElement.getParent();
			if(parentElement)
			{
				var parentItem = this.findItemByName(parentElement.getName());
				if(parentItem)
				{
					index = parentItem.findFieldIndexByName(schemeElement.getName());
					if(index >= 0)
					{
						parentItem.setField(
							BX.Crm.EntityConfigField.create({ data: schemeElement.createConfigItem() }),
							index
						);
						this._isChanged = true;
					}
				}
			}
			else
			{
				index = this.findItemIndexByName(schemeElement.getName());
				if(index >= 0)
				{
					if(schemeElement.getType() === "section")
					{
						this._items[index] = BX.Crm.EntityConfigSection.create({ data: schemeElement.createConfigItem() });
					}
					else
					{
						this._items[index] = BX.Crm.EntityConfigField.create({ data: schemeElement.createConfigItem() });
					}
					this._isChanged = true;
				}
			}

		},
		removeSchemeElement: function(schemeElement)
		{
			var index = this.findItemIndexByName(schemeElement.getName());
			if(index < 0)
			{
				return;
			}

			this._items.splice(index, 1);
			this._isChanged = true;
		},
		isChangeable: function()
		{
			if(this._scope === BX.Crm.EntityConfigScope.common)
			{
				return this._canUpdateCommonConfiguration;
			}
			else if(this._scope === BX.Crm.EntityConfigScope.personal)
			{
				return this._canUpdatePersonalConfiguration;
			}

			return false;
		},
		isChanged: function()
		{
			return this._isChanged;
		},
		isScopeToggleEnabled: function()
		{
			return this._enableScopeToggle;
		},
		getScope: function()
		{
			return this._scope;
		},
		setScope: function(scope)
		{
			var promise = new BX.Promise();
			if(!this._enableScopeToggle || this._scope === scope)
			{
				window.setTimeout(
					function(){ promise.fulfill(); },
					0
				);
				return promise;
			}

			this._scope = scope;

			//Scope is changed - data collections are invalid.
			this._data = [];
			this._items = [];

			BX.ajax.post(
				this._serviceUrl,
				{ guid: this._id, action: "setScope", scope: this._scope },
				function(){ promise.fulfill(); }
			);
			return promise;
		},
		registerField: function(scheme)
		{
			var parentScheme = scheme.getParent();
			if(!parentScheme)
			{
				return;
			}

			var section = this.findItemByName(parentScheme.getName());
			if(!section)
			{
				return;
			}

			section.addField(
				BX.Crm.EntityConfigField.create({ data: scheme.createConfigItem() })
			);
			this.save();
		},
		unregisterField: function(scheme)
		{
			var parentScheme = scheme.getParent();
			if(!parentScheme)
			{
				return;
			}

			var section = this.findItemByName(parentScheme.getName());
			if(!section)
			{
				return;
			}

			var field = section.findFieldByName(scheme.getName());
			if(!field)
			{
				return;
			}

			section.removeFieldByIndex(field.getIndex());
			this.save();
		},
		save: function(forAllUsers, enableOptions)
		{
			forAllUsers = !!forAllUsers;
			enableOptions = !!enableOptions;

			var promise = new BX.Promise();
			if(!this._isChanged && !forAllUsers)
			{
				window.setTimeout(
					function(){ promise.fulfill(); },
					0
				);
				return promise;
			}

			var data =
			{
				guid: this._id,
				action: "save",
				scope: this._scope,
				config: this.toJSON()
			};

			if(enableOptions)
			{
				data["options"] = this._options;
			}

			if(this._scope === BX.Crm.EntityConfigScope.personal && forAllUsers)
			{
				data["forAllUsers"] = "Y";
				data["delete"] = "Y";
			}

			BX.ajax.post(
				this._serviceUrl,
				data,
				function(){ promise.fulfill(); }
			);
			this._isChanged = false;
			return promise;
		},
		reset: function(forAllUsers)
		{
			var data =
			{
				guid: this._id,
				action: "reset",
				scope: this._scope,
				config: this.toJSON()
			};

			if(forAllUsers)
			{
				data["forAllUsers"] = "Y";
			}

			var promise = new BX.Promise();
			BX.ajax.post(
				this._serviceUrl,
				data,
				function(){ promise.fulfill(); }
			);
			return promise;
		},
		forceCommonScopeForAll: function()
		{
			var promise = new BX.Promise();
			BX.ajax.post(
				this._serviceUrl,
				{ guid: this._id, action: "forceCommonScopeForAll" },
				function(){ promise.fulfill(); }
			);
			return promise;
		},
		getOption: function(name, defaultValue)
		{
			return BX.prop.getString(this._options, name, defaultValue);
		},
		setOption: function(name, value)
		{
			if(typeof(value) === "undefined" || value === null)
			{
				return;
			}

			if(BX.prop.getString(this._options, name, null) === value)
			{
				return;
			}

			this._options[name] = value;

			if(this._scope === BX.Crm.EntityConfigScope.common)
			{
				BX.userOptions.save(
					"crm.entity.editor",
					this._id + "_common_opts",
					name,
					value,
					true
				);
			}
			else
			{
				BX.userOptions.save(
					"crm.entity.editor",
					this._id + "_opts",
					name,
					value,
					false
				);
			}
		}
	};
	BX.Crm.EntityConfig.create = function(id, settings)
	{
		var self = new BX.Crm.EntityConfig();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityConfigItem === "undefined")
{
	BX.Crm.EntityConfigItem = function()
	{
		this._settings = {};
		this._data = {};
		this._name = "";
		this._title = "";
	};

	BX.Crm.EntityConfigItem.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};
			this._data = BX.prop.getObject(this._settings, "data", []);
			this._name = BX.prop.getString(this._data, "name", "");
			this._title = BX.prop.getString(this._data, "title", "");

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		getType: function()
		{
			return "";
		},
		getName: function()
		{
			return this._name;
		},
		getTitle: function()
		{
			return this._title;
		},
		toJSON: function()
		{
			return {};
		}
	};
}

if(typeof BX.Crm.EntityConfigSection === "undefined")
{
	BX.Crm.EntityConfigSection = function()
	{
		BX.Crm.EntityConfigSection.superclass.constructor.apply(this);
		this._fields = [];
	};
	BX.extend(BX.Crm.EntityConfigSection, BX.Crm.EntityConfigItem);

	BX.Crm.EntityConfigSection.prototype.doInitialize = function()
	{
		this._fields = [];
		var elements = BX.prop.getArray(this._data, "elements", []);
		for(var i = 0, length = elements.length; i < length; i++)
		{
			var field = BX.Crm.EntityConfigField.create({ data: elements[i] });
			field.setIndex(i);
			this._fields.push(field);
		}
	};
	BX.Crm.EntityConfigSection.prototype.getType = function()
	{
		return "section";
	};
	BX.Crm.EntityConfigSection.prototype.getFields = function()
	{
		return this._fields;
	};
	BX.Crm.EntityConfigSection.prototype.findFieldByName = function(name)
	{
		var index = this.findFieldIndexByName(name);
		return index >= 0 ? this._fields[index] : null;
	};
	BX.Crm.EntityConfigSection.prototype.findFieldIndexByName = function(name)
	{
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			var field = this._fields[i];
			if(field.getName() === name)
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityConfigSection.prototype.addField = function(field)
	{
		this._fields.push(field);
	};
	BX.Crm.EntityConfigSection.prototype.setField = function(field, index)
	{
		this._fields[index] = field;
	};
	BX.Crm.EntityConfigSection.prototype.removeFieldByIndex = function(index)
	{
		var length = this._fields.length;
		if(index < 0 || index >= length)
		{
			return false;
		}

		this._fields.splice(index, 1);
		return true;
	};
	BX.Crm.EntityConfigSection.prototype.toJSON = function()
	{
		var result = { name: this._name, title: this._title, type: "section", elements: [] };
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			result.elements.push(this._fields[i].toJSON());
		}
		return result;
	};
	BX.Crm.EntityConfigSection.create = function(settings)
	{
		var self = new BX.Crm.EntityConfigSection();
		self.initialize(settings);
		return self;
	};
}

if(typeof BX.Crm.EntityConfigField === "undefined")
{
	BX.Crm.EntityConfigField = function()
	{
		BX.Crm.EntityConfigField.superclass.constructor.apply(this);
		this._index = -1;
		this._optionFlags = 0;

	};
	BX.extend(BX.Crm.EntityConfigField, BX.Crm.EntityConfigItem);
	BX.Crm.EntityConfigField.prototype.doInitialize = function()
	{
		this._optionFlags = BX.prop.getInteger(this._data, "optionFlags", 0);
	};
	BX.Crm.EntityConfigField.prototype.toJSON = function()
	{
		var result = { name: this._name };
		if(this._title !== "")
		{
			result["title"] = this._title;
		}
		if(this._optionFlags > 0)
		{
			result["optionFlags"] = this._optionFlags;
		}
		return result;
	};
	BX.Crm.EntityConfigField.prototype.getIndex = function()
	{
		return this._index;
	};
	BX.Crm.EntityConfigField.prototype.setIndex = function(index)
	{
		this._index = index;
	};
	BX.Crm.EntityConfigField.create = function(settings)
	{
		var self = new BX.Crm.EntityConfigField();
		self.initialize(settings);
		return self;
	};
}
//endregion

//region SCHEME & ELEMENTS
if(typeof BX.Crm.EntityScheme === "undefined")
{
	BX.Crm.EntityScheme = function()
	{
		this._id = "";
		this._settings = {};
		this._elements = null;
		this._availableElements = null;
	};
	BX.Crm.EntityScheme.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._elements = [];
			this._availableElements = [];

			var i, length;
			var currentData = BX.prop.getArray(this._settings, "current", []);
			for(i = 0, length = currentData.length; i < length; i++)
			{
				this._elements.push(BX.Crm.EntitySchemeElement.create(currentData[i]));
			}

			var availableData = BX.prop.getArray(this._settings, "available", []);
			for(i = 0, length = availableData.length; i < length; i++)
			{
				this._availableElements.push(BX.Crm.EntitySchemeElement.create(availableData[i]));
			}
		},
		getId: function()
		{
			return this._id;
		},
		getElements: function()
		{
			return ([].concat(this._elements));
		},
		findElementByName: function(name, options)
		{
			var isRecursive = BX.prop.getBoolean(options, "isRecursive", false);
			for(var i = 0, length = this._elements.length; i < length; i++)
			{
				var element = this._elements[i];
				if(element.getName() === name)
				{
					return element;
				}

				if(!isRecursive)
				{
					continue;
				}

				var childElement = element.findElementByName(name);
				if(childElement !== null)
				{
					return childElement;
				}
			}

			return null;
		},
		getAvailableElements: function()
		{
			return([].concat(this._availableElements));
		},
		setAvailableElements: function(elements)
		{
			this._availableElements = BX.type.isArray(elements) ? elements : [];
		}
	};
	BX.Crm.EntityScheme.create = function(id, settings)
	{
		var self = new BX.Crm.EntityScheme();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntitySchemeElement === "undefined")
{
	BX.Crm.EntitySchemeElement = function()
	{
		this._settings = {};
		this._name = "";
		this._type = "";
		this._title = "";
		this._originalTitle = "";
		this._optionFlags = 0;

		this._isEditable = true;
		this._isTransferable = true;
		this._isContextMenuEnabled = true;
		this._isRequired = false;
		this._isRequiredConditionally = false;
		this._isHeading = false;
		this._isMergeable = true;

		this._visibilityPolicy = BX.Crm.EntityEditorVisibilityPolicy.always;
		this._data = null;
		this._elements = null;
		this._parent = null;
	};
	BX.Crm.EntitySchemeElement.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};

			this._name = BX.prop.getString(this._settings, "name", "");
			this._type = BX.prop.getString(this._settings, "type", "");

			this._data = BX.prop.getObject(this._settings, "data", {});

			this._isEditable = BX.prop.getBoolean(this._settings, "editable", true);
			this._isTransferable = BX.prop.getBoolean(this._settings, "transferable", true);
			this._isMergeable = BX.prop.getBoolean(this._settings, "mergeable", true);
			this._isContextMenuEnabled = BX.prop.getBoolean(this._settings, "enabledMenu", true);
			this._isTitleEnabled = BX.prop.getBoolean(this._settings, "enableTitle", true)
				&& this.getDataBooleanParam("enableTitle", true);
			this._isDragEnabled = BX.prop.getBoolean(this._settings, "isDragEnabled", true);
			this._isRequired = BX.prop.getBoolean(this._settings, "required", false);
			this._isRequiredConditionally = BX.prop.getBoolean(this._settings, "requiredConditionally", false);
			this._isHeading = BX.prop.getBoolean(this._settings, "isHeading", false);

			this._visibilityPolicy = BX.Crm.EntityEditorVisibilityPolicy.parse(
				BX.prop.getString(
					this._settings,
					"visibilityPolicy",
					""
				)
			);

			//region Titles
			var title = BX.prop.getString(this._settings, "title", "");
			var originalTitle = BX.prop.getString(this._settings, "originalTitle", "");

			if(title !== "" && originalTitle === "")
			{
				originalTitle = title;
			}
			else if(originalTitle !== "" && title === "")
			{
				title = originalTitle;
			}

			this._title = title;
			this._originalTitle = originalTitle;
			//endregion

			this._optionFlags = BX.prop.getInteger(this._settings, "optionFlags", 0);

			this._elements = [];
			var elementData = BX.prop.getArray(this._settings, "elements", []);
			for(var i = 0, l = elementData.length; i < l; i++)
			{
				this._elements.push(BX.Crm.EntitySchemeElement.create(elementData[i]));
			}
		},
		mergeSettings: function(settings)
		{
			this.initialize(BX.mergeEx(this._settings, settings));
		},
		getName: function()
		{
			return this._name;
		},
		getType: function()
		{
			return this._type;
		},
		getTitle: function()
		{
			return this._title;
		},
		setTitle: function(title)
		{
			this._title = this._settings["title"] = title;
		},
		getOriginalTitle: function()
		{
			return this._originalTitle;
		},
		hasCustomizedTitle: function()
		{
			return this._title !== "" && this._title !== this._originalTitle;
		},
		resetOriginalTitle: function()
		{
			this._originalTitle = this._title;
		},
		getOptionFlags: function()
		{
			return this._optionFlags;
		},
		setOptionFlags: function(flags)
		{
			this._optionFlags = this._settings["optionFlags"] = flags;
		},
		areAttributesEnabled: function()
		{
			return BX.prop.getBoolean(this._settings, "enableAttributes", true);
		},
		isEditable: function()
		{
			return this._isEditable;
		},
		isTransferable: function()
		{
			return this._isTransferable;
		},
		isRequired: function()
		{
			return this._isRequired;
		},
		isRequiredConditionally: function()
		{
			return this._isRequiredConditionally;
		},
		isContextMenuEnabled: function()
		{
			return this._isContextMenuEnabled;
		},
		isTitleEnabled: function()
		{
			return this._isTitleEnabled;
		},
		isDragEnabled: function()
		{
			return this._isDragEnabled;
		},
		isHeading: function()
		{
			return this._isHeading;
		},
		isMergeable: function()
		{
			return this._isMergeable;
		},
		getCreationPlaceholder: function()
		{
			return BX.prop.getString(
				BX.prop.getObject(this._settings, "placeholders", null),
				"creation",
				""
			);
		},
		getVisibilityPolicy: function()
		{
			return this._visibilityPolicy;
		},
		getData: function()
		{
			return this._data;
		},
		setData: function(data)
		{
			this._data = data;
		},
		getDataParam: function(name, defaultval)
		{
			return BX.prop.get(this._data, name, defaultval);
		},
		setDataParam: function(name, val)
		{
			this._data[name] = val;
		},
		getDataStringParam: function(name, defaultval)
		{
			return BX.prop.getString(this._data, name, defaultval);
		},
		getDataIntegerParam: function(name, defaultval)
		{
			return BX.prop.getInteger(this._data, name, defaultval);
		},
		getDataBooleanParam: function(name, defaultval)
		{
			return BX.prop.getBoolean(this._data, name, defaultval);
		},
		getDataObjectParam: function(name, defaultval)
		{
			return BX.prop.getObject(this._data, name, defaultval);
		},
		getDataArrayParam: function(name, defaultval)
		{
			return BX.prop.getArray(this._data, name, defaultval);
		},
		getElements: function()
		{
			return this._elements;
		},
		setElements: function(elements)
		{
			this._elements = elements;
		},
		findElementByName: function(name)
		{
			for(var i = 0, length = this._elements.length; i < length; i++)
			{
				var element = this._elements[i];
				if(element.getName() === name)
				{
					return element;
				}
			}
			return null;
		},
		getAffectedFields: function()
		{
			var results = this.getDataArrayParam("affectedFields", []);
			if(results.length === 0)
			{
				results.push(this._name);
			}
			return results;
		},
		getParent: function()
		{
			return this._parent;
		},
		setParent: function(parent)
		{
			this._parent = parent instanceof BX.Crm.EntitySchemeElement ? parent : null;
		},
		hasAttributeConfiguration: function(attributeTypeId)
		{
			return !!this.getAttributeConfiguration(attributeTypeId);
		},
		getAttributeConfiguration: function(attributeTypeId)
		{
			var data = this.getData();
			var configs = BX.prop.getArray(data, "attrConfigs", null);
			if(!configs)
			{
				return null;
			}

			for(var i = 0, length = configs.length; i < length; i++)
			{
				var config = configs[i];
				if(BX.prop.getInteger(config, "typeId", BX.Crm.EntityFieldAttributeType.undefined) === attributeTypeId)
				{
					return BX.clone(config);
				}
			}
			return null;
		},
		setAttributeConfiguration: function(config)
		{
			var typeId = BX.prop.getInteger(config, "typeId", BX.Crm.EntityFieldAttributeType.undefined);
			if(typeof(this._data["attrConfigs"]) === "undefined")
			{
				this._data["attrConfigs"] = [];
			}

			var index = -1;
			for(var i = 0, length = this._data["attrConfigs"].length; i < length; i++)
			{
				if(BX.prop.getInteger(this._data["attrConfigs"][i], "typeId", BX.Crm.EntityFieldAttributeType.undefined) === typeId)
				{
					index = i;
					break;
				}
			}

			if(index >= 0)
			{
				this._data["attrConfigs"].splice(index, 1, config);
			}
			else
			{
				this._data["attrConfigs"].push(config);
			}
		},
		removeAttributeConfiguration: function(attributeTypeId)
		{
			if(typeof(this._data["attrConfigs"]) === "undefined")
			{
				return;
			}

			for(var i = 0, length = this._data["attrConfigs"].length; i < length; i++)
			{
				if(BX.prop.getInteger(this._data["attrConfigs"][i], "typeId", BX.Crm.EntityFieldAttributeType.undefined) === attributeTypeId)
				{
					this._data["attrConfigs"].splice(i, 1);
					return;
				}
			}
		},
		createConfigItem: function()
		{
			var result = { name: this._name };

			if(this._type === "section")
			{
				result["type"] = "section";

				if(this._title !== "")
				{
					result["title"] = this._title;
				}

				result["elements"] = [];
				for(var i = 0, length = this._elements.length; i < length; i++)
				{
					//result["elements"].push({ name: this._elements[i].getName() });
					result["elements"].push(this._elements[i].createConfigItem());
				}
			}
			else
			{
				if(this._title !== "" && this._title !== this._originalTitle)
				{
					result["title"] = this._title;
				}

				if(this._optionFlags > 0)
				{
					result["optionFlags"] = this._optionFlags;
				}
			}

			return result;
		},
		clone: function()
		{
			return BX.Crm.EntitySchemeElement.create(BX.clone(this._settings));
		}
	};
	BX.Crm.EntitySchemeElement.create = function(settings)
	{
		var self = new BX.Crm.EntitySchemeElement();
		self.initialize(settings);
		return self;
	}
}
//endregion

//region FACTORY
if(typeof BX.Crm.EntityEditorValidatorFactory === "undefined")
{
	BX.Crm.EntityEditorValidatorFactory =
	{
		create: function(type, settings)
		{
			if(type === "person")
			{
				return BX.Crm.EntityPersonValidator.create(settings);
			}

			return null;
		}
	}
}

if(typeof BX.Crm.EntityEditorControlFactory === "undefined")
{
	BX.Crm.EntityEditorControlFactory =
	{
		initialized: false,
		methods: {},

		isInitialized: function()
		{
			return this.initialized;
		},
		initialize: function()
		{
			if(this.initialized)
			{
				return;
			}

			var eventArgs = { methods: {} };
			BX.onCustomEvent(
				window,
				"BX.Crm.EntityEditorControlFactory:onInitialize",
				[ this, eventArgs ]
			);

			for(var name in eventArgs.methods)
			{
				if(eventArgs.methods.hasOwnProperty(name))
				{
					this.registerFactoryMethod(name, eventArgs.methods[name]);
				}
			}

			this.initialized = true;
		},
		registerFactoryMethod: function(name, method)
		{
			if(BX.type.isFunction(method))
			{
				this.methods[name] = method;
			}
		},
		create: function(type, controlId, settings)
		{
			if(!this.initialized)
			{
				this.initialize();
			}


			if(type === "section")
			{
				return BX.Crm.EntityEditorSection.create(controlId, settings);
			}
			else if(type === "text")
			{
				return BX.Crm.EntityEditorText.create(controlId, settings);
			}
			else if(type === "number")
			{
				return BX.Crm.EntityEditorNumber.create(controlId, settings);
			}
			else if(type === "datetime")
			{
				return BX.Crm.EntityEditorDatetime.create(controlId, settings);
			}
			else if(type === "boolean")
			{
				return BX.Crm.EntityEditorBoolean.create(controlId, settings);
			}
			else if(type === "list")
			{
				return BX.Crm.EntityEditorList.create(controlId, settings);
			}
			else if(type === "multilist")
			{
				return BX.Crm.EntityEditorMultiList.create(controlId, settings);
			}
			else if(type === "html")
			{
				return BX.Crm.EntityEditorHtml.create(controlId, settings);
			}
			else if(type === "money")
			{
				return BX.Crm.EntityEditorMoney.create(controlId, settings);
			}
			else if(type === "image")
			{
				return BX.Crm.EntityEditorImage.create(controlId, settings);
			}
			else if(type === "user")
			{
				return BX.Crm.EntityEditorUser.create(controlId, settings);
			}
			else if(type === "multiple_user")
			{
				return BX.Crm.EntityEditorMultipleUser.create(controlId, settings);
			}
			else if(type === "address")
			{
				return BX.Crm.EntityEditorAddress.create(controlId, settings);
			}
			else if(type === "crm_entity")
			{
				return BX.Crm.EntityEditorEntity.create(controlId, settings);
			}
			else if(type === "file_storage")
			{
				return BX.Crm.EntityEditorFileStorage.create(controlId, settings);
			}
			else if(type === "client")
			{
				return BX.Crm.EntityEditorClient.create(controlId, settings);
			}
			else if(type === "client_light")
			{
				return BX.Crm.EntityEditorClientLight.create(controlId, settings);
			}
			else if(type === "multifield")
			{
				return BX.Crm.EntityEditorMultifield.create(controlId, settings);
			}
			else if(type === "product_row_summary")
			{
				return BX.Crm.EntityEditorProductRowSummary.create(controlId, settings);
			}
			else if(type === "requisite_selector")
			{
				return BX.Crm.EntityEditorRequisiteSelector.create(controlId, settings);
			}
			else if(type === "requisite_list")
			{
				return BX.Crm.EntityEditorRequisiteList.create(controlId, settings);
			}
			else if(type === "userField")
			{
				return BX.Crm.EntityEditorUserField.create(controlId, settings);
			}
			else if(type === "userFieldConfig")
			{
				return BX.Crm.EntityEditorUserFieldConfigurator.create(controlId, settings);
			}
			else if(type === "recurring")
			{
				return BX.Crm.EntityEditorRecurring.create(controlId, settings);
			}
			else if(type === "recurring_custom_row")
			{
				return BX.Crm.EntityEditorRecurringCustomRowField.create(controlId, settings);
			}
			else if(type === "recurring_single_row")
			{
				return BX.Crm.EntityEditorRecurringSingleField.create(controlId, settings);
			}
			else if(type === "custom")
			{
				return BX.Crm.EntityEditorCustom.create(controlId, settings);
			}
			else if(type === "shipment")
			{
				return BX.Crm.EntityEditorShipment.create(controlId, settings);
			}
			else if(type === "payment")
			{
				return BX.Crm.EntityEditorPayment.create(controlId, settings);
			}
			else if(type === "payment_status")
			{
				return BX.Crm.EntityEditorPaymentStatus.create(controlId, settings);
			}
			else if(type === "payment_check")
			{
				return BX.Crm.EntityEditorPaymentCheck.create(controlId, settings);
			}
			else if(type === "order_subsection")
			{
				return BX.Crm.EntityEditorSubsection.create(controlId, settings);
			}
			else if(type === "order_property_wrapper")
			{
				return BX.Crm.EntityEditorOrderPropertyWrapper.create(controlId, settings);
			}
			else if(type === "order_property_subsection")
			{
				return BX.Crm.EntityEditorOrderPropertySubsection.create(controlId, settings);
			}
			else if(type === "order_property_file")
			{
				return BX.Crm.EntityEditorOrderPropertyFile.create(controlId, settings);
			}
			else if(type === "order_product_property")
			{
				return BX.Crm.EntityEditorOrderProductProperty.create(controlId, settings);
			}
			else if(type === "order_person_type")
			{
				return BX.Crm.EntityEditorOrderPersonType.create(controlId, settings);
			}
			else if(type === "order_quantity")
			{
				return BX.Crm.EntityEditorOrderQuantity.create(controlId, settings);
			}
			else if(type === "order_user")
			{
				return BX.Crm.EntityEditorOrderUser.create(controlId, settings);
			}
			else if(type === "order_client")
			{
				return BX.Crm.EntityEditorOrderClient.create(controlId, settings);
			}
			else if(type === "hidden")
			{
				return BX.Crm.EntityEditorHidden.create(controlId, settings);
			}
			else if(type === "delivery_selector")
			{
				return BX.Crm.EntityEditorDeliverySelector.create(controlId, settings);
			}
			else if(type === "shipment_extra_services")
			{
				return BX.Crm.EntityEditorShipmentExtraServices.create(controlId, settings);
			}

			for(var name in this.methods)
			{
				if(!this.methods.hasOwnProperty(name))
				{
					continue;
				}

				var control = this.methods[name](type, controlId, settings);
				if(control)
				{
					return control;
				}
			}

			return null;
		}
	};
}

if(typeof BX.Crm.EntityEditorControllerFactory === "undefined")
{
	BX.Crm.EntityEditorControllerFactory =
	{
		create: function(type, controllerId, settings)
		{
			if(type === "product_row_proxy")
			{
				return BX.Crm.EntityEditorProductRowProxy.create(controllerId, settings);
			}
			else if(type === "order_controller")
			{
				return BX.Crm.EntityEditorOrderController.create(controllerId, settings);
			}
			else if(type === "order_shipment_controller")
			{
				return BX.Crm.EntityEditorOrderShipmentController.create(controllerId, settings);
			}
			else if(type === "order_payment_controller")
			{
				return BX.Crm.EntityEditorOrderPaymentController.create(controllerId, settings);
			}
			else if(type === "order_product_controller")
			{
				return BX.Crm.EntityEditorOrderProductController.create(controllerId, settings);
			}

			return null;
		}
	};
}

if(typeof BX.Crm.EntityEditorModelFactory === "undefined")
{
	BX.Crm.EntityEditorModelFactory =
	{
		create: function(entityTypeId, id, settings)
		{
			if(entityTypeId === BX.CrmEntityType.enumeration.lead)
			{
				return BX.Crm.LeadModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.contact)
			{
				return BX.Crm.ContactModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.company)
			{
				return BX.Crm.CompanyModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.deal)
			{
				return BX.Crm.DealModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.dealrecurring)
			{
				return BX.Crm.DealRecurringModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.quote)
			{
				return BX.Crm.QuoteModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.order)
			{
				return BX.Crm.OrderModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.orderpayment)
			{
				return BX.Crm.OrderPaymentModel.create(id, settings);
			}
			else if(entityTypeId === BX.CrmEntityType.enumeration.ordershipment)
			{
				return BX.Crm.OrderShipmentModel.create(id, settings);
			}
			return BX.Crm.EntityModel.create(id, settings);
		}
	};
}
//endregion

//region MODEL
if(typeof BX.Crm.EntityModel === "undefined")
{
	BX.Crm.EntityModel = function()
	{
		this._id = "";
		this._settings = {};
		this._data = null;
		this._initData = null;
		this._lockedFields = null;
		this._changeNotifier = null;
		this._lockNotifier = null;
	};
	BX.Crm.EntityModel.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._data = BX.prop.getObject(this._settings, "data", {});
			this._initData = BX.clone(this._data);
			this._lockedFields = {};
			this._changeNotifier = BX.CrmNotifier.create(this);
			this._lockNotifier = BX.CrmNotifier.create(this);

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		getEntityTypeId: function()
		{
			return BX.CrmEntityType.enumeration.undefined;
		},
		getEntityId: function()
		{
			return BX.prop.getInteger(this._data, "ID", 0);
		},
		getOwnerInfo: function()
		{
			return(
				{
					ownerID: this.getEntityId(),
					ownerType: BX.CrmEntityType.resolveName(this.getEntityTypeId())
				}
			);
		},
		getField: function(name, defaultValue)
		{
			if(defaultValue === undefined)
			{
				defaultValue = null;
			}
			return BX.prop.get(this._data, name, defaultValue);
		},
		getStringField: function(name, defaultValue)
		{
			if(defaultValue === undefined)
			{
				defaultValue = null;
			}
			return BX.prop.getString(this._data, name, defaultValue);
		},
		getIntegerField: function(name, defaultValue)
		{
			if(defaultValue === undefined)
			{
				defaultValue = null;
			}
			return BX.prop.getInteger(this._data, name, defaultValue);
		},
		getNumberField: function(name, defaultValue)
		{
			if(defaultValue === undefined)
			{
				defaultValue = null;
			}
			return BX.prop.getNumber(this._data, name, defaultValue);
		},
		getArrayField: function(name, defaultValue)
		{
			if(defaultValue === undefined)
			{
				defaultValue = null;
			}
			return BX.prop.getArray(this._data, name, defaultValue);
		},
		registerNewField: function(name, value)
		{
			//update data
			this._data[name] = value;
			//update initialization data because of rollback.
			this._initData[name] = value;
		},
		setField: function(name, value, options)
		{
			if(this._data.hasOwnProperty(name) && this._data[name] === value)
			{
				return;
			}

			this._data[name] = value;

			if(!BX.type.isPlainObject(options))
			{
				options = {};
			}

			if(BX.prop.getBoolean(options, "enableNotification", true))
			{
				this._changeNotifier.notify(
					[
						{
							name: name,
							originator: BX.prop.get(options, "originator", null)
						}
					]
				);
				BX.onCustomEvent(
					window,
					"Crm.EntityModel.Change",
					[ this, { entityTypeId: this.getEntityTypeId(), entityId: this.getEntityId(), fieldName: name } ]
				);
			}
		},
		getData: function()
		{
			return this._data;
		},
		setData: function(data, options)
		{
			this._data = BX.type.isPlainObject(data) ? data : {};
			this._initData = BX.clone(this._data);

			if(BX.prop.getBoolean(options, "enableNotification", true))
			{
				this._changeNotifier.notify(
					[
						{
							forAll: true,
							originator: BX.prop.get(options, "originator", null)
						}
					]
				);
				BX.onCustomEvent(
					window,
					"Crm.EntityModel.Change",
					[ this, { entityTypeId: this.getEntityTypeId(), entityId: this.getEntityId(), forAll: true } ]
				);
			}
		},
		updateData: function(data, options)
		{
			if(!BX.type.isPlainObject(data))
			{
				return;
			}

			this._data = BX.mergeEx(this._data, data);
			if(BX.prop.getBoolean(options, "enableNotification", true))
			{
				this._changeNotifier.notify(
					[
						{
							forAll: true,
							originator: BX.prop.get(options, "originator", null)
						}
					]
				);
				BX.onCustomEvent(
					window,
					"Crm.EntityModel.Change",
					[ this, { entityTypeId: this.getEntityTypeId(), entityId: this.getEntityId(), forAll: true } ]
				);
			}
		},
		updateDataObject: function(name, data, options)
		{
			if(!this._data.hasOwnProperty(name))
			{
				this._data[name] = data;
			}
			else
			{
				this._data[name] = BX.mergeEx(this._data[name], data);
			}

			if(BX.prop.getBoolean(options, "enableNotification", true))
			{
				this._changeNotifier.notify(
					[
						{
							forAll: true,
							originator: BX.prop.get(options, "originator", null)
						}
					]
				);
				BX.onCustomEvent(
					window,
					"Crm.EntityModel.Change",
					[ this, { entityTypeId: this.getEntityTypeId(), entityId: this.getEntityId(), forAll: true } ]
				);
			}
		},
		getSchemeField: function(schemeElement, name, defaultValue)
		{
			return this.getField(schemeElement.getDataStringParam(name, ""), defaultValue);
		},
		setSchemeField: function(schemeElement, name, value)
		{
			var fieldName = schemeElement.getDataStringParam(name, "");
			if(fieldName !== "")
			{
				this.setField(fieldName, value);
			}
		},
		getMappedField: function(map, name, defaultValue)
		{
			var fieldName = BX.prop.getString(map, name, "");
			return fieldName !== "" ? this.getField(fieldName, defaultValue) : defaultValue;
		},
		setMappedField: function(map, name, value)
		{
			var fieldName = BX.prop.getString(map, name, "");
			if(fieldName !== "")
			{
				this.setField(fieldName, value);
			}
		},
		save: function()
		{
		},
		rollback: function()
		{
			this._data = BX.clone(this._initData);
		},
		lockField: function(fieldName)
		{
			if(this._lockedFields.hasOwnProperty(fieldName))
			{
				return;
			}

			this._lockedFields[fieldName] = true;
			this._lockNotifier.notify([ { name: name, isLocked: true } ]);
		},
		unlockField: function(fieldName)
		{
			if(!this._lockedFields.hasOwnProperty(fieldName))
			{
				return;
			}

			delete this._lockedFields[fieldName];
			this._lockNotifier.notify([ { name: name, isLocked: false } ]);
		},
		isFieldLocked: function(fieldName)
		{
			return this._lockedFields.hasOwnProperty(fieldName);
		},
		addChangeListener: function(listener)
		{
			this._changeNotifier.addListener(listener);
		},
		removeChangeListener: function(listener)
		{
			this._changeNotifier.removeListener(listener);
		},
		addLockListener: function(listener)
		{
			this._lockNotifier.addListener(listener);
		},
		removeLockListener: function(listener)
		{
			this._lockNotifier.removeListener(listener);
		},
		isCaptionEditable: function()
		{
			return false;
		},
		getCaption: function()
		{
			return "";
		},
		setCaption: function(caption)
		{
		},
		prepareCaptionData: function(data)
		{
		}
	};
	BX.Crm.EntityModel.create = function(id, settings)
	{
		var self = new BX.Crm.EntityModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.LeadModel === "undefined")
{
	BX.Crm.LeadModel = function()
	{
		BX.Crm.LeadModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.LeadModel, BX.Crm.EntityModel);
	BX.Crm.LeadModel.prototype.doInitialize = function()
	{
		BX.addCustomEvent(window, "Crm.EntityProgress.Change", BX.delegate(this.onEntityProgressChange, this));
	};
	BX.Crm.LeadModel.prototype.onEntityProgressChange = function(sender, eventArgs)
	{
		if(BX.prop.getInteger(eventArgs, "entityTypeId", 0) !== this.getEntityTypeId()
			|| BX.prop.getInteger(eventArgs, "entityId", 0) !== this.getEntityId()
		)
		{
			return;
		}

		var stepId = BX.prop.getString(eventArgs, "currentStepId", "");
		if(stepId !== this.getField("STATUS_ID", ""))
		{
			this.setField("STATUS_ID", stepId);
		}
	};
	BX.Crm.LeadModel.prototype.getEntityTypeId = function()
	{
		return BX.CrmEntityType.enumeration.lead;
	};
	BX.Crm.LeadModel.prototype.isCaptionEditable = function()
	{
		return true;
	};
	BX.Crm.LeadModel.prototype.getCaption = function()
	{
		var title = this.getField("TITLE");
		return BX.type.isString(title) ? title : "";
	};
	BX.Crm.LeadModel.prototype.setCaption = function(caption)
	{
		this.setField("TITLE", caption);
	};
	BX.Crm.LeadModel.prototype.prepareCaptionData = function(data)
	{
		data["TITLE"] = this.getField("TITLE", "");
	};
	BX.Crm.LeadModel.create = function(id, settings)
	{
		var self = new BX.Crm.LeadModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.ContactModel === "undefined")
{
	BX.Crm.ContactModel = function()
	{
		BX.Crm.ContactModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.ContactModel, BX.Crm.EntityModel);
	BX.Crm.ContactModel.prototype.getEntityTypeId = function()
	{
		return BX.CrmEntityType.enumeration.contact;
	};
	BX.Crm.ContactModel.prototype.getCaption = function()
	{
		return this.getField("FORMATTED_NAME", "");
	};
	BX.Crm.ContactModel.create = function(id, settings)
	{
		var self = new BX.Crm.ContactModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.CompanyModel === "undefined")
{
	BX.Crm.CompanyModel = function()
	{
		BX.Crm.CompanyModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.CompanyModel, BX.Crm.EntityModel);
	BX.Crm.CompanyModel.prototype.isCaptionEditable = function()
	{
		return true;
	};
	BX.Crm.CompanyModel.prototype.getEntityTypeId = function()
	{
		return BX.CrmEntityType.enumeration.company;
	};
	BX.Crm.CompanyModel.prototype.getCaption = function()
	{
		return this.getField("TITLE", "");
	};
	BX.Crm.CompanyModel.prototype.setCaption = function(caption)
	{
		this.setField("TITLE", caption);
	};
	BX.Crm.CompanyModel.prototype.prepareCaptionData = function(data)
	{
		data["TITLE"] = this.getField("TITLE", "");
	};
	BX.Crm.CompanyModel.create = function(id, settings)
	{
		var self = new BX.Crm.CompanyModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.DealModel === "undefined")
{
	BX.Crm.DealModel = function()
	{
		BX.Crm.DealModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.DealModel, BX.Crm.EntityModel);
	BX.Crm.DealModel.prototype.doInitialize = function()
	{
		BX.addCustomEvent(window, "Crm.EntityProgress.Saved", BX.delegate(this.onEntityProgressSave, this));
	};
	BX.Crm.DealModel.prototype.onEntityProgressSave = function(sender, eventArgs)
	{
		if(BX.prop.getInteger(eventArgs, "entityTypeId", 0) !== this.getEntityTypeId()
			|| BX.prop.getInteger(eventArgs, "entityId", 0) !== this.getEntityId()
		)
		{
			return;
		}

		var stepId = BX.prop.getString(eventArgs, "currentStepId", "");
		if(stepId !== this.getField("STAGE_ID", ""))
		{
			this.setField("STAGE_ID", stepId);
		}
	};
	BX.Crm.DealModel.prototype.getEntityTypeId = function()
	{
		return BX.CrmEntityType.enumeration.deal;
	};
	BX.Crm.DealModel.prototype.isCaptionEditable = function()
	{
		return true;
	};
	BX.Crm.DealModel.prototype.getCaption = function()
	{
		var title = this.getField("TITLE");
		return BX.type.isString(title) ? title : "";
	};
	BX.Crm.DealModel.prototype.setCaption = function(caption)
	{
		this.setField("TITLE", caption);
	};
	BX.Crm.DealModel.prototype.prepareCaptionData = function(data)
	{
		data["TITLE"] = this.getField("TITLE", "");
	};
	BX.Crm.DealModel.create = function(id, settings)
	{
		var self = new BX.Crm.DealModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.DealRecurringModel === "undefined")
{
	BX.Crm.DealRecurringModel = function ()
	{
		BX.Crm.DealRecurringModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.DealRecurringModel, BX.Crm.DealModel);

	BX.Crm.DealRecurringModel.create = function(id, settings)
	{
		var self = new BX.Crm.DealRecurringModel();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.QuoteModel === "undefined")
{
	BX.Crm.QuoteModel = function()
	{
		BX.Crm.QuoteModel.superclass.constructor.apply(this);
	};
	BX.extend(BX.Crm.QuoteModel, BX.Crm.EntityModel);
	BX.Crm.QuoteModel.prototype.doInitialize = function()
	{
		BX.addCustomEvent(window, "Crm.EntityProgress.Change", BX.delegate(this.onEntityProgressChange, this));
	};
	BX.Crm.QuoteModel.prototype.onEntityProgressChange = function(sender, eventArgs)
	{
		if(BX.prop.getInteger(eventArgs, "entityTypeId", 0) !== this.getEntityTypeId()
			|| BX.prop.getInteger(eventArgs, "entityId", 0) !== this.getEntityId()
		)
		{
			return;
		}

		var stepId = BX.prop.getString(eventArgs, "currentStepId", "");
		if(stepId !== this.getField("STATUS_ID", ""))
		{
			this.setField("STATUS_ID", stepId);
		}
	};
	BX.Crm.QuoteModel.prototype.getEntityTypeId = function()
	{
		return BX.CrmEntityType.enumeration.quote;
	};
	BX.Crm.QuoteModel.prototype.isCaptionEditable = function()
	{
		return true;
	};
	BX.Crm.QuoteModel.prototype.getCaption = function()
	{
		var title = this.getField("TITLE");
		return BX.type.isString(title) ? title : "";
	};
	BX.Crm.QuoteModel.prototype.setCaption = function(caption)
	{
		this.setField("TITLE", caption);
	};
	BX.Crm.QuoteModel.prototype.prepareCaptionData = function(data)
	{
		data["TITLE"] = this.getField("TITLE", "");
	};
	BX.Crm.QuoteModel.create = function(id, settings)
	{
		var self = new BX.Crm.QuoteModel();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region D&D
if(typeof BX.Crm.EditorDragScope === "undefined")
{
	BX.Crm.EditorDragScope =
	{
		intermediate: 0,
		parent: 1,
		form: 2,
		getDefault: function()
		{
			return this.form;
		}
	};
}

if(typeof BX.Crm.EditorDragObjectType === "undefined")
{
	BX.Crm.EditorDragObjectType =
	{
		intermediate: "",
		field: "F",
		section: "S"
	};
}

if(typeof(BX.Crm.EditorDragItem) === "undefined")
{
	BX.Crm.EditorDragItem = function()
	{
	};
	BX.Crm.EditorDragItem.prototype =
	{
		getType: function()
		{
			return BX.Crm.EditorDragObjectType.intermediate;
		},
		getContextId: function()
		{
			return "";
		},
		createGhostNode: function()
		{
			return null;
		},
		processDragStart: function()
		{
		},
		processDragPositionChange: function(pos, ghostRect)
		{
		},
		processDragStop: function()
		{
		}
	};
}

if(typeof(BX.Crm.EditorFieldDragItem) === "undefined")
{
	BX.Crm.EditorFieldDragItem = function()
	{
		BX.Crm.EditorFieldDragItem.superclass.constructor.apply(this);
		this._scope = BX.Crm.EditorDragScope.undefined;
		this._control = null;
		this._contextId = "";
	};
	BX.extend(BX.Crm.EditorFieldDragItem, BX.Crm.EditorDragItem);
	BX.Crm.EditorFieldDragItem.prototype.initialize = function(settings)
	{
		this._control = BX.prop.get(settings, "control");
		if(!this._control)
		{
			throw "Crm.EditorFieldDragItem: The 'control' parameter is not defined in settings or empty.";
		}
		this._scope = BX.prop.getInteger(settings, "scope", BX.Crm.EditorDragScope.getDefault());
		this._contextId = BX.prop.getString(settings, "contextId", "");
	};
	BX.Crm.EditorFieldDragItem.prototype.getType = function()
	{
		return BX.Crm.EditorDragObjectType.field;
	};
	BX.Crm.EditorFieldDragItem.prototype.getControl = function()
	{
		return this._control;
	};
	BX.Crm.EditorFieldDragItem.prototype.getContextId = function()
	{
		return this._contextId !== "" ? this._contextId : BX.Crm.EditorFieldDragItem.contextId;
	};
	BX.Crm.EditorFieldDragItem.prototype.createGhostNode = function()
	{
		return this._control.createGhostNode();
	};
	BX.Crm.EditorFieldDragItem.prototype.processDragStart = function()
	{
		window.setTimeout(
			function()
			{
				//Ensure Field drag controllers are enabled.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorFieldDragItem.contextId, true);
				//Disable Section drag controllers for the avoidance of collisions.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorSectionDragItem.contextId, false);
				//Refresh all drag&drop destination areas.
				BX.Crm.EditorDragContainerController.refreshAll();
			}
		);
		this._control.getWrapper().style.opacity = "0.2";
	};
	BX.Crm.EditorFieldDragItem.prototype.processDragPositionChange = function(pos, ghostRect)
	{
		//var startY = pos.y;

		var parentPos = this._scope === BX.Crm.EditorDragScope.parent
			? this._control.getParentPosition()
			: this._control.getRootContainerPosition();

		if(pos.y < parentPos.top)
		{
			pos.y = parentPos.top;
		}
		if((pos.y + ghostRect.height) > parentPos.bottom)
		{
			pos.y = parentPos.bottom - ghostRect.height;
		}
		if(pos.x < parentPos.left)
		{
			pos.x = parentPos.left;
		}
		if((pos.x + ghostRect.width) > parentPos.right)
		{
			pos.x = parentPos.right - ghostRect.width;
		}

		//var finishY = pos.y;
		//console.log("parent: %d start: %d final: %d", parentPos.top, startY, finishY);
	};
	BX.Crm.EditorFieldDragItem.prototype.processDragStop = function()
	{
		window.setTimeout(
			function()
			{
				//Returning Section drag controllers to work.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorSectionDragItem.contextId, true);
				//Refresh all drag&drop destination areas.
				BX.Crm.EditorDragContainerController.refreshAll();
			}
		);
		this._control.getWrapper().style.opacity = "1";
	};
	BX.Crm.EditorFieldDragItem.contextId = "editor_field";
	BX.Crm.EditorFieldDragItem.create = function(settings)
	{
		var self = new BX.Crm.EditorFieldDragItem();
		self.initialize(settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorSectionDragItem) === "undefined")
{
	BX.Crm.EditorSectionDragItem = function()
	{
		BX.Crm.EditorSectionDragItem.superclass.constructor.apply(this);
		this._control = null;
	};
	BX.extend(BX.Crm.EditorSectionDragItem, BX.Crm.EditorDragItem);
	BX.Crm.EditorSectionDragItem.prototype.initialize = function(settings)
	{
		this._control = BX.prop.get(settings, "control");
		if(!this._control)
		{
			throw "Crm.EditorSectionDragItem: The 'control' parameter is not defined in settings or empty.";
		}
	};
	BX.Crm.EditorSectionDragItem.prototype.getType = function()
	{
		return BX.Crm.EditorDragObjectType.section;
	};
	BX.Crm.EditorSectionDragItem.prototype.getControl = function()
	{
		return this._control;
	};
	BX.Crm.EditorSectionDragItem.prototype.getContextId = function()
	{
		return BX.Crm.EditorSectionDragItem.contextId;
	};
	BX.Crm.EditorSectionDragItem.prototype.createGhostNode = function()
	{
		return this._control.createGhostNode();
	};
	BX.Crm.EditorSectionDragItem.prototype.processDragStart = function()
	{
		BX.addClass(document.body, "crm-entity-widgets-drag");

		var control = this._control;
		control.getWrapper().style.opacity = "0.2";
		window.setTimeout(
			function()
			{
				//Ensure Section drag controllers are enabled.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorSectionDragItem.contextId, true);
				//Disable Field drag controllers for the avoidance of collisions.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorFieldDragItem.contextId, false);
				//Refresh all drag&drop destination areas.
				BX.Crm.EditorDragContainerController.refreshAll();

				window.setTimeout(
					function()
					{
						var firstControl = control.getSiblingByIndex(0);
						if(firstControl !== null && firstControl !== control)
						{
							firstControl.getWrapper().scrollIntoView();
						}
					},
					200
				);
			}
		);
	};
	BX.Crm.EditorSectionDragItem.prototype.processDragStop = function()
	{
		BX.removeClass(document.body, "crm-entity-widgets-drag");
		window.setTimeout(
			function()
			{
				//Returning Field drag controllers to work.
				BX.Crm.EditorDragContainerController.enable(BX.Crm.EditorFieldDragItem.contextId, true);
				//Refresh all drag&drop destination areas.
				BX.Crm.EditorDragContainerController.refreshAll();
			}
		);

		var control = this._control;
		control.getWrapper().style.opacity = "1";
		window.setTimeout(
			function()
			{
				control.getWrapper().scrollIntoView();
			},
			150
		);
	};
	BX.Crm.EditorSectionDragItem.contextId = "editor_section";
	BX.Crm.EditorSectionDragItem.create = function(settings)
	{
		var self = new BX.Crm.EditorSectionDragItem();
		self.initialize(settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorDragItemController) === "undefined")
{
	BX.Crm.EditorDragItemController = function()
	{
		BX.Crm.EditorDragItemController.superclass.constructor.apply(this);
		this._charge = null;
		this._preserveDocument = true;
	};
	BX.extend(BX.Crm.EditorDragItemController, BX.CrmCustomDragItem);
	BX.Crm.EditorDragItemController.prototype.doInitialize = function()
	{
		this._charge = this.getSetting("charge");
		if(!this._charge)
		{
			throw "Crm.EditorDragItemController: The 'charge' parameter is not defined in settings or empty.";
		}

		this._startNotifier = BX.CrmNotifier.create(this);
		this._stopNotifier = BX.CrmNotifier.create(this);

		this._ghostOffset = { x: 0, y: -40 };
	};
	BX.Crm.EditorDragItemController.prototype.addStartListener = function(listener)
	{
		this._startNotifier.addListener(listener);
	};
	BX.Crm.EditorDragItemController.prototype.removeStartListener = function(listener)
	{
		this._startNotifier.removeListener(listener);
	};
	BX.Crm.EditorDragItemController.prototype.addStopListener = function(listener)
	{
		this._stopNotifier.addListener(listener);
	};
	BX.Crm.EditorDragItemController.prototype.removeStopListener = function(listener)
	{
		this._stopNotifier.removeListener(listener);
	};
	BX.Crm.EditorDragItemController.prototype.getCharge = function()
	{
		return this._charge;
	};
	BX.Crm.EditorDragItemController.prototype.createGhostNode = function()
	{
		if(this._ghostNode)
		{
			return this._ghostNode;
		}

		this._ghostNode = this._charge.createGhostNode();
		document.body.appendChild(this._ghostNode);
	};
	BX.Crm.EditorDragItemController.prototype.getGhostNode = function()
	{
		return this._ghostNode;
	};
	BX.Crm.EditorDragItemController.prototype.removeGhostNode = function()
	{
		if(this._ghostNode)
		{
			document.body.removeChild(this._ghostNode);
			this._ghostNode = null;
		}
	};
	BX.Crm.EditorDragItemController.prototype.getContextId = function()
	{
		return this._charge.getContextId();
	};
	BX.Crm.EditorDragItemController.prototype.getContextData = function()
	{
		return ({ contextId: this._charge.getContextId(), charge: this._charge });
	};
	BX.Crm.EditorDragItemController.prototype.processDragStart = function()
	{
		BX.Crm.EditorDragItemController.current = this;
		this._charge.processDragStart();
		BX.Crm.EditorDragContainerController.refresh(this._charge.getContextId());

		this._startNotifier.notify([]);
	};
	BX.Crm.EditorDragItemController.prototype.processDrag = function(x, y)
	{
	};
	BX.Crm.EditorDragItemController.prototype.processDragPositionChange = function(pos)
	{
		this._charge.processDragPositionChange(pos, BX.pos(this.getGhostNode()));
	};
	BX.Crm.EditorDragItemController.prototype.processDragStop = function()
	{
		BX.Crm.EditorDragItemController.current = null;
		this._charge.processDragStop();
		BX.Crm.EditorDragContainerController.refreshAfter(this._charge.getContextId(), 300);

		this._stopNotifier.notify([]);
	};
	BX.Crm.EditorDragItemController.current = null;
	BX.Crm.EditorDragItemController.create = function(id, settings)
	{
		var self = new BX.Crm.EditorDragItemController();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorDragContainer) === "undefined")
{
	BX.Crm.EditorDragContainer = function()
	{
	};
	BX.Crm.EditorDragContainer.prototype =
	{
		getContextId: function()
		{
			return "";
		},
		getPriority: function()
		{
			return 100;
		},
		hasPlaceHolder: function()
		{
			return false;
		},
		createPlaceHolder: function(index)
		{
			return null;
		},
		getPlaceHolder: function()
		{
			return null;
		},
		removePlaceHolder: function()
		{
		},
		getChildNodes: function()
		{
			return [];
		},
		getChildNodeCount: function()
		{
			return 0;
		}
	}
}

if(typeof(BX.Crm.EditorFieldDragContainer) === "undefined")
{
	BX.Crm.EditorFieldDragContainer = function()
	{
		BX.Crm.EditorFieldDragContainer.superclass.constructor.apply(this);
		this._section = null;
		this._context = "";
	};
	BX.extend(BX.Crm.EditorFieldDragContainer, BX.Crm.EditorDragContainer);
	BX.Crm.EditorFieldDragContainer.prototype.initialize = function(settings)
	{
		this._section = BX.prop.get(settings, "section");
		if(!this._section)
		{
			throw "Crm.EditorSectionDragContainer: The 'section' parameter is not defined in settings or empty.";
		}

		this._context = BX.prop.getString(settings, "context", "");
	};
	BX.Crm.EditorFieldDragContainer.prototype.getSection = function()
	{
		return this._section;
	};
	BX.Crm.EditorFieldDragContainer.prototype.getContextId = function()
	{
		return this._context !== "" ? this._context : BX.Crm.EditorFieldDragItem.contextId;
	};
	BX.Crm.EditorFieldDragContainer.prototype.getPriority = function()
	{
		return 10;
	};
	BX.Crm.EditorFieldDragContainer.prototype.hasPlaceHolder = function()
	{
		return this._section.hasPlaceHolder();
	};
	BX.Crm.EditorFieldDragContainer.prototype.createPlaceHolder = function(index)
	{
		return this._section.createPlaceHolder(index);
	};
	BX.Crm.EditorFieldDragContainer.prototype.getPlaceHolder = function()
	{
		return this._section.getPlaceHolder();
	};
	BX.Crm.EditorFieldDragContainer.prototype.removePlaceHolder = function()
	{
		this._section.removePlaceHolder();
	};
	BX.Crm.EditorFieldDragContainer.prototype.getChildNodes = function()
	{
		var nodes = [];
		var items = this._section.getChildren();
		for(var i = 0, length = items.length; i < length; i++)
		{
			nodes.push(items[i].getWrapper());
		}
		return nodes;
	};
	BX.Crm.EditorFieldDragContainer.prototype.getChildNodeCount = function()
	{
		return this._section.getChildCount();
	};
	BX.Crm.EditorFieldDragContainer.create = function(settings)
	{
		var self = new BX.Crm.EditorFieldDragContainer();
		self.initialize(settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorSectionDragContainer) === "undefined")
{
	BX.Crm.EditorSectionDragContainer = function()
	{
		BX.Crm.EditorSectionDragContainer.superclass.constructor.apply(this);
		this._editor = null;
	};
	BX.extend(BX.Crm.EditorSectionDragContainer, BX.Crm.EditorDragContainer);
	BX.Crm.EditorSectionDragContainer.prototype.initialize = function(settings)
	{
		this._editor = BX.prop.get(settings, "editor");
		if(!this._editor)
		{
			throw "Crm.EditorSectionDragContainer: The 'editor' parameter is not defined in settings or empty.";
		}
	};
	BX.Crm.EditorSectionDragContainer.prototype.getEditor = function()
	{
		return this._editor;
	};
	BX.Crm.EditorSectionDragContainer.prototype.getContextId = function()
	{
		return BX.Crm.EditorSectionDragItem.contextId;
	};
	BX.Crm.EditorSectionDragContainer.prototype.getPriority = function()
	{
		return 20;
	};
	BX.Crm.EditorSectionDragContainer.prototype.hasPlaceHolder = function()
	{
		return this._editor.hasPlaceHolder();
	};
	BX.Crm.EditorSectionDragContainer.prototype.createPlaceHolder = function(index)
	{
		return this._editor.createPlaceHolder(index);
	};
	BX.Crm.EditorSectionDragContainer.prototype.getPlaceHolder = function()
	{
		return this._editor.getPlaceHolder();
	};
	BX.Crm.EditorSectionDragContainer.prototype.removePlaceHolder = function()
	{
		this._editor.removePlaceHolder();
	};
	BX.Crm.EditorSectionDragContainer.prototype.getChildNodes = function()
	{
		var nodes = [];
		var items = this._editor.getControls();
		for(var i = 0, length = items.length; i < length; i++)
		{
			nodes.push(items[i].getWrapper());
		}
		return nodes;
	};
	BX.Crm.EditorSectionDragContainer.prototype.getChildNodeCount = function()
	{
		return this._editor.getControlCount();
	};
	BX.Crm.EditorSectionDragContainer.create = function(settings)
	{
		var self = new BX.Crm.EditorSectionDragContainer();
		self.initialize(settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorDragContainerController) === "undefined")
{
	BX.Crm.EditorDragContainerController = function()
	{
		BX.Crm.EditorDragContainerController.superclass.constructor.apply(this);
		this._charge = null;
	};
	BX.extend(BX.Crm.EditorDragContainerController, BX.CrmCustomDragContainer);
	BX.Crm.EditorDragContainerController.prototype.doInitialize = function()
	{
		this._charge = this.getSetting("charge");
		if(!this._charge)
		{
			throw "Crm.EditorDragContainerController: The 'charge' parameter is not defined in settings or empty.";
		}
	};
	BX.Crm.EditorDragContainerController.prototype.getCharge = function()
	{
		return this._charge;
	};
	BX.Crm.EditorDragContainerController.prototype.createPlaceHolder = function(pos)
	{
		var ghostRect = BX.pos(BX.Crm.EditorDragItemController.current.getGhostNode());
		var ghostTop = ghostRect.top, ghostBottom = ghostRect.top + 40;
		var ghostMean = Math.floor((ghostTop + ghostBottom) / 2);

		var rect, mean;
		var placeholder = this._charge.getPlaceHolder();
		if(placeholder)
		{
			rect = placeholder.getPosition();
			mean = Math.floor((rect.top + rect.bottom) / 2);
			if(
				(ghostTop <= rect.bottom && ghostTop >= rect.top) ||
				(ghostBottom >= rect.top && ghostBottom <= rect.bottom) ||
				Math.abs(ghostMean - mean) <= 8
			)
			{
				if(!placeholder.isActive())
				{
					placeholder.setActive(true);
				}
				return;
			}
		}

		var nodes = this._charge.getChildNodes();
		for(var i = 0; i < nodes.length; i++)
		{
			rect = BX.pos(nodes[i]);
			mean = Math.floor((rect.top + rect.bottom) / 2);
			if(
				(ghostTop <= rect.bottom && ghostTop >= rect.top) ||
				(ghostBottom >= rect.top && ghostBottom <= rect.bottom) ||
				Math.abs(ghostMean - mean) <= 8
			)
			{
				this._charge.createPlaceHolder((ghostMean - mean) <= 0 ? i : (i + 1)).setActive(true);
				return;
			}
		}

		this._charge.createPlaceHolder(-1).setActive(true);
		this.refresh();
	};
	BX.Crm.EditorDragContainerController.prototype.removePlaceHolder = function()
	{
		if(!this._charge.hasPlaceHolder())
		{
			return;
		}

		if(this._charge.getChildNodeCount() > 0)
		{
			this._charge.removePlaceHolder();
		}
		else
		{
			this._charge.getPlaceHolder().setActive(false);
		}
		this.refresh();
	};
	BX.Crm.EditorDragContainerController.prototype.getContextId = function()
	{
		return this._charge.getContextId();
	};
	BX.Crm.EditorDragContainerController.prototype.getPriority = function()
	{
		return this._charge.getPriority();
	};
	BX.Crm.EditorDragContainerController.prototype.isAllowedContext = function(contextId)
	{
		return contextId === this._charge.getContextId();
	};
	BX.Crm.EditorDragContainerController.refresh = function(contextId)
	{
		for(var k in this.items)
		{
			if(!this.items.hasOwnProperty(k))
			{
				continue;
			}
			var item = this.items[k];
			if(item.getContextId() === contextId)
			{
				item.refresh();
			}
		}
	};
	BX.Crm.EditorDragContainerController.refreshAfter = function(contextId, interval)
	{
		interval = parseInt(interval);
		if(interval > 0)
		{
			window.setTimeout(function() { BX.Crm.EditorDragContainerController.refresh(contextId); }, interval);
		}
		else
		{
			this.refresh(contextId);
		}
	};
	BX.Crm.EditorDragContainerController.refreshAll = function()
	{
		for(var k in this.items)
		{
			if(!this.items.hasOwnProperty(k))
			{
				continue;
			}
			this.items[k].refresh();
		}
	};
	BX.Crm.EditorDragContainerController.enable = function(contextId, enable)
	{
		for(var k in this.items)
		{
			if(!this.items.hasOwnProperty(k))
			{
				continue;
			}
			var item = this.items[k];
			if(item.getContextId() === contextId)
			{
				item.enable(enable);
			}
		}
	};
	BX.Crm.EditorDragContainerController.items = {};
	BX.Crm.EditorDragContainerController.create = function(id, settings)
	{
		var self = new BX.Crm.EditorDragContainerController();
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	};
}

if(typeof(BX.Crm.EditorDragPlaceholder) === "undefined")
{
	BX.Crm.EditorDragPlaceholder = function()
	{
		this._settings = null;
		this._container = null;
		this._node = null;
		this._isDragOver = false;
		this._isActive = false;
		this._index = -1;
		this._timeoutId = null;
	};
	BX.Crm.EditorDragPlaceholder.prototype =
	{
		initialize: function(settings)
		{
			this._settings = settings ? settings : {};
			this._container = this.getSetting("container", null);

			this._isActive = this.getSetting("isActive", false);
			this._index = parseInt(this.getSetting("index", -1));
		},
		getSetting: function (name, defaultval)
		{
			return this._settings.hasOwnProperty(name) ? this._settings[name] : defaultval;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
		},
		isDragOver: function()
		{
			return this._isDragOver;
		},
		isActive: function()
		{
			return this._isActive;
		},
		setActive: function(active, interval)
		{
			if(this._timeoutId !== null)
			{
				window.clearTimeout(this._timeoutId);
				this._timeoutId = null;
			}

			interval = parseInt(interval);
			if(interval > 0)
			{
				var self = this;
				window.setTimeout(function(){ if(self._timeoutId === null) return; self._timeoutId = null; self.setActive(active, 0); }, interval);
				return;
			}

			active = !!active;
			if(this._isActive === active)
			{
				return;
			}

			this._isActive = active;
			if(this._node)
			{
				//this._node.className = active ? "crm-lead-header-drag-zone-bd" : "crm-lead-header-drag-zone-bd-inactive";
			}
		},
		getIndex: function()
		{
			return this._index;
		},
		prepareNode: function()
		{
			return null;
		},
		layout: function()
		{
			this._node = this.prepareNode();
			var anchor = this.getSetting("anchor", null);
			if(anchor)
			{
				this._container.insertBefore(this._node, anchor);
			}
			else
			{
				this._container.appendChild(this._node);
			}

			BX.bind(this._node, "dragover", BX.delegate(this._onDragOver, this));
			BX.bind(this._node, "dragleave", BX.delegate(this._onDragLeave, this));
		},
		clearLayout: function()
		{
			if(this._node)
			{
				// this._node = BX.remove(this._node);
				this._node.style.height = 0;
				setTimeout(BX.proxy(function (){this._node = BX.remove(this._node);}, this), 100);
			}
		},
		getPosition: function()
		{
			return BX.pos(this._node);
		},
		_onDragOver: function(e)
		{
			e = e || window.event;
			this._isDragOver = true;
			return BX.eventReturnFalse(e);
		},
		_onDragLeave: function(e)
		{
			e = e || window.event;
			this._isDragOver = false;
			return BX.eventReturnFalse(e);
		}
	}
}

if(typeof(BX.Crm.EditorDragFieldPlaceholder) === "undefined")
{
	BX.Crm.EditorDragFieldPlaceholder = function()
	{
	};

	BX.extend(BX.Crm.EditorDragFieldPlaceholder, BX.Crm.EditorDragPlaceholder);
	BX.Crm.EditorDragFieldPlaceholder.prototype.prepareNode = function()
	{
		return BX.create("div", { attrs: { className: "crm-entity-widget-content-block-place" } });
	};
	BX.Crm.EditorDragFieldPlaceholder.create = function(settings)
	{
		var self = new BX.Crm.EditorDragFieldPlaceholder();
		self.initialize(settings);
		return self;
	};
}

if(typeof(BX.Crm.EditorDragSectionPlaceholder) === "undefined")
{
	BX.Crm.EditorDragSectionPlaceholder = function()
	{
	};

	BX.extend(BX.Crm.EditorDragSectionPlaceholder, BX.Crm.EditorDragPlaceholder);
	BX.Crm.EditorDragSectionPlaceholder.prototype.prepareNode = function()
	{
		return BX.create("div", { attrs: { className: "crm-entity-card-widget crm-entity-card-widget-place" } });
	};
	BX.Crm.EditorDragSectionPlaceholder.create = function(settings)
	{
		var self = new BX.Crm.EditorDragSectionPlaceholder();
		self.initialize(settings);
		return self;
	};
}

//endregion

//region USER FIELD
if(typeof BX.Crm.EntityUserFieldType === "undefined")
{
	BX.Crm.EntityUserFieldType =
	{
		string: "string",
		integer: "integer",
		double: "double",
		boolean: "boolean",
		money: "money",
		date: "date",
		datetime: "datetime",
		enumeration: "enumeration",
		employee: "employee",
		crm: "crm",
		crmStatus: "crm_status",
		file: "file",
		url: "url"
	};
}

if(typeof BX.Crm.EntityUserFieldManager === "undefined")
{
	BX.Crm.EntityUserFieldManager = function()
	{
		this._id = "";
		this._settings = {};
		this._entityId = 0;
		this._fieldEntityId = "";
		this._enableCreation = false;
		this._creationSignature = "";
		this._creationUrl = "";
		this._activeFields = {};
		this._validationResult = null;
		this._validationPromise = null;

		this._config = null;
	};
	BX.Crm.EntityUserFieldManager.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._entityId = BX.prop.getInteger(this._settings, "entityId", 0);
			this._fieldEntityId = BX.prop.getString(this._settings, "fieldEntityId", "");
			this._enableCreation = BX.prop.getBoolean(this._settings, "enableCreation", false);
			this._creationSignature = BX.prop.getString(this._settings, "creationSignature", "");
			this._creationPageUrl = BX.prop.getString(this._settings, "creationPageUrl", "");
		},
		isCreationEnabled: function()
		{
			return this._enableCreation;
		},
		isModificationEnabled: function()
		{
			return this._enableCreation;
		},
		getDefaultFieldLabel: function(typeId)
		{
			if(typeId === "string")
			{
				return this.getMessage("stringLabel");
			}
			else if(typeId === "double")
			{
				return this.getMessage("doubleLabel");
			}
			else if(typeId === "money")
			{
				return this.getMessage("moneyLabel");
			}
			else if(typeId === "datetime")
			{
				return this.getMessage("datetimeLabel");
			}
			else if(typeId === "enumeration")
			{
				return this.getMessage("enumerationLabel");
			}
			else if(typeId === "file")
			{
				return this.getMessage("fileLabel");
			}
			return this.getMessage("label");
		},
		getMessage: function(name)
		{
			var m = BX.Crm.EntityUserFieldManager.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getAdditionalTypeList: function()
		{
			return BX.Crm.EntityUserFieldManager.additionalTypeList;
		},
		getTypeInfos: function()
		{
			var items = [];
			items.push({ name: "string", title: this.getMessage("stringTitle"), legend: this.getMessage("stringLegend") });
			items.push({ name: "enumeration", title: this.getMessage("enumerationTitle"), legend: this.getMessage("enumerationLegend") });
			items.push({ name: "datetime", title: this.getMessage("datetimeTitle"), legend: this.getMessage("datetimeLegend") });
			items.push({ name: "address", title: this.getMessage("addressTitle"), legend: this.getMessage("addressLegend") });

			if (this._fieldEntityId === 'CRM_LEAD' || this._fieldEntityId === 'CRM_DEAL')
			{
				items.push({ name: "resourcebooking", title: this.getMessage("resourcebookingTitle"), legend: this.getMessage("resourcebookingLegend") });
			}

			items.push({ name: "url", title: this.getMessage("urlTitle"), legend: this.getMessage("urlLegend") });
			items.push({ name: "file", title: this.getMessage("fileTitle"), legend: this.getMessage("fileLegend") });
			items.push({ name: "money", title: this.getMessage("moneyTitle"), legend: this.getMessage("moneyLegend") });
			items.push({ name: "boolean", title: this.getMessage("booleanTitle"), legend: this.getMessage("booleanLegend") });
			items.push({ name: "double", title: this.getMessage("doubleTitle"), legend: this.getMessage("doubleLegend") });

			var additionalList = this.getAdditionalTypeList();
			for(var i = 0; i < additionalList.length; i++)
			{
				items.push({
					name: additionalList[i].USER_TYPE_ID,
					title: additionalList[i].TITLE,
					legend: additionalList[i].LEGEND
				});
			}

			items.push({ name: "custom", title: this.getMessage("customTitle"), legend: this.getMessage("customLegend") });

			return items;
		},
		getCreationPageUrl: function()
		{
			return this._creationPageUrl;
		},
		createField: function(fieldData, mode)
		{
			if(!this._enableCreation)
			{
				return;
			}

			var typeId = BX.prop.getString(fieldData, "USER_TYPE_ID", "");
			if(typeId === "")
			{
				typeId = BX.Crm.EntityUserFieldType.string;
			}

			if(!BX.type.isNotEmptyString(fieldData["EDIT_FORM_LABEL"]))
			{
				fieldData["EDIT_FORM_LABEL"] = this.getDefaultFieldLabel(typeId);
			}

			if(!BX.type.isNotEmptyString(fieldData["LIST_COLUMN_LABEL"]))
			{
				fieldData["LIST_COLUMN_LABEL"] = fieldData["EDIT_FORM_LABEL"];
			}

			if(!BX.type.isNotEmptyString(fieldData["LIST_FILTER_LABEL"]))
			{
				fieldData["LIST_FILTER_LABEL"] = fieldData["LIST_COLUMN_LABEL"];
			}

			this.addFieldLabel("EDIT_FORM_LABEL", fieldData["EDIT_FORM_LABEL"], fieldData);
			this.addFieldLabel("LIST_COLUMN_LABEL", fieldData["LIST_COLUMN_LABEL"], fieldData);
			this.addFieldLabel("LIST_FILTER_LABEL", fieldData["LIST_FILTER_LABEL"], fieldData);

			var promise = new BX.Promise();
			var onSuccess = function(result)
			{
				promise.fulfill(result);
			};

			if(!BX.type.isNotEmptyString(fieldData["FIELD"]))
			{
				fieldData["FIELD"] = "UF_CRM_" + (new Date()).getTime().toString();
			}

			fieldData["ENTITY_ID"] = this._fieldEntityId;
			fieldData["SIGNATURE"] = this._creationSignature;

			if(!BX.type.isNotEmptyString(fieldData["MULTIPLE"]))
			{
				fieldData["MULTIPLE"] = "N";
			}

			if(!BX.type.isNotEmptyString(fieldData["MANDATORY"]))
			{
				fieldData["MANDATORY"] = "N";
			}

			if(typeId === BX.Crm.EntityUserFieldType.file)
			{
				fieldData["SHOW_FILTER"] = "N";
				fieldData["SHOW_IN_LIST"] = "N";
			}
			else
			{
				if(typeId === BX.Crm.EntityUserFieldType.employee
					|| typeId === BX.Crm.EntityUserFieldType.crm
					|| typeId === BX.Crm.EntityUserFieldType.crmStatus
				)
				{
					//Force exact match for 'employee', 'crm' and 'crm_status' types
					fieldData["SHOW_FILTER"] = "I";
				}
				else
				{
					fieldData["SHOW_FILTER"] = "E";
				}
				fieldData["SHOW_IN_LIST"] = "Y";
			}

			if(typeId === BX.Crm.EntityUserFieldType.enumeration)
			{
				if(!fieldData.hasOwnProperty("SETTINGS"))
				{
					fieldData["SETTINGS"] = {};
				}

				fieldData["SETTINGS"]["DISPLAY"] = "UI";
			}

			if(typeId === BX.Crm.EntityUserFieldType.boolean)
			{
				if(!fieldData.hasOwnProperty("SETTINGS"))
				{
					fieldData["SETTINGS"] = {};
				}

				fieldData["SETTINGS"]["LABEL_CHECKBOX"] = fieldData["EDIT_FORM_LABEL"];
			}

			if(typeId === BX.Crm.EntityUserFieldType.double)
			{
				if(!fieldData.hasOwnProperty("SETTINGS"))
				{
					fieldData["SETTINGS"] = {};
				}

				fieldData["SETTINGS"]["PRECISION"] = 2;
			}

			if(mode === BX.Crm.EntityEditorMode.view)
			{
				BX.Main.UF.ViewManager.add({ "FIELDS": [fieldData] }, onSuccess);
			}
			else
			{
				BX.Main.UF.EditManager.add({ "FIELDS": [fieldData] }, onSuccess);
			}
			return promise;
		},
		updateField: function(fieldData, mode)
		{
			fieldData["ENTITY_ID"] = this._fieldEntityId;
			fieldData["SIGNATURE"] = this._creationSignature;

			if(BX.type.isNotEmptyString(fieldData["EDIT_FORM_LABEL"]))
			{
				this.addFieldLabel("EDIT_FORM_LABEL", fieldData["EDIT_FORM_LABEL"], fieldData);
			}

			if(BX.type.isNotEmptyString(fieldData["LIST_COLUMN_LABEL"]))
			{
				this.addFieldLabel("LIST_COLUMN_LABEL", fieldData["LIST_COLUMN_LABEL"], fieldData);
			}

			if(BX.type.isNotEmptyString(fieldData["LIST_FILTER_LABEL"]))
			{
				this.addFieldLabel("LIST_FILTER_LABEL", fieldData["LIST_FILTER_LABEL"], fieldData);
			}

			var promise = new BX.Promise();
			var onSuccess = function(result)
			{
				promise.fulfill(result);
			};

			if(mode === BX.Crm.EntityEditorMode.view)
			{
				BX.Main.UF.ViewManager.update({ "FIELDS": [fieldData] }, onSuccess);
			}
			else
			{
				BX.Main.UF.EditManager.update({ "FIELDS": [fieldData] }, onSuccess);
			}
			return promise;
		},
		resolveFieldName: function(fieldInfo)
		{
			return BX.prop.getString(fieldInfo, "FIELD", "");
		},
		addFieldLabel: function(name, value, fieldData)
		{
			var languages = BX.prop.getArray(this._settings, "languages", []);
			if(languages.length === 0)
			{
				fieldData[name] = value;
				return;
			}

			fieldData[name] = {};
			for(var i = 0, length = languages.length; i < length; i++)
			{
				var language = languages[i];
				fieldData[name][language["LID"]] = value;
			}
		},
		prepareSchemeElementSettings: function(fieldInfo)
		{
			var name = BX.prop.getString(fieldInfo, "FIELD", "");
			if(name === "")
			{
				return null;
			}

			if(BX.prop.getString(fieldInfo, "USER_TYPE_ID", "") === "")
			{
				fieldInfo["USER_TYPE_ID"] = "string";
			}

			if(BX.prop.getString(fieldInfo, "ENTITY_ID", "") === "")
			{
				fieldInfo["ENTITY_ID"] = this._fieldEntityId;
			}

			if(BX.prop.getInteger(fieldInfo, "ENTITY_VALUE_ID", 0) <= 0)
			{
				fieldInfo["ENTITY_VALUE_ID"] = this._entityId;
			}

			return(
				{
					name: name,
					originalTitle: BX.prop.getString(fieldInfo, "EDIT_FORM_LABEL", name),
					title: BX.prop.getString(fieldInfo, "EDIT_FORM_LABEL", name),
					type: "userField",
					required: BX.prop.getString(fieldInfo, "MANDATORY", "N") === "Y",
					data: { fieldInfo: fieldInfo }
				}
			);
		},
		createSchemeElement: function(fieldInfo)
		{
			return BX.Crm.EntitySchemeElement.create(this.prepareSchemeElementSettings(fieldInfo));
		},
		updateSchemeElement: function(element, fieldInfo)
		{
			var settings = this.prepareSchemeElementSettings(fieldInfo);
			settings["title"] = element.getTitle();
			element.mergeSettings(settings);
		},
		registerActiveField: function(field)
		{
			var name = field.getName();
			this._activeFields[name] = field;

			BX.Main.UF.EditManager.registerField(name, field.getFieldInfo(), field.getFieldNode());
		},
		unregisterActiveField: function(field)
		{
			var name = field.getName();
			if(this._activeFields.hasOwnProperty(name))
			{
				delete this._activeFields[name];
			}
			BX.Main.UF.EditManager.unRegisterField(name);
		},
		validate: function(result)
		{
			var names = [];
			for(var name in this._activeFields)
			{
				if(this._activeFields.hasOwnProperty(name))
				{
					names.push(name);
				}
			}

			if(names.length > 0)
			{
				this._validationResult = result;
				BX.Main.UF.EditManager.validate(
					names,
					BX.delegate(this.onValidationComplete, this)
				);
			}
			else
			{
				window.setTimeout(
					BX.delegate(
						function()
						{
							if(this._validationPromise)
							{
								this._validationPromise.fulfill();
								this._validationPromise = null;
							}
						},
						this
					),
					0
				);
			}

			this._validationPromise = new BX.Promise();
			return this._validationPromise;
		},
		onValidationComplete: function(results)
		{
			var name;
			//Reset previous messages
			for(name in this._activeFields)
			{
				if(this._activeFields.hasOwnProperty(name))
				{
					this._activeFields[name].clearError();
				}
			}

			//Add new messages
			for(name in results)
			{
				if(!results.hasOwnProperty(name))
				{
					continue;
				}

				if(this._activeFields.hasOwnProperty(name))
				{
					var field = this._activeFields[name];
					field.showError(results[name]);
					this._validationResult.addError(BX.Crm.EntityValidationError.create({ field: field }));
				}
			}

			if(this._validationPromise)
			{
				this._validationPromise.fulfill();
			}

			this._validationResult = null;
			this._validationPromise = null;
		}
	};
	if(typeof(BX.Crm.EntityUserFieldManager.messages) === "undefined")
	{
		BX.Crm.EntityUserFieldManager.messages = {};
	}
	BX.Crm.EntityUserFieldManager.items = {};
	BX.Crm.EntityUserFieldManager.create = function(id, settings)
	{
		var self = new BX.Crm.EntityUserFieldManager();
		self.initialize(id, settings);
		this.items[id] = self;
		return self;
	};
}

if(typeof BX.Crm.EntityUserFieldLayoutLoader === "undefined")
{
	BX.Crm.EntityUserFieldLayoutLoader = function()
	{
		this._id = "";
		this._settings = {};
		this._mode = BX.Crm.EntityEditorMode.view;
		this._enableBatchMode = true;
		this._owner = null;
		this._items = [];
	};
	BX.Crm.EntityUserFieldLayoutLoader.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._mode = BX.prop.getInteger(this._settings, "mode", BX.Crm.EntityEditorMode.view);
			this._enableBatchMode = BX.prop.getBoolean(this._settings, "enableBatchMode", true);
			this._owner = BX.prop.get(this._settings, "owner", null);
		},
		getId: function()
		{
			return this._id;
		},
		getOwner: function()
		{
			return this._owner;
		},
		addItem: function(item)
		{
			this._items.push(item);
		},
		run: function()
		{
			if(!this._enableBatchMode)
			{
				this.startRequest();
			}
		},
		runBatch: function()
		{
			if(this._enableBatchMode)
			{
				this.startRequest();
			}
		},
		startRequest: function()
		{
			if(this._items.length === 0)
			{
				return;
			}

			var fields = [];
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				if(BX.prop.getString(this._items[i], "name", "") !== "")
				{
					fields.push(BX.prop.getObject(this._items[i], "field", {}));
				}
			}

			if(fields.length === 0)
			{
				return;
			}

			var data = { "FIELDS": fields, "FORM": this._id, "CONTEXT": "CRM_EDITOR" };

			if(this._mode === BX.Crm.EntityEditorMode.view)
			{
				BX.Main.UF.Manager.getView(data, BX.delegate(this.onRequestComplete, this));
			}
			else
			{
				BX.Main.UF.Manager.getEdit(data, BX.delegate(this.onRequestComplete, this));
			}
		},
		onRequestComplete: function(result)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				var item = this._items[i];
				var name = BX.prop.getString(item, "name", "");
				var callback = BX.prop.getFunction(item, "callback", null);
				if(name !== "" && callback !== null)
				{
					callback(BX.prop.getObject(result, name, {}));
				}
			}
		}
	};
	BX.Crm.EntityUserFieldLayoutLoader.create = function(id, settings)
	{
		var self = new BX.Crm.EntityUserFieldLayoutLoader();
		self.initialize(id, settings);
		return self;
	};
}

//endregion

//region DUPLICATE MANAGER
if(typeof BX.Crm.EntityEditorDupManager === "undefined")
{
	BX.Crm.EntityEditorDupManager = function()
	{
		this._id = "";
		this._settings = null;
		this._groupInfos = null;

		this._isEnabled = false;
		this._serviceUrl = "";
		this._entityTypeName = "";
		this._form = null;
		this._controller = null;
	};
	BX.Crm.EntityEditorDupManager.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._isEnabled = BX.prop.getBoolean(this._settings, "enabled", "");
			if(!this._isEnabled)
			{
				return;
			}

			this._groupInfos = BX.prop.getObject(this._settings, "groups", {});

			this._serviceUrl = BX.prop.getString(this._settings, "serviceUrl", "");
			this._entityTypeName = BX.prop.getString(this._settings, "entityTypeName", "");
			this._form = BX.prop.get(this._settings, "form", null);

			this._controller = BX.CrmDupController.create(
				this._id,
				{
					serviceUrl: this._serviceUrl,
					entityTypeName: this._entityTypeName,
					form: this._form,
					searcSummaryPosition: "right"
				}
			);
		},
		isEnabled: function()
		{
			return this._isEnabled;
		},
		search: function()
		{
			this._controller.initialSearch();
		},
		getGroupInfo: function(groupId)
		{
			return this._groupInfos.hasOwnProperty(groupId) ? this._groupInfos[groupId] : null;
		},
		getGroup: function(groupId)
		{
			return this._isEnabled ? this._controller.getGroup(groupId) : null;
		},
		ensureGroupRegistered: function(groupId)
		{
			if(!this._isEnabled)
			{
				return null;
			}

			var group = this.getGroup(groupId);
			if(!group)
			{
				group = this._controller.registerGroup(groupId, this.getGroupInfo(groupId));
			}
			return group;
		},
		registerField: function(config)
		{
			if(!this._isEnabled)
			{
				return null;
			}

			var groupId = BX.prop.getString(config, "groupId", "");
			var field = BX.prop.getObject(config, "field", null);
			if(groupId === "" || !field)
			{
				return null;
			}

			var group = this.ensureGroupRegistered(groupId);
			if(!group)
			{
				return null;
			}

			return group.registerField(field);
		},
		unregisterField: function(config)
		{
			if(!this._isEnabled)
			{
				return;
			}

			var groupId = BX.prop.getString(config, "groupId", "");
			var field = BX.prop.getObject(config, "field", null);
			if(groupId === "" || !field)
			{
				return;
			}

			var group = this.getGroup(groupId);
			if(!group)
			{
				return;
			}

			group.unregisterField(field);
		}
	};
	BX.Crm.EntityEditorDupManager.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorDupManager();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region HELPERS
if(typeof BX.Crm.EditorTextHelper === "undefined")
{
	BX.Crm.EditorTextHelper = function()
	{
	};
	BX.Crm.EditorTextHelper.prototype =
	{
		selectAll: function(input)
		{
			if(!(BX.type.isElementNode(input) && input.value.length > 0))
			{
				return;
			}

			if(BX.type.isFunction(input.setSelectionRange))
			{
				input.setSelectionRange(0, input.value.length);
			}
			else
			{
				input.select();
			}
		},
		setPositionAtEnd: function(input)
		{
			if(BX.type.isElementNode(input) && input.value.length > 0)
			{
				BX.setCaretPosition(input, input.value.length);
			}
		}
	};
	BX.Crm.EditorTextHelper._current = null;
	BX.Crm.EditorTextHelper.getCurrent = function ()
	{
		if(!this._current)
		{
			this._current = new BX.Crm.EditorTextHelper();
		}
		return this._current;
	}
}
//endregion

//region CONTROL VISIBILITY POLICY
if(typeof BX.Crm.EntityEditorVisibilityPolicy === "undefined")
{
	BX.Crm.EntityEditorVisibilityPolicy =
	{
		always: 0,
		view: 1,
		edit: 2,
		parse: function(str)
		{
			str = str.toLowerCase();
			if(str === "view")
			{
				return this.view;
			}
			else if(str === "edit")
			{
				return this.edit;
			}
			return this.always;
		},
		checkVisibility: function(control)
		{
			var mode = control.getMode();
			var policy = control.getVisibilityPolicy();

			if(policy === this.view)
			{
				return mode === BX.Crm.EntityEditorMode.view;
			}
			else if(policy === this.edit)
			{
				return mode === BX.Crm.EntityEditorMode.edit;
			}
			return true;
		}
	};
}
//endregion

//region CONTROLS (SECTIONS, FIELDS)
if(typeof BX.Crm.EntityEditorControl === "undefined")
{
	BX.Crm.EntityEditorControl = function()
	{
		this._id = "";
		this._settings = {};

		this._editor = null;
		this._parent = null;

		this._mode = BX.Crm.EntityEditorMode.intermediate;
		this._modeOptions = BX.Crm.EntityEditorModeOptions.none;
		this._model = null;
		this._schemeElement = null;

		this._container = null;
		this._wrapper = null;
		this._dragButton = null;
		this._dragItem = null;
		this._hasLayout = false;
		this._isValidLayout = false;

		this._isVisible = true;
		this._isActive = false;
		this._isChanged = false;
		this._isSchemeChanged = false;
		this._changeHandler = BX.delegate(this.onChange, this);

		this._modeChangeNotifier = null;

		this._contextMenuButton = null;
		this._isContextMenuOpened = false;

		this._draggableContextId = "";
	};
	BX.Crm.EntityEditorControl.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._editor = BX.prop.get(this._settings, "editor", null);
			this._parent = BX.prop.get(this._settings, "parent", null);

			this._model = BX.prop.get(this._settings, "model", null);

			this._schemeElement = BX.prop.get(this._settings, "schemeElement", null);
			this._container = BX.prop.getElementNode(this._settings, "container", null);

			var mode = BX.prop.getInteger(this._settings, "mode", BX.Crm.EntityEditorMode.view);
			if(mode === BX.Crm.EntityEditorMode.edit && this._schemeElement && !this._schemeElement.isEditable())
			{
				mode = BX.Crm.EntityEditorMode.view;
			}
			this._mode = mode;

			this.doInitialize();
			this.bindModel();
		},
		doInitialize: function()
		{
		},
		bindModel: function()
		{
		},
		unbindModel: function()
		{
		},
		getMessage: function(name)
		{
			var m = BX.Crm.EntityEditorControl.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getId: function()
		{
			return this._id;
		},
		getEditor: function()
		{
			return this._editor;
		},
		setEditor: function(editor)
		{
			this._editor = editor;
		},
		getParentPosition: function()
		{
			var parent = this.getParent();
			return (parent ? parent.getPosition() : { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
		},
		getParent: function()
		{
			return this._parent;
		},
		setParent: function(parent)
		{
			this._parent = parent;
		},
		getSiblingByIndex: function (index)
		{
			return this._editor ? this._editor.getControlByIndex(index) : null;
		},
		getChildCount: function()
		{
			return 0;
		},
		getChildById: function(childId)
		{
			return null;
		},
		editChild: function(child)
		{
		},
		removeChild: function(child)
		{
		},
		getChildren: function()
		{
			return [];
		},
		editChildConfiguration: function(child)
		{
		},
		areAttributesEnabled: function()
		{
			return this._schemeElement && this._schemeElement.areAttributesEnabled();
		},
		getType: function()
		{
			return this._schemeElement ? this._schemeElement.getType() : "";
		},
		getName: function()
		{
			return this._schemeElement ? this._schemeElement.getName() : "";
		},
		getTitle: function()
		{
			if(!this._schemeElement)
			{
				return "";
			}

			var title = this._schemeElement.getTitle();
			if(title === "")
			{
				title = this._schemeElement.getName();
			}

			return title;
		},
		setTitle: function(title)
		{
			if(!this._schemeElement)
			{
				return;
			}

			this._schemeElement.setTitle(title);
			this.refreshTitleLayout();
		},
		getOptionFlags: function()
		{
			return(this._schemeElement
				? this._schemeElement.getOptionFlags()
				: BX.Crm.EntityEditorControlOptions.none
			);
		},
		setOptionFlags: function(flags)
		{
			if(this._schemeElement)
			{
				this._schemeElement.setOptionFlags(flags);
			}
		},
		toggleOptionFlag: function(flag)
		{
			var flags = this.getOptionFlags();
			if(BX.Crm.EntityEditorControlOptions.check(flags, flag))
			{
				flags &= ~flag;
			}
			else
			{
				flags |= flag;
			}
			this.setOptionFlags(flags);
		},
		checkOptionFlag: function(flag)
		{
			return BX.Crm.EntityEditorControlOptions.check(this.getOptionFlags(), flag);
		},
		getData: function()
		{
			return this._schemeElement ? this._schemeElement.getData() : {};
		},
		isVisible: function()
		{
			if(!this._isVisible)
			{
				return false;
			}

			if(this.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways))
			{
				return true;
			}
			return BX.Crm.EntityEditorVisibilityPolicy.checkVisibility(this);
		},
		setVisible: function(visible)
		{
			visible = !!visible;
			if(this._isVisible === visible)
			{
				return;
			}

			this._isVisible = visible;
			if(this._hasLayout)
			{
				this._wrapper.style.display = this._isVisible ? "" : "none";
			}
		},
		isActive: function()
		{
			return this._isActive;
		},
		setActive: function(active)
		{
			active = !!active;
			if(this._isActive === active)
			{
				return;
			}

			this._isActive = active;
			this.doSetActive();
		},
		doSetActive: function()
		{
		},
		isEditable: function()
		{
			return this._schemeElement && this._schemeElement.isEditable();
		},
		isRequired: function()
		{
			return this._schemeElement && this._schemeElement.isRequired();
		},
		isRequiredConditionally: function()
		{
			return this._schemeElement && this._schemeElement.isRequiredConditionally();
		},
		isHeading: function()
		{
			return this._schemeElement && this._schemeElement.isHeading();
		},
		getCreationPlaceholder: function()
		{
			return this._schemeElement ? this._schemeElement.getCreationPlaceholder() : "";
		},
		isReadOnly: function()
		{
			return this._editor && this._editor.isReadOnly();
		},
		getVisibilityPolicy: function()
		{
			if(this._editor && !this._editor.isVisibilityPolicyEnabled())
			{
				return BX.Crm.EntityEditorVisibilityPolicy.always;
			}
			return this._schemeElement && this._schemeElement.getVisibilityPolicy();
		},
		getEditPriority: function()
		{
			return BX.Crm.EntityEditorPriority.normal;
		},
		getPosition: function()
		{
			return BX.pos(this._wrapper);
		},
		focus: function()
		{
		},
		save: function()
		{
		},
		validate: function(result)
		{
			return true;
		},
		rollback: function()
		{
		},
		isDragEnabled: function()
		{
			if(!this._editor)
			{
				return false;
			}

			if(!this._editor.canChangeScheme())
			{
				return false;
			}

			return BX.prop.getBoolean(
				BX.prop.getObject(
					this._editor.getDragConfig(this.getDragObjectType()),
					"modes",
					{}
				),
				BX.Crm.EntityEditorMode.getName(this._mode),
				false
			);
		},
		isContextMenuEnabled: function()
		{
			if(this._editor && !(this._editor.isFieldsContextMenuEnabled() && this._editor.canChangeScheme()))
			{
				return false;
			}

			return this._schemeElement.isContextMenuEnabled();
		},
		getMode: function()
		{
			return this._mode;
		},
		setMode: function(mode, options)
		{
			if(!this.canChangeMode(mode))
			{
				return;
			}

			var modeOptions = BX.prop.getInteger(options, "options", BX.Crm.EntityEditorModeOptions.none);
			if(this._mode === mode && this._modeOptions === modeOptions)
			{
				return;
			}

			this.onBeforeModeChange();

			this._mode = mode;
			this._modeOptions = modeOptions;
			this.doSetMode(this._mode);

			this.onAfterModeChange();

			if(BX.prop.getBoolean(options, "notify", false))
			{
				if(this._parent)
				{
					this._parent.processChildControlModeChange(this);
				}
				else if(this._editor)
				{
					this._editor.processControlModeChange(this);
				}
			}

			this._isSchemeChanged = false;
			this._isChanged = false;

			if(this._hasLayout)
			{
				this._isValidLayout = false;
			}
		},
		getModeChangeNotifier: function()
		{
			if(!this._modeChangeNotifier)
			{
				this._modeChangeNotifier = BX.CrmNotifier.create(this);
			}
			return this._modeChangeNotifier;
		},
		onBeforeModeChange: function()
		{
		},
		doSetMode: function(mode)
		{
		},
		onAfterModeChange: function()
		{
			if(this._modeChangeNotifier)
			{
				this._modeChangeNotifier.notify();
			}
		},
		canChangeMode: function(mode)
		{
			if(mode === BX.Crm.EntityEditorMode.edit)
			{
				return this.isEditable();
			}
			return true;
		},
		isModeToggleEnabled: function()
		{
			return this._editor.isModeToggleEnabled();
		},
		toggleMode: function(notify, options)
		{
			if(!this.isModeToggleEnabled())
			{
				return false;
			}

			this.setMode(
				this._mode === BX.Crm.EntityEditorMode.view
					? BX.Crm.EntityEditorMode.edit : BX.Crm.EntityEditorMode.view,
				{ notify: notify }
			);

			if(BX.prop.getBoolean(options, "refreshLayout", true))
			{
				this.refreshLayout();
			}
			return true;
		},
		isEditInViewEnabled: function()
		{
			//"Edit in View" - control value may be changed in view mode
			return(this._editor
				&& this._editor.isEditInViewEnabled()
				&& this.getDataBooleanParam("enableEditInView", false)
			);
		},
		isSingleEditEnabled: function()
		{
			//"Single Edit" - control may be switched to edit mode independently of parent control (section)
			return(
				this.isModeToggleEnabled()
				&& this.isEditable()
				&& !this.getDataBooleanParam("enableEditInView", false)
				&& this.getDataBooleanParam("enableSingleEdit", true)
			);
		},
		isInSingleEditMode: function()
		{
			if(!this.isInEditMode())
			{
				return false;
			}

			return(this.checkModeOption(BX.Crm.EntityEditorModeOptions.exclusive)
				|| this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual)
			);
		},
		isInEditMode: function()
		{
			return this._mode === BX.Crm.EntityEditorMode.edit;
		},
		isInViewMode: function()
		{
			return this._mode === BX.Crm.EntityEditorMode.view;
		},
		checkModeOption: function(option)
		{
			return BX.Crm.EntityEditorModeOptions.check(this._modeOptions, option);
		},
		getContextId: function()
		{
			return this._editor ? this._editor.getContextId() : '';
		},
		getExternalContextId: function()
		{
			return this._editor ? this._editor.getExternalContextId() : '';
		},
		processAvailableSchemeElementsChange: function()
		{
		},
		processChildControlModeChange: function(control)
		{
		},
		processChildControlChange: function(control, params)
		{
		},
		isChanged: function()
		{
			return this._isChanged;
		},
		markAsChanged: function(params)
		{
			if(typeof(params) === "undefined")
			{
				params = {};
			}

			var control = BX.prop.get(params, "control", null);
			if(!(control && control instanceof BX.Crm.EntityEditorControl))
			{
				control = params["control"] = this;
			}

			if(!control.isInEditMode())
			{
				return;
			}

			if(!this._isChanged)
			{
				this._isChanged = true;
			}

			this.notifyChanged(params);
		},
		isSchemeChanged: function()
		{
			return this._isSchemeChanged;
		},
		markSchemeAsChanged: function()
		{
			if(this._isSchemeChanged)
			{
				return;
			}

			this._isSchemeChanged = true;
		},
		saveScheme: function()
		{
			if(!this._isSchemeChanged)
			{
				return;
			}

			this.commitSchemeChanges();
			return this._editor.saveScheme();
		},
		commitSchemeChanges: function()
		{
			if(!this._isSchemeChanged)
			{
				return;
			}

			this._editor.updateSchemeElement(this._schemeElement);
			this._isSchemeChanged = false;
		},
		getRootContainer: function()
		{
			return this._editor ? this._editor.getContainer() : null;
		},
		getRootContainerPosition: function()
		{
			return BX.pos(this.getRootContainer());
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function (container)
		{
			this._container = container;
			if(this._hasLayout)
			{
				this._hasLayout = false;
			}
		},
		getWrapper: function()
		{
			return this._wrapper;
		},
		enablePointerEvents: function(enable)
		{
			if(this._wrapper)
			{
				this._wrapper.style.pointerEvents = enable ? "" : "none";
			}
		},
		getModel: function()
		{
			return this._model;
		},
		getSchemeElement: function()
		{
			return this._schemeElement;
		},
		hasScheme: function()
		{
			return !!this._schemeElement;
		},
		getDataBooleanParam: function(name, defaultval)
		{
			return(this._schemeElement
				? this._schemeElement.getDataBooleanParam(name, defaultval)
				: defaultval
			);
		},
		hasLayout: function()
		{
			return this._hasLayout;
		},
		layout: function(options)
		{
		},
		registerLayout:  function(options)
		{
			if(!this._wrapper)
			{
				return;
			}

			this._wrapper.setAttribute("data-cid", this.getId());

			//HACK: Fix positions of context menu and drag button for readonly fields in editing section
			if(this.isInViewMode() && this._parent && this._parent.isInEditMode())
			{
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-readonly");
			}
			else
			{
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-field-readonly");
			}

			if(typeof options === "undefined")
			{
				options = {};
			}

			if(!BX.prop.getBoolean(options, "preservePosision", false))
			{
				var anchor = BX.prop.getElementNode(options, "anchor", null);
				if (anchor)
				{
					BX.addClass(this._wrapper, "crm-entity-widget-content-hide");
					this._container.insertBefore(this._wrapper, anchor);
					setTimeout(BX.delegate(function ()
					{
						BX.removeClass(this._wrapper, "crm-entity-widget-content-hide");
						BX.addClass(this._wrapper, "crm-entity-widget-content-show");
					}, this), 1);
					setTimeout(BX.delegate(function ()
					{
						BX.removeClass(this._wrapper, "crm-entity-widget-content-show");
					}, this), 310);
				}
				else
				{
					this._container.appendChild(this._wrapper);
				}
			}

			this._isValidLayout = true;
			this.doRegisterLayout();
		},
		doRegisterLayout: function()
		{
		},
		refreshLayout: function(options)
		{
			if(!this._hasLayout)
			{
				return;
			}

			this.closeContextMenu();

			this.clearLayout({ preservePosision: true });
			if(!BX.type.isPlainObject(options))
			{
				options = {};
			}

			if(BX.prop.getBoolean(options, "reset", false))
			{
				this.reset();
			}

			options["preservePosision"] = true;
			this.layout(options);
		},
		clearLayout: function(options)
		{
		},
		refreshTitleLayout: function()
		{
		},
		releaseLayout: function ()
		{
			this._wrapper = null;
		},
		release: function()
		{
		},
		reset: function()
		{
		},
		hide: function()
		{
			if(this.isRequired() || this.isRequiredConditionally())
			{
				return;
			}

			if(this._parent)
			{
				BX.addClass(this._wrapper, "crm-entity-widget-content-hide");
				setTimeout(BX.delegate(function ()
				{
					this._parent.removeChild(this);
				}, this), 350);
			}
			else
			{
				this.clearLayout();
			}
		},
		showMessageDialog: function(id, title, content)
		{
			if(this._editor)
			{
				this._editor.showMessageDialog(id, title, content);
			}
		},
		prepareSaveData: function(data)
		{
		},
		onBeforeSubmit: function()
		{
		},
		onHideButtonClick: function(e)
		{
			this.hide();
		},
		onContextButtonClick: function(e)
		{
			if(!this._isContextMenuOpened)
			{
				this.openContextMenu();
			}
			else
			{
				this.closeContextMenu();
			}
		},
		openContextMenu: function()
		{
			if(this._isContextMenuOpened)
			{
				return;
			}

			var menu = this.prepareContextMenuItems();
			if(BX.type.isArray(menu) && menu.length > 0)
			{
				var handler = BX.delegate( this.onContextMenuItemSelect, this);
				for(var i = 0, length = menu.length; i < length; i++)
				{
					if(typeof menu[i]["onclick"] === "undefined")
					{
						menu[i]["onclick"] = handler;
					}
				}
				BX.PopupMenu.show(
					this._id,
					this._contextMenuButton,
					menu,
					{
						angle: false,
						events:
							{
								onPopupShow: BX.delegate(this.onContextMenuShow, this),
								onPopupClose: BX.delegate(this.onContextMenuClose, this)
							}
					}
				);
			}
		},
		prepareContextMenuItems: function()
		{
			return [];
		},
		processContextMenuCommand: function(e, command)
		{
		},
		closeContextMenu: function()
		{
			var menu = BX.PopupMenu.getMenuById(this._id);
			if(menu)
			{
				menu.popupWindow.close();
			}
		},
		onContextMenuShow: function()
		{
			this._isContextMenuOpened = true;
		},
		onContextMenuClose: function()
		{
			BX.PopupMenu.destroy(this._id);
			this._isContextMenuOpened = false;
		},
		onContextMenuItemSelect: function(e, item)
		{
			this.processContextMenuCommand(e, BX.prop.getString(item, "value"));
		},
		onChange: function(e)
		{
			this.markAsChanged();
		},
		notifyChanged: function(params)
		{
			if(typeof(params) === "undefined")
			{
				params = {};
			}

			if(this._parent)
			{
				this._parent.processChildControlChange(this, params);
			}
			else if(this._editor)
			{
				this._editor.processControlChange(this, params);
			}
		},
		getDragObjectType: function()
		{
			return BX.Crm.EditorDragObjectType.intermediate;
		},
		getChildDragObjectType: function()
		{
			return BX.Crm.EditorDragObjectType.intermediate;
		},
		getDragScope: function()
		{
			if(this._parent)
			{
				return this._parent.getChildDragScope();
			}

			if(!this._editor)
			{
				return BX.Crm.EditorDragScope.getDefault();
			}

			return BX.prop.getInteger(
				this._editor.getDragConfig(this.getDragObjectType()),
				"scope",
				BX.Crm.EditorDragScope.getDefault()
			);
		},
		getChildDragScope: function()
		{
			if(!this._editor)
			{
				return BX.Crm.EditorDragScope.getDefault();
			}

			return BX.prop.getInteger(
				this._editor.getDragConfig(this.getChildDragObjectType()),
				"scope",
				BX.Crm.EditorDragScope.getDefault()
			);
		},
		getDraggableContextId: function()
		{
			return this._draggableContextId;
		},
		setDraggableContextId: function(contextId)
		{
			this._draggableContextId = contextId;
		},
		createDragButton: function()
		{
			return this._dragButton;
		},
		createHideButton: function()
		{
			var enabled = !this.isRequired() && !this.isRequiredConditionally();
			var button = BX.create(
				"div",
				{
					props:
					{
						className: "crm-entity-widget-content-block-hide-btn",
						title: this.getHideButtonHint(enabled)
					}
				}
			);

			if(enabled)
			{
				BX.bind(button, "click", BX.delegate(this.onHideButtonClick, this));
			}
			return button;
		},
		createContextMenuButton: function()
		{
			this._contextMenuButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-context-menu" },
					events: { click: BX.delegate(this.onContextButtonClick, this) }
				}
			);

			return this._contextMenuButton;
		},
		createGhostNode:function()
		{
			return null;
		},
		getHideButtonHint: function(enabled)
		{
			return "";
		},
		isWaitingForInput: function()
		{
			return false;
		}
	};
	if(typeof(BX.Crm.EntityEditorControl.messages) === "undefined")
	{
		BX.Crm.EntityEditorControl.messages = {};
	}
}

if(typeof BX.Crm.EntityEditorField === "undefined")
{
	BX.Crm.EntityEditorField = function()
	{
		BX.Crm.EntityEditorField.superclass.constructor.apply(this);
		this._titleWrapper = null;

		this._singleEditButton = null;
		this._singleEditButtonHandler = BX.delegate(this.onSingleEditBtnClick, this);
		this._singleEditController = null;
		this._singleEditTimeoutHandle = 0;

		this._viewController = null;

		this._validators = null;
		this._hasError = false;
		this._errorContainer = null;

		this._layoutAttributes = null;
		this._spotlight = null;

		this._dragObjectType = BX.Crm.EditorDragObjectType.field;
	};
	BX.extend(BX.Crm.EntityEditorField, BX.Crm.EntityEditorControl);
	BX.Crm.EntityEditorField.prototype.isNewEntity = function()
	{
		return this._editor && this._editor.isNew();
	};
	BX.Crm.EntityEditorField.prototype.configure = function()
	{
		if(this._parent)
		{
			this._parent.editChildConfiguration(this);
		}
	};
	BX.Crm.EntityEditorField.prototype.hasAttributeConfiguration = function(attributeTypeId)
	{
		return this._schemeElement.hasAttributeConfiguration(attributeTypeId);
	};
	BX.Crm.EntityEditorField.prototype.getAttributeConfiguration = function(attributeTypeId)
	{
		return this._schemeElement.getAttributeConfiguration(attributeTypeId);
	};
	BX.Crm.EntityEditorField.prototype.setAttributeConfiguration = function(configuration)
	{
		return this._schemeElement.setAttributeConfiguration(configuration);
	};
	BX.Crm.EntityEditorField.prototype.removeAttributeConfiguration = function(attributeTypeId)
	{
		return this._schemeElement.removeAttributeConfiguration(attributeTypeId);
	};
	BX.Crm.EntityEditorField.prototype.getDuplicateControlConfig = function()
	{
		return this._schemeElement ? this._schemeElement.getDataObjectParam("duplicateControl", null) : null;
	};
	BX.Crm.EntityEditorField.prototype.markAsChanged = function(params)
	{
		BX.Crm.EntityEditorField.superclass.markAsChanged.apply(this, arguments);
		if(this.hasError())
		{
			this.clearError();
		}

		var validators = this.getValidators();
		for(var i = 0, length = validators.length; i < length; i++)
		{
			validators[i].processFieldChange(this);
		}
	};
	BX.Crm.EntityEditorField.prototype.bindModel = function()
	{
		this._model.addChangeListener(BX.delegate(this.onModelChange, this));
		this._model.addLockListener(BX.delegate(this.onModelLock, this));
	};
	BX.Crm.EntityEditorField.prototype.onBeforeModeChange = function()
	{
		//Enable animation if it is going to view mode
		this._layoutAttributes = null;
		if(this.isInEditMode())
		{
			this._layoutAttributes = { animate: "show" };
		}
	};
	BX.Crm.EntityEditorField.prototype.onModelChange = function(sender, params)
	{
		this.processModelChange(params);
	};
	BX.Crm.EntityEditorField.prototype.onModelLock = function(sender, params)
	{
		this.processModelLock(params);
	};
	BX.Crm.EntityEditorField.prototype.processModelChange = function(params)
	{
	};
	BX.Crm.EntityEditorField.prototype.processModelLock = function(params)
	{
	};
	BX.Crm.EntityEditorField.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorField.messages;
		return (m.hasOwnProperty(name)
			? m[name]
			: BX.Crm.EntityEditorField.superclass.getMessage.apply(this, arguments)
		);
	};
	BX.Crm.EntityEditorField.prototype.hasContentWrapper = function()
	{
		return this.getContentWrapper() !== null;
	};
	BX.Crm.EntityEditorField.prototype.getContentWrapper = function()
	{
		return null;
	};
	BX.Crm.EntityEditorField.prototype.getHideButtonHint = function(enabled)
	{
		return this.getMessage(
			enabled ? "hideButtonHint" : "hideButtonDisabledHint"
		);
	};
	BX.Crm.EntityEditorField.prototype.getEditButton = function()
	{
		return this._singleEditButton;
	};
	BX.Crm.EntityEditorField.prototype.ensureWrapperCreated = function(params)
	{
		if(!this._wrapper)
		{
			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block" } });
		}

		this.createAdditionalWrapperBlock();

		var classNames = BX.prop.getArray(params, "classNames", []);
		for(var i = 0, length = classNames.length;  i < length; i++)
		{
			BX.addClass(this._wrapper, classNames[i]);
		}
		return this._wrapper;
	};
	BX.Crm.EntityEditorField.prototype.createAdditionalWrapperBlock = function()
	{
		if(!this._wrapper)
		{
			return;
		}

		var additionalBlock = BX.create("div", {
			props: { className: "crm-entity-widget-before-action" },
			attrs: { "data-field-tag": this.getId() }
		});

		this._wrapper.appendChild(additionalBlock);

	};
	BX.Crm.EntityEditorField.prototype.adjustWrapper = function()
	{
		if(!this._wrapper)
		{
			return;
		}

		if(this.isInEditMode()
			&& (this.checkModeOption(BX.Crm.EntityEditorModeOptions.exclusive)
				|| this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual)
			)
		)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-edit");
		}
		else
		{
			BX.removeClass(this._wrapper, "crm-entity-widget-content-block-edit");
		}

		//region Applying layout attributes
		/*
		for(var i = this._wrapper.attributes.length - 1; i >= 0; i--)
		{
			this._wrapper.removeAttribute(this._wrapper.attributes[i].name);
		}
		*/
		if(this._layoutAttributes)
		{
			for(var key in this._layoutAttributes)
			{
				if(this._layoutAttributes.hasOwnProperty(key))
				{
					this._wrapper.setAttribute("data-" + key, this._layoutAttributes[key]);
				}
			}
			this._layoutAttributes = null;
		}
		//endregion
	};
	BX.Crm.EntityEditorField.prototype.createTitleNode = function(title)
	{
		this._titleWrapper = BX.create(
			"div",
			{
				attrs: { className: "crm-entity-widget-content-block-title" }
			}
		);

		this.prepareTitleLayout(BX.type.isNotEmptyString(title) ? title : this.getTitle());
		return this._titleWrapper;
	};
	BX.Crm.EntityEditorField.prototype.prepareTitleLayout = function(title)
	{
		if(!this._titleWrapper)
		{
			return;
		}

		var titleNode = BX.create("span",
			{ attrs: { className: "crm-entity-widget-content-block-title-text" }, text: title }
		);

		var marker = this.createTitleMarker();
		if(marker)
		{
			titleNode.appendChild(marker);
		}
		this._titleWrapper.appendChild(titleNode);

		var actionControls = this.createTitleActionControls();
		if(actionControls.length > 0)
		{
			var actionWrapper = BX.create("span", { attrs: { className: "crm-entity-widget-content-block-title-actions" } });
			this._titleWrapper.appendChild(actionWrapper);

			for(var i = 0, length = actionControls.length; i < length; i++)
			{
				actionWrapper.appendChild(actionControls[i]);
			}
		}

		/*
		var editButton = this.createEditButton();
		if(editButton)
		{
			this._titleWrapper.appendChild(editButton);
		}
		*/
	};
	BX.Crm.EntityEditorField.prototype.refreshTitleLayout = function()
	{
		if(!this._titleWrapper)
		{
			return;
		}

		BX.cleanNode(this._titleWrapper);
		this.prepareTitleLayout(this.getTitle());
	};
	BX.Crm.EntityEditorField.prototype.createTitleMarker = function()
	{
		if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			return null;
		}

		if(this.isRequired())
		{
			return BX.create("span", { style: { color: "#f00", verticalAlign: "super" }, text: "*" });
		}
		else if(this.isRequiredConditionally())
		{
			return BX.create("span", { text: "*" });
		}
		return null;
	};
	BX.Crm.EntityEditorField.prototype.createEditButton = function()
	{
		if(!(this.isInViewMode() && this.isSingleEditEnabled()))
		{
			return null;
		}

		if(!this._singleEditButton)
		{
			this._singleEditButton = BX.create(
				"span",
				{
					props: { className: "crm-entity-card-widget-title-edit-icon" }
				}
			);
		}
		return this._singleEditButton;
	};
	BX.Crm.EntityEditorField.prototype.createTitleActionControls = function()
	{
		return [];
	};
	BX.Crm.EntityEditorField.prototype.createDragButton = function()
	{
		if(!this._dragButton)
		{
			this._dragButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-draggable-btn-container" },
					children:
						[
							BX.create(
								"div",
								{
									props: { className: "crm-entity-widget-content-block-draggable-btn" }
								}
							)
						]
				}
			);
		}
		return this._dragButton;
	};
	BX.Crm.EntityEditorField.prototype.createGhostNode = function()
	{
		if(!this._wrapper)
		{
			return null;
		}

		var pos = BX.pos(this._wrapper);
		var node = this._wrapper.cloneNode(true);
		BX.addClass(node, "crm-entity-widget-content-block-drag");
		node.style.width = pos.width + "px";
		node.style.height = pos.height + "px";
		return node;
	};
	BX.Crm.EntityEditorField.prototype.clearLayout = function(options)
	{
		if(!this._hasLayout)
		{
			return;
		}

		this.releaseLightingAbilities();

		BX.Crm.EntityEditorField.superclass.clearLayout.apply(this, arguments);

		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		this.releaseDragDropAbilities();
		this.releaseSwitchingAbilities();

		if(!BX.prop.getBoolean(options, "preservePosision", false))
		{
			this._wrapper = BX.remove(this._wrapper);
		}
		else
		{
			BX.removeClass(this._wrapper, "crm-entity-widget-content-block-click-editable");
			BX.removeClass(this._wrapper, "crm-entity-widget-content-block-click-empty");
			this._wrapper = BX.cleanNode(this._wrapper);
			if(this.hasError())
			{
				this.clearError();
			}
		}

		if(this._singleEditButton)
		{
			this._singleEditButton = null;
		}

		this.doClearLayout(options);

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorField.prototype.doClearLayout = function(options)
	{
	};
	BX.Crm.EntityEditorField.prototype.registerLayout = function(options)
	{
		var isVisible = this.isVisible();
		var isNeedToDisplay = this.isNeedToDisplay();

		this._wrapper.style.display = (isVisible && isNeedToDisplay) ? "" : "none";

		this.initializeSwitchingAbilities();
		if(this.isInEditMode() && this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual))
		{
			window.setTimeout(BX.delegate(this.focus, this), 0);
		}
		BX.Crm.EntityEditorField.superclass.registerLayout.apply(this, arguments);

		var lighting = BX.prop.getObject(options, "lighting", null);
		if(lighting)
		{
			window.setTimeout(
				function(){ this.initializeLightingAbilities(lighting); }.bind(this),
				1000
			)
		}

		if(!isNeedToDisplay && BX.prop.getBoolean(options, "notifyIfNotDisplayed", false))
		{
			BX.UI.Notification.Center.notify(
				{
					content: this.getMessage("hiddenInViewMode").replace(/#TITLE#/gi, this.getTitle()),
					position: "top-center",
					autoHideDelay: 5000
				}
			);
		}
	};
	BX.Crm.EntityEditorField.prototype.raiseLayoutEvent = function()
	{
		BX.onCustomEvent(window, "BX.Crm.EntityEditorField:onLayout", [ this ]);
	};
	BX.Crm.EntityEditorField.prototype.hasContentToDisplay = function()
	{
		return this.hasValue();
	};
	BX.Crm.EntityEditorField.prototype.isNeedToDisplay = function(options)
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit
			|| this.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways)
		)
		{
			return true;
		}

		if(this._editor && BX.prop.getBoolean(options, "enableLayoutResolvers", true))
		{
			return BX.prop.getBoolean(
				this._editor.prepareFieldLayoutOptions(this),
				"isNeedToDisplay",
				true
			);
		}

		return this.hasContentToDisplay();
	};
	BX.Crm.EntityEditorField.prototype.isWaitingForInput = function()
	{
		return this.isInEditMode() && this.isRequired() && !this.hasValue();
	};
	BX.Crm.EntityEditorField.prototype.hide = function()
	{
		if(!(this.isRequired() || this.isRequiredConditionally()))
		{
			BX.Crm.EntityEditorField.superclass.hide.apply(this, arguments);
		}
		else
		{
			this.showMessageDialog(
				"operationDenied",
				this.getMessage("hideDeniedDlgTitle"),
				this.getMessage("hideDeniedDlgContent")
			);
		}
	};
	//region Value
	BX.Crm.EntityEditorField.prototype.getEditPriority = function()
	{
		var hasValue = this.hasValue();
		if(!hasValue && (this.isRequired() || this.isRequiredConditionally()))
		{
			return BX.Crm.EntityEditorPriority.high;
		}

		if(!this._editor.isNew())
		{
			return BX.Crm.EntityEditorPriority.normal;
		}

		return hasValue ? BX.Crm.EntityEditorPriority.high : this.doGetEditPriority();
	};
	BX.Crm.EntityEditorField.prototype.doGetEditPriority = function()
	{
		return BX.Crm.EntityEditorPriority.normal;
	};
	BX.Crm.EntityEditorField.prototype.checkIfNotEmpty = function(value)
	{
		if(BX.type.isString(value))
		{
			return value.trim() !== "";
		}
		return (value !== null && value !== undefined);
	};
	BX.Crm.EntityEditorField.prototype.setupFromModel = function(model, options)
	{
		if(!model)
		{
			model = this._model;
		}

		if(!model)
		{
			return;
		}

		var data = this.getRelatedModelData(model);
		this._model.updateData(data, options);
	};
	BX.Crm.EntityEditorField.prototype.getRelatedModelData = function(model)
	{
		if(!model)
		{
			model = this._model;
		}

		if(!model)
		{
			return {};
		}

		var data = {};
		var keys = this.getRelatedDataKeys();
		for(var i = 0, length = keys.length; i < length; i++)
		{
			var key = keys[i];
			if(key !== "")
			{
				data[key] = model.getField(key, null);
			}
		}
		return data;
	};
	BX.Crm.EntityEditorField.prototype.getRelatedDataKeys = function()
	{
		return [this.getDataKey()];
	};
	BX.Crm.EntityEditorField.prototype.hasValue = function()
	{
		return this.checkIfNotEmpty(this.getValue());
	};
	BX.Crm.EntityEditorField.prototype.getValue = function(defaultValue)
	{
		if(!this._model)
		{
			return "";
		}

		return(
			this._model.getField(
				this.getDataKey(),
				(defaultValue !== undefined ? defaultValue : "")
			)
		);
	};
	BX.Crm.EntityEditorField.prototype.getStringValue = function(defaultValue)
	{
		return this._model ? this._model.getStringField(this.getName(), defaultValue) : "";
	};
	BX.Crm.EntityEditorField.prototype.getRuntimeValue = function()
	{
		return "";
	};
	BX.Crm.EntityEditorField.prototype.getDataKey = function()
	{
		return this.getName();
	};
	BX.Crm.EntityEditorField.prototype.prepareSaveData = function(data)
	{
		data[this.getDataKey()] = this.getValue();
	};
	//endregion
	//region Validators
	BX.Crm.EntityEditorField.prototype.findValidatorIndex = function(validator)
	{
		if(!this._validators)
		{
			return -1;
		}

		for(var i = 0, length = this._validators.length; i < length; i++)
		{
			if(this._validators[i] === validator)
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorField.prototype.addValidator = function(validator)
	{
		if(validator && this.findValidatorIndex(validator) < 0)
		{
			if(!this._validators)
			{
				this._validators = [];
			}
			this._validators.push(validator);
		}
	};
	BX.Crm.EntityEditorField.prototype.removeValidator = function(validator)
	{
		if(!this._validators || !validator)
		{
			return;
		}

		var index = this.findValidatorIndex(validator);
		if(index >= 0)
		{
			this._validators.splice(index, 1);
		}
	};
	BX.Crm.EntityEditorField.prototype.getValidators = function()
	{
		return this._validators ? this._validators : [];
	};
	BX.Crm.EntityEditorField.prototype.hasValidators = function()
	{
		return this._validators && this._validators.length > 0;
	};
	BX.Crm.EntityEditorField.prototype.executeValidators = function(result)
	{
		if(!this._validators)
		{
			return true;
		}

		var isValid = true;
		for(var i = 0, length = this._validators.length; i < length; i++)
		{
			if(!this._validators[i].validate(result))
			{
				isValid = false;
			}
		}
		return isValid;
	};
	//endregion
	BX.Crm.EntityEditorField.prototype.hasError =  function()
	{
		return this._hasError;
	};
	BX.Crm.EntityEditorField.prototype.showError =  function(error, anchor)
	{
		if(!this._errorContainer)
		{
			this._errorContainer = BX.create(
				"div",
				{ attrs: { className: "crm-entity-widget-content-error-text" } }
			);
		}

		this._errorContainer.innerHTML = error;
		this._wrapper.appendChild(this._errorContainer);
		BX.addClass(this._wrapper, "crm-entity-widget-content-error");
		this._hasError = true;
	};
	BX.Crm.EntityEditorField.prototype.showRequiredFieldError =  function(anchor)
	{
		this.showError(this.getMessage("requiredFieldError"), anchor);
	};
	BX.Crm.EntityEditorField.prototype.clearError =  function()
	{
		if(!this._hasError)
		{
			return;
		}

		if(this._errorContainer && this._errorContainer.parentNode)
		{
			this._errorContainer.parentNode.removeChild(this._errorContainer);
		}
		BX.removeClass(this._wrapper, "crm-entity-widget-content-error");
		this._hasError = false;
	};
	BX.Crm.EntityEditorField.prototype.scrollAnimate = function()
	{
		var doc = BX.GetDocElement(document);
		var anchor = this._wrapper;
		window.setTimeout(
			function()
			{
				(new BX.easing(
						{
							duration : 300,
							start : { position: doc.scrollTop },
							finish: { position: BX.pos(anchor).top - 10 },
							step: function(state)
							{
								doc.scrollTop = state.position;
							}
						}
					)
				).animate();
			},
			0
		);
	};
	BX.Crm.EntityEditorField.prototype.setDragObjectType = function(type)
	{
		this._dragObjectType = type;
	};
	BX.Crm.EntityEditorField.prototype.getDragObjectType = function()
	{
		return this._dragObjectType;
	};
	BX.Crm.EntityEditorField.prototype.initializeDragDropAbilities = function()
	{
		if(this._dragItem)
		{
			return;
		}

		this._dragItem = BX.Crm.EditorDragItemController.create(
			"field_" +  this.getId(),
			{
				charge: BX.Crm.EditorFieldDragItem.create(
					{
						control: this,
						contextId: this._draggableContextId,
						scope: this.getDragScope()
					}
				),
				node: this.createDragButton(),
				showControlInDragMode: false,
				ghostOffset: { x: 0, y: 0 }
			}
		);
	};
	BX.Crm.EntityEditorField.prototype.releaseDragDropAbilities = function()
	{
		if(this._dragItem)
		{
			this._dragItem.release();
			this._dragItem = null;
		}
	};
	BX.Crm.EntityEditorField.prototype.initializeSwitchingAbilities = function()
	{
		if(this.isInViewMode())
		{
			if(this.isSingleEditEnabled())
			{
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-click-editable");
				if(!this.hasContentToDisplay())
				{
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-click-empty");
				}

				if(this._singleEditButton)
				{
					BX.bind(this._singleEditButton, "click", this._singleEditButtonHandler);
				}
			}

			if(this.hasContentWrapper()
				&& BX.Crm.EntityEditorModeSwitchType.check(
					this.getModeSwitchType(BX.Crm.EntityEditorMode.edit),
					BX.Crm.EntityEditorModeSwitchType.content
				)
			)
			{
				this._viewController = BX.Crm.EditorFieldViewController.create(
					this._id,
					{ field: this, wrapper: this.getContentWrapper() }
				);
			}
		}
		else if(this.checkModeOption(BX.Crm.EntityEditorModeOptions.exclusive))
		{
			this._singleEditController = BX.Crm.EditorFieldSingleEditController.create(
				this._id,
				{ field: this }
			);
		}
	};
	BX.Crm.EntityEditorField.prototype.releaseSwitchingAbilities = function()
	{
		if(this._singleEditButton)
		{
			BX.unbind(this._singleEditButton, "click", this._singleEditButtonHandler);
		}

		if(this._viewController)
		{
			this._viewController.release();
			this._viewController = null;
		}

		if(this._singleEditController)
		{
			this._singleEditController.release();
			this._singleEditController = null;
		}
	};
	BX.Crm.EntityEditorField.prototype.initializeLightingAbilities = function(params)
	{
		var text = BX.prop.getString(params, "text", "");
		if(!BX.type.isNotEmptyString(text))
		{
			return;
		}

		var wrapper = this.getContentWrapper();
		if(!wrapper)
		{
			return;
		}

		this._spotlight = new BX.SpotLight(
			{
				id: BX.prop.getString(params, "id", ""),
				targetElement: wrapper,
				autoSave: true,
				content: text,
				targetVertex: "middle-left",
				zIndex: 200
			}
		);
		this._spotlight.show();

		var events = BX.prop.getObject(params, "events", {});
		for(var key in events)
		{
			if(events.hasOwnProperty(key))
			{
				BX.addCustomEvent(this._spotlight, key, events[key]);
			}
		}
	};
	BX.Crm.EntityEditorField.prototype.releaseLightingAbilities = function()
	{
		if(this._spotlight)
		{
			this._spotlight.close();
			this._spotlight = null;
		}
	};
	BX.Crm.EntityEditorField.prototype.prepareContextMenuItems = function()
	{
		var results = [];
		results.push({ value: "hide", text: this.getMessage("hide") });
		results.push({ value: "configure", text: this.getMessage("configure") });

		if (this._parent && this._parent.hasAdditionalMenu())
		{
			var additionalMenu = this._parent.getAdditionalMenu();
			for (var i=0; i<additionalMenu.length; i++)
			{
				results.push(additionalMenu[i]);
			}
		}

		results.push(
			{
				value: "showAlways",
				text: '<label class="crm-context-menu-item-hide-empty-wrap">' +
				'<input type="checkbox"' +
				(this.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways) ? ' checked = "true"' : '') +
				' class="crm-context-menu-item-hide-empty-input">' +
				'<span class="crm-context-menu-item-hide-empty-text">' +
				this.getMessage("showAlways") +
				'</span></label>'
			}
		);

		this.doPrepareContextMenuItems(results);
		return results;
	};
	BX.Crm.EntityEditorField.prototype.doPrepareContextMenuItems = function(menuItems)
	{
	};
	BX.Crm.EntityEditorField.prototype.processContextMenuCommand = function(e, command)
	{
		if(command === "showAlways")
		{
			var target = BX.getEventTarget(e);
			if(target && target.tagName === "INPUT")
			{
				this.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
				if(this._parent)
				{
					this._parent.processChildControlSchemeChange(this);
				}

				if(!this.isNeedToDisplay())
				{
					window.setTimeout(BX.delegate(this.clearLayout, this), 500);
					BX.UI.Notification.Center.notify(
						{
							content: this.getMessage("isHiddenDueToShowAlwaysChanged").replace(/#TITLE#/gi, this.getTitle()),
							position: "top-center",
							autoHideDelay: 5000
						}
					);
					this.closeContextMenu();
				}
			}
			return;
		}

		if(command === "hide")
		{
			window.setTimeout(BX.delegate(this.hide, this), 500);
		}
		else if(command === "configure")
		{
			this.configure();
		}
		else if (this._parent && this._parent.hasAdditionalMenu())
		{
			this._parent.processChildAdditionalMenuCommand(this, command);
		}
		this.closeContextMenu();
	};
	BX.Crm.EntityEditorField.prototype.onSingleEditBtnClick = function(e)
	{
		if(!(this.isSingleEditEnabled() && this._editor))
		{
			return;
		}

		if(this._singleEditTimeoutHandle > 0)
		{
			window.clearTimeout(this._singleEditTimeoutHandle);
			this._singleEditTimeoutHandle = 0;
		}

		this._singleEditTimeoutHandle = window.setTimeout(
			BX.delegate(this.switchToSingleEditMode, this),
			250
		);

		BX.eventCancelBubble(e);
	};
	BX.Crm.EntityEditorField.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button;
		}
		return result;
	};
	BX.Crm.EntityEditorField.prototype.switchToSingleEditMode = function(targetNode)
	{
		if(!(this.isSingleEditEnabled() && this._editor))
		{
			return;
		}

		this._singleEditTimeoutHandle = 0;

		if(this._editor)
		{
			this._editor.switchControlMode(
				this,
				BX.Crm.EntityEditorMode.edit,
				BX.Crm.EntityEditorModeOptions.individual
			);
		}
	};
	if(typeof(BX.Crm.EntityEditorField.messages) === "undefined")
	{
		BX.Crm.EntityEditorField.messages = {};
	}
}

if(typeof BX.Crm.EntityEditorSection === "undefined")
{
	BX.Crm.EntityEditorSection = function()
	{
		BX.Crm.EntityEditorSection.superclass.constructor.apply(this);
		this._fields = null;
		this._fieldConfigurator = null;
		this._userFieldConfigurator = null;
		this._mandatoryConfigurator = null;

		this._titleWrapper = null;
		this._titleEditButton = null;
		this._titleEditHandler = BX.delegate(this.onTitleEditButtonClick, this);
		this._titleView = null;
		this._titleInput = null;
		this._titleMode = BX.Crm.EntityEditorMode.intermediate;
		this._titleInputKeyHandler = BX.delegate(this.onTitleInputKeyPress, this);
		this._documentClickHandler = BX.delegate(this.onExternalClick, this);

		this._enableToggling = true;
		this._toggleButton = null;

		this._buttonPanelWrapper = null;

		this._addChildButton = null;
		this._addChildButtonHandler = BX.delegate(this.onAddChildBtnClick, this);

		this._createChildButton = null;
		this._createChildButtonHandler = BX.delegate(this.onCreateUserFieldBtnClick, this);

		this._deleteButton = null;
		this._deleteButtonHandler = BX.delegate(this.onDeleteSectionBtnClick, this);
		this._detetionConfirmDlgId = "section_deletion_confirm";

		this._childSelectMenu = null;
		this._fieldTypeSelectMenu = null;

		this._dragContainerController = null;
		this._dragPlaceHolder = null;
		this._dropHandler = BX.delegate(this.onDrop, this);
		this._titleActions = null;

		this._fieldSelector = null;
		this._stub = null;

		this._detailButton = null;
	};
	BX.extend(BX.Crm.EntityEditorSection, BX.Crm.EntityEditorControl);
	BX.Crm.EntityEditorSection.prototype.doSetActive = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			this._fields[i].setActive(this._isActive);
		}
	};
	//region Initialization
	BX.Crm.EntityEditorSection.prototype.initialize =  function(id, settings)
	{
		BX.Crm.EntityEditorSection.superclass.initialize.call(this, id, settings);

		this._draggableContextId = BX.Crm.EditorFieldDragItem.contextId;
		if(this.getChildDragScope() === BX.Crm.EditorDragScope.parent)
		{
			this._draggableContextId += "_" + this.getId();
		}

		this.initializeFromModel();
	};
	BX.Crm.EntityEditorSection.prototype.initializeFromModel =  function()
	{
		var i, length;
		if(this._fields)
		{
			for(i = 0, length = this._fields.length; i < length; i++)
			{
				this._fields[i].release();
			}
		}

		this._fields = [];

		var elements = this._schemeElement.getElements();
		for(i = 0, length = elements.length; i < length; i++)
		{
			var element = elements[i];
			var field = this._editor.createControl(
				element.getType(),
				element.getName(),
				{ schemeElement: element, model: this._model, parent: this }
			);

			if(!field)
			{
				continue;
			}

			element.setParent(this._schemeElement);
			field.setMode(this._mode, { notify: false });
			this._fields.push(field);
		}
	};
	//endregion
	//region Layout
	BX.Crm.EntityEditorSection.prototype.createDragButton = function()
	{
		if(!this._dragButton)
		{
			this._dragButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-card-widget-draggable-btn-container" },
					children:
						[
							BX.create(
								"div",
								{
									props: { className: "crm-entity-card-widget-draggable-btn" }
								}
							)
						]
				}
			);
		}
		return this._dragButton;
	};
	BX.Crm.EntityEditorSection.prototype.createGhostNode = function()
	{
		if(!this._wrapper)
		{
			return null;
		}

		var pos = BX.pos(this._wrapper);
		var node =  BX.create("div",
			{
				props: { className: "crm-entity-card-widget-edit" },
				children :
					[
						BX.create("div",
							{
								props: { className: "crm-entity-card-widget-draggable-btn-container" },
								children:
									[
										BX.create(
											"div",
											{
												props: { className: "crm-entity-card-widget-draggable-btn" },
												children:
													[
														BX.create("div",
															{ props: { className: "crm-entity-card-widget-draggable-btn-inner" } }
														)
													]
											}
										)
									]
							}
						),
						BX.create("div",
							{
								props: { className: "crm-entity-card-widget-title" },
								children :
									[
										BX.create("span",
											{
												props: { className: "crm-entity-card-widget-title-text" },
												text: this._schemeElement.getTitle()
											}
										)
									]
							}
						)
					]
			}
		);
		BX.addClass(node, "crm-entity-widget-card-drag");
		node.style.width = pos.width + "px";
		return node;
	};
	BX.Crm.EntityEditorSection.prototype.getEditPriority = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			if(this._fields[i].getEditPriority() === BX.Crm.EntityEditorPriority.high)
			{
				return BX.Crm.EntityEditorPriority.high;
			}
		}
		return BX.Crm.EntityEditorPriority.normal;
	};
	BX.Crm.EntityEditorSection.prototype.layout = function(options)
	{
		var i, length;

		//Create wrapper
		var title = this._schemeElement.getTitle();
		this._contentContainer = BX.create("div", {props: { className: 'crm-entity-widget-content' } });
		var isViewMode = this._mode === BX.Crm.EntityEditorMode.view ;

		var wrapperClassName = isViewMode
			? "crm-entity-card-widget"
			: "crm-entity-card-widget-edit";

		this._enableToggling = this.isModeToggleEnabled() && this._schemeElement.getDataBooleanParam("enableToggling", true);
		this._toggleButton = BX.create("span",
			{
				attrs: { className: "crm-entity-widget-hide-btn" },
				events: { click: BX.delegate(this.onToggleBtnClick, this) },
				text: this.getMessage(isViewMode ? "change" : "cancel")
			}
		);

		var url = BX.prop.getString(this.getEditor()._settings, "entityDetailsUrl", "");
		if (this.getEditor().isEmbedded() && url.length)
		{
			var sections = this.getEditor().getControls().filter(function(control)
			{
				return (control instanceof BX.Crm.EntityEditorSection);
			});

			if (sections.length && sections[0] === this)
			{
				this._detailButton = BX.create("a",
					{
						attrs: {
							className: "crm-entity-widget-detail-btn",
							href: url
						},
						text: this.getMessage("openDetails")
					}
				);
			}
		}

		if(!this._enableToggling)
		{
			this._toggleButton.style.display = "none";
		}

		this._titleMode = BX.Crm.EntityEditorMode.view;

		this._wrapper = BX.create("div", { props: { className: wrapperClassName }});

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._schemeElement.isTitleEnabled())
		{
			this._titleEditButton = BX.create("span",
				{
					props: { className: "crm-entity-card-widget-title-edit-icon" },
					events: { click: this._titleEditHandler }
				}
			);

			if(!this._editor.isSectionEditEnabled() || !this._editor.canChangeScheme())
			{
				this._titleEditButton.style.display = "none";
			}

			this._titleView = BX.create("span",
				{
					props: { className: "crm-entity-card-widget-title-text" },
					text: title
				}
			);
			this._titleInput = BX.create("input",
				{
					props: { className: "crm-entity-card-widget-title-text" },
					style: { display: "none" }
				}
			);
			this._titleActions = BX.create('div',
				{
					props: { className: 'crm-entity-widget-actions-block' },
					children : [ this._toggleButton]
				}
			);
			if (this._detailButton)
			{
				this._titleActions.appendChild(this._detailButton);
			}

			this._titleWrapper = BX.create('div',
				{
					props: { className: 'crm-entity-card-widget-title' },
					children :
						[
							BX.create('div',{
								style: {
									maxWidth: 'calc(100% - 30px)',
									minWidth: 0,
									flex: 1
								},
								children:
								[
									this._titleView,
									this._titleInput,
									this._titleEditButton
								]
							}),
							this._titleActions
						]
				}
			);

			this._wrapper.appendChild(this._titleWrapper);
		}

		this._wrapper.appendChild(this._contentContainer);

		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		var anchor = BX.prop.getElementNode(options, "anchor", null);
		if (anchor)
		{
			this._container.insertBefore(this._wrapper, anchor);
		}
		else
		{
			this._container.appendChild(this._wrapper);
		}

		if(isViewMode && this._fields.length === 0)
		{
			this._contentContainer.appendChild(this.createStub());
		}

		var enableReset = BX.prop.getBoolean(options, "reset", false);
		//Layout fields
		var userFieldLoader = BX.prop.get(options, "userFieldLoader", null);
		if(!userFieldLoader)
		{
			userFieldLoader = BX.Crm.EntityUserFieldLayoutLoader.create(
				this._id,
				{ mode: this._mode, enableBatchMode: true, owner: this }
			);
		}

		var lighting = BX.prop.getObject(options, "lighting", null);
		var enableFocusGain = BX.prop.getBoolean(options, "enableFocusGain", true);
		var isLighted = false;
		for(i = 0, length = this._fields.length; i < length; i++)
		{
			var field = this._fields[i];
			field.setContainer(this._contentContainer);
			field.setDraggableContextId(this._draggableContextId);

			//Force layout reset because of animation implementation
			field.releaseLayout();
			if(enableReset)
			{
				field.reset();
			}

			var layoutOptions = { userFieldLoader: userFieldLoader };
			if(!isLighted && lighting && field.isVisible() && field.isNeedToDisplay())
			{
				layoutOptions["lighting"] = lighting;
				isLighted = true;
			}

			field.layout(layoutOptions);
			if(enableFocusGain && !isViewMode && field.isHeading())
			{
				field.focus();
			}
		}

		if(userFieldLoader.getOwner() === this)
		{
			userFieldLoader.runBatch();
		}

		this._addChildButton = this._createChildButton = this._deleteButton = null;
		if(this._editor.canChangeScheme() && this._schemeElement.getDataBooleanParam('showButtonPanel', true))
		{
			this._buttonPanelWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block" } });

			if(this._schemeElement.getDataBooleanParam("isChangeable", true))
			{
				this._addChildButton = BX.create("span",
					{
						props: { className: "crm-entity-widget-content-block-edit-action-btn" },
						text: this.getMessage("selectField"),
						events: { click: this._addChildButtonHandler }
					}
				);
				if(!this._editor.hasAvailableSchemeElements())
				{
					this._addChildButton.style.display = "none";
				}
				this._buttonPanelWrapper.appendChild(this._addChildButton);

				if(this._editor.getUserFieldManager().isCreationEnabled())
				{
					this._createChildButton = BX.create("span",
						{
							props: { className: "crm-entity-widget-content-block-edit-action-btn" },
							text: this.getMessage("createField"),
							events: { click: this._createChildButtonHandler }
						}
					);
					this._buttonPanelWrapper.appendChild(this._createChildButton);
				}
			}

			if(this._schemeElement.getDataBooleanParam("isRemovable", true))
			{
				var deleteClassName = "crm-entity-widget-content-block-edit-remove-btn";
				if (this.isRequired() || this.isRequiredConditionally())
				{
					deleteClassName = "crm-entity-widget-content-block-edit-remove-btn-disabled";
				}

				this._deleteButton = BX.create("span",
					{
						props: { className: deleteClassName },
						text: this.getMessage("deleteSection")
					}
				);
				this._buttonPanelWrapper.appendChild(this._deleteButton);
				BX.bind(this._deleteButton, "click", this._deleteButtonHandler);
			}

			this._contentContainer.appendChild(this._buttonPanelWrapper);
		}

		if(this.isDragEnabled())
		{
			this._dragContainerController = BX.Crm.EditorDragContainerController.create(
				"section_" + this.getId(),
				{
					charge: BX.Crm.EditorFieldDragContainer.create(
						{
							section: this,
							context: this._draggableContextId
						}
					),
					node: this._wrapper
				}
			);
			this._dragContainerController.addDragFinishListener(this._dropHandler);

			this.initializeDragDropAbilities();
		}

		//region Add custom Html
		var serialNumber = this._editor._controls.indexOf(this);
		var eventArgs =  { id: this._id, customNodes: [], serialNumber: serialNumber };
		BX.onCustomEvent(window, "BX.Crm.EntityEditorSection:onLayout", [ this, eventArgs ]);
		if(this._titleActions && BX.type.isArray(eventArgs["customNodes"]))
		{
			for(i = 0, length = eventArgs["customNodes"].length; i < length; i++)
			{
				var node = eventArgs["customNodes"][i];
				if(BX.type.isElementNode(node))
				{
					this._titleActions.appendChild(node);
				}
			}
		}
		//endregion

		this._hasLayout = true;
	};
	BX.Crm.EntityEditorSection.prototype.clearLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		if(this._dragContainerController)
		{
			this._dragContainerController.removeDragFinishListener(this._dropHandler);
			this._dragContainerController.release();
			this._dragContainerController = null;
		}
		this.releaseDragDropAbilities();

		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			var field = this._fields[i];
			field.clearLayout();
			field.setContainer(null);
			field.setDraggableContextId("");
		}

		if(this._addChildButton)
		{
			BX.unbind(this._addChildButton, "click", this._addChildButtonHandler);
			this._addChildButton = BX.remove(this._addChildButton);
		}

		if(this._createChildButton)
		{
			BX.unbind(this._createChildButton, "click", this._createChildButtonHandler);
			this._createChildButton = BX.remove(this._createChildButton);
		}

		if(this._deleteButton)
		{
			BX.unbind(this._deleteButton, "click", this._deleteButtonHandler);
			this._deleteButton = BX.remove(this._deleteButton);
		}

		if(this._buttonPanelWrapper)
		{
			this._buttonPanelWrapper = BX.remove(this._buttonPanelWrapper);
		}

		this._stub = null;
		this._titleWrapper = null;
		this._wrapper = BX.remove(this._wrapper);
		this._hasLayout = false;
	};
	BX.Crm.EntityEditorSection.prototype.refreshLayout = function(options)
	{
		options = BX.type.isPlainObject(options) ? BX.mergeEx({}, options) : {};

		//region CALLBACK
		var callback = BX.prop.getFunction(options, "callback", null);
		delete options["callback"];
		//endregion

		//region ANCHOR
		delete options["anchor"];
		if(this._wrapper && this._wrapper.nextSibling)
		{
			options["anchor"] = this._wrapper.nextSibling;
		}
		//endregion

		//region LAYOUT
		this.clearLayout();
		this.layout(options);
		//endregion

		if(callback)
		{
			callback();
		}
	};
	BX.Crm.EntityEditorSection.prototype.createStub = function()
	{
		this._stub = BX.create(
			"div",
			{
				props: { className: "crm-entity-widget-content-block" },
				children:
					[
						BX.create(
							"div",
							{
								props: { className: "crm-entity-widget-content-nothing-selected" },
								children:
									[
										BX.create(
											"div",
											{
												props: { className: "crm-entity-widget-content-nothing-selected-text" },
												text: this.getMessage("nothingSelected")
											}
										)
									]
							}
						)
					]
			}
		);

		if(this.isModeToggleEnabled())
		{
			BX.bind(this._stub, "click", BX.delegate(this.onStubClick, this));
		}

		return this._stub;
	};
	BX.Crm.EntityEditorSection.prototype.onStubClick = function(e)
	{
		this.toggle();
	};
	BX.Crm.EntityEditorSection.prototype.hasAdditionalMenu = function(e)
	{
		return false;
	};
	BX.Crm.EntityEditorSection.prototype.getAdditionalMenu = function(e)
	{
		return [];
	};
	BX.Crm.EntityEditorSection.prototype.processChildAdditionalMenuCommand = function(child, command)
	{
	};
	BX.Crm.EntityEditorSection.prototype.ensureButtonPanelWrapperCreated = function()
	{
		if(!this._hasLayout)
		{
			throw "EntityEditorSection: Control does not have layout.";
		}

		if(!this._buttonPanelWrapper)
		{
			this._buttonPanelWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block" } });
			this._contentContainer.appendChild(this._buttonPanelWrapper);
		}
		return this._buttonPanelWrapper;
	};
	//endregion
	//region Title Edit
	BX.Crm.EntityEditorSection.prototype.setTitleMode = function(mode)
	{
		if(this._titleMode === mode)
		{
			return;
		}

		this._titleMode = mode;

		if(!this._schemeElement.isTitleEnabled())
		{
			return;
		}

		if(this._titleMode === BX.Crm.EntityEditorMode.view)
		{
			this._titleView.style.display = "";
			this._titleInput.style.display = "none";
			this._titleEditButton.style.display = "";

			var title = this._titleInput.value;
			this._titleView.innerHTML = BX.util.htmlspecialchars(title);

			this._schemeElement.setTitle(title);
			this.markSchemeAsChanged();
			this.saveScheme();

			BX.unbind(this._titleInput, "keyup", this._titleInputKeyHandler);
			BX.unbind(window.document, "click", this._documentClickHandler);
		}
		else
		{
			this._titleView.style.display = "none";
			this._titleInput.style.display = "";
			this._titleEditButton.style.display = "none";

			this._titleInput.value = this._schemeElement.getTitle();

			BX.bind(this._titleInput, "keyup", this._titleInputKeyHandler);
			this._titleInput.focus();

			window.setTimeout(
				BX.delegate(function() { BX.bind(window.document, "click", this._documentClickHandler); }, this),
				100
			);
		}
	};
	BX.Crm.EntityEditorSection.prototype.toggleTitleMode = function()
	{
		this.setTitleMode(
			this._titleMode === BX.Crm.EntityEditorMode.view
				? BX.Crm.EntityEditorMode.edit
				: BX.Crm.EntityEditorMode.view
		);
	};
	BX.Crm.EntityEditorSection.prototype.onTitleEditButtonClick = function(e)
	{
		if(this._editor.isSectionEditEnabled())
		{
			this.toggleTitleMode();
		}
	};
	BX.Crm.EntityEditorSection.prototype.onTitleInputKeyPress = function(e)
	{
			if(!e)
			{
				e = window.event;
			}

			if(e.keyCode === 13)
			{
				this.toggleTitleMode();
			}
	};
	BX.Crm.EntityEditorSection.prototype.onExternalClick = function(e)
	{
		if(!e)
		{
			e = window.event;
		}

		if(this._titleInput !== BX.getEventTarget(e))
		{
			this.toggleTitleMode();
		}
	};
	//endregion
	//region Toggling & Mode control
	BX.Crm.EntityEditorSection.prototype.enableToggling = function(enable)
	{
		enable = !!enable;
		if(this._enableToggling === enable)
		{
			return;
		}

		this._enableToggling = enable;
		if(this._hasLayout)
		{
			this._toggleButton.style.display = this._enableToggling ? "" : "none";
		}
	};
	BX.Crm.EntityEditorSection.prototype.toggle = function()
	{
		if(this._enableToggling && this._editor)
		{
			var isViewMode = (this._mode === BX.Crm.EntityEditorMode.view);
			if (isViewMode)
			{
				this.releaseActiveControls();
			}
			this._editor.switchControlMode(
				this,
				isViewMode ? BX.Crm.EntityEditorMode.edit : BX.Crm.EntityEditorMode.view
			);
		}
	};
	BX.Crm.EntityEditorSection.prototype.releaseActiveControls = function()
	{
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			var control = this._fields[i];
			this._editor.unregisterActiveControl(control);
		}
	};
	BX.Crm.EntityEditorSection.prototype.onToggleBtnClick = function(e)
	{
		this.toggle();
	};
	BX.Crm.EntityEditorSection.prototype.onBeforeModeChange = function()
	{
		this.removeFieldConfigurator();
		this.removeUserFieldConfigurator();
	};
	BX.Crm.EntityEditorSection.prototype.doSetMode = function(mode)
	{
		if(this._titleMode === BX.Crm.EntityEditorMode.edit)
		{
			this.toggleTitleMode();
		}
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			this._fields[i].setMode(mode, { notify: false });
		}
	};
	//endregion
	//region Tracking of Changes, Validation, Saving and Rolling back
	BX.Crm.EntityEditorSection.prototype.processAvailableSchemeElementsChange = function()
	{
		if(this._hasLayout && BX.type.isDomNode(this._addChildButton))
		{
			this._addChildButton.style.display = this._editor.hasAvailableSchemeElements() ? "" : "none";
		}
	};
	BX.Crm.EntityEditorSection.prototype.validate = function(result)
	{
		if(this._mode !== BX.Crm.EntityEditorMode.edit)
		{
			return true;
		}

		var currentResult = BX.Crm.EntityValidationResult.create();
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			var field = this._fields[i];
			if(field.getMode() !== BX.Crm.EntityEditorMode.edit)
			{
				continue;
			}

			field.validate(currentResult);
		}

		result.addResult(currentResult);
		return currentResult.getStatus();
	};
	BX.Crm.EntityEditorSection.prototype.commitSchemeChanges = function()
	{
		if(this._isSchemeChanged)
		{
			var schemeElements = [];
			for(var i = 0, length = this._fields.length; i < length; i++)
			{
				var schemeElement = this._fields[i].getSchemeElement();
				if(schemeElement)
				{
					schemeElements.push(schemeElement);
				}
			}
			this._schemeElement.setElements(schemeElements);
		}
		return BX.Crm.EntityEditorSection.superclass.commitSchemeChanges.call(this);
	};
	BX.Crm.EntityEditorSection.prototype.save = function()
	{
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			this._fields[i].save();
		}
	};
	BX.Crm.EntityEditorSection.prototype.rollback = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			this._fields[i].rollback();
		}

		if(this._isChanged)
		{
			this.initializeFromModel();
			this._isChanged = false;
		}
	};
	BX.Crm.EntityEditorSection.prototype.onBeforeSubmit = function()
	{
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			this._fields[i].onBeforeSubmit();
		}
	};
	//endregion
	//region Children & User Fields
	BX.Crm.EntityEditorSection.prototype.getChildIndex = function(child)
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			if(this._fields[i] === child)
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorSection.prototype.addChild = function(child, options)
	{
		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		var related = null;
		var index = BX.prop.getInteger(options, "index", -1);
		if(index >= 0)
		{
			this._fields.splice(index, 0, child);
			if(index < (this._fields.length - 1))
			{
				related = this._fields[index + 1];
			}
		}
		else
		{
			this._fields.push(child);
			related = BX.prop.get(options, "related", null);
		}

		if(child.getParent() !== this)
		{
			child.setParent(this);
		}

		if(child.hasScheme())
		{
			child.getSchemeElement().setParent(this._schemeElement);
		}

		child.setActive(this._isActive);

		if(this._hasLayout)
		{
			child.setContainer(this._contentContainer);
			child.setDraggableContextId(this._draggableContextId);

			var layoutOpts = BX.prop.getObject(options, "layout", {});

			if(related)
			{
				layoutOpts["anchor"] = related.getWrapper();
			}
			else
			{
				layoutOpts["anchor"] = this._buttonPanelWrapper;
			}

			if(BX.prop.getBoolean(layoutOpts, "forceDisplay", false) &&
				!child.isNeedToDisplay() &&
				!child.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways)
			)
			{
				//Ensure that field will be displayed.
				child.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
			}

			child.layout(layoutOpts);
		}

		if(child.hasScheme())
		{
			this._editor.processControlAdd(child);
			this.markSchemeAsChanged();

			if(BX.prop.getBoolean(options, "enableSaving", true))
			{
				this.saveScheme();
			}
		}
	};
	BX.Crm.EntityEditorSection.prototype.removeChild = function(child, options)
	{
		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		var index = this.getChildIndex(child);
		if(index < 0)
		{
			return;
		}

		if(child.isActive())
		{
			child.setActive(false);
		}

		this._fields.splice(index, 1);

		var processScheme = child.hasScheme();

		if(processScheme)
		{
			child.getSchemeElement().setParent(null);
		}

		if(this._hasLayout)
		{
			child.clearLayout();
			child.setContainer(null);
			child.setDraggableContextId("");
		}

		if(processScheme)
		{
			this._editor.processControlRemove(child);
			this.markSchemeAsChanged();

			if(BX.prop.getBoolean(options, "enableSaving", true))
			{
				this.saveScheme();
			}
		}
	};
	BX.Crm.EntityEditorSection.prototype.moveChild = function(child, index, options)
	{
		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		var qty = this.getChildCount();
		var lastIndex = qty - 1;
		if(index < 0  || index > qty)
		{
			index = lastIndex;
		}

		var currentIndex = this.getChildIndex(child);
		if(currentIndex < 0 || currentIndex === index)
		{
			return false;
		}

		if(this._hasLayout)
		{
			child.clearLayout();
		}
		this._fields.splice(currentIndex, 1);

		qty--;

		var anchor = null;
		if(this._hasLayout)
		{
			anchor = index < qty
				? this._fields[index].getWrapper()
				: this._buttonPanelWrapper;
		}

		if(index < qty)
		{
			this._fields.splice(index, 0, child);
		}
		else
		{
			this._fields.push(child);
		}

		if(this._hasLayout)
		{
			if(anchor)
			{
				child.layout({ anchor: anchor });
			}
			else
			{
				child.layout();
			}
		}

		this._editor.processControlMove(child);
		this.markSchemeAsChanged();

		if(BX.prop.getBoolean(options, "enableSaving", true))
		{
			this.saveScheme();
		}

		return true;
	};
	BX.Crm.EntityEditorSection.prototype.editChild = function(child)
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			child.focus();
		}
		else if(!this.isReadOnly())
		{
			var isHomogeneous = true;
			for(var i = 0, length = this._fields.length; i < length; i++)
			{
				if(this._fields[i].getMode() !== this._mode)
				{
					isHomogeneous = false;
					break;
				}
			}

			if(isHomogeneous)
			{
				this.setMode(BX.Crm.EntityEditorMode.edit, { notify: true });
				this.refreshLayout(
					{
						callback: function(){ child.focus(); }
					}
				);
			}
		}
	};
	BX.Crm.EntityEditorSection.prototype.getChildById = function(childId)
	{
		for(var i = 0, length = this._fields.length; i < length; i++)
		{
			var field = this._fields[i];
			if(field.getId() === childId)
			{
				return field;
			}
		}
		return null;
	};
	BX.Crm.EntityEditorSection.prototype.getChildCount = function()
	{
		return this._fields.length;
	};
	BX.Crm.EntityEditorSection.prototype.getChildren = function()
	{
		return this._fields;
	};
	BX.Crm.EntityEditorSection.prototype.processChildControlModeChange = function(child)
	{
		if(!this.isActive() && this._editor)
		{
			this._editor.processControlModeChange(child);
		}
	};
	BX.Crm.EntityEditorSection.prototype.processChildControlChange = function(child, params)
	{
		if(!child.isInEditMode())
		{
			return;
		}

		if(typeof(params) === "undefined")
		{
			params = {};
		}

		if(!BX.prop.get(params, "control", null))
		{
			params["control"] = child;
		}

		this.markAsChanged(params);
		this.enableToggling(false);
	};
	BX.Crm.EntityEditorSection.prototype.processChildControlSchemeChange = function(child)
	{
		this.markSchemeAsChanged();
		this.saveScheme();
	};
	BX.Crm.EntityEditorSection.prototype.openAddChildMenu = function()
	{
		var schemeElements = this._editor.getAvailableSchemeElements();
		var length = schemeElements.length;
		if(length === 0)
		{
			return;
		}

		var menuItems = [];
		for(var i = 0; i < length; i++)
		{
			var schemeElement = schemeElements[i];
			menuItems.push({ text: schemeElement.getTitle(), value: schemeElement.getName() });
		}

		menuItems.push({ delimiter: true });
		menuItems.push({ text: this.getMessage("selectFieldFromOtherSection"), value: "ACTION.TRANSFER" });

		var eventArgs =
			{
				id: this._id,
				menuItems: menuItems,
				button: this._addChildButton,
				cancel: false
			};
		BX.onCustomEvent(window, "BX.Crm.EntityEditorSection:onOpenChildMenu", [ this, eventArgs ]);

		if(eventArgs["cancel"])
		{
			return;
		}

		if(this._childSelectMenu)
		{
			this._childSelectMenu.setupItems(menuItems);
		}
		else
		{
			this._childSelectMenu = BX.CmrSelectorMenu.create(this._id, { items: menuItems });
			this._childSelectMenu.addOnSelectListener(BX.delegate(this.onChildSelect, this));
		}
		this._childSelectMenu.open(this._addChildButton);
	};
	BX.Crm.EntityEditorSection.prototype.onAddChildBtnClick = function(e)
	{
		this.openAddChildMenu();
	};
	BX.Crm.EntityEditorSection.prototype.openTransferDialog = function()
	{
		if(!this._fieldSelector)
		{
			this._fieldSelector = BX.Crm.EntityEditorFieldSelector.create(
				this._id,
				{
					scheme: this._editor.getScheme(),
					excludedNames: [ this.getSchemeElement().getName() ],
					title: this.getMessage("transferDialogTitle")
				}
			);
			this._fieldSelector.addClosingListener(BX.delegate(this.onTransferFieldSelect, this));
		}

		this._fieldSelector.open();
	};
	BX.Crm.EntityEditorSection.prototype.onTransferFieldSelect = function(sender, eventArgs)
	{
		if(BX.prop.getBoolean(eventArgs, "isCanceled"))
		{
			return;
		}

		var items = BX.prop.getArray(eventArgs, "items");
		if(items.length === 0)
		{
			return;
		}

		for(var i = 0, length = items.length; i < length; i++)
		{
			var item = items[i];

			var sectionName = BX.prop.getString(item, "sectionName", "");
			var fieldName = BX.prop.getString(item, "fieldName", "");

			var sourceSection = this._editor.getControlById(sectionName);
			if(!sourceSection)
			{
				continue;
			}

			var sourceField = sourceSection.getChildById(fieldName);
			if(!sourceField)
			{
				continue;
			}

			var schemeElement = sourceField.getSchemeElement();

			sourceSection.removeChild(sourceField, { enableSaving: false });

			var targetField = this._editor.createControl(
				schemeElement.getType(),
				schemeElement.getName(),
				{ schemeElement: schemeElement, model: this._model, parent: this, mode: this._mode }
			);

			//Option "notifyIfNotDisplayed" to enable user notification if field will not be displayed because of settings.
			//Option "forceDisplay" to enable "showAlways" flag if required .
			this.addChild(targetField, { layout: { forceDisplay: true }, enableSaving: false });
		}

		this._editor.saveSchemeChanges();
	};
	BX.Crm.EntityEditorSection.prototype.onChildSelect = function(sender, item)
	{
		var eventArgs =
			{
				id: this._id,
				item: item,
				button: this._addChildButton,
				cancel: false
			};
		BX.onCustomEvent(window, "BX.Crm.EntityEditorSection:onChildMenuItemSelect", [ this, eventArgs ]);

		if(eventArgs["cancel"])
		{
			return;
		}

		var v = item.getValue();
		if(v === "ACTION.TRANSFER")
		{
			this.openTransferDialog();
			return;
		}

		var element = this._editor.getAvailableSchemeElementByName(v);
		if(!element)
		{
			return;
		}

		var field = this._editor.createControl(
			element.getType(),
			element.getName(),
			{ schemeElement: element, model: this._model, parent: this, mode: this._mode }
		);

		if(field)
		{
			//Option "notifyIfNotDisplayed" to enable user notification if field will not be displayed because of settings.
			//Option "forceDisplay" to enable "showAlways" flag if required .
			this.addChild(field, { layout: { forceDisplay: true } });
		}
	};
	BX.Crm.EntityEditorSection.prototype.onCreateUserFieldBtnClick = function(e)
	{
		if(!this._fieldTypeSelectMenu)
		{
			var infos = this._editor.getUserFieldManager().getTypeInfos();
			var items = [];
			for(var i = 0, length = infos.length; i < length; i++)
			{
				var info = infos[i];
				items.push({ value: info.name, text: info.title, legend: info.legend });
			}

			this._fieldTypeSelectMenu = BX.Crm.UserFieldTypeMenu.create(
				this._id,
				{
					items: items,
					callback: BX.delegate(this.onUserFieldTypeSelect, this)
				}
			);
		}
		this._fieldTypeSelectMenu.open(this._createChildButton);
	};
	BX.Crm.EntityEditorSection.prototype.onUserFieldTypeSelect = function(sender, item)
	{
		this._fieldTypeSelectMenu.close();

		var typeId = item.getValue();
		if(typeId === "")
		{
			return;
		}

		if(typeId === "custom")
		{
			window.open(this._editor.getUserFieldManager().getCreationPageUrl());
		}
		else
		{
			this.removeFieldConfigurator();
			this.removeUserFieldConfigurator();
			this.createUserFieldConfigurator({ typeId: typeId });
		}
	};
	BX.Crm.EntityEditorSection.prototype.createUserFieldConfigurator = function(params)
	{
		if(!BX.type.isPlainObject(params))
		{
			throw "EntityEditorSection: The 'params' argument must be object.";
		}

		var typeId = "";
		var field = BX.prop.get(params, "field", null);
		if(field)
		{
			if(!(field instanceof BX.Crm.EntityEditorUserField))
			{
				throw "EntityEditorSection: The 'field' param must be EntityEditorUserField.";
			}

			typeId = field.getFieldType();
			field.setVisible(false);
		}
		else
		{
			typeId = BX.prop.get(params, "typeId", BX.Crm.EntityUserFieldType.string);
		}

		if (typeId === 'resourcebooking')
		{
			var options = {
				editor: this._editor,
				schemeElement: null,
				model: this._model,
				mode: BX.Crm.EntityEditorMode.edit,
				parent: this,
				typeId: typeId,
				field: field,
				showAlways: true
			};

			if (BX.Calendar && BX.type.isFunction(BX.Calendar.ResourcebookingUserfield))
			{
				this._userFieldConfigurator = BX.Calendar.ResourcebookingUserfield.getCrmFieldConfigurator("", options);
			}
			else if (BX.Calendar && BX.Calendar.UserField && BX.Calendar.UserField.EntityEditorUserFieldConfigurator)
			{
				this._userFieldConfigurator = BX.Calendar.UserField.EntityEditorUserFieldConfigurator.create("", options);
			}
		}
		else
		{
			var attrManager = this._editor.getAttributeManager();
			if(attrManager)
			{
				this._mandatoryConfigurator = attrManager.createFieldConfigurator(
					field,
					BX.Crm.EntityFieldAttributeType.required
				);
			}

			this._userFieldConfigurator = BX.Crm.EntityEditorUserFieldConfigurator.create(
				"",
				{
					editor: this._editor,
					schemeElement: null,
					model: this._model,
					mode: BX.Crm.EntityEditorMode.edit,
					parent: this,
					typeId: typeId,
					field: field,
					mandatoryConfigurator: this._mandatoryConfigurator,
					showAlways: true
				}
			);
		}

		this.addChild(this._userFieldConfigurator, { related: field });

		BX.addCustomEvent(this._userFieldConfigurator, "onSave", BX.delegate(this.onUserFieldConfigurationSave, this));
		BX.addCustomEvent(this._userFieldConfigurator, "onCancel", BX.delegate(this.onUserFieldConfigurationCancel, this));
	};
	BX.Crm.EntityEditorSection.prototype.removeUserFieldConfigurator = function()
	{
		if(this._userFieldConfigurator)
		{
			var field = this._userFieldConfigurator.getField();
			if(field)
			{
				field.setVisible(true);
			}
			this.removeChild(this._userFieldConfigurator);
			this._userFieldConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.onUserFieldConfigurationSave = function(sender, params)
	{
		if(sender !== this._userFieldConfigurator)
		{
			return;
		}

		this._userFieldConfigurator.setLocked(true);

		var typeId = BX.prop.getString(params, "typeId");
		if(typeId === BX.Crm.EntityUserFieldType.datetime && !BX.prop.getBoolean(params, "enableTime", false))
		{
			typeId = BX.Crm.EntityUserFieldType.date;
		}

		var fieldData = { "USER_TYPE_ID": typeId };

		if(this._mandatoryConfigurator
			&& this._mandatoryConfigurator.isPermitted()
			&& this._mandatoryConfigurator.isEnabled()
			&& this._mandatoryConfigurator.isCustomized()
		)
		{
			if(this._mandatoryConfigurator.isChanged())
			{
				this._mandatoryConfigurator.acceptChanges();
			}

			fieldData["MANDATORY"] = "N";
		}
		else
		{
			fieldData["MANDATORY"] = BX.prop.getBoolean(params, "mandatory", false) ? "Y" : "N";
		}

		var settings = BX.prop.get(params, "settings", null);
		if (settings)
		{
			fieldData["SETTINGS"] = settings;
		}

		var showAlways = BX.prop.getBoolean(params, "showAlways", null);
		var label = BX.prop.getString(params, "label", "");
		var field = BX.prop.get(params, "field", null);

		if(field)
		{
			var previousLabel = field.getTitle();
			if(label !== "" || showAlways !== null)
			{
				field.setTitle(label);
				if(showAlways !== null && showAlways !== field.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways))
				{
					field.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
				}

				this.markSchemeAsChanged();
				this.saveScheme();
			}

			fieldData["FIELD"] = field.getName();
			fieldData["ENTITY_VALUE_ID"] = field.getEntityValueId();

			if(this._editor.getConfigScope() === BX.Crm.EntityConfigScope.common && previousLabel !== label)
			{
				fieldData["EDIT_FORM_LABEL"] = fieldData["LIST_COLUMN_LABEL"] = fieldData["LIST_FILTER_LABEL"] = label;
			}

			fieldData["VALUE"] = field.getFieldValue();

			if(typeId === BX.Crm.EntityUserFieldType.enumeration)
			{
				fieldData["ENUM"] = BX.prop.getArray(params, "enumeration", []);
			}

			field.adjustFieldParams(fieldData, false);

			this._editor.getUserFieldManager().updateField(
				fieldData,
				field.getMode()
			).then(
				BX.delegate(this.onUserFieldUpdate, this)
			);
		}
		else
		{
			if(showAlways !== null)
			{
				this._editor.setOption("show_always", showAlways ? "Y" : "N");
			}

			fieldData["EDIT_FORM_LABEL"] = fieldData["LIST_COLUMN_LABEL"] = fieldData["LIST_FILTER_LABEL"] = BX.prop.getString(params, "label");
			fieldData["MULTIPLE"] = BX.prop.getBoolean(params, "multiple", false) ? "Y" : "N";

			if(typeId === BX.Crm.EntityUserFieldType.enumeration)
			{
				fieldData["ENUM"] = BX.prop.getArray(params, "enumeration", []);
			}

			this._editor.getUserFieldManager().createField(
				fieldData,
				this._mode
			).then(BX.delegate(this.onUserFieldCreate, this));
		}
	};
	BX.Crm.EntityEditorSection.prototype.onUserFieldConfigurationCancel = function(sender, params)
	{
		if(sender !== this._userFieldConfigurator)
		{
			return;
		}

		this.removeUserFieldConfigurator();

		if(this._mandatoryConfigurator)
		{
			this._mandatoryConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.onUserFieldCreate = function(result)
	{
		if(!BX.type.isPlainObject(result))
		{
			return;
		}

		this.removeUserFieldConfigurator();

		var manager = this._editor.getUserFieldManager();
		for(var key in result)
		{
			if(!result.hasOwnProperty(key))
			{
				continue;
			}

			var data = result[key];
			var info = BX.prop.getObject(data, "FIELD", null);
			if(!info)
			{
				continue;
			}

			var element = manager.createSchemeElement(info);
			if(!element)
			{
				continue;
			}

			this._model.registerNewField(
				element.getName(),
				{ "VALUE": "", "SIGNATURE": BX.prop.getString(info, "SIGNATURE", "") }
			);

			var field = this._editor.createControl(
				element.getType(),
				element.getName(),
				{ schemeElement: element, model: this._model, parent: this, mode: this._mode }
			);

			if(this._mandatoryConfigurator
				&& this._mandatoryConfigurator.isPermitted()
				&& this._mandatoryConfigurator.isEnabled()
				&& this._mandatoryConfigurator.isCustomized()
			)
			{
				var attributeConfig = this._mandatoryConfigurator.getConfiguration();
				this._editor.getAttributeManager().saveConfiguration(attributeConfig, element.getName());
				field.setAttributeConfiguration(attributeConfig);
			}

			var showAlways = this._editor.getOption("show_always", "Y") === "Y";
			if(showAlways !== field.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways))
			{
				field.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
			}

			//Option "notifyIfNotDisplayed" to enable user notification if field will not be displayed because of settings.
			this.addChild(field, { layout: { notifyIfNotDisplayed: true, html: BX.prop.getString(data, "HTML", "") } });

			break;
		}

		if(this._mandatoryConfigurator)
		{
			this._mandatoryConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.onUserFieldUpdate = function(result)
	{
		if(!BX.type.isPlainObject(result))
		{
			return;
		}

		this.removeUserFieldConfigurator();

		var manager = this._editor.getUserFieldManager();
		for(var key in result)
		{
			if(!result.hasOwnProperty(key))
			{
				continue;
			}

			var data = result[key];
			var info = BX.prop.getObject(data, "FIELD", null);
			if(!info)
			{
				continue;
			}

			var field = this.getChildById(key);
			if(!field)
			{
				continue;
			}

			var element = field.getSchemeElement();
			if(!element)
			{
				continue;
			}

			if(this._mandatoryConfigurator && this._mandatoryConfigurator.isPermitted())
			{
				if(this._mandatoryConfigurator.isEnabled() && this._mandatoryConfigurator.isCustomized())
				{
					var attributeConfig = this._mandatoryConfigurator.getConfiguration();
					this._editor.getAttributeManager().saveConfiguration(attributeConfig, element.getName());
					field.setAttributeConfiguration(attributeConfig);
				}
				else
				{
					var attributeTypeId = this._mandatoryConfigurator.getTypeId();
					this._editor.getAttributeManager().removeConfiguration(attributeTypeId, element.getName());
					field.removeAttributeConfiguration(attributeTypeId);
				}
			}

			manager.updateSchemeElement(element, info);
			var options = {};
			var html = BX.prop.getString(data, "HTML", "");
			if(html !== "")
			{
				options["html"] = html;
			}

			field.refreshLayout(options);

			break;
		}

		if(this._mandatoryConfigurator)
		{
			this._mandatoryConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.editChildConfiguration = function(child)
	{
		this.removeFieldConfigurator();
		this.removeUserFieldConfigurator();

		if(child.getType() === "userField" && this._editor.getUserFieldManager().isModificationEnabled())
		{
			this.createUserFieldConfigurator({ field: child });
		}
		else
		{
			this.createFieldConfigurator(child);
		}
	};
	BX.Crm.EntityEditorSection.prototype.createFieldConfigurator = function(child)
	{
		child.setVisible(false);

		var attrManager = this._editor.getAttributeManager();
		if(attrManager)
		{
			this._mandatoryConfigurator = attrManager.createFieldConfigurator(
				child,
				BX.Crm.EntityFieldAttributeType.required
			);
		}

		this._fieldConfigurator = BX.Crm.EntityEditorFieldConfigurator.create(
			"",
			{
				editor: this._editor,
				schemeElement: null,
				model: this._model,
				mode: BX.Crm.EntityEditorMode.edit,
				parent: this,
				field: child,
				mandatoryConfigurator: this._mandatoryConfigurator
			}
		);
		this.addChild(this._fieldConfigurator, { related: child });

		BX.addCustomEvent(this._fieldConfigurator, "onSave", BX.delegate(this.onFieldConfigurationSave, this));
		BX.addCustomEvent(this._fieldConfigurator, "onCancel", BX.delegate(this.onFieldConfigurationCancel, this));
	};
	BX.Crm.EntityEditorSection.prototype.removeFieldConfigurator = function()
	{
		if(this._fieldConfigurator)
		{
			var field = this._fieldConfigurator.getField();
			if(field)
			{
				field.setVisible(true);
			}
			this.removeChild(this._fieldConfigurator);
			this._fieldConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.onFieldConfigurationSave = function(sender, params)
	{
		if(sender !== this._fieldConfigurator)
		{
			return;
		}

		var field = BX.prop.get(params, "field", null);
		if(!field)
		{
			throw "EntityEditorSection. Could not find target field.";
		}

		var label = BX.prop.getString(params, "label", "");
		var showAlways = BX.prop.getBoolean(params, "showAlways", null);
		if(label === "" && showAlways === null)
		{
			this.removeFieldConfigurator();
			if(this._mandatoryConfigurator)
			{
				this._mandatoryConfigurator = null;
			}
			return;
		}

		this._fieldConfigurator.setLocked(true);
		field.setTitle(label);
		if(showAlways !== null && showAlways !== field.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways))
		{
			field.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
		}

		this.markSchemeAsChanged();
		this.saveScheme().then(
			BX.delegate(
				function()
				{
					if(this._mandatoryConfigurator)
					{
						if(this._mandatoryConfigurator.isPermitted()
							&& field.areAttributesEnabled()
							&& !field.isRequired()
						)
						{
							if(this._mandatoryConfigurator.isEnabled())
							{
								if(this._mandatoryConfigurator.isChanged())
								{
									this._mandatoryConfigurator.acceptChanges();
								}
								var attributeConfig = this._mandatoryConfigurator.getConfiguration();
								this._editor.getAttributeManager().saveConfiguration(attributeConfig, field.getName());
								field.setAttributeConfiguration(attributeConfig);
							}
							else
							{
								var attributeTypeId = this._mandatoryConfigurator.getTypeId();
								this._editor.getAttributeManager().removeConfiguration(attributeTypeId, field.getName());
								field.removeAttributeConfiguration(attributeTypeId);
							}
						}
						this._mandatoryConfigurator = null;
					}
					this.removeFieldConfigurator();
				},
				this
			)
		)
	};
	BX.Crm.EntityEditorSection.prototype.onFieldConfigurationCancel = function(sender, params)
	{
		if(sender !== this._fieldConfigurator)
		{
			return;
		}

		var field = BX.prop.get(params, "field", null);
		if(!field)
		{
			throw "EntityEditorSection. Could not find target field.";
		}

		this.removeFieldConfigurator();
		if(this._mandatoryConfigurator)
		{
			this._mandatoryConfigurator = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.enablePointerEvents = function(enable)
	{
		if(!this._fields)
		{
			return;
		}

		enable = !!enable;
		for(i = 0, length = this._fields.length; i < length; i++)
		{
			this._fields[i].enablePointerEvents(enable);
		}
	};
	//endregion
	//region Create|Delete Section
	BX.Crm.EntityEditorSection.prototype.onDeleteConfirm = function(result)
	{
		if(BX.prop.getBoolean(result, "cancel", true))
		{
			return;
		}

		this._editor.removeSchemeElement(this.getSchemeElement());
		this._editor.removeControl(this);
		this._editor.saveScheme();
	};
	BX.Crm.EntityEditorSection.prototype.onDeleteSectionBtnClick = function(e)
	{
		if(this.isRequired() || this.isRequiredConditionally())
		{
			this.showMessageDialog(
				"operationDenied",
				this.getMessage("deleteSection"),
				this.getMessage("deleteSectionDenied")
			);
			return;
		}

		var dlg = BX.Crm.ConfirmationDialog.get(this._detetionConfirmDlgId);
		if(!dlg)
		{
			dlg = BX.Crm.ConfirmationDialog.create(
				this._detetionConfirmDlgId,
				{
					title: this.getMessage("deleteSection"),
					content: this.getMessage("deleteSectionConfirm")
				}
			);
		}
		dlg.open().then(BX.delegate(this.onDeleteConfirm, this));
	};
	//endregion
	//region D&D
	BX.Crm.EntityEditorSection.prototype.getDragObjectType = function()
	{
		return BX.Crm.EditorDragObjectType.section;
	};
	BX.Crm.EntityEditorSection.prototype.getChildDragObjectType = function()
	{
		return BX.Crm.EditorDragObjectType.field;
	};
	BX.Crm.EntityEditorSection.prototype.hasPlaceHolder = function()
	{
		return !!this._dragPlaceHolder;
	};
	BX.Crm.EntityEditorSection.prototype.createPlaceHolder = function(index)
	{
		this.enablePointerEvents(false);

		var qty = this.getChildCount();
		if(index < 0 || index > qty)
		{
			index = qty > 0 ? qty : 0;
		}

		if(this._dragPlaceHolder)
		{
			if(this._dragPlaceHolder.getIndex() === index)
			{
				return this._dragPlaceHolder;
			}

			this._dragPlaceHolder.clearLayout();
			this._dragPlaceHolder = null;
		}

		this._dragPlaceHolder = BX.Crm.EditorDragFieldPlaceholder.create(
			{
				container: this._contentContainer,
				anchor: (index < qty) ? this._fields[index].getWrapper() : this._buttonPanelWrapper,
				index: index
			}
		);
		this._dragPlaceHolder.layout();
		return this._dragPlaceHolder;
	};
	BX.Crm.EntityEditorSection.prototype.getPlaceHolder = function()
	{
		return this._dragPlaceHolder;
	};
	BX.Crm.EntityEditorSection.prototype.removePlaceHolder = function()
	{
		this.enablePointerEvents(true);

		if(this._dragPlaceHolder)
		{
			this._dragPlaceHolder.clearLayout();
			this._dragPlaceHolder = null;
		}
	};
	BX.Crm.EntityEditorSection.prototype.processDraggedItemDrop = function(dragContainer, draggedItem)
	{
		var containerCharge = dragContainer.getCharge();
		if(!((containerCharge instanceof BX.Crm.EditorFieldDragContainer) && containerCharge.getSection() === this))
		{
			return;
		}

		var context = draggedItem.getContextData();
		var contextId = BX.type.isNotEmptyString(context["contextId"]) ? context["contextId"] : "";

		if(contextId !== this.getDraggableContextId())
		{
			return;
		}

		var placeholder = this.getPlaceHolder();
		var placeholderIndex = placeholder ? placeholder.getIndex() : -1;
		if(placeholderIndex < 0)
		{
			return;
		}

		var itemCharge = typeof(context["charge"]) !== "undefined" ?  context["charge"] : null;
		if(!(itemCharge instanceof BX.Crm.EditorFieldDragItem))
		{
			return;
		}

		var source = itemCharge.getControl();
		if(!source)
		{
			return;
		}

		var sourceParent = source.getParent();
		if(sourceParent === this)
		{
			var currentIndex = this.getChildIndex(source);
			if(currentIndex < 0)
			{
				return;
			}

			var index = placeholderIndex <= currentIndex ? placeholderIndex : (placeholderIndex - 1);
			if(index === currentIndex)
			{
				return;
			}

			this.moveChild(source, index, { enableSaving: false });
			this._editor.saveSchemeChanges();
		}
		else
		{
			var schemeElement = source.getSchemeElement();
			sourceParent.removeChild(source, { enableSaving: false });

			var target = this._editor.createControl(
				schemeElement.getType(),
				schemeElement.getName(),
				{ schemeElement: schemeElement, model: this._model, parent: this, mode: this._mode }
			);

			if(this._mode === BX.Crm.EntityEditorMode.view
				&& !target.hasContentToDisplay()
				&& !target.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways)
			)
			{
				//Activate 'showAlways' flag for display empty field in view mode.
				target.toggleOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
			}

			this.addChild(target, { index: placeholderIndex, enableSaving: false });
			this._editor.saveSchemeChanges();
		}
	};
	BX.Crm.EntityEditorSection.prototype.onDrop = function(dragContainer, draggedItem, x, y)
	{
		this.processDraggedItemDrop(dragContainer, draggedItem);
	};
	BX.Crm.EntityEditorSection.prototype.initializeDragDropAbilities = function()
	{
		if(this._dragItem)
		{
			return;
		}

		this._dragItem = BX.Crm.EditorDragItemController.create(
			"section_" + this.getId(),
			{
				charge: BX.Crm.EditorSectionDragItem.create({ control: this }),
				node: this.createDragButton(),
				showControlInDragMode: false,
				ghostOffset: { x: 0, y: 0 }
			}
		);
	};
	BX.Crm.EntityEditorSection.prototype.releaseDragDropAbilities = function()
	{
		if(this._dragItem)
		{
			this._dragItem.release();
			this._dragItem = null;
		}
	};
	//endregion
	BX.Crm.EntityEditorSection.prototype.isWaitingForInput = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			if(this._fields[i].isWaitingForInput())
			{
				return true;
			}
		}
		return false;
	};
	BX.Crm.EntityEditorSection.prototype.isRequired = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			if(this._fields[i].isRequired())
			{
				return true;
			}
		}
		return false;
	};
	BX.Crm.EntityEditorSection.prototype.isRequiredConditionally = function()
	{
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			if(this._fields[i].isRequiredConditionally())
			{
				return true;
			}
		}
		return false;
	};
	BX.Crm.EntityEditorSection.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorSection.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.Crm.EntityEditorSection.messages) === "undefined")
	{
		BX.Crm.EntityEditorSection.messages = {};
	}
	BX.Crm.EntityEditorSection.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorSection();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorText === "undefined")
{
	BX.Crm.EntityEditorText = function()
	{
		BX.Crm.EntityEditorText.superclass.constructor.apply(this);
		this._input = null;
		this._innerWrapper = null;
	};

	BX.extend(BX.Crm.EntityEditorText, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorText.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorText.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorText.prototype.focus = function()
	{
		if(!this._input)
		{
			return;
		}

		BX.focus(this._input);
		BX.Crm.EditorTextHelper.getCurrent().setPositionAtEnd(this._input);
	};
	BX.Crm.EntityEditorText.prototype.getLineCount = function()
	{
		return this._schemeElement.getDataIntegerParam("lineCount", 1);
	};
	BX.Crm.EntityEditorText.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-text" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			var lineCount = this.getLineCount();
			if(lineCount > 1)
			{
				this._input = BX.create("textarea",
					{
						props:
						{
							className: "crm-entity-widget-content-textarea",
							name: name,
							rows: lineCount,
							value: value
						}
					}
				);
			}
			else
			{
				this._input = BX.create("input",
					{
						attrs:
						{
							name: name,
							className: "crm-entity-widget-content-input",
							type: "text",
							value: value
						}
					}
				);
			}

			if(this.isNewEntity())
			{
				var placeholder = this.getCreationPlaceholder();
				if(placeholder !== "")
				{
					this._input.setAttribute("placeholder", placeholder);
				}
			}

			BX.bind(this._input, "input", this._changeHandler);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: { className: "crm-entity-widget-content-block-field-container" },
									children: [ this._input ]
								}
							)
						]
				}
			);

			if(this._editor.isDuplicateControlEnabled())
			{
				var dupControlConfig = this.getDuplicateControlConfig();
				if(dupControlConfig)
				{
					if(!BX.type.isPlainObject(dupControlConfig["field"]))
					{
						dupControlConfig["field"] = {};
					}
					dupControlConfig["field"]["id"] = this.getId();
					dupControlConfig["field"]["element"] = this._input;
					this._editor.getDuplicateManager().registerField(dupControlConfig);
				}
			}
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			if(this.hasContentToDisplay())
			{
				if(this.getLineCount() > 1)
				{
					this._innerWrapper = BX.create(
						"div",
						{
							props: { className: "crm-entity-widget-content-block-inner" },
							children:
								[
									BX.create(
										"div",
										{
											props: { className: "crm-entity-widget-content-block-inner-text" },
											html: BX.util.nl2br(BX.util.htmlspecialchars(value))
										}
									)
								]
						}
					);
				}
				else
				{
					this._innerWrapper = BX.create(
						"div",
						{
							props: { className: "crm-entity-widget-content-block-inner" },
							children:
								[
									BX.create(
										"div",
										{
											props: { className: "crm-entity-widget-content-block-inner-text" },
											text: value
										}
									)
								]
						}
					);
				}
			}
			else
			{
				this._innerWrapper = BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						text: this.getMessage("isEmpty")
					}
				);
			}
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorText.prototype.doClearLayout = function(options)
	{
		if(this._editor.isDuplicateControlEnabled())
		{
			var dupControlConfig = this.getDuplicateControlConfig();
			if(dupControlConfig)
			{
				if(!BX.type.isPlainObject(dupControlConfig["field"]))
				{
					dupControlConfig["field"] = {};
				}
				dupControlConfig["field"]["id"] = this.getId();
				this._editor.getDuplicateManager().unregisterField(dupControlConfig);
			}
		}

		this._input = null;
		//BX.unbind(this._innerWrapper, "click", this._viewClickHandler);
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorText.prototype.refreshLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		if(!this._isValidLayout)
		{
			BX.Crm.EntityEditorText.superclass.refreshLayout.apply(this, arguments);
			return;
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit && this._input)
		{
			this._input.value = this.getValue();
		}
		else if(this._mode === BX.Crm.EntityEditorMode.view && this._innerWrapper)
		{
			this._innerWrapper.innerHTML = BX.util.htmlspecialchars(this.getValue());
		}
	};
	BX.Crm.EntityEditorText.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit && this._input
			? BX.util.trim(this._input.value) : ""
		);
	};
	BX.Crm.EntityEditorText.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._input))
		{
			throw "BX.Crm.EntityEditorText. Invalid validation context";
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._input.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._input);
		}
		return isValid;
	};
	BX.Crm.EntityEditorText.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorText.superclass.showError.apply(this, arguments);
		if(this._input)
		{
			BX.addClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorText.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorText.superclass.clearError.apply(this);
		if(this._input)
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorText.prototype.save = function()
	{
		if(this._input)
		{
			this._model.setField(this.getName(), this._input.value, { originator: this });
		}
	};
	BX.Crm.EntityEditorText.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorText.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorText();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorNumber === "undefined")
{
	BX.Crm.EntityEditorNumber = function()
	{
		BX.Crm.EntityEditorNumber.superclass.constructor.apply(this);
		this._input = null;
		this._innerWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorNumber, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorNumber.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorNumber.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorNumber.prototype.focus = function()
	{
		if(!this._input)
		{
			return;
		}

		BX.focus(this._input);
		BX.Crm.EditorTextHelper.getCurrent().selectAll(this._input);
	};
	BX.Crm.EntityEditorNumber.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-number" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._input = null;
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._input = BX.create("input",
				{
					attrs:
					{
						name: name,
						className: "crm-entity-widget-content-input",
						type: "text",
						value: value
					}
				}
			);
			BX.bind(this._input, "input", this._changeHandler);

			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create("div",
				{
					//todo: remove class "crm-entity-widget-content-block-field-half-width" if required
					props: { className: "crm-entity-widget-content-block-inner crm-entity-widget-content-block-field-half-width" },
					children:
						[
							BX.create("div",
								{
									props: { className: "crm-entity-widget-content-block-field-container" },
									children: [ this._input ]
								}
							)
						]
				}
			);
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			if(!this.hasContentToDisplay())
			{
				value = this.getMessage("isEmpty");
			}

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: {className: "crm-entity-widget-content-block-inner-text"},
									text: value
								}
							)
						]
				}
			);
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorNumber.prototype.doClearLayout = function(options)
	{
		this._input = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorNumber.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit && this._input
				? BX.util.trim(this._input.value) : ""
		);
	};
	BX.Crm.EntityEditorNumber.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._input))
		{
			throw "BX.Crm.EntityEditorNumber. Invalid validation context";
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._input.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._input);
		}
		return isValid;
	};
	BX.Crm.EntityEditorNumber.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorNumber.superclass.showError.apply(this, arguments);
		if(this._input)
		{
			BX.addClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorNumber.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorNumber.superclass.clearError.apply(this);
		if(this._input)
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorNumber.prototype.save = function()
	{
		if(this._input)
		{
			this._model.setField(this.getName(), this._input.value);
		}
	};
	BX.Crm.EntityEditorNumber.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorNumber();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorDatetime === "undefined")
{
	BX.Crm.EntityEditorDatetime = function()
	{
		BX.Crm.EntityEditorDatetime.superclass.constructor.apply(this);
		this._input = null;
		this._inputClickHandler = BX.delegate(this.onInputClick, this);
		this._innerWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorDatetime, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorDatetime.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorDatetime.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorDatetime.prototype.focus = function()
	{
		if(this._input)
		{
			BX.focus(this._input);
			BX.Crm.EditorTextHelper.getCurrent().selectAll(this._input);
		}
	};
	BX.Crm.EntityEditorDatetime.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-date" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._input = BX.create("input",
				{
					attrs:
					{
						name: name,
						className: "crm-entity-widget-content-input",
						type: "text",
						value: value
					}
				}
			);
			BX.bind(this._input, "click", this._inputClickHandler);
			BX.bind(this._input, "change", this._changeHandler);
			BX.bind(this._input, "input", this._changeHandler);

			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner crm-entity-widget-content-block-field-half-width" },
					children:
						[
							BX.create("div",
								{
									props: {className:"crm-entity-widget-content-block-field-container"},
									children: [ this._input ]
								}
							)
						]
				}
			);
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			value = BX.date.format("j F Y", BX.parseDate(value));
			this._wrapper.appendChild(this.createTitleNode(title));
			if(!this.hasContentToDisplay())
			{
				value = this.getMessage("isEmpty");
			}

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: {className: "crm-entity-widget-content-block-inner-text"},
									text: value
								}
							)
						]
				}
			);
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorDatetime.prototype.doRegisterLayout = function()
	{
		if(this.isInEditMode()
			&& this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual)
			&& this._input
		)
		{
			window.setTimeout(BX.delegate(this.showCalendar, this), 100);
		}
	};
	BX.Crm.EntityEditorDatetime.prototype.doClearLayout = function(options)
	{
		this._input = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorDatetime.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit && this._input
				? BX.util.trim(this._input.value) : ""
		);
	};
	BX.Crm.EntityEditorDatetime.prototype.onInputClick = function(e)
	{
		this.showCalendar();
	};
	BX.Crm.EntityEditorDatetime.prototype.showCalendar = function()
	{
		BX.calendar({ node: this._input, field: this._input, bTime: false, bSetFocus: false });
	};
	BX.Crm.EntityEditorDatetime.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._input))
		{
			throw "BX.Crm.EntityEditorDatetime. Invalid validation context";
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._input.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._input);
		}
		return isValid;
	};
	BX.Crm.EntityEditorDatetime.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorDatetime.superclass.showError.apply(this, arguments);
		if(this._input)
		{
			BX.addClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorDatetime.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorDatetime.superclass.clearError.apply(this);
		if(this._input)
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorDatetime.prototype.save = function()
	{
		if(this._input)
		{
			this._model.setField(this.getName(), this._input.value);
		}
	};
	BX.Crm.EntityEditorDatetime.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorDatetime();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorBoolean === "undefined")
{
	BX.Crm.EntityEditorBoolean = function()
	{
		BX.Crm.EntityEditorBoolean.superclass.constructor.apply(this);
		this._input = null;
		this._innerWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorBoolean, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorBoolean.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorBoolean.superclass.doInitialize.apply(this);
		this._selectedValue = this._model.getField(this._schemeElement.getName());
	};
	BX.Crm.EntityEditorBoolean.prototype.areAttributesEnabled = function()
	{
		return false;
	};
	BX.Crm.EntityEditorBoolean.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorBoolean.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorBoolean.prototype.hasValue = function()
	{
		return BX.util.trim(this.getValue()) !== "";
	};
	BX.Crm.EntityEditorBoolean.prototype.getValue = function(defaultValue)
	{
		if(!this._model)
		{
			return "";
		}

		if(defaultValue === undefined)
		{
			defaultValue = "N";
		}

		var value = this._model.getStringField(
			this.getName(),
			defaultValue
		);

		if(value !== "Y" && value !== "N")
		{
			value = "N";
		}

		return value;
	};
	BX.Crm.EntityEditorBoolean.prototype.getRuntimeValue = function()
	{
		if (this._mode !== BX.Crm.EntityEditorMode.edit || !this._input)
			return "";

		var value = BX.util.trim(this._input.value);
		if(value !== "Y" && value !== "N")
		{
			value = "N";
		}
		return value;
	};
	BX.Crm.EntityEditorBoolean.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-checkbox" ] });
		this.adjustWrapper();

		/*
		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}
		*/

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(
				BX.create("input", { attrs: { name: name, type: "hidden", value: "N" } })
			);

			this._input = BX.create(
				"input",
				{
					attrs:
					{
						className: "crm-entity-widget-content-checkbox",
						name: name,
						type: "checkbox",
						value: "Y",
						checked: value === "Y"
					}
				}
			);
			BX.bind(this._input, "change", this._changeHandler);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: {className: "crm-entity-widget-content-block-field-container"},
									children:
										[
											BX.create("label",
												{
													attrs: { className: "crm-entity-widget-content-block-checkbox-label" },
													children:
														[
															this._input,
															BX.create("span",
																{
																	props: { className: "crm-entity-widget-content-block-checkbox-description" },
																	text: title
																}
															)
														]
												}
											)
										]
								}
							)
						]
				}
			);
		}
		else//if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: { className: "crm-entity-widget-content-block-inner-text"},
									text: this.getMessage(value === "Y" ? "yes" : "no")
								}
							)
						]
				}
			);
		}

		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorBoolean.prototype.doClearLayout = function(options)
	{
		this._input = null;
		this._innerWrapper = null;
		//this._selectContainer = null;
	};
	BX.Crm.EntityEditorBoolean.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._input))
		{
			throw "BX.Crm.EntityEditorBoolean. Invalid validation context";
		}

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._input.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			BX.addClass(this._input, "crm-entity-widget-content-error");
			this.showRequiredFieldError(this._input);
		}
		else
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
			this.clearError();
		}
		return isValid;
	};
	BX.Crm.EntityEditorBoolean.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorBoolean.superclass.showError.apply(this, arguments);
		if(this._input)
		{
			BX.addClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorBoolean.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorBoolean.superclass.clearError.apply(this);
		if(this._input)
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorBoolean.prototype.save = function()
	{
		if(this._input)
		{
			this._model.setField(this.getName(), this._input.checked ? "Y" : "N", { originator: this });
		}
	};
	BX.Crm.EntityEditorBoolean.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorBoolean.messages;
		return (m.hasOwnProperty(name)
			? m[name]
			: BX.Crm.EntityEditorBoolean.superclass.getMessage.apply(this, arguments)
		);
	};
	if(typeof(BX.Crm.EntityEditorBoolean.messages) === "undefined")
	{
		BX.Crm.EntityEditorBoolean.messages = {};
	}
	BX.Crm.EntityEditorBoolean.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorBoolean();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorList === "undefined")
{
	BX.Crm.EntityEditorList = function()
	{
		BX.Crm.EntityEditorList.superclass.constructor.apply(this);
		this._items = null;
		this._input = null;
		this._selectContainer = null;
		this._selectedValue = "";
		this._selectorClickHandler = BX.delegate(this.onSelectorClick, this);
		this._innerWrapper = null;
		this._isOpened = false;
	};
	BX.extend(BX.Crm.EntityEditorList, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorList.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorList.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorList.prototype.checkIfNotEmpty = function(value)
	{
		if(BX.type.isString(value))
		{
			value = value.trim();
			//0 is value for "Not Selected" item
			return value !== "" && value !== "0";
		}
		return (value !== null && value !== undefined);
	};
	BX.Crm.EntityEditorList.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-select" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();

		var value = this.getValue();
		var item = this.getItemByValue(value);
		var isHtmlOption = this.getDataBooleanParam('isHtml', false);
		var containerProps = {};

		if(!item)
		{
			item = this.getFirstItem();
			if(item)
			{
				value = item["VALUE"];
			}
		}
		this._selectedValue = value;

		this._selectContainer = null;
		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._input = BX.create("input", { attrs: { name: name, type: "hidden", value: value } });
			this._wrapper.appendChild(this._input);

			containerProps = {props: { className: "crm-entity-widget-content-select" }};
			if (isHtmlOption)
			{
				containerProps.html = (item ? item["NAME"] : value);
			}
			else
			{
				containerProps.text = (item ? item["NAME"] : value);
			}

			this._selectContainer = BX.create("div", containerProps);
			BX.bind(this._selectContainer, "click", this._selectorClickHandler);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: {className: "crm-entity-widget-content-block-field-container"},
									children :[ this._selectContainer ]
								}
							)
						]
				}
			);
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			var text = "";
			if(!this.hasContentToDisplay())
			{
				text = this.getMessage("isEmpty");
			}
			else if(item)
			{
				text = item["NAME"];
			}
			else
			{
				text = value;
			}

			var containerProps = {props: { className: "crm-entity-widget-content-block-inner-text" }};

			if (isHtmlOption)
			{
				containerProps.html = text;
			}
			else
			{
				containerProps.text = text;
			}

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div", containerProps)
						]
				}
			);
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorList.prototype.doRegisterLayout = function()
	{
		if(this.isInEditMode()
			&& this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual)
			&& this._selectContainer
		)
		{
			window.setTimeout(BX.delegate(this.openMenu, this), 100);
		}
	};
	BX.Crm.EntityEditorList.prototype.doClearLayout = function(options)
	{
		this.closeMenu();

		this._input = null;
		this._selectContainer = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorList.prototype.refreshLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		if(!this._isValidLayout)
		{
			BX.Crm.EntityEditorMoney.superclass.refreshLayout.apply(this, arguments);
			return;
		}

		var value = this.getValue();
		var item = this.getItemByValue(value);
		var text = item ? BX.prop.getString(item, "NAME", value) : value;
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._selectedValue = value;
			if(this._input)
			{
				this._input.value  = value;
			}
			if(this._selectContainer)
			{
				this._selectContainer.innerHTML = this.getDataBooleanParam('isHtml', false) ? text : BX.util.htmlspecialchars(text);
			}
		}
		else if(this._mode === BX.Crm.EntityEditorMode.view && this._innerWrapper)
		{
			this._innerWrapper.innerHTML = this.getDataBooleanParam('isHtml', false) ? text : BX.util.htmlspecialchars(text);
		}
	};
	BX.Crm.EntityEditorList.prototype.validate = function(result)
	{
		if(this._mode !== BX.Crm.EntityEditorMode.edit)
		{
			throw "BX.Crm.EntityEditorList. Invalid validation context";
		}

		if(!this.isEditable())
		{
			return true;
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._input.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._input);
		}
		return isValid;
	};
	BX.Crm.EntityEditorList.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorList.superclass.showError.apply(this, arguments);
		if(this._input)
		{
			BX.addClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorList.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorList.superclass.clearError.apply(this);
		if(this._input)
		{
			BX.removeClass(this._input, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorList.prototype.onSelectorClick = function (e)
	{
		if(!this._isOpened)
		{
			this.openMenu();
		}
		else
		{
			this.closeMenu();
		}
	};
	BX.Crm.EntityEditorList.prototype.openMenu = function()
	{
		if(this._isOpened)
		{
			return;
		}

		var menu = [];
		var items = this.getItems();
		for(var i = 0, length = items.length; i < length; i++)
		{
			var item = items[i];
			if(!BX.prop.getBoolean(item, "IS_EDITABLE", true))
			{
				continue;
			}

			var value = BX.prop.getString(item, "VALUE", i);
			var name = BX.prop.getString(item, "NAME", value);
			menu.push(
				{
					text: this.getDataBooleanParam('isHtml', false) ? name : BX.util.htmlspecialchars(name),
					value: value,
					onclick: BX.delegate( this.onItemSelect, this)
				}
			);
		}

		BX.PopupMenu.show(
			this._id,
			this._selectContainer,
			menu,
			{
				angle: false, width: this._selectContainer.offsetWidth + 'px',
				events:
					{
						onPopupShow: BX.delegate( this.onMenuShow, this),
						onPopupClose: BX.delegate( this.onMenuClose, this)
					}
			}
		);
		BX.PopupMenu.currentItem.popupWindow.setWidth(BX.pos(this._selectContainer)["width"]);
	};
	BX.Crm.EntityEditorList.prototype.closeMenu = function()
	{
		var menu = BX.PopupMenu.getMenuById(this._id);
		if(menu)
		{
			menu.popupWindow.close();
		}
	};
	BX.Crm.EntityEditorList.prototype.onMenuShow = function()
	{
		BX.addClass(this._selectContainer, "active");
		this._isOpened = true;
	};
	BX.Crm.EntityEditorList.prototype.onMenuClose = function()
	{
		BX.PopupMenu.destroy(this._id);

		BX.removeClass(this._selectContainer, "active");
		this._isOpened = false;
	};
	BX.Crm.EntityEditorList.prototype.onItemSelect = function(e, item)
	{
		this.closeMenu();

		this._selectedValue = this._input.value  = item.value;
		var name = BX.prop.getString(
			this.getItemByValue(this._selectedValue),
			"NAME",
			this._selectedValue
		);

		this._selectContainer.innerHTML = this.getDataBooleanParam('isHtml', false) ? name : BX.util.htmlspecialchars(name);
		this.markAsChanged();
		BX.PopupMenu.destroy(this._id);

	};
	BX.Crm.EntityEditorList.prototype.getItems = function()
	{
		if(!this._items)
		{
			this._items = BX.prop.getArray(this._schemeElement.getData(), "items", []);
		}
		return this._items;
	};
	BX.Crm.EntityEditorList.prototype.getItemByValue = function(value)
	{
		var items = this.getItems();
		for(var i = 0, l = items.length; i < l; i++)
		{
			var item = items[i];
			if(value === BX.prop.getString(item, "VALUE", ""))
			{
				return item;
			}
		}
		return null;
	};
	BX.Crm.EntityEditorList.prototype.getFirstItem = function()
	{
		var items = this.getItems();
		return items.length > 0 ? items[0] : null;
	};
	BX.Crm.EntityEditorList.prototype.save = function()
	{
		if(!this.isEditable())
		{
			return;
		}

		this._model.setField(this.getName(), this._selectedValue);
	};
	BX.Crm.EntityEditorList.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorList.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit && this._input
				? this._selectedValue : ""
		);
	};
	BX.Crm.EntityEditorList.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorList();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorHtml === "undefined")
{
	BX.Crm.EntityEditorHtml = function()
	{
		BX.Crm.EntityEditorHtml.superclass.constructor.apply(this);
		this._htmlEditorContainer = null;
		this._htmlEditor = null;
		this._isEditorInitialized = false;
		this._focusOnLoad = false;

		this._input = null;
		this._innerWrapper = null;

		this._editorInitializationHandler = BX.delegate(this.onEditorInitialized, this);
		this._viewClickHandler = BX.delegate(this.onViewClick, this);
	};
	BX.extend(BX.Crm.EntityEditorHtml, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorHtml.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorHtml.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorHtml.prototype.checkIfNotEmpty = function(value)
	{
		return BX.Crm.EntityEditorHtml.isNotEmptyValue(value);
	};
	BX.Crm.EntityEditorHtml.prototype.focus = function()
	{
		if(this._htmlEditor && this._isEditorInitialized)
		{
			this._htmlEditor.Focus(true);
		}
		else
		{
			this._focusOnLoad = true;
		}
	};
	BX.Crm.EntityEditorHtml.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.release();
		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-comment" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			if(!this._editor)
			{
				throw "BX.Crm.EntityEditorHtml: Editor instance is required for create layout.";
			}

			var htmlEditorConfig = this._editor.getHtmlEditorConfig(name);
			if(!htmlEditorConfig)
			{
				throw "BX.Crm.EntityEditorHtml: Could not find HTML editor config.";
			}

			this._htmlEditorContainer = BX(BX.prop.getString(htmlEditorConfig, "containerId"));
			if(!BX.type.isElementNode(this._htmlEditorContainer))
			{
				throw "BX.Crm.EntityEditorHtml: Could not find HTML editor container.";
			}

			this._htmlEditor = BXHtmlEditor.Get(BX.prop.getString(htmlEditorConfig, "id"));
			if(!this._htmlEditor)
			{
				throw "BX.Crm.EntityEditorHtml: Could not find HTML editor instance.";
			}

			this._wrapper.appendChild(this.createTitleNode(title));
			this._input = BX.create("input", { attrs: { name: name, type: "hidden", value: value } });
			this._wrapper.appendChild(this._input);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children:
						[
							BX.create("div",
								{
									props: {className: "crm-entity-widget-content-block-field-container"},
									children: [this._htmlEditorContainer]
								}
							)
						]
				}
			);
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" }
				}
			);

			if(this.hasContentToDisplay())
			{
				this._innerWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-content-block-field-container" },
							children:
							[
								BX.create("div",
									{
										props: { className: "crm-entity-widget-content-block-inner-comment" },
										html: value
									}
								)
							]
						}
					)
				);

				if (value.length > 200)
				{
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-comment-collapsed");
					this._innerWrapper.appendChild(
						BX.create("DIV",
							{
								attrs: { className: "crm-entity-widget-content-block-field-comment-expand-btn-container" },
								children:
									[
										BX.create("A",
											{
												attrs:
													{
														className: "crm-entity-widget-content-block-field-comment-expand-btn",
														href: "#"
													},
												events:
													{
														click: BX.delegate(this.onExpandButtonClick, this)
													},
												text: this.getMessage("expand")
											}
										)
									]
							}
						)
					);
					this._isCollapsed = true;
				}
			}
			else
			{
				this._innerWrapper.appendChild(document.createTextNode(this.getMessage("isEmpty")));
			}

			this._wrapper.appendChild(this._innerWrapper);

			BX.bindDelegate(
				this._wrapper,
				"mousedown",
				BX.delegate(this.filterViewNode, this),
				this._viewClickHandler
			);
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._isEditorInitialized = !!this._htmlEditor.inited;
			if(this._isEditorInitialized)
			{
				this.prepareEditor();
			}
			else
			{
				BX.addCustomEvent(
					this._htmlEditor,
					"OnCreateIframeAfter",
					this._editorInitializationHandler
				);
				this._htmlEditor.Init();
			}

			window.top.setTimeout(BX.delegate(this.bindChangeEvent, this), 1000);
			this.initializeDragDropAbilities();
		}

		this._hasLayout = true;
	};
	BX.Crm.EntityEditorHtml.prototype.doClearLayout = function(options)
	{
		this.release();
		this._input = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorHtml.prototype.onExpandButtonClick = function(e)
	{
		if (!this._wrapper)
		{
			return BX.PreventDefault(e);
		}

		if (this._hasFiles && BX.type.isDomNode(this._commentWrapper) && !this._textLoaded)
		{
			this._textLoaded = true;
			this.loadContent(this._commentWrapper, "GET_TEXT")
		}
		var eventWrapper = this._wrapper.querySelector(".crm-entity-widget-content-block-inner-comment");
		if (this._isCollapsed)
		{

			BX.defer(
				function() {
					eventWrapper.style.maxHeight = eventWrapper.scrollHeight + 130 + "px";
				}
			)();

			setTimeout(
				BX.delegate(function() {
					BX.removeClass(this._wrapper, "crm-entity-widget-content-block-field-comment-collapsed");
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-comment-expand");
					eventWrapper.style.maxHeight = "";
				}, this),
				200
			);
		}
		else
		{
			BX.defer(
				function() {
					eventWrapper.style.maxHeight = eventWrapper.clientHeight + "px";
				}
			)();


			BX.defer(
				function() {
					BX.removeClass(this._wrapper, "crm-entity-widget-content-block-field-comment-expand");
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-comment-collapsed");
				},
				this
			)();

			setTimeout(
				function() {
					eventWrapper.style.maxHeight = "";
				},
				200
			);
		}

		this._isCollapsed = !this._isCollapsed;

		var button = this._wrapper.querySelector("a.crm-entity-widget-content-block-field-comment-expand-btn");
		if (button)
		{
			button.innerHTML = this.getMessage(this._isCollapsed ? "expand" : "collapse");
		}
		return BX.PreventDefault(e);
	};
	BX.Crm.EntityEditorHtml.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorHtml.messages;
		return (m.hasOwnProperty(name)
				? m[name]
				: BX.Crm.EntityEditorHtml.superclass.getMessage.apply(this, arguments)
		);
	};
	BX.Crm.EntityEditorHtml.prototype.filterViewNode = function(obj)
	{
		return true;
	};
	BX.Crm.EntityEditorHtml.prototype.onViewClick = function(e)
	{
		var link = null;
		var node = BX.getEventTarget(e);
		if(node.tagName === "A")
		{
			link = node;
		}
		else
		{
			link = BX.findParent(node, { tagName: "a" }, this._wrapper);
		}

		if(link && link.target !== "_blank")
		{
			link.target = "_blank";
		}
	};
	BX.Crm.EntityEditorHtml.prototype.onEditorInitialized = function()
	{
		this._isEditorInitialized = true;
		BX.removeCustomEvent(
			this._htmlEditor,
			"OnCreateIframeAfter",
			this._editorInitializationHandler
		);
		this.prepareEditor();
	};
	BX.Crm.EntityEditorHtml.prototype.prepareEditor = function()
	{
		this._htmlEditorContainer.style.display = "";

		this._htmlEditor.CheckAndReInit();
		this._htmlEditor.ResizeSceleton("100%", 200);
		this._htmlEditor.SetContent(this.getStringValue(""), true);

		if(this._focusOnLoad)
		{
			this._htmlEditor.Focus(true);
			this._focusOnLoad = false;
		}
	};
	BX.Crm.EntityEditorHtml.prototype.release = function()
	{
		if(this._htmlEditorContainer)
		{
			var stub = BX.create("DIV",
				{
					style:
						{
							height: this._htmlEditorContainer.offsetHeight + "px",
							border: "1px solid #bbc4cd",
							boxSizing: "border-box"
						}
				}
			);
			this._htmlEditorContainer.parentNode.insertBefore(stub, this._htmlEditorContainer);

			document.body.appendChild(this._htmlEditorContainer);
			this._htmlEditorContainer.style.display = "none";
			this._htmlEditorContainer = null;
		}

		if(this._htmlEditor)
		{
			this.unbindChangeEvent();
			this._htmlEditor.SetContent("");
			this._htmlEditor = null;
			this._isEditorInitialized = false;
		}

		this._focusOnLoad = false;
	};
	BX.Crm.EntityEditorHtml.prototype.bindChangeEvent = function()
	{
		if(this._htmlEditor)
		{
			BX.addCustomEvent(this._htmlEditor, "OnContentChanged", this._changeHandler);
		}
	};
	BX.Crm.EntityEditorHtml.prototype.unbindChangeEvent = function()
	{
		if(this._htmlEditor)
		{
			BX.removeCustomEvent(this._htmlEditor, "OnContentChanged", this._changeHandler);
		}
	};
	BX.Crm.EntityEditorHtml.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._htmlEditor))
		{
			throw "BX.Crm.EntityEditorHtml. Invalid validation context";
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.Crm.EntityEditorHtml.isNotEmptyValue(this._htmlEditor.GetContent());
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._htmlEditorContainer);
		}
		return isValid;
	};
	BX.Crm.EntityEditorHtml.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorHtml.superclass.showError.apply(this, arguments);
		if(this._htmlEditorContainer)
		{
			BX.addClass(this._htmlEditorContainer, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorHtml.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorHtml.superclass.clearError.apply(this);
		if(this._htmlEditorContainer)
		{
			BX.removeClass(this._htmlEditorContainer, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorHtml.prototype.save = function()
	{
		if(this._htmlEditor)
		{
			var value = this._input.value = this._htmlEditor.GetContent();
			this._model.setField(this.getName(), value);
		}
	};
	BX.Crm.EntityEditorHtml.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit && this._input
				? this._htmlEditor.GetContent() : ""
		);
	};
	BX.Crm.EntityEditorHtml.isNotEmptyValue = function(value)
	{
		return BX.util.trim(value.replace(/<br\/?>|&nbsp;/ig, "")) !== "";
	};
	BX.Crm.EntityEditorHtml.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorHtml();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorMoney === "undefined")
{
	BX.Crm.EntityEditorMoney = function()
	{
		BX.Crm.EntityEditorMoney.superclass.constructor.apply(this);
		this._currencyEditor = null;
		this._amountInput = null;
		this._currencyInput = null;
		this._sumElement = null;
		this._selectContainer = null;
		this._inputWrapper = null;
		this._innerWrapper = null;
		this._selectedCurrencyValue = "";
		this._selectorClickHandler = BX.delegate(this.onSelectorClick, this);
		this._isCurrencyMenuOpened = false;
	};
	BX.extend(BX.Crm.EntityEditorMoney, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorMoney.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorMoney.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorMoney.prototype.focus = function()
	{
		if(this._amountInput)
		{
			BX.focus(this._amountInput);
			BX.Crm.EditorTextHelper.getCurrent().selectAll(this._amountInput);
		}
	};
	BX.Crm.EntityEditorMoney.prototype.getValue = function(defaultValue)
	{
		if(!this._model)
		{
			return "";
		}

		return(
			this._model.getStringField(
				this.getAmountFieldName(),
				(defaultValue !== undefined ? defaultValue : "")
			)
		);
	};
	BX.Crm.EntityEditorMoney.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-money" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		//var name = this.getName();
		var title = this.getTitle();
		var data = this.getData();

		var amountInputName = BX.prop.getString(data, "amount");
		var currencyInputName = BX.prop.getString(BX.prop.getObject(data, "currency"), "name");

		var currencyValue = this._model.getField(
			BX.prop.getString(BX.prop.getObject(data, "currency"), "name", "")
		);

		if(!BX.type.isNotEmptyString(currencyValue))
		{
			currencyValue = BX.Currency.Editor.getBaseCurrencyId();
		}

		this._selectedCurrencyValue = currencyValue;

		var currencyName = this._editor.findOption(
			currencyValue,
			BX.prop.getArray(BX.prop.getObject(data, "currency"), "items")
		);

		var amountFieldName = this.getAmountFieldName();
		var currencyFieldName = this.getCurrencyFieldName();
		var amountValue = this._model.getField(amountFieldName, ""); //SET CURRENT SUM VALUE
		var formatted = this._model.getField(BX.prop.getString(data, "formatted"), ""); //SET FORMATTED VALUE

		this._amountValue = null;
		this._amountInput = null;
		this._currencyInput = null;
		this._selectContainer = null;
		this._innerWrapper = null;
		this._sumElement = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._amountValue = BX.create("input",
				{
					attrs:
					{
						name: amountInputName,
						type: "hidden",
						value: amountValue
					}
				}
			);

			this._amountInput = BX.create("input",
				{
					attrs:
					{
						className: "crm-entity-widget-content-input",
						type: "text",
						value: formatted
					}
				}
			);
			BX.bind(this._amountInput, "input", this._changeHandler);

			if(this._model.isFieldLocked(amountFieldName))
			{
				this._amountInput.disabled = true;
			}

			this._currencyInput = BX.create("input",
				{
					attrs:
					{
						name: currencyInputName,
						type: "hidden",
						value: currencyValue
					}
				}
			);

			this._selectContainer = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-select" },
					text: currencyName
				}
			);

			if(this._model.isFieldLocked(currencyFieldName))
			{
				this._selectContainer.disabled = true;
			}
			else
			{
				BX.bind(this._selectContainer, "click", this._selectorClickHandler);
			}

			this._inputWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-field-container crm-entity-widget-content-block-field-container-double" },
					children:
						[
							this._amountValue,
							this._amountInput,
							this._currencyInput,
							BX.create('div',
								{
									props: { className: "crm-entity-widget-content-block-select" + (this._selectContainer.disabled ? '-disabled': '') },
									children: [ this._selectContainer ]
								}
							)
						]
				}
			);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					children: [ this._inputWrapper ]
				}
			);

			this._currencyEditor = new BX.Currency.Editor(
				{
					input: this._amountInput,
					currency: currencyValue,
					callback: BX.delegate(this.onAmountValueChange, this)
				}
			);

			this._currencyEditor.changeValue();
		}
		else //this._mode === BX.Crm.EntityEditorMode.view
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			if(this.hasContentToDisplay())
			{
				this._sumElement = BX.create("span",
					{
						props: { className: "crm-entity-widget-content-block-wallet" }
					}
				);
				this._sumElement.innerHTML = this.renderMoney();
				this._innerWrapper = BX.create("div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						children:
							[
								BX.create("div",
									{
										props: { className: "crm-entity-widget-content-block-inner-text" },
										children: [ this._sumElement ]
									}
								)
							]
					}
				);
			}
			else
			{
				this._innerWrapper = BX.create("div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						text: this.getMessage("isEmpty")
					}
				);
			}
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorMoney.prototype.doClearLayout = function(options)
	{
		BX.PopupMenu.destroy(this._id);

		if(this._currencyEditor)
		{
			this._currencyEditor.clean();
			this._currencyEditor = null;
		}

		this._amountValue = null;
		this._amountInput = null;
		this._currencyInput = null;
		this._sumElement = null;
		this._selectContainer = null;
		this._inputWrapper = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorMoney.prototype.refreshLayout = function(options)
	{
		if(!this._hasLayout)
		{
			return;
		}

		if(!this._isValidLayout)
		{
			BX.Crm.EntityEditorMoney.superclass.refreshLayout.apply(this, arguments);
			return;
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit && this._amountInput)
		{
			var currencyValue = this._currencyEditor
				? this._currencyEditor.currency
				: this._model.getField(this.getCurrencyFieldName());

			if(!BX.type.isNotEmptyString(currencyValue))
			{
				currencyValue = BX.Currency.Editor.getBaseCurrencyId();
			}

			var amountFieldName = this.getAmountFieldName();
			this._amountValue.value = this._model.getField(amountFieldName);
			this._amountInput.value = BX.Currency.Editor.getFormattedValue(
				this._model.getField(amountFieldName, ""),
				currencyValue
			);

			this._amountInput.disabled = this._model.isFieldLocked(amountFieldName);
		}
		else if(this._mode === BX.Crm.EntityEditorMode.view && this._sumElement)
		{
			this._sumElement.innerHTML = this.renderMoney();
		}
	};
	BX.Crm.EntityEditorMoney.prototype.onAmountValueChange = function(v)
	{
		if(this._amountValue)
		{
			this._amountValue.value = v;
		}
	};
	BX.Crm.EntityEditorMoney.prototype.getAmountFieldName = function()
	{
		return this._schemeElement.getDataStringParam("amount", "");
	};
	BX.Crm.EntityEditorMoney.prototype.getCurrencyFieldName = function()
	{
		return BX.prop.getString(
			this._schemeElement.getDataObjectParam("currency", {}),
			"name",
			""
		);
	};
	BX.Crm.EntityEditorMoney.prototype.onSelectorClick = function (e)
	{
		this.openCurrencyMenu();
	};
	BX.Crm.EntityEditorMoney.prototype.openCurrencyMenu = function()
	{
		if(this._isCurrencyMenuOpened)
		{
			return;
		}

		var data = this._schemeElement.getData();
		var currencyList = BX.prop.getArray(BX.prop.getObject(data, "currency"), "items"); //{NAME, VALUE}

		var key = 0;
		var menu = [];
		while (key < currencyList.length)
		{
			menu.push(
				{
					text: currencyList[key]["NAME"],
					value: currencyList[key]["VALUE"],
					onclick: BX.delegate( this.onCurrencySelect, this)
				}
			);
			key++
		}

		BX.PopupMenu.show(
			this._id,
			this._selectContainer,
			menu,
			{
				angle: false, width: this._selectContainer.offsetWidth + 'px',
				events:
					{
						onPopupShow: BX.delegate( this.onCurrencyMenuOpen, this),
						onPopupClose: BX.delegate( this.onCurrencyMenuClose, this)
					}
			}
		);
		// BX.PopupMenu.currentItem.popupWindow.setWidth(BX.pos(this._selectContainer)["width"]);
	};
	BX.Crm.EntityEditorMoney.prototype.closeCurrencyMenu = function()
	{
		if(!this._isCurrencyMenuOpened)
		{
			return;
		}

		var menu = BX.PopupMenu.getMenuById(this._id);
		if(menu)
		{
			menu.popupWindow.close();
		}
	};
	BX.Crm.EntityEditorMoney.prototype.onCurrencyMenuOpen = function()
	{
		BX.addClass(this._selectContainer, "active");
		this._isCurrencyMenuOpened = true;
	};
	BX.Crm.EntityEditorMoney.prototype.onCurrencyMenuClose = function()
	{
		BX.PopupMenu.destroy(this._id);

		BX.removeClass(this._selectContainer, "active");
		this._isCurrencyMenuOpened = false;
	};
	BX.Crm.EntityEditorMoney.prototype.onCurrencySelect = function(e, item)
	{
		this.closeCurrencyMenu();

		this._selectedCurrencyValue = this._currencyInput.value = item.value;
		this._selectContainer.innerHTML = BX.util.htmlspecialchars(item.text);
		if(this._currencyEditor)
		{
			this._currencyEditor.setCurrency(this._selectedCurrencyValue);
		}
		this.markAsChanged(
			{
				fieldName: this.getCurrencyFieldName(),
				fieldValue: this._selectedCurrencyValue
			}
		);
	};
	BX.Crm.EntityEditorMoney.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getAmountFieldName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorMoney.prototype.processModelLock = function(params)
	{
		var name = BX.prop.getString(params, "name", "");
		if(this.getAmountFieldName() === name)
		{
			this.refreshLayout();
		}
	};
	BX.Crm.EntityEditorMoney.prototype.validate = function(result)
	{
		if(!(this._mode === BX.Crm.EntityEditorMode.edit && this._amountInput && this._amountValue))
		{
			throw "BX.Crm.EntityEditorMoney. Invalid validation context";
		}

		this.clearError();

		if(this.hasValidators())
		{
			return this.executeValidators(result);
		}

		var isValid = !this.isRequired() || BX.util.trim(this._amountValue.value) !== "";
		if(!isValid)
		{
			result.addError(BX.Crm.EntityValidationError.create({ field: this }));
			this.showRequiredFieldError(this._inputWrapper);
		}
		return isValid;
	};
	BX.Crm.EntityEditorMoney.prototype.showError =  function(error, anchor)
	{
		BX.Crm.EntityEditorMoney.superclass.showError.apply(this, arguments);
		if(this._amountInput)
		{
			BX.addClass(this._amountInput, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorMoney.prototype.clearError =  function()
	{
		BX.Crm.EntityEditorMoney.superclass.clearError.apply(this);
		if(this._amountInput)
		{
			BX.removeClass(this._amountInput, "crm-entity-widget-content-error");
		}
	};
	BX.Crm.EntityEditorMoney.prototype.getRuntimeValue = function()
	{
		var data = [];
		if (this._mode === BX.Crm.EntityEditorMode.edit)
		{
			if(this._amountValue)
			{
				data[ BX.prop.getString(data, "amount")] = this._amountValue.value;
			}
			data[ BX.prop.getString(data, "currency")] = this._selectedCurrencyValue;

			return data;
		}
		return "";
	};
	BX.Crm.EntityEditorMoney.prototype.save = function()
	{
		var data = this._schemeElement.getData();
		this._model.setField(
			BX.prop.getString(BX.prop.getObject(data, "currency"), "name"),
			this._selectedCurrencyValue,
			{ originator: this }
		);

		if(this._amountValue)
		{
			this._model.setField(
				BX.prop.getString(data, "amount"),
				this._amountValue.value,
				{ originator: this }
			);

			this._model.setField(
				BX.prop.getString(data, "formatted"),
				"",
				{ originator: this }
			);

			this._editor.formatMoney(
				this._amountValue.value,
				this._selectedCurrencyValue,
				BX.delegate(this.onMoneyFormatRequestSuccess, this)
			);
		}
	};
	BX.Crm.EntityEditorMoney.prototype.onMoneyFormatRequestSuccess = function(data)
	{
		var schemeData = this._schemeElement.getData();
		var formattedWithCurrency = BX.type.isNotEmptyString(data["FORMATTED_SUM_WITH_CURRENCY"]) ? data["FORMATTED_SUM_WITH_CURRENCY"] : "";
		this._model.setField(BX.prop.getString(schemeData, "formattedWithCurrency"), formattedWithCurrency);

		var formatted = BX.type.isNotEmptyString(data["FORMATTED_SUM"]) ? data["FORMATTED_SUM"] : "";
		this._model.setField(
			BX.prop.getString(schemeData, "formatted"),
			formatted,
			{ originator: this }
		);

		if(this._sumElement)
		{
			while (this._sumElement.firstChild)
			{
				this._sumElement.removeChild(this._sumElement.firstChild);
			}
			this._sumElement.innerHTML = this.renderMoney();
		}
	};
	BX.Crm.EntityEditorMoney.prototype.renderMoney = function()
	{
		var data = this._schemeElement.getData();
		var formattedWithCurrency = this._model.getField(BX.prop.getString(data, "formattedWithCurrency"), "");
		var formatted = this._model.getField(BX.prop.getString(data, "formatted"), "");
		var result = BX.Currency.Editor.trimTrailingZeros(formatted, this._selectedCurrencyValue);

		return formattedWithCurrency.replace(
			formatted,
			"<span class=\"crm-entity-widget-content-block-colums-right\">" + result + "</span>"
		);
	};
	BX.Crm.EntityEditorMoney.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorMoney();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorImage === "undefined")
{
	BX.Crm.EntityEditorImage = function()
	{
		BX.Crm.EntityEditorImage.superclass.constructor.apply(this);
		this._innerWrapper = null;

		this._dialogShowHandler = BX.delegate(this.onDialogShow, this);
		this._dialogCloseHandler = BX.delegate(this.onDialogClose, this);
		this._fileChangeHandler = BX.delegate(this.onFileChange, this);
	};
	BX.extend(BX.Crm.EntityEditorImage, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorImage.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorImage.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorImage.prototype.hasContentToDisplay = function()
	{
		return(this._mode === BX.Crm.EntityEditorMode.edit
			|| this._model.getSchemeField(this._schemeElement, "showUrl", "") !== ""
		);
	};
	BX.Crm.EntityEditorImage.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-file" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner" }
				}
			);
			this._editor.loadCustomHtml("RENDER_IMAGE_INPUT", { "FIELD_NAME": name }, BX.delegate(this.onEditorHtmlLoad, this));
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-inner" } });

			if(this.hasContentToDisplay())
			{
				this._innerWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-content-block-inner-box" },
							children:
								[
									BX.create(
										"img",
										{
											props:
												{
													className: "crm-entity-widget-content-block-photo",
													src: this._model.getSchemeField(this._schemeElement, "showUrl", "")
												}
										}
									)
								]
						}
					)
				);
			}
			else
			{
				this._innerWrapper.appendChild(document.createTextNode(this.getMessage("isEmpty")));
			}
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorImage.prototype.doClearLayout = function(options)
	{
		if(this._innerWrapper)
		{
			BX.removeCustomEvent(window, "onAfterPopupShow", this._dialogShowHandler);
			BX.removeCustomEvent(window, "onPopupClose", this._dialogCloseHandler);

			BX.cleanNode(this._innerWrapper);
			this._innerWrapper = null;
		}

		this.unbindFileEvents();
	};
	BX.Crm.EntityEditorImage.prototype.onEditorHtmlLoad = function(html)
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit && this._innerWrapper)
		{
			this._innerWrapper.innerHTML = html;

			BX.addCustomEvent(window, "onAfterPopupShow", this._dialogShowHandler);
			BX.addCustomEvent(window, "onPopupClose", this._dialogCloseHandler);

			window.setTimeout(BX.delegate(this.bindFileEvents, this), 500)
		}
	};
	BX.Crm.EntityEditorImage.prototype.bindFileEvents = function()
	{
		var fileControl = BX.MFInput ? BX.MFInput.get(this.getName().toLowerCase() + "_uploader") : null
		if(fileControl)
		{
			BX.addCustomEvent(fileControl, "onAddFile", this._fileChangeHandler);
			BX.addCustomEvent(fileControl, "onDeleteFile", this._fileChangeHandler);
		}
	};
	BX.Crm.EntityEditorImage.prototype.unbindFileEvents = function()
	{
		var fileControl = BX.MFInput ? BX.MFInput.get(this.getName().toLowerCase() + "_uploader") : null
		if(fileControl)
		{
			BX.removeCustomEvent(fileControl, "onAddFile", this._fileChangeHandler);
			BX.removeCustomEvent(fileControl, "onDeleteFile", this._fileChangeHandler);
		}
	};
	BX.Crm.EntityEditorImage.prototype.onDialogShow = function(popup)
	{
		if(popup.uniquePopupId.indexOf("popupavatarEditor") !== 0)
		{
			return;
		}

		BX.addCustomEvent(window, "onApply", this._fileChangeHandler);

		if(this._singleEditController)
		{
			this._singleEditController.setActiveDelayed(false);
		}

		BX.bind(
			popup.popupContainer,
			"click",
			function (e) { BX.eventCancelBubble(e); }
		);
	};
	BX.Crm.EntityEditorImage.prototype.onDialogClose = function(popup)
	{
		if(BX.prop.getString(popup, "uniquePopupId", "").indexOf("popupavatarEditor") !== 0)
		{
			return;
		}

		BX.removeCustomEvent(window, "onApply", this._fileChangeHandler);

		if(this._singleEditController)
		{
			this._singleEditController.setActiveDelayed(true);
		}
	};
	BX.Crm.EntityEditorImage.prototype.onFileChange = function(result)
	{
		this.markAsChanged();
	};
	BX.Crm.EntityEditorImage.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorImage();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorUser === "undefined")
{
	BX.Crm.EntityEditorUser = function()
	{
		BX.Crm.EntityEditorUser.superclass.constructor.apply(this);
		this._input = null;
		this._editButton = null;
		this._photoElement = null;
		this._nameElement = null;
		this._positionElement = null;
		this._userSelector = null;
		this._selectedData = {};
		this._editButtonClickHandler = BX.delegate(this.onEditBtnClick, this);
	};
	BX.extend(BX.Crm.EntityEditorUser, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorUser.prototype.isSingleEditEnabled = function()
	{
		return true;
	};
	BX.Crm.EntityEditorUser.prototype.getRelatedDataKeys = function()
	{
		return (
			[
				this.getDataKey(),
				this._schemeElement.getDataStringParam("formated", ""),
				this._schemeElement.getDataStringParam("position", ""),
				this._schemeElement.getDataStringParam("showUrl", ""),
				this._schemeElement.getDataStringParam("photoUrl", "")
			]
		);
	};
	BX.Crm.EntityEditorUser.prototype.hasContentToDisplay = function()
	{
		return true;
	};
	BX.Crm.EntityEditorUser.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated();
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this._schemeElement.getName();
		var title = this._schemeElement.getTitle();
		var value = this._model.getField(name);

		var formattedName = this._model.getSchemeField(this._schemeElement, "formated", "");
		var position = this._model.getSchemeField(this._schemeElement, "position", "");
		var showUrl = this._model.getSchemeField(this._schemeElement, "showUrl", "", "");
		var photoUrl = this._model.getSchemeField(this._schemeElement, "photoUrl", "");

		this._photoElement = BX.create("a",
			{
				props: { className: "crm-widget-employee-avatar-container", target: "_blank" },
				style:
					{
						backgroundImage: BX.type.isNotEmptyString(photoUrl) ? "url('" + photoUrl + "')" : "",
						backgroundSize: BX.type.isNotEmptyString(photoUrl) ? "30px" : ""
					}
			}
		);

		this._nameElement = BX.create("a",
			{
				props: { className: "crm-widget-employee-name", target: "_blank" },
				text: formattedName
			}
		);

		if (showUrl !== "")
		{
			this._photoElement.href = showUrl;
			this._nameElement.href = showUrl;
		}

		this._positionElement = BX.create("SPAN",
			{
				props: { className: "crm-widget-employee-position" },
				text: position
			}
		);

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(title));

		var userElement = BX.create("div", { props: { className: "crm-widget-employee-container" } });
		this._editButton = null;
		this._input = null;

		if(this._mode === BX.Crm.EntityEditorMode.edit || (this.isEditInViewEnabled() && !this.isReadOnly()))
		{
			this._input = BX.create("input", { attrs: { name: name, type: "hidden", value: value } });
			this._wrapper.appendChild(this._input);

			this._editButton = BX.create("span", { props: { className: "crm-widget-employee-change" }, text: this.getMessage("change") });
			BX.bind(this._editButton, "click", this._editButtonClickHandler);
			userElement.appendChild(this._editButton);
		}

		userElement.appendChild(this._photoElement);
		userElement.appendChild(
			BX.create("span",
				{
					props: { className: "crm-widget-employee-info" },
					children: [ this._nameElement, this._positionElement ]
				}
			)
		);

		this._wrapper.appendChild(
			BX.create("div",
				{ props: { className: "crm-entity-widget-content-block-inner" }, children: [ userElement ] }
			)
		);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorUser.prototype.doRegisterLayout = function()
	{
		if(this.isInEditMode()
			&& this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual)
		)
		{
			window.setTimeout(BX.delegate(this.openSelector, this), 0);
		}
	};
	BX.Crm.EntityEditorUser.prototype.doClearLayout = function(options)
	{
		this._input = null;
		this._editButton = null;
		this._photoElement = null;
		this._nameElement = null;
		this._positionElement = null;
	};
	BX.Crm.EntityEditorUser.prototype.onEditBtnClick = function(e)
	{
		//If any other control has changed try to switch to edit mode.
		if(this._mode === BX.Crm.EntityEditorMode.view && this.isEditInViewEnabled() && this.getEditor().isChanged())
		{
			this.switchToSingleEditMode();
		}
		else
		{
			this.openSelector();
		}
	};
	BX.Crm.EntityEditorUser.prototype.openSelector = function()
	{
		if(!this._userSelector)
		{
			this._userSelector = BX.Crm.EntityEditorUserSelector.create(
				this._id,
				{ callback: BX.delegate(this.processItemSelect, this) }
			);
		}

		this._userSelector.open(this._editButton);
	};
	BX.Crm.EntityEditorUser.prototype.processItemSelect = function(selector, item)
	{
		var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;
		var editInView = this.isEditInViewEnabled();
		if(isViewMode && !editInView)
		{
			return;
		}

		this._selectedData =
			{
				id: BX.prop.getInteger(item, "entityId", 0),
				photoUrl: BX.prop.getString(item, "avatar", ""),
				formattedNameHtml: BX.prop.getString(item, "name", ""),
				positionHtml: BX.prop.getString(item, "desc", "")
			};

		this._input.value = this._selectedData["id"];
		this._photoElement.style.backgroundImage = this._selectedData["photoUrl"] !== ""
			? "url('" + this._selectedData["photoUrl"] + "')" : "";
		this._photoElement.style.backgroundSize = this._selectedData["photoUrl"] !== ""
			? "30px" : "";

		this._nameElement.innerHTML = this._selectedData["formattedNameHtml"];
		this._positionElement.innerHTML = this._selectedData["positionHtml"];
		this._userSelector.close();

		if(!isViewMode)
		{
			this.markAsChanged();
		}
		else
		{
			this._editor.saveControl(this);
		}
	};
	BX.Crm.EntityEditorUser.prototype.save = function()
	{
		var data = this._schemeElement.getData();
		if(this._selectedData["id"] > 0)
		{
			var itemId = this._selectedData["id"];

			this._model.setField(
				BX.prop.getString(data, "formated"),
				BX.util.htmlspecialcharsback(this._selectedData["formattedNameHtml"])
			);

			this._model.setField(
				BX.prop.getString(data, "position"),
				this._selectedData["positionHtml"] !== "&nbsp;"
					? BX.util.htmlspecialcharsback(this._selectedData["positionHtml"]) : ""
			);

			this._model.setField(
				BX.prop.getString(data, "showUrl"),
				BX.prop.getString(data, "pathToProfile").replace(/#user_id#/ig, itemId)
			);

			this._model.setField(
				BX.prop.getString(data, "photoUrl"),
				this._selectedData["photoUrl"]
			);

			this._model.setField(this.getName(), itemId);
		}
	};
	BX.Crm.EntityEditorUser.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorUser.prototype.getRuntimeValue = function()
	{
		if (this._mode === BX.Crm.EntityEditorMode.edit && this._selectedData["id"] > 0)
		{
			return this._selectedData["id"];
		}
		return "";
	};
	BX.Crm.EntityEditorUser.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorUser.messages;
		return (m.hasOwnProperty(name)
			? m[name]
			: BX.Crm.EntityEditorUser.superclass.getMessage.apply(this, arguments)
		);
	};

	if(typeof(BX.Crm.EntityEditorUser.messages) === "undefined")
	{
		BX.Crm.EntityEditorUser.messages = {};
	}
	BX.Crm.EntityEditorUser.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorUser();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorAddress === "undefined")
{
	BX.Crm.EntityEditorAddress = function()
	{
		BX.Crm.EntityEditorAddress.superclass.constructor.apply(this);
		this._innerWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorAddress, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorAddress.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorAddress.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorAddress.prototype.hasContentToDisplay = function()
	{
		return(this._mode === BX.Crm.EntityEditorMode.edit || this.getViewHtml() !== "");
	};
	BX.Crm.EntityEditorAddress.prototype.getViewHtml = function()
	{
		var viewFieldName = this._schemeElement.getDataStringParam("view", "");
		if(viewFieldName === "")
		{
			viewFieldName = this._schemeElement.getName() + "_HML";
		}
		return this._model.getStringField(viewFieldName, "");
	};
	BX.Crm.EntityEditorAddress.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated();
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this._schemeElement.getName();
		var title = this.getTitle();
		var fields = this._schemeElement.getDataObjectParam("fields", {});
		var labels = this._schemeElement.getDataObjectParam("labels", {});
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(title));
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{

			var fieldsContainer = BX.create("div", { attrs: { className: "crm-entity-widget-content-block-inner-address" } } );

			this._innerWrapper = BX.create("div",
				{
					attrs: { className: "crm-entity-widget-content-block-inner" },
					children:
					[
						BX.create("div",
							{
								props: {className: "crm-entity-widget-content-block-field-container"},
								children: [ fieldsContainer ]
							}
						)
					]
				}
			);

			for(var key in fields)
			{
				if(!fields.hasOwnProperty(key))
				{
					return;
				}

				var field = fields[key];
				var label = BX.prop.getString(labels, key, key);
				this.layoutField(key, field, label, fieldsContainer);
			}

			BX.bindDelegate(
				fieldsContainer,
				"bxchange",
				{ tag: [ "input", "textarea" ] },
				this._changeHandler
			);
		}
		else
		{
			if(this.hasContentToDisplay())
			{
				this._innerWrapper = BX.create("div",
					{
						attrs: { className: "crm-entity-widget-content-block-inner" },
						children:
						[
							BX.create("div",
								{
									attrs: { className: "crm-entity-widget-content-block-inner-text" },
									html: this.getViewHtml()
								}
							)
						]
					}
				);
			}
			else
			{
				this._innerWrapper = BX.create(
					"div",
					{
						attrs: { className: "crm-entity-widget-content-block-inner" },
						text: this.getMessage("isEmpty")
					}
				);
			}
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true
	};
	BX.Crm.EntityEditorAddress.prototype.layoutField = function(name, field, label, container)
	{
		var alias = BX.prop.getString(field, "NAME", name);
		var value = this._model.getStringField(alias, "");

		container.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-title" },
					children: [
						BX.create(
							"span",
							{
								attrs: { className: "crm-entity-widget-content-block-title-text" },
								text: label
							}
						)
					]
				}
			)
		);

		if(BX.prop.getBoolean(field, "IS_MULTILINE", false))
		{
			container.appendChild(
				BX.create(
					"textarea",
					{
						props: { className: "crm-entity-widget-content-input", name: alias, value: value }
					}
				)
			);
		}
		else
		{
			container.appendChild(
				BX.create(
					"input",
					{
						props: { className: "crm-entity-widget-content-input", name: alias, type: "text", value: value }
					}
				)
			);
		}
	};
	BX.Crm.EntityEditorAddress.prototype.doClearLayout = function(options)
	{
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorAddress.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorAddress();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorMultifieldItem === "undefined")
{
	BX.Crm.EntityEditorMultifieldItem = function()
	{
		this._id = "";
		this._settings = {};
		this._parent = null;
		this._editor = null;

		this._mode = BX.Crm.EntityEditorMode.view;
		this._data = null;
		this._typeId = "";
		this._valueTypeItems = null;

		this._container = null;
		this._wrapper = null;
		this._valueInput = null;
		this._valueTypeInput = null;
		this._valueTypeSelector = null;

		this._deleteButton = null;
		this._deleteButtonHandler = BX.delegate(this.onDeleteButtonClick, this);

		this._isJunked = false;

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorMultifieldItem.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._parent = BX.prop.get(this._settings, "parent", null);
			this._editor = this._parent.getEditor();

			this._mode = BX.prop.getInteger(this._settings, "mode", BX.Crm.EntityEditorMode.view);

			this._typeId = BX.prop.getString(this._settings, "typeId", "");
			this._data = BX.prop.getObject(this._settings, "data", {});
			this._valueTypeItems = BX.prop.getArray(this._settings, "valueTypeItems", []);

			this._container = BX.prop.getElementNode(this._settings, "container", null);
		},
		getId: function()
		{
			return this._id;
		},
		isEmpty: function()
		{
			return BX.util.trim(this.getValue()) === "";
		},
		getTypeId: function()
		{
			return this._typeId;
		},
		getValue: function()
		{
			return BX.prop.getString(this._data, "VALUE", "");
		},
		getValueId: function()
		{
			return BX.prop.getString(this._data, "ID", "");
		},
		getValueTypeId: function()
		{
			var result = BX.prop.getString(this._data, "VALUE_TYPE", "");
			return result !== "" ? result : this.getDefaultValueTypeId();
		},
		getDefaultValueTypeId: function()
		{
			return this._valueTypeItems.length > 0
				? BX.prop.getString(this._valueTypeItems[0], "VALUE") : "";
		},
		getViewData: function()
		{
			return BX.prop.getObject(this._data, "VIEW_DATA", {});
		},
		resolveValueTypeName: function(valueTypeId)
		{
			if(valueTypeId === "")
			{
				return "";
			}

			for(var i = 0, length = this._valueTypeItems.length; i < length; i++)
			{
				var item = this._valueTypeItems[i];
				if(valueTypeId === BX.prop.getString(item, "VALUE", ""))
				{
					return BX.prop.getString(item, "NAME", valueTypeId);
				}
			}
			return valueTypeId;
		},
		prepareControlName: function(name)
		{
			return this.getTypeId() + "[" + this.getValueId() + "]" + "[" + name + "]";
		},
		getMode: function()
		{
			return this._mode;
		},
		setMode: function(mode)
		{
			this._mode = mode;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
			if(this._hasLayout)
			{
				this.clearLayout();
			}
		},
		focus: function()
		{
			if(this._valueInput)
			{
				BX.focus(this._valueInput);
				BX.Crm.EditorTextHelper.getCurrent().selectAll(this._valueInput);
			}
		},
		layout: function()
		{
			if(this._hasLayout)
			{
				return;
			}

			this._valueInput = null;
			this._valueTypeInput = null;
			this._valueTypeSelector = null;
			this._deleteButton = null;
			var valueTypeId = this.getValueTypeId();
			var value = this.getValue();

			this._wrapper = BX.create("div");
			this._container.appendChild(this._wrapper);

			if(this._mode === BX.Crm.EntityEditorMode.edit)
			{
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-container crm-entity-widget-content-block-field-container-double");

				this._valueInput = BX.create(
					"input",
					{
						attrs:
							{
								className: "crm-entity-widget-content-input",
								name: this.prepareControlName("VALUE"),
								type: "text",
								value: value
							}
					}
				);
				BX.bind(this._valueInput, "input", BX.delegate(this.onValueChange, this));
				this._wrapper.appendChild(this._valueInput);

				this._valueTypeInput = BX.create(
					"input",
					{
						attrs:
							{
								name: this.prepareControlName("VALUE_TYPE"),
								type: "hidden",
								value: valueTypeId
							}
					}
				);
				this._wrapper.appendChild(this._valueTypeInput);

				this._valueTypeSelector = BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-select" },
						text: this.resolveValueTypeName(valueTypeId),
						events: { click: BX.delegate(this.onValueTypeSelectorClick, this) }
					}
				);

				this._wrapper.appendChild(
					BX.create(
						"div",
						{
							attrs: { className: "crm-entity-widget-content-block-select" },
							children: [ this._valueTypeSelector ]
						}
					)
				);

				this._deleteButton = BX.create(
					"div",
					{ attrs: { className: "crm-entity-widget-content-remove-block" } }
				);
				this._wrapper.appendChild(this._deleteButton);
				BX.bind(this._deleteButton, "click", this._deleteButtonHandler);

				if(this._editor.isDuplicateControlEnabled())
				{
					var dupControlConfig = this._parent.getDuplicateControlConfig();
					if(dupControlConfig)
					{
						if(!BX.type.isPlainObject(dupControlConfig["field"]))
						{
							dupControlConfig["field"] = {};
						}
						dupControlConfig["field"]["id"] = this.getValueId();
						dupControlConfig["field"]["element"] = this._valueInput;
						this._editor.getDuplicateManager().registerField(dupControlConfig);
					}
				}
			}
			else if(this._mode === BX.Crm.EntityEditorMode.view && !this.isEmpty())
			{
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-mutlifield");

				var viewData = this.getViewData();
				var html = BX.prop.getString(viewData, "value", "");
				if(html === "")
				{
					html = BX.util.htmlspecialchars(value);
				}

				this._wrapper.appendChild(
					BX.create(
						"span",
						{
							attrs: { className: "crm-entity-widget-content-block-mutlifield-type" },
							text: this.resolveValueTypeName(valueTypeId)
						}
					)
				);

				var contentWrapper = BX.create(
					"span",
					{
						attrs: { className: "crm-entity-widget-content-block-mutlifield-value" },
						html: html
					}
				);
				this._wrapper.appendChild(contentWrapper);

				if(this._parent.getMultifieldType() === "EMAIL")
				{
					var emailLink = contentWrapper.querySelector("a.crm-entity-email");
					if(emailLink)
					{
						BX.bind(emailLink, "click", BX.delegate(this.onEmailClick, this));
					}
				}
			}

			this._hasLayout = true;
		},
		clearLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			if(this._editor.isDuplicateControlEnabled())
			{
				var dupControlConfig = this._parent.getDuplicateControlConfig();
				if(dupControlConfig)
				{
					if(!BX.type.isPlainObject(dupControlConfig["field"]))
					{
						dupControlConfig["field"] = {};
					}
					dupControlConfig["field"]["id"] = this.getValueId();
					this._editor.getDuplicateManager().unregisterField(dupControlConfig);
				}
			}

			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		},
		adjust: function()
		{
			if(this._hasLayout)
			{
				this._wrapper.style.display = this._isJunked ? "none" : "";
			}
		},
		onValueChange: function(e)
		{
			this._parent.processItemChange(this);
		},
		onValueTypeSelectorClick: function(e)
		{
			var menu = [];
			for(var i = 0, length = this._valueTypeItems.length; i < length; i++)
			{
				var item = this._valueTypeItems[i];
				menu.push(
					{
						text: item["NAME"],
						value: item["VALUE"],
						onclick: BX.delegate( this.onValueTypeSelect, this)
					}
				);
			}

			BX.addClass(this._valueTypeSelector, "active");

			BX.PopupMenu.destroy(this._id);
			BX.PopupMenu.show(
				this._id,
				this._valueTypeSelector,
				menu,
				{
					angle: false, width: this._valueTypeSelector.offsetWidth + 'px',
					events: { onPopupClose: BX.delegate(this.onValueTypeMenuClose, this) }
				}
			);

			BX.PopupMenu.currentItem.popupWindow.setWidth(BX.pos(this._valueTypeSelector)["width"]);
		},
		onValueTypeMenuClose: function(e)
		{
			BX.removeClass(this._valueTypeSelector, "active");
		},
		onValueTypeSelect: function(e, item)
		{
			BX.removeClass(this._valueTypeSelector, "active");

			this._valueTypeInput.value = item.value;
			this._valueTypeSelector.innerHTML = BX.util.htmlspecialchars(item.text);

			this._parent.processItemChange(this);
			BX.PopupMenu.destroy(this._id);
		},
		isJunked: function()
		{
			return this._isJunked;
		},
		markAsJunked: function(junked)
		{
			junked = !!junked;
			if(this._isJunked !== junked)
			{
				this._isJunked = junked;
				if(this._isJunked)
				{
					this._valueInput.value = "";
				}
				this.adjust();
			}
		},
		onEmailClick: function(e)
		{
			if(BX.CrmActivityEditor)
			{
				var ownerInfo = this._editor.getOwnerInfo();
				var settings =
				{
					ownerType: ownerInfo["ownerType"],
					ownerID: ownerInfo["ownerID"],
					communications:
					[
						{
							entityType: ownerInfo["ownerType"],
							entityId: ownerInfo["ownerID"],
							type: "EMAIL",
							value: this.getValue()
						}
					]
				};
				BX.CrmActivityEditor.addEmail(settings);
			}
			return BX.PreventDefault(e);
		},
		onDeleteButtonClick: function(e)
		{
			this._parent.processItemDeletion(this);
		}
	};
	BX.Crm.EntityEditorMultifieldItem.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorMultifieldItem();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorMultifieldItemPhone ==="undefined")
{
	BX.Crm.EntityEditorMultifieldItemPhone = function()
	{
		BX.Crm.EntityEditorMultifieldItemPhone.superclass.constructor.apply(this);

		this._maskedPhone = null;
		this._maskedValueInput = null;
		this._countryFlagNode = null;
	};

	BX.extend(BX.Crm.EntityEditorMultifieldItemPhone, BX.Crm.EntityEditorMultifieldItem);

	BX.Crm.EntityEditorMultifieldItemPhone.prototype.layout = function ()
	{
		var self = this;
		if (this._hasLayout)
		{
			return;
		}

		this._valueInput = null;
		this._valueTypeInput = null;
		this._valueTypeSelector = null;
		var valueTypeId = this.getValueTypeId();
		var value = this.getValue();

		this._wrapper = BX.create("div");
		this._container.appendChild(this._wrapper);

		if (this._mode === BX.Crm.EntityEditorMode.edit)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-container crm-entity-widget-content-block-field-container-double");

			this._valueInput = BX.create(
				"input",
				{
					attrs: {
						name: this.prepareControlName("VALUE"),
						type: "hidden",
						value: value
					}
				}
			);
			this._wrapper.appendChild(this._valueInput);

			this._wrapper.appendChild(BX.create("div", {
				props: {className: "crm-entity-widget-content-input-phone-wrapper"},
				children: [
					this._countryFlagNode = BX.create("span", {
						props: {className: "crm-entity-widget-content-country-flag"}
					}),
					this._maskedValueInput = BX.create(
						"input",
						{
							attrs: {
								className: "crm-entity-widget-content-input crm-entity-widget-content-input-phone",
								type: "text",
								value: value
							}
						}
					)
				]
			}));

			this._maskedPhone = new BX.PhoneNumber.Input({
				node: this._maskedValueInput,
				flagNode: this._countryFlagNode,
				flagSize: 24,
				onChange: function(e)
				{
					self._valueInput.value = e.value;
					self.onValueChange();
				}
			});

			this._valueTypeInput = BX.create(
				"input",
				{
					attrs: {
						name: this.prepareControlName("VALUE_TYPE"),
						type: "hidden",
						value: valueTypeId
					}
				}
			);
			this._wrapper.appendChild(this._valueTypeInput);

			this._valueTypeSelector = BX.create(
				"div",
				{
					props: {className: "crm-entity-widget-content-select"},
					text: this.resolveValueTypeName(valueTypeId),
					events: {click: BX.delegate(this.onValueTypeSelectorClick, this)}
				}
			);

			this._wrapper.appendChild(
				BX.create(
					"div",
					{
						attrs: {className: "crm-entity-widget-content-block-select"},
						children: [this._valueTypeSelector]
					}
				)
			);

			this._deleteButton = BX.create(
				"div",
				{ attrs: { className: "crm-entity-widget-content-remove-block" } }
			);
			this._wrapper.appendChild(this._deleteButton);
			BX.bind(this._deleteButton, "click", this._deleteButtonHandler);

			if (this._editor.isDuplicateControlEnabled())
			{
				var dupControlConfig = this._parent.getDuplicateControlConfig();
				if (dupControlConfig)
				{
					if (!BX.type.isPlainObject(dupControlConfig["field"]))
					{
						dupControlConfig["field"] = {};
					}
					dupControlConfig["field"]["id"] = this.getValueId();
					dupControlConfig["field"]["element"] = this._maskedValueInput;
					this._editor.getDuplicateManager().registerField(dupControlConfig);
				}
			}
		}
		else if (this._mode === BX.Crm.EntityEditorMode.view && !this.isEmpty())
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-mutlifield");

			var viewData = this.getViewData();
			var html = BX.prop.getString(viewData, "value", "");
			if(html === "")
			{
				html = BX.util.htmlspecialchars(value);
			}

			this._wrapper.appendChild(
				BX.create(
					"span",
					{
						attrs: {className: "crm-entity-widget-content-block-mutlifield-type"},
						text: this.resolveValueTypeName(valueTypeId)
					}
				)
			);

			this._wrapper.appendChild(
				BX.create(
					"span",
					{
						attrs: {className: "crm-entity-widget-content-block-mutlifield-value"},
						html: html
					}
				)
			);
		}

		this._hasLayout = true;
	};
	BX.Crm.EntityEditorMultifieldItemPhone.prototype.focus = function()
	{
		if(this._maskedValueInput)
		{
			BX.focus(this._maskedValueInput);
			BX.Crm.EditorTextHelper.getCurrent().selectAll(this._maskedValueInput);
		}
	};
	BX.Crm.EntityEditorMultifieldItemPhone.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorMultifieldItemPhone();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorMultifield === "undefined")
{
	BX.Crm.EntityEditorMultifield = function()
	{
		BX.Crm.EntityEditorMultifield.superclass.constructor.apply(this);
		this._items = null;
		this._itemWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorMultifield, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorMultifield.prototype.doInitialize = function()
	{
		this.initializeItems();
	};
	BX.Crm.EntityEditorMultifield.prototype.initializeItems = function()
	{
		var name = this.getName();
		var data = this._model.getField(name, []);
		if(data.length === 0)
		{
			data.push({ "ID": "n0" });
		}

		for(var i = 0, length = data.length; i < length; i++)
		{
			this.addItem(data[i]);
		}
	};
	BX.Crm.EntityEditorMultifield.prototype.findItemIndex = function(item)
	{
		if(!this._items)
		{
			return -1;
		}

		for(var i = 0, length = this._items.length; i < length; i++)
		{
			if(this._items[i] === item)
			{
				return i;
			}
		}

		return -1;
	};
	BX.Crm.EntityEditorMultifield.prototype.resetItems = function()
	{
		if(this._hasLayout)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				this._items[i].clearLayout();
			}
		}

		this._items = [];
	};
	BX.Crm.EntityEditorMultifield.prototype.deleteItem = function(item)
	{
		if(!this._items)
		{
			return;
		}

		var index = this.findItemIndex(item);
		if(index >= 0)
		{
			this._items[index].markAsJunked(true);
		}
	};
	BX.Crm.EntityEditorMultifield.prototype.reset = function()
	{
		this.resetItems();
		this.initializeItems();
	};
	BX.Crm.EntityEditorMultifield.prototype.hasContentToDisplay = function()
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			return true;
		}

		var length = this._items.length;
		if(length === 0)
		{
			return false;
		}

		for(var i = 0; i < length; i++)
		{
			if(!this._items[i].isEmpty())
			{
				return true;
			}
		}
		return false;
	};
	BX.Crm.EntityEditorMultifield.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorMultifield.prototype.getContentWrapper = function()
	{
		return this._itemWrapper;
	};
	BX.Crm.EntityEditorMultifield.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorMultifield.prototype.prepareItemsLayout = function()
	{
		for(var i = 0, length = this._items.length; i < length; i++)
		{
			var item = this._items[i];
			item.setMode(this._mode);
			item.setContainer(this._itemWrapper);
			item.layout();
		}
	};
	BX.Crm.EntityEditorMultifield.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorMultifield.prototype.getContentWrapper = function()
	{
		return this._itemWrapper;
	};
	BX.Crm.EntityEditorMultifield.prototype.focus = function()
	{
		if(this._items && this._items.length > 0)
		{
			this._items[this._items.length - 1].focus();
		}
	};
	BX.Crm.EntityEditorMultifield.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-multifield" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		this._itemWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(this.getTitle()));

		this._itemWrapper = BX.create("div", { attrs: { className: "crm-entity-widget-content-block-inner" } });
		this._wrapper.appendChild(this._itemWrapper);

		if(this.hasContentToDisplay())
		{
			this.prepareItemsLayout();
		}
		else if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._itemWrapper.appendChild(document.createTextNode(this.getMessage("isEmpty")));
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(
				BX.create(
					"div",
					{
						attrs: { className: "crm-entity-widget-content-block-add-field" },
						children:
						[
							BX.create(
								"span",
								{
									attrs: { className: "crm-entity-widget-content-add-field" },
									text: this.getMessage("add"),
									events: { click: BX.delegate(this.onAddButtonClick, this) }
								}
							)
						]
					}
				)
			);
		}

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorMultifield.prototype.doClearLayout = function(options)
	{
		for(var i = 0, length = this._items.length; i < length; i++)
		{
			var item = this._items[i];
			item.clearLayout();
			item.setContainer(null);
		}
		this._itemWrapper = null;
	};
	BX.Crm.EntityEditorMultifield.prototype.refreshLayout = function(options)
	{
		if(!this._hasLayout)
		{
			return;
		}

		if(!this._isValidLayout)
		{
			BX.Crm.EntityEditorMultifield.superclass.refreshLayout.apply(this, arguments);
			return;
		}

		this.resetItems();
		BX.cleanNode(this._itemWrapper);

		this.initializeItems();
		if(this.hasContentToDisplay())
		{
			this.prepareItemsLayout();
		}
		else if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._itemWrapper.appendChild(document.createTextNode(this.getMessage("isEmpty")));
		}
	};
	BX.Crm.EntityEditorMultifield.prototype.getMultifieldType = function()
	{
		return this._schemeElement.getDataStringParam("type", "");
	};
	BX.Crm.EntityEditorMultifield.prototype.addItem = function(data)
	{
		var item;
		var typeId = this._schemeElement.getName();

		if(typeId === 'PHONE')
		{
			item = BX.Crm.EntityEditorMultifieldItemPhone.create(
				"",
				{
					parent: this,
					typeId: this._schemeElement.getName(),
					valueTypeItems: this._schemeElement.getDataArrayParam("items", []),
					data: data
				}
			);
		}
		else
		{
			item = BX.Crm.EntityEditorMultifieldItem.create(
				"",
				{
					parent: this,
					typeId: this._schemeElement.getName(),
					valueTypeItems: this._schemeElement.getDataArrayParam("items", []),
					data: data
				}
			);
		}

		if(this._items === null)
		{
			this._items = [];
		}

		this._items.push(item);

		if(this._hasLayout)
		{
			item.setMode(this._mode);
			item.setContainer(this._itemWrapper);
			item.layout();
		}

		return item;
	};
	BX.Crm.EntityEditorMultifield.prototype.onAddButtonClick = function(e)
	{
		this.addItem({ "ID": "n" + this._items.length.toString() });
	};
	BX.Crm.EntityEditorMultifield.prototype.processItemChange = function(item)
	{
		this.markAsChanged();
	};
	BX.Crm.EntityEditorMultifield.prototype.processItemDeletion = function(item)
	{
		this.deleteItem(item);
		this.markAsChanged();
	};
	BX.Crm.EntityEditorMultifield.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorMultifield();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorClientMode === "undefined")
{
	BX.Crm.EntityEditorClientMode =
	{
		undefined: 0,
		select: 1,
		create: 2,
		edit: 3
	};
}

if(typeof BX.Crm.EntityEditorClientSearchBox === "undefined")
{
	BX.Crm.EntityEditorClientSearchBox = function()
	{
		this._id = "";
		this._settings = {};

		this._editor = null;

		this._container = null;
		this._wrapper = null;

		this._badgeElement = null;
		this._editButton = null;
		this._changeButton = null;
		this._deleteButton = null;

		this._parentField = null;
		this._entityInfo = null;
		this._entityTypeName = "";

		this._externalEditorPages = null;

		this._searchInput = null;
		this._searchControl = null;

		this._loaderConfig = null;

		this._changeNotifier = null;
		this._titleChangeNotifier = null;
		this._resetNotifier = null;
		this._deletionNotifier = null;

		this._enableDeletion = true;

		this._editButtonHandler = BX.delegate(this.onEditButtonClick, this);
		this._changeButtonHandler = BX.delegate(this.onChangeButtonClick, this);
		this._deleteButtonHandler = BX.delegate(this.onDeleteButtonClick, this);
		this._inputFocusHandler = BX.delegate(this.onInputFocus, this);
		this._inputBlurHandler = BX.delegate(this.onInputBlur, this);
		this._inputDblClickHandler = BX.delegate(this.onInputDblClick, this);

		this._mode = BX.Crm.EntityEditorClientMode.undefined;
		this._multifieldChangeNotifier = null;

		this._maskedPhone = null;
		this._emailInput = null;

		this._phoneId = "";
		this._emailId = "";

		this._enableQuickEdit = true;

		this._hasFocus = false;
		this._hasLayout = false;
		this._hasMultifieldLayout = false;
	};
	BX.Crm.EntityEditorClientSearchBox.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._editor = BX.prop.get(this._settings, "editor", null);
			this._parentField = BX.prop.get(this._settings, "parentField", null);
			this._container = BX.prop.getElementNode(this._settings, "container", null);

			var entityInfo = BX.prop.get(this._settings, "entityInfo", null);
			if(entityInfo)
			{
				this._entityInfo = entityInfo;
				this._entityTypeName = entityInfo.getTypeName();
			}
			else
			{
				this._entityTypeName = BX.prop.getString(this._settings, "entityTypeName", "");
			}

			this._mode = BX.prop.getInteger(this._settings, "mode", BX.Crm.EntityEditorClientMode.select);
			if(this._mode === BX.Crm.EntityEditorClientMode.edit && !(this._entityInfo && this._entityInfo.canUpdate()))
			{
				this._mode = BX.Crm.EntityEditorClientMode.select;
			}

			this._enableQuickEdit = BX.prop.getBoolean(this._settings, "enableQuickEdit", true);
			this._enableDeletion = BX.prop.getBoolean(this._settings, "enableDeletion", true);
			this._loaderConfig = BX.prop.get(this._settings, "loaderConfig", null);

			this._changeNotifier = BX.CrmNotifier.create(this);
			this._titleChangeNotifier = BX.CrmNotifier.create(this);
			this._deletionNotifier = BX.CrmNotifier.create(this);
			this._resetNotifier = BX.CrmNotifier.create(this);

			this._multifieldChangeNotifier = BX.CrmNotifier.create(this);
		},
		getMessage: function(name)
		{
			return BX.prop.getString(BX.Crm.EntityEditorClientSearchBox.messages, name);
		},
		getEntity: function()
		{
			return this._entityInfo;
		},
		setEntityTypeName: function(entityTypeName)
		{
			if(this._entityTypeName !== entityTypeName)
			{
				this._entityTypeName = entityTypeName;
			}
		},
		setEntity: function(entityInfo, enableNotification)
		{
			var previousEntityInfo = this._entityInfo;

			this._entityInfo = entityInfo;

			if(entityInfo)
			{
				this._entityTypeName = entityInfo.getTypeName();
			}

			if(this._entityInfo && this._entityInfo.getId() === 0)
			{
				this.setMode(BX.Crm.EntityEditorClientMode.create);
			}
			else
			{
				this.setMode(BX.Crm.EntityEditorClientMode.select);
			}

			this.clearMultifieldLayout();
			this.adjust();

			if(enableNotification)
			{
				this._changeNotifier.notify([ this._entityInfo , previousEntityInfo ]);
			}
		},
		setupEntity: function(entityTypeName, entityId)
		{
			if(entityId <= 0)
			{
				return;
			}

			this.setEntityTypeName(entityTypeName);
			this.loadEntityInfo(entityId);
		},
		hasEntity: function()
		{
			return !!this._entityInfo;
		},
		isNewEntity: function()
		{
			return this._entityInfo && this._entityInfo.getId() === 0;
		},
		canUpdateEntity: function()
		{
			return this._entityInfo && this._entityInfo.canUpdate();
		},
		getMode: function()
		{
			return this._mode;
		},
		setMode: function(mode)
		{
			if(!BX.type.isNumber(mode))
			{
				mode = parseInt(mode);
				if(!BX.type.isNumber(mode))
				{
					throw "EntityEditorClientSearchBox: Argument must be integer.";
				}
			}

			if(this._mode === mode)
			{
				return;
			}

			this._mode = mode;
		},
		layout: function(options)
		{
			if(this._hasLayout)
			{
				return;
			}

			if(!BX.type.isPlainObject(options))
			{
				options = {};
			}

			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-search-row" } });
			this.innerWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-search-inner" } });

			var anchor = BX.prop.getElementNode(options, "anchor", null);
			if(anchor)
			{
				this._container.insertBefore(this._wrapper, anchor);
			}
			else
			{
				this._container.appendChild(this._wrapper);
			}

			this._wrapper.appendChild(this.innerWrapper);

			var boxWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-search-box" } });
			this.innerWrapper.appendChild(boxWrapper);

			var icon = BX.create("div", { props: { className: "crm-entity-widget-img-box" } });
			if(this._entityTypeName === BX.CrmEntityType.names.company)
			{
				BX.addClass(icon, "crm-entity-widget-img-company");
			}
			else if(this._entityTypeName === BX.CrmEntityType.names.contact)
			{
				BX.addClass(icon, "crm-entity-widget-img-contact");
			}
			boxWrapper.appendChild(icon);

			this._searchInput = BX.create("input",
				{
					props:
						{
							type: "text",
							placeholder: BX.prop.getString(this._settings, "placeholder", ""),
							className: "crm-entity-widget-content-input crm-entity-widget-content-search-input",
							autocomplete: "nope"
						}
				}
			);
			boxWrapper.appendChild(this._searchInput);
			BX.bind(this._searchInput, "focus", this._inputFocusHandler);
			BX.bind(this._searchInput, "blur", this._inputBlurHandler);
			BX.bind(this._searchInput, "dblclick", this._inputDblClickHandler);

			this._badgeElement = BX.create("div", { props: { className: "crm-entity-widget-badge" } });
			boxWrapper.appendChild(this._badgeElement);

			this._editButton = BX.create("div", { props: { className: "crm-entity-widget-btn-edit" } });
			boxWrapper.appendChild(this._editButton);

			BX.bind(this._editButton, "click", this._editButtonHandler);

			this._changeButton = BX.create(
				"div",
				{
					props:
						{
							className: "crm-entity-widget-btn-select",
							title: this.getMessage(this._entityTypeName.toLowerCase() + "ChangeButtonHint")
						}
				}
			);
			boxWrapper.appendChild(this._changeButton);

			BX.bind(this._changeButton, "click", this._changeButtonHandler);

			if(this._entityInfo)
			{
				//Move it in BX.UI.Dropdown
				this._searchInput.value = this._entityInfo.getTitle();
			}

			this._searchControl = new BX.UI.Dropdown(
				{
					searchAction: "crm.api.entity.search",
					searchOptions: { types: [ this._entityTypeName ], scope: "index" },
					searchResultRenderer: null,
					targetElement: this._searchInput,
					items: BX.prop.getArray(this._settings, "lastEntityInfos", []),
					enableCreation: BX.prop.getBoolean(this._settings, "enableCreation", false),
					enableCreationOnBlur: this._enableQuickEdit,
					context: { origin: "crm.entity.editor", isEmbedded: this._editor.isEmbedded()  },
					messages:
						{
							creationLegend: this.getMessage(this._entityTypeName.toLowerCase() + "ToCreateLegend"),
							notFound: this.getMessage("notFound")
						},
					events:
						{
							onSelect: this.onEntitySelect.bind(this),
							onAdd: this.onEntityAdd.bind(this),
							onReset: this.onEntityReset.bind(this)
						}
				}
			);

			this._deleteButton = BX.create("div", { props: { className: "crm-entity-widget-btn-close" } });
			if(!this._enableDeletion)
			{
				this._deleteButton.style.display = "none";
			}
			this.innerWrapper.appendChild(this._deleteButton);
			BX.bind(this._deleteButton, "click", this._deleteButtonHandler);

			window.setTimeout(function(){ this.adjust(options); }.bind(this), 0);
			this._hasLayout = true;
		},
		clearLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			this.clearMultifieldLayout();

			BX.unbind(this._editButton, "click", this._editButtonHandler);
			BX.unbind(this._deleteButton, "click", this._deleteButtonHandler);
			BX.unbind(this._changeButton, "click", this._changeButtonHandler);

			this._deleteButton = this._changeButton = this._searchControl = this._badgeElement = null;
			this._wrapper = BX.remove(this._wrapper);

			this._hasLayout = false;
		},
		prepareMultifieldLayout: function()
		{
			if(this._hasMultifieldLayout)
			{
				return;
			}

			this._multifieldContainer = BX.create("div", { props: { className: "crm-entity-widget-content-multifield" } });
			this._wrapper.appendChild(this._multifieldContainer);

			this._phoneInput = BX.create("input", { props: { type: "hidden" } });
			this._countryFlagNode = BX.create("span", { props: {className: "crm-entity-widget-content-country-flag"}});
			this._maskedPhoneInput = BX.create("input",
				{
					props:
						{
							type: "text",
							placeholder: BX.message("CRM_EDITOR_PHONE"),
							className: "crm-entity-widget-content-input crm-entity-widget-content-input-phone",
							autocomplete: "nope"
						}
				}
			);

			this._multifieldContainer.appendChild(
				BX.create("div",
					{
						props: { className: "crm-entity-widget-content-multifield-item" },
						children:
							[
								this._countryFlagNode,
								this._maskedPhoneInput,
								this._phoneInput
							]
					}
				)
			);

			this._maskedPhone = new BX.PhoneNumber.Input(
				{
					node: this._maskedPhoneInput,
					flagNode: this._countryFlagNode,
					flagSize: 24,
					onChange: BX.delegate(this.onPhoneChange, this)
				}
			);

			this._emailInput = BX.create("input",
				{
					props:
						{
							type: "text",
							placeholder: BX.message("CRM_EDITOR_EMAIL"),
							className: "crm-entity-widget-content-input",
							autocomplete: "nope"
						}
				}
			);
			BX.bind(this._emailInput, "input", BX.delegate(this.onEmailChange, this));

			this._multifieldContainer.appendChild(
				BX.create("div",
					{
						props: { className: "crm-entity-widget-content-multifield-item" },
						children: [ this._emailInput ]
					}
				)
			);

			var emailId = "", phoneId = "", fieldCounter = 0;
			this._phoneId = this._emailId = "";
			if(this._entityInfo)
			{
				var phones = this._entityInfo.getPhones();
				if(phones.length === 0)
				{
					this._maskedPhone.setValue((this._phoneInput.value = ""));
				}
				else
				{
					this._phoneId = BX.prop.getString(phones[0], "ID", "");
					phoneId = this.parseMultifieldPseudoId(this._phoneId);
					if(phoneId >= 0)
					{
						fieldCounter = phoneId + 1;
					}
					this._maskedPhone.setValue((this._phoneInput.value = BX.prop.getString(phones[0], "VALUE", "")));
				}

				var emails = this._entityInfo.getEmails();
				if(emails.length === 0)
				{
					this._emailInput.value = "";
				}
				else
				{
					this._emailId = BX.prop.getString(emails[0], "ID", "");
					emailId = this.parseMultifieldPseudoId(this._emailId);
					if(emailId >= 0)
					{
						fieldCounter = emailId + 1;
					}
					this._emailInput.value = BX.prop.getString(emails[0], "VALUE", "");
				}
			}
			else
			{
				this._emailInput.value = "";
				this._maskedPhone.setValue((this._phoneInput.value = ""));
			}

			if(this._phoneId === "")
			{
				this._phoneId = this.prepareMultifieldPseudoId(fieldCounter);
				fieldCounter++;
			}

			if(this._emailId === "")
			{
				this._emailId = this.prepareMultifieldPseudoId(fieldCounter);
				//fieldCounter++;
			}

			this._hasMultifieldLayout = true;
		},
		clearMultifieldLayout: function()
		{
			if(!this._hasMultifieldLayout)
			{
				return;
			}

			this._multifieldContainer = BX.remove(this._multifieldContainer);

			this._phoneInput = this._maskedPhone = this._emailInput = null;
			this._phoneId = this._emailId = "";

			this._hasMultifieldLayout = false;
		},
		prepareMultifieldPseudoId: function(num)
		{
			return ("n" + num.toString());
		},
		parseMultifieldPseudoId: function(pseudoId)
		{
			var m = pseudoId.match(/^n(\d+)/);
			return BX.type.isArray(m) && m.length > 1 ? parseInt(m[1]) : -1;
		},
		isNeedToSave: function()
		{
			return (this._mode === BX.Crm.EntityEditorClientMode.create
				|| this._mode === BX.Crm.EntityEditorClientMode.edit
			);
		},
		save: function()
		{
			if(this._mode !== BX.Crm.EntityEditorClientMode.create && this._mode !== BX.Crm.EntityEditorClientMode.edit)
			{
				return;
			}

			if(!this._entityInfo)
			{
				return;
			}

			if(this._searchInput && this._searchInput.value !== this._entityInfo.getTitle())
			{
				this._entityInfo.setTitle(this._searchInput.value);
			}

			if(this._phoneInput)
			{
				this._entityInfo.setMultifieldById(
					{ "ID": this._phoneId, "TYPE_ID": "PHONE", "VALUE": this._phoneInput.value },
					this._phoneId
				);
			}

			if(this._emailInput)
			{
				this._entityInfo.setMultifieldById(
					{ "ID": this._emailId, "TYPE_ID": "EMAIL", "VALUE": this._emailInput.value },
					this._emailId
				);
			}
		},
		focus: function()
		{
			if(this._searchInput)
			{
				this._searchInput.focus();
			}
		},
		hasValue: function()
		{
			return !!this._entityInfo;
		},
		addMultifieldChangeListener: function(listener)
		{
			this._multifieldChangeNotifier.addListener(listener);
		},
		removeMultifieldChangeListener: function(listener)
		{
			this._multifieldChangeNotifier.removeListener(listener);
		},
		addTitleChangeListener: function(listener)
		{
			this._titleChangeNotifier.addListener(listener);
		},
		removeTitleChangeListener: function(listener)
		{
			this._titleChangeNotifier.removeListener(listener);
		},
		addChangeListener: function(listener)
		{
			this._changeNotifier.addListener(listener);
		},
		removeChangeListener: function(listener)
		{
			this._changeNotifier.removeListener(listener);
		},
		addDeletionListener: function(listener)
		{
			this._deletionNotifier.addListener(listener);
		},
		removeDeletionListener: function(listener)
		{
			this._deletionNotifier.removeListener(listener);
		},
		addResetListener: function(listener)
		{
			this._resetNotifier.addListener(listener);
		},
		removeResetListener: function(listener)
		{
			this._resetNotifier.removeListener(listener);
		},
		isQuickEditEnabled: function()
		{
			return this._enableQuickEdit;
		},
		enableQuickEdit: function(enable)
		{
			enable = !!enable;
			if(this._enableQuickEdit === enable)
			{
				return;
			}

			this._enableQuickEdit = enable;

			if(this._searchControl)
			{
				this._searchControl.enableCreationOnBlur = this._enableQuickEdit;
			}
		},
		enableDeletion: function(enable)
		{
			enable = !!enable;
			if(this._enableDeletion === enable)
			{
				return;
			}

			this._enableDeletion = enable;

			if(this._hasLayout)
			{
				this._deleteButton.style.display = enable ? "" : "none";
			}
		},
		adjust: function(options)
		{
			if(!this._hasLayout)
			{
				return;
			}

			if(!BX.type.isPlainObject(options))
			{
				options = {};
			}

			if(this._hasFocus)
			{
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-complete");
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-inprogress");
			}
			else
			{
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-inprogress");
				BX.addClass(this._wrapper, "crm-entity-widget-content-block-complete");
			}

			if(this.hasEntity())
			{
				if(this._mode === BX.Crm.EntityEditorClientMode.create
					|| this._mode === BX.Crm.EntityEditorClientMode.edit
				)
				{
					this._badgeElement.innerHTML = this.getMessage(
						this._mode === BX.Crm.EntityEditorClientMode.create
							? this._entityTypeName.toLowerCase() + "ToCreateTag"
							: "entityEditTag"
					);

					BX.removeClass(this._wrapper, "crm-entity-widget-content-block-selection-mode");

					BX.addClass(
						this._wrapper,
						this._mode === BX.Crm.EntityEditorClientMode.create
							? "crm-entity-widget-content-block-new-mode"
							: "crm-entity-widget-content-block-edit-mode"
					);

					if(this._searchInput.value.length < 0)
					{
						BX.removeClass(this._wrapper, "crm-entity-widget-content-block-textreset");
					}
					else
					{
						BX.addClass(this._wrapper, "crm-entity-widget-content-block-textreset");
					}

					this.prepareMultifieldLayout();

					if(this._searchControl)
					{
						this._searchControl.isDisabled = true;
					}
				}
				else if(this._mode === BX.Crm.EntityEditorClientMode.select)
				{
					BX.removeClass(this._wrapper, "crm-entity-widget-content-block-badge");
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-selection-mode");

					this.clearMultifieldLayout();

					if(this._searchControl)
					{
						this._searchControl.isDisabled = false;
					}
				}

				if(this._searchInput.value.length > 0)
				{
					BX.addClass(this._wrapper, "crm-entity-widget-content-block-textreset");
				}
				else
				{
					BX.removeClass(this._wrapper, "crm-entity-widget-content-block-textreset");
				}
			}
			else
			{
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-new-mode");
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-edit-mode");
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-selection-mode");
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-textreset");
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-complete");
				BX.removeClass(this._wrapper, "crm-entity-widget-content-block-inprogress");

				this.clearMultifieldLayout();

				if(this._searchControl)
				{
					this._searchControl.isDisabled = false;
				}
			}
		},
		getParentContextId: function()
		{
			return this._parentField.getContextId();
		},
		getEntityCreateUrl: function(entityTypeName)
		{
			return this._parentField.getEntityCreateUrl(entityTypeName);
		},
		getEntityEditUrl: function(entityTypeName, entityId)
		{
			return this._parentField.getEntityEditUrl(entityTypeName, entityId);
		},
		openEntityCreatePage: function(params)
		{
			var url = this.getEntityCreateUrl(this._entityTypeName);
			if(url === "")
			{
				return;
			}

			var contextId = this.getParentContextId() + "_" + BX.util.getRandomString(6).toUpperCase();

			var urlParams = BX.prop.getObject(params, "urlParams", {});
			urlParams["external_context_id"] = contextId;
			url = BX.util.add_url_param(url, urlParams);

			if(!this._externalEventHandler)
			{
				this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
				BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}

			if(!this._externalEditorPages)
			{
				this._externalEditorPages = {};
			}
			this._externalEditorPages[contextId] = url;
			BX.Crm.Page.open(url);
		},
		openEntityEditPage: function(params)
		{
			var url = this.getEntityEditUrl(this._entityTypeName, BX.prop.getInteger(params, "entityId", 0));
			if(url === "")
			{
				return;
			}

			var contextId = this.getParentContextId() + "_" + BX.util.getRandomString(6).toUpperCase();

			var urlParams = BX.prop.getObject(params, "urlParams", {});
			urlParams["external_context_id"] = contextId;
			url = BX.util.add_url_param(url, urlParams);

			if(!this._externalEventHandler)
			{
				this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
				BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}

			if(!this._externalEditorPages)
			{
				this._externalEditorPages = {};
			}
			this._externalEditorPages[contextId] = url;
			BX.Crm.Page.open(url);
		},
		onExternalEvent: function(params)
		{
			var eventName = BX.prop.getString(params, "key", "");

			if(eventName !== "onCrmEntityCreate" && eventName !== "onCrmEntityUpdate")
			{
				return;
			}

			var value = BX.prop.getObject(params, "value", {});
			var contextId = BX.prop.getString(value, "context", "");

			if(BX.prop.getString(this._externalEditorPages, contextId, "") === "")
			{
				return;
			}

			var entityTypeName = BX.prop.getString(value, "entityTypeName", "");
			var entityId = BX.prop.getInteger(value, "entityId", 0);

			if(this._entityTypeName !== entityTypeName)
			{
				return;
			}

			if(eventName === "onCrmEntityUpdate" && !(this._entityInfo && this._entityInfo.getId() === entityId))
			{
				return;
			}

			this.setupEntity(this._entityTypeName, entityId);

			window.setTimeout(
				function()
				{
					BX.Crm.Page.close(
						this._externalEditorPages[contextId],
						{ identity: { key: "external_context_id", value: contextId } }
					);
					delete this._externalEditorPages[contextId];
				}.bind(this),
				100
			);
		},
		onPhoneChange: function(e)
		{
			if(!this._phoneInput)
			{
				return;
			}

			if(this._phoneInput.value !== e.value)
			{
				this._phoneInput.value = e.value;
				this._multifieldChangeNotifier.notify();
			}
		},
		onEmailChange: function(e)
		{
			this._multifieldChangeNotifier.notify();
		},
		onEditButtonClick: function()
		{
			if(this.isNewEntity()
				|| !this.canUpdateEntity()
				|| this.getMode() === BX.Crm.EntityEditorClientMode.edit
			)
			{
				return;
			}

			if(this._searchControl)
			{
				this._searchControl.destroyPopupWindow();
			}

			if(!this.isQuickEditEnabled())
			{
				this.openEntityEditPage(
					{
						entityId: this._entityInfo.getId(),
						urlParams: { init_mode: "edit" }
					}
				);
				return;
			}

			this.setMode(BX.Crm.EntityEditorClientMode.edit);
			this.clearMultifieldLayout();
			this.adjust();
		},
		onChangeButtonClick: function(e)
		{
			this.setMode(BX.Crm.EntityEditorClientMode.select);

			if(this._searchInput)
			{
				this._searchInput.focus();
			}

			if(this._searchControl)
			{
				this._searchControl.getPopupWindow().show();
			}
		},
		onDeleteButtonClick: function(e)
		{
			if(this._enableDeletion)
			{
				this._deletionNotifier.notify([ this._entityInfo ]);
			}
		},
		onInputFocus: function(e)
		{
			this._hasFocus = true;
			window.setTimeout(BX.delegate(this.adjust, this), 150);
		},
		onInputBlur: function(e)
		{
			this._hasFocus = false;
			window.setTimeout(BX.delegate(this.adjust, this), 300);

			if(this._mode === BX.Crm.EntityEditorClientMode.edit && this._searchInput.value !== this._entityInfo.getTitle())
			{
				this._titleChangeNotifier.notify([]);
			}
		},
		onInputDblClick: function(e)
		{
		},
		onEntityAdd: function(sender, item)
		{
			var title = BX.prop.getString(item, "title", "");
			if(title === "")
			{
				return;
			}

			if(this._searchControl)
			{
				this._searchControl.destroyPopupWindow();
			}

			if(!this.isQuickEditEnabled())
			{
				this.openEntityCreatePage({ urlParams: { title: title } });
				return;
			}

			var entityData = { typeName: this._entityTypeName, title: title };
			if(BX.validation.checkIfEmail(title))
			{
				entityData["title"] = this.getMessage(
					this._entityTypeName === BX.CrmEntityType.names.contact ? "unnamed" : "untitled"
				);
				entityData["advancedInfo"] =
					{
						"multiFields": [ { "ID": this.prepareMultifieldPseudoId(0), "TYPE_ID": "EMAIL", "VALUE": title } ]
					};
			}
			else if(BX.validation.checkIfPhone(title))
			{
				entityData["title"] = this.getMessage(
					this._entityTypeName === BX.CrmEntityType.names.contact ? "unnamed" : "untitled"
				);
				entityData["advancedInfo"] =
					{
						"multiFields": [ { "ID": this.prepareMultifieldPseudoId(0), "TYPE_ID": "PHONE", "VALUE": title } ]
					};
			}

			if(this._searchInput.value !== entityData["title"])
			{
				this._searchInput.value = entityData["title"];
			}

			this.setEntity(BX.CrmEntityInfo.create(entityData), true);

			this._searchControl.destroyPopupWindow();
		},
		onEntityReset: function()
		{
			this.reset();
			this._searchControl.destroyPopupWindow();
		},
		onEntitySelect: function(sender, item)
		{
			var entityTypeName = BX.prop.getString(item, "type", "");
			var entityId = BX.prop.getInteger(item, "id", 0);
			var title = BX.prop.getString(item, "title", "");

			this.setEntityTypeName(entityTypeName);
			if(entityId <= 0)
			{
				return;
			}

			this.loadEntityInfo(entityId);

			this._searchInput.value = title;
			this._searchControl.destroyPopupWindow();
		},
		onEntityInfoLoad: function(sender, result)
		{
			var entityData = BX.prop.getObject(result, "DATA", null);
			if(entityData)
			{
				this.setEntity(BX.CrmEntityInfo.create(entityData), true);
				if(this._hasLayout)
				{
					var anchor = this._wrapper.nextSibling;
					this.clearLayout();
					this.layout({ anchor: anchor });
				}
			}
		},
		reset: function()
		{
			this._searchInput.value = "";

			var previousEntityInfo = this._entityInfo;
			this._entityInfo = null;
			this._resetNotifier.notify([ previousEntityInfo ]);

			window.setTimeout(BX.delegate(this.adjust, this), 150);
		},
		loadEntityInfo: function(entityId)
		{
			var loader = BX.prop.getObject(this._loaderConfig, this._entityTypeName, null);
			if(!loader)
			{
				return;
			}

			BX.CrmDataLoader.create(
				this._id,
				{
					serviceUrl: loader["url"],
					action: loader["action"],
					params: { "ENTITY_TYPE_NAME": this._entityTypeName, "ENTITY_ID": entityId, "NORMALIZE_MULTIFIELDS": "Y" }
				}
			).load(BX.delegate(this.onEntityInfoLoad, this));
		}
	};
	if(typeof(BX.Crm.EntityEditorClientSearchBox.messages) === "undefined")
	{
		BX.Crm.EntityEditorClientSearchBox.messages = {};
	}
	BX.Crm.EntityEditorClientSearchBox.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorClientSearchBox();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorClientLayoutType === "undefined")
{
	BX.Crm.EntityEditorClientLayoutType =
	{
		undefined: 0,
		contactCompany: 1,
		companyContact: 2,
		contact: 3,
		company: 4,

		names:
		{
			contactCompany: "CONTACT_COMPANY",
			companyContact: "COMPANY_CONTACT",
			contact: "CONTACT",
			company: "COMPANY"
		},

		resolveId: function(name)
		{
			name = name.toUpperCase();
			if(this.names.contactCompany === name)
			{
				return this.contactCompany;
			}
			else if(this.names.companyContact === name)
			{
				return this.companyContact;
			}
			else if(this.names.contact === name)
			{
				return this.contact;
			}
			else if(this.names.company === name)
			{
				return this.company;
			}

			return this.undefined;
		}
	};
}

if(typeof BX.Crm.EntityEditorClientLight === "undefined")
{
	BX.Crm.EntityEditorClientLight = function()
	{
		BX.Crm.EntityEditorClientLight.superclass.constructor.apply(this);
		this._map = null;
		this._info = null;

		this._primaryLoaderConfig = null;
		this._secondaryLoaderConfig = null;

		this._dataElements = null;

		this._companyInfos = null;
		this._contactInfos = null;

		this._enableCompanyMultiplicity = false;

		this._companyTitleWrapper = null;
		this._contactTitleWrapper = null;

		this._companySearchBoxes = null;
		this._contactSearchBoxes = null;

		this._companyPanels = null;
		this._contactPanels = null;

		this._companyWrapper = null;
		this._contactWrapper = null;

		this._addCompanyButton = null;
		this._addContactButton = null;

		this._innerWrapper = null;

		this._layoutType = BX.Crm.EntityEditorClientLayoutType.undefined;
		this._enableLayoutTypeChange = false;
		this._enableQuickEdit = null;

		this._companyNameChangeHandler = BX.delegate(this.onCompanyNameChange, this);
		this._companyChangeHandler = BX.delegate(this.onCompanyChange, this);
		this._companyDeletionHandler = BX.delegate(this.onCompanyDelete, this);
		this._companyResetHandler = BX.delegate(this.onCompanyReset, this);
		this._contactNameChangeHandler = BX.delegate(this.onContactNameChange, this);
		this._contactChangeHandler = BX.delegate(this.onContactChange, this);
		this._contactDeletionHandler = BX.delegate(this.onContactDelete, this);
		this._contactResetHandler = BX.delegate(this.onContactReset, this);
		this._requisiteChangeHandler = BX.delegate(this.onRequisiteChange, this);
		this._multifieldChangeHandler = BX.delegate(this.onMultifieldChange, this);
	};
	BX.extend(BX.Crm.EntityEditorClientLight, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorClientLight.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorClientLight.superclass.doInitialize.apply(this);
		this._map = this._schemeElement.getDataObjectParam("map", {});

		this.initializeFromModel();
	};
	BX.Crm.EntityEditorClientLight.prototype.initializeFromModel = function()
	{
		this._companyInfos = BX.Collection.create();
		this._contactInfos = BX.Collection.create();

		this._info = this._model.getSchemeField(this._schemeElement, "info", {});
		this.initializeEntityInfos(BX.prop.getArray(this._info, "COMPANY_DATA", []), this._companyInfos);
		this.initializeEntityInfos(BX.prop.getArray(this._info, "CONTACT_DATA", []), this._contactInfos);

		this._enableCompanyMultiplicity = this._schemeElement.getDataBooleanParam("enableCompanyMultiplicity", false);

		var loaders = this._schemeElement.getDataObjectParam("loaders", {});
		this._primaryLoaderConfig = BX.prop.getObject(loaders, "primary", {});
		this._secondaryLoaderConfig = BX.prop.getObject(loaders, "secondary", {});

		//region Layout Type
		this._enableLayoutTypeChange = true;

		var fixedLayoutTypeName = this._schemeElement.getDataStringParam("fixedLayoutType", "");
		if(fixedLayoutTypeName !== "")
		{
			var fixedLayoutType = BX.Crm.EntityEditorClientLayoutType.resolveId(fixedLayoutTypeName);
			if(fixedLayoutType !== BX.Crm.EntityEditorClientLayoutType.undefined)
			{
				this._layoutType = fixedLayoutType;
				this._enableLayoutTypeChange = false;
			}
		}
		//endregion
	};
	BX.Crm.EntityEditorClientLight.prototype.initializeEntityInfos = function(sourceData, collection)
	{
		for(var i = 0, length = sourceData.length; i < length; i++)
		{
			var info = BX.CrmEntityInfo.create(sourceData[i]);
			if(info.getId() > 0)
			{
				collection.add(info);
			}
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.createDataElement = function(key, value)
	{
		var name = BX.prop.getString(this._map, key, "");

		if(name === "")
		{
			return;
		}

		var input = BX.create("input", { attrs: { name: name, type: "hidden" } });
		if(BX.type.isNotEmptyString(value))
		{
			input.value = value;
		}

		if(!this._dataElements)
		{
			this._dataElements = {};
		}

		this._dataElements[key] = input;
		if(this._wrapper)
		{
			this._wrapper.appendChild(input);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorClientLight.messages;
		return (m.hasOwnProperty(name)
				? m[name]
				: BX.Crm.EntityEditorClientLight.superclass.getMessage.apply(this, arguments)
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.getOwnerTypeName = function()
	{
		return this._editor.getEntityTypeName();
	};
	BX.Crm.EntityEditorClientLight.prototype.getOwnerTypeId = function()
	{
		return this._editor.getEntityTypeId();
	};
	BX.Crm.EntityEditorClientLight.prototype.getOwnerId = function()
	{
		return this._editor.getEntityId();
	};
	BX.Crm.EntityEditorClientLight.prototype.hasCompanies = function()
	{
		return this._companyInfos !== null && this._companyInfos.length() > 0;
	};
	BX.Crm.EntityEditorClientLight.prototype.hasContacts = function()
	{
		return this._contactInfos !== null && this._contactInfos.length() > 0;
	};
	BX.Crm.EntityEditorClientLight.prototype.addCompany = function(entityInfo)
	{
		if(entityInfo instanceof BX.CrmEntityInfo)
		{
			if(!this._companyInfos)
			{
				this._companyInfos = BX.Collection.create();
			}

			this._companyInfos.add(entityInfo);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.removeCompany = function(entityInfo)
	{
		if(this._companyInfos && (entityInfo instanceof BX.CrmEntityInfo))
		{
			this._companyInfos.remove(entityInfo);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.addContact = function(entityInfo)
	{
		if(entityInfo instanceof BX.CrmEntityInfo)
		{
			if(!this._contactInfos)
			{
				this._contactInfos = BX.Collection.create();
			}

			this._contactInfos.add(entityInfo);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.removeContact = function(entityInfo)
	{
		if(this._contactInfos && (entityInfo instanceof BX.CrmEntityInfo))
		{
			this._contactInfos.remove(entityInfo);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.hasContentToDisplay = function()
	{
		return(
			this.hasCompanies()
			|| (this._contactInfos !== null && this._contactInfos.length() > 0)
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorClientLight.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorClientLight.prototype.reset = function()
	{
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorClientLight.prototype.rollback = function()
	{
		if(this.isChanged())
		{
			this.initializeFromModel();
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.getEntityCreateUrl = function(entityTypeName)
	{
		return this._editor.getEntityCreateUrl(entityTypeName);
	};
	BX.Crm.EntityEditorClientLight.prototype.getEntityEditUrl = function(entityTypeName, entityId)
	{
		return this._editor.getEntityEditUrl(entityTypeName, entityId);
	};
	BX.Crm.EntityEditorClientLight.prototype.doSetMode = function(mode)
	{
		this.rollback();
	};
	BX.Crm.EntityEditorClientLight.prototype.doPrepareContextMenuItems = function(menuItems)
	{
		menuItems.push({ delimiter: true });

		if(this._enableLayoutTypeChange)
		{
			var layoutType = this.getLayoutType();
			if(layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact
				|| layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany
			)
			{
				menuItems.push(
					{
						value: "set_layout_contact",
						text: this.getMessage("disableCompany")
					}
				);

				menuItems.push(
					{
						value: "set_layout_company",
						text: this.getMessage("disableContact")
					}
				);
			}
			else if(layoutType === BX.Crm.EntityEditorClientLayoutType.company)
			{
				menuItems.push(
					{
						value: "set_layout_company_contact",
						text: this.getMessage("enableContact")
					}
				);
			}
			else if(layoutType === BX.Crm.EntityEditorClientLayoutType.contact)
			{
				menuItems.push(
					{
						value: "set_layout_contact_company",
						text: this.getMessage("enableCompany")
					}
				);
			}

			if(layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact)
			{
				menuItems.push({ delimiter: true });
				menuItems.push(
					{
						value: "set_layout_contact_company",
						text: this.getMessage("displayContactAtFirst")
					}
				);
			}
			else if(layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany)
			{
				menuItems.push({ delimiter: true });
				menuItems.push(
					{
						value: "set_layout_company_contact",
						text: this.getMessage("displayCompanyAtFirst")
					}
				);
			}

			menuItems.push({ delimiter: true });
		}

		if(this.isQuickEditEnabled())
		{
			menuItems.push(
				{
					value: "disable_quick_edit",
					text: this.getMessage("disableQuickEdit")
				}
			);
		}
		else
		{
			menuItems.push(
				{
					value: "enable_quick_edit",
					text: this.getMessage("enableQuickEdit")
				}
			);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.processContextMenuCommand = function(e, command)
	{
		if(command === "set_layout_contact_company")
		{
			window.setTimeout(
				function() { this.setLayoutType(BX.Crm.EntityEditorClientLayoutType.contactCompany) }.bind(this),
				100
			);
		}
		else if(command === "set_layout_company_contact")
		{
			window.setTimeout(
				function() { this.setLayoutType(BX.Crm.EntityEditorClientLayoutType.companyContact) }.bind(this),
				100
			);
		}
		else if(command === "set_layout_contact")
		{
			window.setTimeout(
				function() { this.setLayoutType(BX.Crm.EntityEditorClientLayoutType.contact) }.bind(this),
				100
			);
		}
		else if(command === "set_layout_company")
		{
			window.setTimeout(
				function() { this.setLayoutType(BX.Crm.EntityEditorClientLayoutType.company) }.bind(this),
				100
			);
		}
		else if(command === "disable_quick_edit")
		{
			this.enableQuickEdit(false);
		}
		else if(command === "enable_quick_edit")
		{
			this.enableQuickEdit(true);
		}
		BX.Crm.EntityEditorClientLight.superclass.processContextMenuCommand.apply(this, arguments)
	};
	//region Quick Edit
	BX.Crm.EntityEditorClientLight.prototype.isQuickEditEnabled = function()
	{
		if(this._enableQuickEdit === null)
		{
			this._enableQuickEdit = this._editor.getConfigOption("enableQuickEdit", "Y") === "Y";
		}
		return this._enableQuickEdit;
	};
	BX.Crm.EntityEditorClientLight.prototype.enableQuickEdit = function(enable)
	{
		enable = !!enable;

		if(this._enableQuickEdit === null)
		{
			this._enableQuickEdit = this._editor.getConfigOption("enableQuickEdit", "Y") === "Y";
		}

		if(this._enableQuickEdit === enable)
		{
			return;
		}

		this._enableQuickEdit = enable;
		this._editor.setConfigOption("enableQuickEdit", enable ? "Y" : "N");

		var i, length;
		if(this._companySearchBoxes)
		{
			for(i = 0, length = this._companySearchBoxes.length; i < length; i++)
			{
				this._companySearchBoxes[i].enableQuickEdit(enable);
			}
		}

		if(this._contactSearchBoxes)
		{
			for(i = 0, length = this._contactSearchBoxes.length; i < length; i++)
			{
				this._contactSearchBoxes[i].enableQuickEdit(enable);
			}
		}
	};
	//endregion
	//region Layout Type
	BX.Crm.EntityEditorClientLight.prototype.isCompanyEnabled = function()
	{
		var layoutType = this.getLayoutType();
		return (
			layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany ||
			layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact ||
			layoutType === BX.Crm.EntityEditorClientLayoutType.company
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.isContactEnabled = function()
	{
		var layoutType = this.getLayoutType();
		return (
			layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany ||
			layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact ||
			layoutType === BX.Crm.EntityEditorClientLayoutType.contact
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.getLayoutType = function()
	{
		if(this._layoutType <= 0)
		{
			var str = this._editor.getConfigOption("client_layout", "");
			var num = parseInt(str);
			if(isNaN(num) || num <= 0)
			{
				num = BX.Crm.EntityEditorClientLayoutType.companyContact;
			}
			this._layoutType = num;
		}
		return this._layoutType;
	};
	BX.Crm.EntityEditorClientLight.prototype.setLayoutType = function(layoutType)
	{
		if(!BX.type.isNumber(layoutType))
		{
			layoutType = parseInt(layoutType);
		}

		if(isNaN(layoutType) || layoutType <= 0)
		{
			return;
		}

		if(layoutType === this._layoutType)
		{
			return;
		}

		this._layoutType = layoutType;

		this._editor.setConfigOption("client_layout", layoutType);
		this.refreshLayout();
	};
	//endregion
	BX.Crm.EntityEditorClientLight.prototype.layout = function(options)
	{
		if (this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated();
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(this.getTitle()));

		if(!this.hasContentToDisplay() && this.isInViewMode())
		{
			this._innerWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-inner" },
					text: this.getMessage("isEmpty")
				}
			);
			this._wrapper.appendChild(this._innerWrapper);
		}
		else
		{
			this._innerWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-inner" } });
			this._wrapper.appendChild(this._innerWrapper);

			var layoutType = this.getLayoutType();

			if(this.isInEditMode())
			{
				var fieldContainer = BX.create("div", { props: { className: "crm-entity-widget-content-block-field-container" } });
				this._innerWrapper.appendChild(fieldContainer);
				this._innerContainer = BX.create("div", { props: { className: "crm-entity-widget-content-block-field-container-inner" } });
				fieldContainer.appendChild(this._innerContainer);
			}
			else
			{
				BX.addClass(this._wrapper, "crm-entity-widget-participants-block");
				BX.addClass(this._innerWrapper, "crm-entity-widget-inner");
			}

			if(this.isContactEnabled() && this.isCompanyEnabled())
			{
				if(layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany)
				{
					this.renderContact();
					this.renderCompany();
				}
				else if(layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact)
				{
					this.renderCompany();
					this.renderContact();
				}
			}
			else
			{
				if(this.isContactEnabled())
				{
					this.renderContact();
				}

				if(this.isCompanyEnabled())
				{
					this.renderCompany();
				}
			}
		}

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);

		this._entityEditParams = {};
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorClientLight.prototype.createAdditionalWrapperBlock = function()
	{
	};
	BX.Crm.EntityEditorClientLight.prototype.switchToSingleEditMode = function(targetNode)
	{
		this._entityEditParams = {};

		if(this.isInViewMode() && this.isQuickEditEnabled() && BX.type.isElementNode(targetNode))
		{
			var isFound = false;

			if(BX.isParentForNode(this._companyTitleWrapper, targetNode))
			{
				isFound = true;

				this._entityEditParams["enableCompany"] = true;
				this._entityEditParams["companyIndex"] = 0;
			}

			if(!isFound && BX.isParentForNode(this._contactTitleWrapper, targetNode))
			{
				isFound = true;

				this._entityEditParams["enableContact"] = true;
				this._entityEditParams["contactIndex"] = 0;
			}

			var i, length;
			if(!isFound && this._companyPanels !== null)
			{
				for(i = 0, length = this._companyPanels.length; i < length; i++)
				{
					if(this._companyPanels[i].checkOwership(targetNode))
					{
						isFound = true;

						this._entityEditParams["enableCompany"] = true;
						this._entityEditParams["companyIndex"] = i;

						break;
					}
				}
			}

			if(!isFound && this._contactPanels !== null)
			{
				for(i = 0, length = this._contactPanels.length; i < length; i++)
				{
					if(this._contactPanels[i].checkOwership(targetNode))
					{
						isFound = true;

						this._entityEditParams["enableContact"] = true;
						this._entityEditParams["contactIndex"] = i;

						break;
					}
				}
			}

			if(!BX.prop.getBoolean(this._entityEditParams, "enableCompany", false)
				&& !BX.prop.getBoolean(this._entityEditParams, "enableContact", false)
			)
			{
				var layoutType = this.getLayoutType();
				if(layoutType === BX.Crm.EntityEditorClientLayoutType.contact
					|| layoutType === BX.Crm.EntityEditorClientLayoutType.contactCompany
				)
				{
					this._entityEditParams["enableContact"] = true;
					this._entityEditParams["contactIndex"] = 0;
				}
				else if(layoutType === BX.Crm.EntityEditorClientLayoutType.company
					|| layoutType === BX.Crm.EntityEditorClientLayoutType.companyContact
				)
				{
					this._entityEditParams["enableCompany"] = true;
				}
			}
		}
		BX.Crm.EntityEditorClientLight.superclass.switchToSingleEditMode.apply(this, arguments);
	};
	BX.Crm.EntityEditorClientLight.prototype.getEntityInitialMode = function(entityTypeId)
	{
		if(!this.isQuickEditEnabled())
		{
			return BX.Crm.EntityEditorClientMode.select;
		}

		if(!this.checkModeOption(BX.Crm.EntityEditorModeOptions.individual))
		{
			return BX.Crm.EntityEditorClientMode.edit;
		}

		return BX.prop.getBoolean(
			this._entityEditParams,
			entityTypeId === BX.CrmEntityType.enumeration.contact ? "enableContact" : "enableCompany",
			false
		) ? BX.Crm.EntityEditorClientMode.edit : BX.Crm.EntityEditorClientMode.select;
	};
	BX.Crm.EntityEditorClientLight.prototype.resolveDataTagName = function(entityTypeName)
	{
		var compoundInfos = this._schemeElement.getDataArrayParam("compound", null);
		if(BX.type.isArray(compoundInfos))
		{
			for(var i = 0, length = compoundInfos.length; i < length; i++)
			{
				if(BX.prop.getString(compoundInfos[i], "entityTypeName", "") === entityTypeName)
				{
					return BX.prop.getString(compoundInfos[i], "tagName", "");
				}
			}
		}
		return "";
	};
	BX.Crm.EntityEditorClientLight.prototype.renderContact = function()
	{
		var caption = this._schemeElement.getDataStringParam("contactLegend", "");
		if(caption === "")
		{
			caption = BX.CrmEntityType.getCaptionByName(BX.CrmEntityType.names.contact);
		}

		if(this.isInEditMode())
		{
			this._contactWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-inner-row" } });
			this._innerContainer.appendChild(this._contactWrapper);

			this._contactTitleWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-title" },
					children:
						[
							BX.create("span",
								{
									props: { className: "crm-entity-widget-content-block-title-text" },
									text: caption
								}
							)
						]
				}
			);
			this._contactWrapper.appendChild(this._contactTitleWrapper);

			this._addContactButton = BX.create(
				"span",
				{
					props: { className: "crm-entity-widget-actions-btn-add" },
					text: this.getMessage("addParticipant")
				}
			);
			this._contactWrapper.appendChild(this._addContactButton);
			BX.bind(this._addContactButton, "click", BX.delegate(this.onContactAddButtonClick, this));

			this._contactSearchBoxes = [];
			if(this._contactInfos.length() > 0)
			{
				var mode = this.getEntityInitialMode(BX.CrmEntityType.enumeration.contact);
				var editIndex = mode === BX.Crm.EntityEditorClientMode.edit
					? BX.prop.getInteger(this._entityEditParams, "contactIndex", -1) : -1;

				for(var i = 0, length = this._contactInfos.length(); i < length; i++)
				{
					var currentMode = mode;
					if(currentMode === BX.Crm.EntityEditorClientMode.edit && !(editIndex === i || editIndex === -1))
					{
						currentMode = BX.Crm.EntityEditorClientMode.select
					}

					this.addContactSearchBox(
						this.createContactSearchBox({ entityInfo: this._contactInfos.get(i), mode: currentMode })
					);
				}
			}
			else
			{
				this.addContactSearchBox(this.createContactSearchBox());
			}
		}
		else if(this._contactInfos.length() > 0 && this.isContactEnabled())
		{
			this._contactTitleWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-title" }
				}
			);

			var innerTitleWrapper = BX.create("span",
				{
					props: { className: "crm-entity-widget-content-subtitle-text" },
					children: [ BX.create("span", { text: caption }) ]
				}
			);
			this._contactTitleWrapper.appendChild(innerTitleWrapper);


			if(!this.isReadOnly())
			{
				innerTitleWrapper.appendChild(
					BX.create("span",
						{
							props: { className: "crm-entity-card-widget-title-edit-icon" }
						}
					)
				);
			}

			var innerWrapperContainer = BX.create("div", {
				props: { className: "crm-entity-widget-content-block-inner-container" }
			});

			this._innerWrapper.appendChild(innerWrapperContainer);
			innerWrapperContainer.appendChild(this._contactTitleWrapper);


			var dataTagName = this.resolveDataTagName(BX.CrmEntityType.names.contact);
			if(dataTagName === "")
			{
				dataTagName = "CONTACT_IDS";
			}
			
			var additionalBlock = BX.create("div", {
				props: { className: "crm-entity-widget-before-action" },
				attrs: { "data-field-tag": dataTagName }
			});
			innerWrapperContainer.appendChild(additionalBlock);


			this._contactPanels = [];
			for(i = 0, length = this._contactInfos.length(); i < length; i++)
			{
				var contactInfo = this._contactInfos.get(i);

				var contactSettings =
					{
						editor: this,
						entityInfo: contactInfo,
						enableEntityTypeCaption: false,
						enableRequisite: false,
						enableCommunications: this._editor.areCommunicationControlsEnabled(),
						mode: BX.Crm.EntityEditorMode.view
					};

				//HACK: Enable requisite selection due to editor is not support it.
				var enableRequisite = i === 0 && !(this.isCompanyEnabled() && this.hasCompanies());
				if(enableRequisite)
				{
					contactSettings['enableRequisite'] = true;
					contactSettings['requisiteBinding'] = this._model.getField("REQUISITE_BINDING", {});
					contactSettings['requisiteSelectUrl'] = this._editor.getEntityRequisiteSelectUrl(
						BX.CrmEntityType.names.contact,
						contactInfo.getId()
					);
					contactSettings['requisiteMode'] = BX.Crm.EntityEditorMode.edit;
				}

				var contactPanel = BX.Crm.ClientEditorEntityPanel.create(
					this._id +  "_" + contactInfo.getId().toString(),
					contactSettings
				);

				this._contactPanels.push(contactPanel);
				contactPanel.setContainer(innerWrapperContainer);
				contactPanel.layout();

				if(enableRequisite)
				{
					contactPanel.addRequisiteChangeListener(this._requisiteChangeHandler);
				}
			}
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.renderCompany = function()
	{
		var caption = this._schemeElement.getDataStringParam("companyLegend", "");
		if(caption === "")
		{
			caption = BX.CrmEntityType.getCaptionByName(BX.CrmEntityType.names.company);
		}

		if(this.isInEditMode())
		{
			this._companyWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-inner-row" } });
			this._innerContainer.appendChild(this._companyWrapper);

			this._companyTitleWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-title" },
					children:
						[
							BX.create("span",
								{
									props: { className: "crm-entity-widget-content-block-title-text" },
									text: caption
								}
							)
						]
				}
			);
			this._companyWrapper.appendChild(this._companyTitleWrapper);

			if(this._enableCompanyMultiplicity)
			{
				this._addCompanyButton = BX.create(
					"span",
					{
						props: { className: "crm-entity-widget-actions-btn-add" },
						text: this.getMessage("addParticipant")
					}
				);
				this._companyWrapper.appendChild(this._addCompanyButton);
				BX.bind(this._addCompanyButton, "click", BX.delegate(this.onCompanyAddButtonClick, this));
			}

			this._companySearchBoxes = [];
			if(this._companyInfos.length() > 0)
			{
				var mode = this.getEntityInitialMode(BX.CrmEntityType.enumeration.company);
				var editIndex = mode === BX.Crm.EntityEditorClientMode.edit
					? BX.prop.getInteger(this._entityEditParams, "companyIndex", -1) : -1;

				for(var i = 0, length = this._companyInfos.length(); i < length; i++)
				{
					var currentMode = mode;
					if(currentMode === BX.Crm.EntityEditorClientMode.edit && !(editIndex === i || editIndex === -1))
					{
						currentMode = BX.Crm.EntityEditorClientMode.select
					}

					this.addCompanySearchBox(
						this.createCompanySearchBox({ entityInfo: this._companyInfos.get(i), mode: currentMode })
					);
				}
			}
			else
			{
				this.addCompanySearchBox(this.createCompanySearchBox());
			}
		}
		else if(this.isCompanyEnabled() && this._companyInfos.length() > 0)
		{
			this._companyTitleWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-title" }
				}
			);

			var innerTitleWrapper = BX.create("span",
				{
					props: { className: "crm-entity-widget-content-subtitle-text" },
					children: [ BX.create("span", { text: caption }) ]
				}
			);
			this._companyTitleWrapper.appendChild(innerTitleWrapper);
			if(!this.isReadOnly())
			{
				innerTitleWrapper.appendChild(
					BX.create("span",
						{
							props: { className: "crm-entity-card-widget-title-edit-icon" }
						}
					)
				);
			}



			var innerWrapperContainer = BX.create("div", {
				props: { className: "crm-entity-widget-content-block-inner-container" }
			});

			this._innerWrapper.appendChild(innerWrapperContainer);
			innerWrapperContainer.appendChild(this._companyTitleWrapper);

			var dataTagName = this.resolveDataTagName(BX.CrmEntityType.names.company);
			if(dataTagName === "")
			{
				dataTagName = this._enableCompanyMultiplicity ? "COMPANY_IDS" : "COMPANY_ID";
			}

			var additionalBlock = BX.create("div", {
				props: { className: "crm-entity-widget-before-action" },
				attrs: { "data-field-tag": dataTagName }
			});
			innerWrapperContainer.appendChild(additionalBlock);

			this._companyPanels = [];
			for(i = 0, length = this._companyInfos.length(); i < length; i++)
			{
				var companyInfo = this._companyInfos.get(i);

				var companySettings =
					{
						editor: this,
						entityInfo: companyInfo,
						enableEntityTypeCaption: false,
						enableRequisite: false,
						enableCommunications: this._editor.areCommunicationControlsEnabled(),
						mode: BX.Crm.EntityEditorMode.view
					};

				//HACK: Enable requisite selection due to editor is not support it.
				var enableRequisite = i === 0;
				if(enableRequisite)
				{
					companySettings['enableRequisite'] = true;
					companySettings['requisiteBinding'] = this._model.getField("REQUISITE_BINDING", {});
					companySettings['requisiteSelectUrl'] = this._editor.getEntityRequisiteSelectUrl(
						BX.CrmEntityType.names.company,
						companyInfo.getId()
					);
					companySettings['requisiteMode'] = BX.Crm.EntityEditorMode.edit;
				}

				var companyPanel = BX.Crm.ClientEditorEntityPanel.create(
					this._id +  "_" + companyInfo.getId().toString(),
					companySettings
				);

				this._companyPanels.push(companyPanel);
				companyPanel.setContainer(innerWrapperContainer);
				companyPanel.layout();

				if(enableRequisite)
				{
					companyPanel.addRequisiteChangeListener(this._requisiteChangeHandler);
				}
			}
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.createCompanySearchBox = function(params)
	{
		var entityInfo = BX.prop.get(params, "entityInfo", null);
		if(entityInfo !== null && !(entityInfo instanceof BX.CrmEntityInfo))
		{
			entityInfo = null;
		}

		var enableCreation = this._editor.canCreateCompany();
		if(enableCreation)
		{
			//Check if creation of company is disabled by configuration.
			enableCreation = BX.prop.getBoolean(
				this._schemeElement.getDataObjectParam("creation", {}),
				BX.CrmEntityType.names.company.toLowerCase(),
				true
			);
		}

		return(
			BX.Crm.EntityEditorClientSearchBox.create(
				this._id,
				{
					entityTypeName: BX.CrmEntityType.names.company,
					entityInfo: entityInfo,
					enableCreation: enableCreation,
					enableDeletion: false,
					enableQuickEdit: this.isQuickEditEnabled(),
					mode: BX.prop.getInteger(params, "mode", BX.Crm.EntityEditorClientMode.select),
					editor: this._editor,
					loaderConfig: this._primaryLoaderConfig,
					lastEntityInfos: this._model.getSchemeField(this._schemeElement, "lastCompanyInfos", []),
					container: this._companyWrapper,
					placeholder: this.getMessage("companySearchPlaceholder"),
					parentField: this
				}
			)
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.addCompanySearchBox = function(searchBox, options)
	{
		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		this._companySearchBoxes.push(searchBox);

		var layoutOptions = BX.prop.getObject(options, "layoutOptions", {});
		if(this._addCompanyButton)
		{
			layoutOptions["anchor"] = this._addCompanyButton;
		}

		searchBox.layout(layoutOptions);

		searchBox.addResetListener(this._companyResetHandler);
		searchBox.addTitleChangeListener(this._companyNameChangeHandler);
		searchBox.addChangeListener(this._companyChangeHandler);
		searchBox.addDeletionListener(this._companyDeletionHandler);
		searchBox.addMultifieldChangeListener(this._multifieldChangeHandler);

		var enableDeletion = this._companySearchBoxes.length > 1;
		for(var i = 0, length = this._companySearchBoxes.length; i < length; i++)
		{
			this._companySearchBoxes[i].enableDeletion(enableDeletion);
		}

		return searchBox;
	};
	BX.Crm.EntityEditorClientLight.prototype.removeCompanySearchBox = function(searchBox)
	{
		var index = this.findCompanySearchBoxIndex(searchBox);
		if(index < 0)
		{
			return;
		}

		searchBox.removeResetListener(this._companyResetHandler);
		searchBox.removeTitleChangeListener(this._companyNameChangeHandler);
		searchBox.removeChangeListener(this._companyChangeHandler);
		searchBox.removeDeletionListener(this._companyDeletionHandler);
		searchBox.removeMultifieldChangeListener(this._multifieldChangeHandler);

		searchBox.clearLayout();

		this._companySearchBoxes.splice(index, 1);

		var enableDeletion = this._companySearchBoxes.length > 1;
		for(var i = 0, length = this._companySearchBoxes.length; i < length; i++)
		{
			this._companySearchBoxes[i].enableDeletion(enableDeletion);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.findCompanySearchBoxIndex = function(companySearchBox)
	{
		for(var i = 0, length = this._companySearchBoxes.length; i < length; i++)
		{
			if(companySearchBox === this._companySearchBoxes[i])
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorClientLight.prototype.createContactSearchBox = function(params)
	{
		var entityInfo = BX.prop.get(params, "entityInfo", null);
		if(entityInfo !== null && !(entityInfo instanceof BX.CrmEntityInfo))
		{
			entityInfo = null;
		}

		var enableCreation = this._editor.canCreateContact();
		if(enableCreation)
		{
			//Check if creation of contact is disabled by configuration.
			enableCreation = BX.prop.getBoolean(
				this._schemeElement.getDataObjectParam("creation", {}),
				BX.CrmEntityType.names.contact.toLowerCase(),
				true
			);
		}

		return(
			BX.Crm.EntityEditorClientSearchBox.create(
				this._id,
				{
					entityTypeName: BX.CrmEntityType.names.contact,
					entityInfo: entityInfo,
					enableCreation: enableCreation,
					enableDeletion: BX.prop.getBoolean(params, "enableDeletion", true),
					enableQuickEdit: this.isQuickEditEnabled(),
					mode: BX.prop.getInteger(params, "mode", BX.Crm.EntityEditorClientMode.select),
					editor: this._editor,
					loaderConfig: this._primaryLoaderConfig,
					lastEntityInfos: this._model.getSchemeField(this._schemeElement, "lastContactInfos", []),
					container: this._contactWrapper,
					placeholder: this.getMessage("contactSearchPlaceholder"),
					parentField: this
				}
			)
		);
	};
	BX.Crm.EntityEditorClientLight.prototype.addContactSearchBox = function(searchBox, options)
	{
		if(!BX.type.isPlainObject(options))
		{
			options = {};
		}

		this._contactSearchBoxes.push(searchBox);

		var layoutOptions = BX.prop.getObject(options, "layoutOptions", {});
		if(this._addContactButton)
		{
			layoutOptions["anchor"] = this._addContactButton;
		}

		searchBox.layout(layoutOptions);

		searchBox.addResetListener(this._contactResetHandler);
		searchBox.addTitleChangeListener(this._contactNameChangeHandler);
		searchBox.addChangeListener(this._contactChangeHandler);
		searchBox.addDeletionListener(this._contactDeletionHandler);
		searchBox.addMultifieldChangeListener(this._multifieldChangeHandler);

		var enableDeletion = this._contactSearchBoxes.length > 1;
		for(var i = 0, length = this._contactSearchBoxes.length; i < length; i++)
		{
			this._contactSearchBoxes[i].enableDeletion(enableDeletion);
		}

		return searchBox;
	};
	BX.Crm.EntityEditorClientLight.prototype.removeContactSearchBox = function(searchBox)
	{
		var index = this.findContactSearchBoxIndex(searchBox);
		if(index < 0)
		{
			return;
		}

		searchBox.removeResetListener(this._contactResetHandler);
		searchBox.removeTitleChangeListener(this._contactNameChangeHandler);
		searchBox.removeChangeListener(this._contactChangeHandler);
		searchBox.removeDeletionListener(this._contactDeletionHandler);
		searchBox.removeMultifieldChangeListener(this._multifieldChangeHandler);

		searchBox.clearLayout();

		this._contactSearchBoxes.splice(index, 1);

		var enableDeletion = this._contactSearchBoxes.length > 1;
		for(var i = 0, length = this._contactSearchBoxes.length; i < length; i++)
		{
			this._contactSearchBoxes[i].enableDeletion(enableDeletion);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.removeContactAllSearchBoxes = function()
	{
		for(var i = 0, length = this._contactSearchBoxes.length; i < length; i++)
		{
			var searchBox = this._contactSearchBoxes[i];

			searchBox.removeResetListener(this._contactResetHandler);
			searchBox.removeChangeListener(this._contactChangeHandler);
			searchBox.removeDeletionListener(this._contactDeletionHandler);
			searchBox.clearLayout();
		}

		this._contactSearchBoxes = [];
	};
	BX.Crm.EntityEditorClientLight.prototype.findContactSearchBoxIndex = function(contactSearchBox)
	{
		for(var i = 0, length = this._contactSearchBoxes.length; i < length; i++)
		{
			if(contactSearchBox === this._contactSearchBoxes[i])
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorClientLight.prototype.save = function()
	{
		this._info["COMPANY_DATA"] = this.saveEntityInfos(this._companySearchBoxes, this._companyInfos);
		this._info["CONTACT_DATA"] = this.saveEntityInfos(this._contactSearchBoxes, this._contactInfos);
	};
	BX.Crm.EntityEditorClientLight.prototype.saveEntityInfos = function(searchBoxes, entityInfos)
	{
		var i, length;

		if(searchBoxes !== null)
		{
			for(i = 0, length = searchBoxes.length; i < length; i++)
			{
				if(searchBoxes[i].isNeedToSave())
				{
					searchBoxes[i].save();
				}
			}
		}

		var data = [];
		if(entityInfos !== null)
		{
			var infoItems = entityInfos.getItems();
			for(i = 0, length = infoItems.length; i < length; i++)
			{
				data.push(infoItems[i].getSettings());
			}
		}
		return data;
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactAddButtonClick = function(e)
	{
		this.addContactSearchBox(this.createContactSearchBox()).focus();
	};
	BX.Crm.EntityEditorClientLight.prototype.onCompanyAddButtonClick = function(e)
	{
		if(this._enableCompanyMultiplicity)
		{
			this.addCompanySearchBox(this.createCompanySearchBox()).focus();
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onCompanyReset = function(sender, previousEntityInfo)
	{
		if(previousEntityInfo)
		{
			this.removeCompany(previousEntityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onCompanyNameChange = function(sender)
	{
		this.markAsChanged();
	};
	BX.Crm.EntityEditorClientLight.prototype.onCompanyChange = function(sender, currentEntityInfo, previousEntityInfo)
	{
		var isChanged = false;

		if(previousEntityInfo)
		{
			this.removeCompany(previousEntityInfo);
			isChanged = true;
		}

		if(currentEntityInfo)
		{
			this.addCompany(currentEntityInfo);
			isChanged = true;
		}

		if(!isChanged)
		{
			return;
		}

		this.markAsChanged();

		if(!this._enableCompanyMultiplicity)
		{
			if(currentEntityInfo.getId() > 0)
			{
				var entityLoader = BX.prop.getObject(
					this._secondaryLoaderConfig,
					BX.CrmEntityType.names.company,
					null
				);

				if(entityLoader)
				{
					BX.CrmDataLoader.create(
						this._id,
						{
							serviceUrl: entityLoader["url"],
							action: entityLoader["action"],
							params:
								{
									"PRIMARY_TYPE_NAME": BX.CrmEntityType.names.company,
									"PRIMARY_ID": currentEntityInfo.getId(),
									"SECONDARY_TYPE_NAME": BX.CrmEntityType.names.contact,
									"OWNER_TYPE_NAME": this.getOwnerTypeName()
								}
						}
					).load(BX.delegate(this.onContactInfosLoad, this));
				}
			}
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onCompanyDelete = function(sender, currentEntityInfo)
	{
		if(currentEntityInfo)
		{
			this._companyInfos.remove(currentEntityInfo);
			this.markAsChanged();
		}

		this.removeCompanySearchBox(sender);
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactChange = function(sender, currentEntityInfo, previousEntityInfo)
	{
		var isChanged = false;

		if(previousEntityInfo)
		{
			this.removeContact(previousEntityInfo);
			isChanged = true;
		}

		if(currentEntityInfo)
		{
			this.addContact(currentEntityInfo);
			isChanged = true;
		}

		if(isChanged)
		{
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactNameChange = function(sender)
	{
		this.markAsChanged();
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactDelete = function(sender, currentEntityInfo)
	{
		if(currentEntityInfo)
		{
			this._contactInfos.remove(currentEntityInfo);
			this.markAsChanged();
		}

		this.removeContactSearchBox(sender);
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactReset = function(sender, previousEntityInfo)
	{
		if(previousEntityInfo)
		{
			this.removeContact(previousEntityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onContactInfosLoad = function(sender, result)
	{
		var i, length;
		var entityInfos = [];
		var entityData = BX.type.isArray(result['ENTITY_INFOS']) ? result['ENTITY_INFOS'] : [];
		for(i = 0, length = entityData.length; i < length; i++)
		{
			entityInfos.push(BX.CrmEntityInfo.create(entityData[i]));
		}

		this._contactInfos.removeAll();
		for(i = 0, length = entityInfos.length; i < length; i++)
		{
			this._contactInfos.add(entityInfos[i]);
		}
		this.markAsChanged();

		this.removeContactAllSearchBoxes();
		if(entityInfos.length > 0)
		{
			for(i = 0, length = entityInfos.length; i < length; i++)
			{
				this.addContactSearchBox(
					this.createContactSearchBox(
						{ entityInfo: entityInfos[i] }
					)
				);
			}
		}
		else
		{
			this.addContactSearchBox(this.createContactSearchBox());
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onRequisiteChange = function(sender, eventArgs)
	{
		if(this.isInEditMode())
		{
			this.markAsChanged();
		}
		else
		{
			//Save immediately
			this._editor.saveData(
				{
					'REQUISITE_ID': BX.prop.getInteger(eventArgs, "requisiteId", 0),
					'BANK_DETAIL_ID': BX.prop.getInteger(eventArgs, "bankDetailId", 0)
				}
			);
		}
	};
	BX.Crm.EntityEditorClientLight.prototype.onMultifieldChange = function(sender)
	{
		this.markAsChanged();
	};
	BX.Crm.EntityEditorClientLight.prototype.prepareEntitySubmitData = function(searchBoxes)
	{
		if(!BX.type.isArray(searchBoxes))
		{
			return [];
		}

		var results = [];
		for(var i = 0, length = searchBoxes.length; i < length; i++)
		{
			var entity = searchBoxes[i].getEntity();
			if(!entity)
			{
				continue;
			}

			var data = {};

			var mode = searchBoxes[i].getMode();
			if(mode === BX.Crm.EntityEditorClientMode.select
				|| (mode === BX.Crm.EntityEditorClientMode.edit && entity.getTitle() !== "")
			)
			{
				data["id"] = entity.getId();
			}
			if(mode === BX.Crm.EntityEditorClientMode.create
				|| (mode === BX.Crm.EntityEditorClientMode.edit && entity.getTitle() !== "")
			)
			{
				data["title"] = entity.getTitle();
				data["multifields"] = entity.getMultifields();
			}

			results.push(data);
		}
		return results;
	};
	BX.Crm.EntityEditorClientLight.prototype.onBeforeSubmit = function()
	{
		var data = {};
		if(this.isCompanyEnabled())
		{
			data["COMPANY_DATA"] = this.prepareEntitySubmitData(this._companySearchBoxes);
		}
		if(this.isContactEnabled())
		{
			data["CONTACT_DATA"] = this.prepareEntitySubmitData(this._contactSearchBoxes);
		}

		this.createDataElement("data", JSON.stringify(data));
	};
	if(typeof(BX.Crm.EntityEditorClientLight.messages) === "undefined")
	{
		BX.Crm.EntityEditorClientLight.messages = {};
	}
	BX.Crm.EntityEditorClientLight.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorClientLight();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorClient === "undefined")
{
	BX.Crm.EntityEditorClient = function()
	{
		BX.Crm.EntityEditorClient.superclass.constructor.apply(this);
		this._info = null;

		this._enablePrimaryEntity = true;
		this._primaryEntityTypeName = "";
		this._primaryEntityInfo = null;
		this._primaryEntityBindingInfos = null;
		this._primaryEntityEditor = null;

		this._secondaryEntityTypeName = "";
		this._secondaryEntityInfos = null;

		this._secondaryEntityEditor = null;
		this._dataElements = null;
		this._map = null;
		this._bindingTracker = null;

		this._innerWrapper = null;
	};
	BX.extend(BX.Crm.EntityEditorClient, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorClient.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorClient.superclass.doInitialize.apply(this);
		this._map = this._schemeElement.getDataObjectParam("map", {});
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorClient.prototype.initializeFromModel = function()
	{
		this._info = this._model.getSchemeField(this._schemeElement, "info", {});

		this._enablePrimaryEntity = this._schemeElement.getDataBooleanParam(
			"enablePrimaryEntity",
			true
		);

		if(this._enablePrimaryEntity)
		{
			var primaryEntityData = BX.prop.getObject(this._info, "PRIMARY_ENTITY_DATA", null);
			var primaryEntityInfo = primaryEntityData ? BX.CrmEntityInfo.create(primaryEntityData) : null;

			if(primaryEntityInfo)
			{
				this.setPrimaryEntity(primaryEntityInfo);
			}
			else
			{
				this.setPrimaryEntityTypeName(
					this._schemeElement.getDataStringParam(
						"primaryEntityTypeName",
						BX.CrmEntityType.names.company
					)
				);
			}
		}

		this.setSecondaryEntityTypeName(
			this._schemeElement.getDataStringParam(
				"secondaryEntityTypeName",
				BX.CrmEntityType.names.contact
			)
		);

		var secondaryEntityData = null;
		var secondaryEntityDataKey =  this._schemeElement.getDataStringParam("secondaryEntityInfo", "");
		if(secondaryEntityDataKey !== "")
		{
			secondaryEntityData = this._model.getField(secondaryEntityDataKey, [])
		}
		else
		{
			secondaryEntityData = BX.prop.getArray(this._info, "SECONDARY_ENTITY_DATA", []);
		}

		this._secondaryEntityInfos = BX.Collection.create();
		this._primaryEntityBindingInfos = BX.Collection.create();
		var companyEntityId = primaryEntityInfo && primaryEntityInfo.getTypeName() === BX.CrmEntityType.names.company
			? primaryEntityInfo.getId() : 0;
		var i, length, info;
		for(i = 0, length = secondaryEntityData.length; i < length; i++)
		{
			info = BX.CrmEntityInfo.create(secondaryEntityData[i]);
			if(info.getId() <= 0)
			{
				continue;
			}

			if(companyEntityId > 0 && info.checkEntityBinding(BX.CrmEntityType.names.company, companyEntityId))
			{
				this._primaryEntityBindingInfos.add(info);
			}
			else
			{
				this._secondaryEntityInfos.add(info);
			}
		}
		this._bindingTracker = BX.Crm.EntityBindingTracker.create();
	};
	BX.Crm.EntityEditorClient.prototype.hasContentToDisplay = function()
	{
		return(this._primaryEntityInfo !== null
			|| (this._secondaryEntityInfos !== null && this._secondaryEntityInfos.length() > 0)
		);
	};
	BX.Crm.EntityEditorClient.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorClient.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorClient.prototype.getEntityCreateUrl = function(entityTypeName)
	{
		return this._editor.getEntityCreateUrl(entityTypeName);
	};
	BX.Crm.EntityEditorClient.prototype.getEntityRequisiteSelectUrl = function(entityTypeName, entityId)
	{
		return this._editor.getEntityRequisiteSelectUrl(entityTypeName, entityId);
	};
	BX.Crm.EntityEditorClient.prototype.reset = function()
	{
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorClient.prototype.rollback = function()
	{
		if(this.isChanged())
		{
			this.initializeFromModel();
		}
	};
	BX.Crm.EntityEditorClient.prototype.doSetMode = function(mode)
	{
		this.rollback();
	};
	BX.Crm.EntityEditorClient.prototype.createDataElement = function(key, value)
	{
		var name = BX.prop.getString(this._map, key, "");

		if(name === "")
		{
			return;
		}

		var input = BX.create("input", { attrs: { name: name, type: "hidden", value: value } });

		if(!this._dataElements)
		{
			this._dataElements = {};
		}

		this._dataElements[key] = input;
		if(this._wrapper)
		{
			this._wrapper.appendChild(input);
		}
	};
	BX.Crm.EntityEditorClient.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated();
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var title = this._schemeElement.getTitle();

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}


		this._dataElements = {};

		if(!this.hasContentToDisplay() && this.isInViewMode())
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					text: this.getMessage("isEmpty")
				}
			);
		}
		else
		{
			this._innerWrapper = BX.create("div",{ props: { className: "crm-entity-widget-clients-block" } });
			this._innerWrapper.appendChild(this.createTitleNode(title));

			if(this.isInEditMode())
			{
				if(this._enablePrimaryEntity)
				{
					this.createDataElement("primaryEntityType", this.getPrimaryEntityTypeName());
					this.createDataElement("primaryEntityId", this.getPrimaryEntityId());

					this.createDataElement("unboundSecondaryEntityIds", "");
					this.createDataElement("boundSecondaryEntityIds", "");
				}

				this.createDataElement("secondaryEntityType", this.getSecondaryEntityTypeName());
				this.createDataElement("secondaryEntityIds", this.getAllSecondaryEntityIds().join(","));
			}

			var editorWrapper = BX.create(
				"div",
				{
					props: { className: this.isInEditMode() ? "crm-entity-widget-content-block-clients" : "" }
				}
			);
			this._innerWrapper.appendChild(editorWrapper);

			var primaryEntityAnchor = BX.create("div", {});
			editorWrapper.appendChild(primaryEntityAnchor);

			var loaders = this._schemeElement.getDataObjectParam("loaders", {});
			var primaryLoader = BX.prop.getObject(loaders, "primary", {});
			var secondaryLoader = BX.prop.getObject(loaders, "secondary", {});

			if(this._enablePrimaryEntity)
			{
				this._primaryEntityEditor = BX.Crm.PrimaryClientEditor.create(
					this._id + "_PRIMARY",
					{
						"entityInfo": this._primaryEntityInfo,
						"entityTypeName": this._primaryEntityTypeName,
						"lastEntityInfos":	this._model.getSchemeField(
							this._schemeElement,
							"lastPrimaryEntityInfos",
							[]
						),
						"loaderConfig": primaryLoader,
						"requisiteBinding": this._model.getField("REQUISITE_BINDING", {}),
						"editor": this,
						"mode": this._mode,
						"onChange": BX.delegate(this.onPrimaryEntityChange, this),
						"onDelete": BX.delegate(this.onPrimaryEntityDelete, this),
						"onBindingAdd": BX.delegate(this.onPrimaryEntityBindingAdd, this),
						"onBindingDelete": BX.delegate(this.onPrimaryEntityBindingDelete, this),
						"onBindingRelease": BX.delegate(this.onPrimaryEntityBindingRelease, this),
						"container": editorWrapper,
						"achor": primaryEntityAnchor
					}
				);
				this._primaryEntityEditor.layout();
			}

			var secondaryEntityWrapper = BX.create("div", { props: { className: "crm-entity-widget-participants-container" } });
			editorWrapper.appendChild(secondaryEntityWrapper);
			this._secondaryEntityEditor = BX.Crm.SecondaryClientEditor.create(
				this._id + "_SECONDARY",
				{
					"entityInfos":     this._secondaryEntityInfos.getItems(),
					"entityTypeName":  this._secondaryEntityTypeName,
					"entityLegend":    this._schemeElement.getDataStringParam("secondaryEntityLegend", ""),
					"lastEntityInfos":	this._model.getSchemeField(
						this._schemeElement,
						"lastSecondaryEntityInfos",
						[]
					),
					"primaryLoader":   primaryLoader,
					"secondaryLoader": secondaryLoader,
					"mode":            this._mode,
					"onAdd":           BX.delegate(this.onSecondaryEntityAdd, this),
					"onDelete":        BX.delegate(this.onSecondaryEntityDelete, this),
					"onBeforeAdd":     BX.delegate(this.onSecondaryEntityBeforeAdd, this),
					"editor":          this,
					"container":       secondaryEntityWrapper
				}
			);
			this._secondaryEntityEditor.layout();

			if(this._primaryEntityEditor)
			{
				if(this.isInEditMode())
				{
					this._secondaryEntityEditor.setVisible(this._primaryEntityInfo !== null);
				}
				else
				{
					this._secondaryEntityEditor.setVisible(this._secondaryEntityInfos.length() > 0);
				}
			}
		}
		this._wrapper.appendChild(this._innerWrapper);


		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorClient.prototype.doClearLayout = function(options)
	{
		if(this._primaryEntityEditor)
		{
			this._primaryEntityEditor.clearLayout();
			this._primaryEntityEditor = null;
		}

		if(this._secondaryEntityEditor)
		{
			this._secondaryEntityEditor.clearLayout();
			this._secondaryEntityEditor = null;
		}

		for(var key in this._dataElements)
		{
			if(this._dataElements.hasOwnProperty(key))
			{
				BX.remove(this._dataElements[key]);
			}
		}
		this._dataElements = null;

		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorClient.prototype.getOwnerTypeName = function()
	{
		return this._editor.getEntityTypeName();
	};
	BX.Crm.EntityEditorClient.prototype.getOwnerTypeId = function()
	{
		return this._editor.getEntityTypeId();
	};
	BX.Crm.EntityEditorClient.prototype.getOwnerId = function()
	{
		return this._editor.getEntityId();
	};
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntityTypeName = function()
	{
		return this._primaryEntityTypeName;
	};
	BX.Crm.EntityEditorClient.prototype.setPrimaryEntityTypeName = function(entityType)
	{
		if(this._primaryEntityTypeName !== entityType)
		{
			this._primaryEntityTypeName = entityType;
		}
	};
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntityId = function()
	{
		return this._primaryEntityInfo ? this._primaryEntityInfo.getId() : 0;
	};
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntity = function()
	{
		return this._primaryEntityInfo;
	};
	BX.Crm.EntityEditorClient.prototype.setPrimaryEntity = function(entityInfo)
	{
		if(entityInfo instanceof BX.CrmEntityInfo)
		{
			this._primaryEntityInfo = entityInfo;
			this.setPrimaryEntityTypeName(entityInfo.getTypeName());
		}
		else
		{
			this._primaryEntityInfo = null;
		}
		this.markAsChanged();
	};
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntityBindings = function()
	{
		return this._primaryEntityBindingInfos;
	};
	BX.Crm.EntityEditorClient.prototype.getSecondaryEntityTypeName = function()
	{
		return this._secondaryEntityTypeName;
	};
	BX.Crm.EntityEditorClient.prototype.setSecondaryEntityTypeName = function(entityType)
	{
		if(this._secondaryEntityTypeName !== entityType)
		{
			this._secondaryEntityTypeName = entityType;
		}
	};
	//region SecondaryEntities
	BX.Crm.EntityEditorClient.prototype.getSecondaryEntities = function()
	{
		return this._secondaryEntityInfos.getItems();
	};
	BX.Crm.EntityEditorClient.prototype.getSecondaryEntityById = function(id)
	{
		if(!this._secondaryEntityInfos)
		{
			return null;
		}
		return this._secondaryEntityInfos.search(function(item){ return item.getId() === id; });
	};
	BX.Crm.EntityEditorClient.prototype.removeSecondaryEntity = function(entityInfo)
	{
		if(this._secondaryEntityInfos)
		{
			this._secondaryEntityInfos.remove(entityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClient.prototype.addSecondaryEntity = function(entityInfo)
	{
		if(this._secondaryEntityInfos)
		{
			this._secondaryEntityInfos.add(entityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClient.prototype.onSecondaryEntityDelete = function(editor, entityInfo)
	{
		this.removeSecondaryEntity(entityInfo);
	};
	BX.Crm.EntityEditorClient.prototype.onSecondaryEntityBeforeAdd = function(editor, entityInfo, eventArgs)
	{
		if(this._primaryEntityEditor && this._primaryEntityInfo && this._primaryEntityInfo.getTypeName() === BX.CrmEntityType.names.company)
		{
			var primaryEntityId = this._primaryEntityInfo.getId();
			if(entityInfo.checkEntityBinding(BX.CrmEntityType.names.company, primaryEntityId)
				&& !this._bindingTracker.isUnbound(entityInfo))
			{
				this._primaryEntityEditor.addBinding(
					this._primaryEntityEditor.createBinding(entityInfo)
				);
				eventArgs["cancel"] = true;
			}
		}
	};
	BX.Crm.EntityEditorClient.prototype.onSecondaryEntityAdd = function(editor, entityInfo)
	{
		this.addSecondaryEntity(entityInfo);
	};
	BX.Crm.EntityEditorClient.prototype.onSecondaryEntityBind = function(editor, entityInfo)
	{
		this._secondaryEntityEditor.removeItem(
			this._secondaryEntityEditor.getItemById(entityInfo.getId())
		);

		if(this._primaryEntityEditor)
		{
			this._primaryEntityEditor.addBinding(this._primaryEntityEditor.createBinding(entityInfo));
		}

		this._bindingTracker.bind(entityInfo);
	};
	BX.Crm.EntityEditorClient.prototype.getAllSecondaryEntityIds = function()
	{
		var entityInfos = this.getAllSecondaryEntityInfos();
		var results = [];
		for(var i = 0, length = entityInfos.length; i < length; i++)
		{
			results.push(entityInfos[i].getId());
		}
		return results;
	};
	BX.Crm.EntityEditorClient.prototype.getAllSecondaryEntityInfos = function()
	{
		return (
			[].concat(
				this._primaryEntityBindingInfos.getItems(),
				this._secondaryEntityInfos.getItems()
			)
		);
	};
	//endregion
	//region PrimaryEntityBindings
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntityBindings = function()
	{
		return this._primaryEntityBindingInfos.getItems();
	};
	BX.Crm.EntityEditorClient.prototype.getPrimaryEntityBindingById = function(id)
	{
		if(!this._primaryEntityBindingInfos)
		{
			return null;
		}
		return this._primaryEntityBindingInfos.search(function(item){ return item.getId() === id; });
	};
	BX.Crm.EntityEditorClient.prototype.addPrimaryEntityBinding = function(entityInfo)
	{
		if(this._primaryEntityBindingInfos)
		{
			this._primaryEntityBindingInfos.add(entityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClient.prototype.removePrimaryEntityBinding = function(entityInfo)
	{
		if(this._primaryEntityBindingInfos)
		{
			this._primaryEntityBindingInfos.remove(entityInfo);
			this.markAsChanged();
		}
	};
	BX.Crm.EntityEditorClient.prototype.onPrimaryEntityBindingAdd = function(editor, entityInfo)
	{
		this.addPrimaryEntityBinding(entityInfo);
	};
	BX.Crm.EntityEditorClient.prototype.onPrimaryEntityBindingDelete = function(editor, entityInfo)
	{
		this.removePrimaryEntityBinding(entityInfo);
	};
	BX.Crm.EntityEditorClient.prototype.onPrimaryEntityBindingRelease = function(editor, entityInfo)
	{
		this._bindingTracker.unbind(entityInfo);
		this._secondaryEntityEditor.addItem(this._secondaryEntityEditor.createItem(entityInfo));
	};
	//endregion
	BX.Crm.EntityEditorClient.prototype.onPrimaryEntityDelete = function(editor, entityInfo)
	{
		var secondaryEntityInfos = [].concat(this._primaryEntityBindingInfos.getItems(), this._secondaryEntityInfos.getItems());

		this._secondaryEntityInfos = BX.Collection.create();
		this._primaryEntityBindingInfos = BX.Collection.create();

		var primaryEntityInfo = null;
		if(secondaryEntityInfos.length > 0)
		{
			primaryEntityInfo = secondaryEntityInfos.shift();
		}

		this.setPrimaryEntity(primaryEntityInfo);
		this._primaryEntityEditor.setEntity(primaryEntityInfo);

		this._secondaryEntityEditor.setEntities(secondaryEntityInfos);
		this._secondaryEntityEditor.setVisible(primaryEntityInfo !== null);
	};
	BX.Crm.EntityEditorClient.prototype.onPrimaryEntityChange = function(editor, entityInfo)
	{
		this.setPrimaryEntity(entityInfo);

		if(this._primaryEntityTypeName === BX.CrmEntityType.names.company)
		{
			this._bindingTracker.reset();
			this._primaryEntityBindingInfos = BX.Collection.create();

			this._secondaryEntityInfos = BX.Collection.create();
			this._secondaryEntityEditor.clearItems();
			this._secondaryEntityEditor.reloadEntities();
		}

		this._secondaryEntityEditor.setVisible(true);
	};
	BX.Crm.EntityEditorClient.prototype.save = function()
	{
		var i, length, entityInfo;
		var map = this._schemeElement.getDataObjectParam("map", {});

		if(this._enablePrimaryEntity)
		{
			this._model.setMappedField(map, "primaryEntityType", this._primaryEntityTypeName);
			var primaryEntityId = this._primaryEntityInfo ? this._primaryEntityInfo.getId() : 0;
			this._model.setMappedField(map, "primaryEntityId", primaryEntityId);

			if(this._primaryEntityInfo)
			{
				this._info["PRIMARY_ENTITY_DATA"] = this._primaryEntityInfo.getSettings();
			}
			else
			{
				delete  this._info["PRIMARY_ENTITY_DATA"];
			}

			if(primaryEntityId > 0)
			{
				var unboundSecondaryEntities = this._bindingTracker.getUnboundEntities();
				var unboundSecondaryEntityIds = [];
				for(i = 0, length = unboundSecondaryEntities.length; i < length; i++)
				{
					unboundSecondaryEntityIds.push(unboundSecondaryEntities[i].getId());
				}
				if(unboundSecondaryEntityIds.length > 0)
				{
					for(i = 0, length = unboundSecondaryEntityIds.length; i < length; i++)
					{
						entityInfo = this.getSecondaryEntityById(unboundSecondaryEntityIds[i]);
						if(entityInfo)
						{
							entityInfo.removeEntityBinding(this._primaryEntityTypeName, primaryEntityId);
						}
					}
				}
				this._model.setMappedField(map, "unboundSecondaryEntityIds", unboundSecondaryEntityIds.join(","));

				var boundSecondaryEntities = this._bindingTracker.getBoundEntities();
				var boundSecondaryEntityIds = [];
				for(i = 0, length = boundSecondaryEntities.length; i < length; i++)
				{
					boundSecondaryEntityIds.push(boundSecondaryEntities[i].getId());
				}
				if(boundSecondaryEntityIds.length > 0)
				{
					for(i = 0, length = boundSecondaryEntityIds.length; i < length; i++)
					{
						entityInfo = this.getPrimaryEntityBindingById(boundSecondaryEntityIds[i]);
						if(entityInfo)
						{
							entityInfo.addEntityBinding(this._primaryEntityTypeName, primaryEntityId);
						}
					}
				}
				this._model.setMappedField(map, "boundSecondaryEntityIds", boundSecondaryEntityIds.join(","));

				this._bindingTracker.reset();
			}
		}

		this._model.setMappedField(map, "secondaryEntityType", this._secondaryEntityTypeName);
		var secondaryEntityInfos = this.getAllSecondaryEntityInfos();
		var secondaryEntityData = [];
		var secondaryEntityIds = [];
		for(i = 0, length = secondaryEntityInfos.length; i < length; i++)
		{
			entityInfo = secondaryEntityInfos[i];
			secondaryEntityData.push(entityInfo.getSettings());
			secondaryEntityIds.push(entityInfo.getId());
		}
		this._model.setMappedField(map, "secondaryEntityIds", secondaryEntityIds.join(","));
		this._info["SECONDARY_ENTITY_DATA"] = secondaryEntityData;
	};
	BX.Crm.EntityEditorClient.prototype.onBeforeSubmit = function()
	{
		if(!this._dataElements)
		{
			return;
		}

		for(var key in this._dataElements)
		{
			if(!this._dataElements.hasOwnProperty(key))
			{
				continue;
			}
			var name = BX.prop.getString(this._map, key, "");
			if(name !== "")
			{
				this._dataElements[key].value = this._model.getField(name, "");
			}
		}
	};
	BX.Crm.EntityEditorClient.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorClient();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.PrimaryClientEditor === "undefined")
{
	BX.Crm.PrimaryClientEditor = function()
	{
		this._id = "";
		this._settings = {};
		this._editor = null;
		this._mode = BX.Crm.EntityEditorMode.intermediate;
		this._entityInfo = null;
		this._entityTypeName = "";
		this._container = null;
		this._wrapper = null;

		this._bindingWrapper = null;

		this._externalEventHandler = null;
		this._externalContext = null;

		this._entityBindSelector = null;

		this._searchWrapper = null;
		this._searchInput = null;
		this._searchControl = null;

		this._item = null;
		this._itemBindings = null;
		this._skeleton = null;
		this._loaderConfig = null;
		this._hasLayout = false;
	};
	BX.Crm.PrimaryClientEditor.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._editor = BX.prop.get(this._settings, "editor");
			this._mode = BX.prop.getInteger(this._settings, "mode", 0);
			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._entityInfo = BX.prop.get(this._settings, "entityInfo", null);

			if(this._entityInfo)
			{
				this.setEntity(this._entityInfo);
			}
			else
			{
				this._entityTypeName = BX.prop.getString(this._settings, "entityTypeName", "");
			}

			this._loaderConfig = BX.prop.getObject(this._settings, "loaderConfig", {});
		},
		layout: function()
		{
			var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-clients-container" } });
			this._bindingWrapper = null;

			if(!isViewMode)
			{
				//region Search
				this._searchWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-search-box" } });
				this._wrapper.appendChild(this._searchWrapper);

				this.prepareSearchLayout();
				this.adjustSearchLayout();
				//endregion
			}
			this._wrapper.appendChild(BX.create("div", { style: { clear: "both" } }));

			if(this._item)
			{
				this._item.setContainer(this._wrapper);
				this._item.layout();

				this._bindingWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-block-children" } });
				this._wrapper.appendChild(this._bindingWrapper);

				var bindingInfos = this._editor.getPrimaryEntityBindings();
				this._itemBindings = [];
				var i, length;
				for(i = 0, length = bindingInfos.length; i < length; i++)
				{
					var bindingInfo = bindingInfos[i];
					var binding = BX.Crm.ClientEditorEntityBindingPanel.create(
						this._id +  "_" + bindingInfo.getId().toString(),
						{
							entityInfo: bindingInfo,
							editor: this._editor,
							mode: this._mode,
							container: this._bindingWrapper,
							onChange: BX.delegate(this.onItemBindingChange, this)
						}
					);
					binding.layout();
					this._itemBindings.push(binding);
				}
			}

			var anchor = BX.prop.getElementNode(this._settings, "achor", null);
			if(anchor)
			{
				this._container.insertBefore(this._wrapper, anchor);
			}
			else
			{
				this._container.appendChild(this._wrapper);
			}

			this._hasLayout = true;
		},
		adjustLayout: function()
		{
		},
		clearLayout: function()
		{
			if(this._item)
			{
				this._item.clearLayout();
			}

			if(this._itemBindings)
			{
				for(var i = 0, length = this._itemBindings.length; i < length; i++)
				{
					this._itemBindings[i].clearLayout();
				}
				this._itemBindings = null;
			}

			this._wrapper = BX.remove(this._wrapper);
			this._searchWrapper = null;
			this._bindingWrapper = null;
			this._entityCreateButton = null;

			this._hasLayout = false;
		},
		//region Search
		prepareSearchLayout: function()
		{
			this._searchInput = BX.create(
				"input",
				{
					props:
						{
							id: "dropdown-input",
							className: "crm-entity-widget-content-input crm-entity-widget-content-search-input"
						},
					attrs: { autocomplete: "nope" }
				}
			);
			this._searchWrapper.appendChild(this._searchInput);
			this._searchControl = new BX.UI.Dropdown(
				{
					searchAction: "crm.api.entity.search",
					searchOptions: { types: [ BX.CrmEntityType.names.contact, BX.CrmEntityType.names.company ] },
					//TODO: Implement CRM renderer
					searchResultRenderer: null,
					targetElement: this._searchInput,
					items: BX.prop.getArray(this._settings, "lastEntityInfos", []),
					footerItems:
						[
							{
								caption: this.getMessage("create"),
								buttons:
									[
										{
											type: "create",
											caption: BX.CrmEntityType.getCaption(BX.CrmEntityType.enumeration.contact),
											events:
												{
													click: BX.delegate(
														function()
														{
															this.createEntity(BX.CrmEntityType.names.contact);
															this._searchControl.destroyPopupWindow();
														},
														this
													)
												}
										},
										{
											type: "create",
											caption: BX.CrmEntityType.getCaption(BX.CrmEntityType.enumeration.company),
											events:
												{
													click: BX.delegate(
														function()
														{
															this.createEntity(BX.CrmEntityType.names.company);
															this._searchControl.destroyPopupWindow();
														},
														this
													)
												}
										}
									]
							}
						],
					events:
						{
							onSelect: this.onEntitySelect.bind(this),
							onSearch: function(word) {}
						}
				}
			);
		},
		adjustSearchLayout: function()
		{
			if(this._searchWrapper)
			{
				this._searchWrapper.style.display = this._item ? "none" : "";
			}
		},
		//endregion
		getEntityTypeName: function()
		{
			return this._entityTypeName;
		},
		setEntityTypeName: function(entityType)
		{
			if(this._entityTypeName === entityType)
			{
				return;
			}

			this._entityTypeName = entityType;
		},
		setEntity: function(entityInfo)
		{
			if(this._item)
			{
				if(this._hasLayout)
				{
					this._item.clearLayout();
				}
				this._item = null;
			}

			if(!(entityInfo instanceof BX.CrmEntityInfo))
			{
				this._entityInfo = null;
			}
			else
			{
				this._entityInfo = entityInfo;
				this.setEntityTypeName(this._entityInfo.getTypeName());
				this._item = BX.Crm.ClientEditorEntityPanel.create(
					this._id +  "_" + this._entityInfo.getId().toString(),
					{
						editor: this._editor,
						entityInfo: this._entityInfo,
						enableEntityTypeCaption: true,
						enableRequisite: true,
						requisiteBinding: BX.prop.getObject(this._settings, "requisiteBinding", {}),
						mode: this._mode,
						onDelete: BX.delegate(this.onItemDelete, this)
					}
				);

				if(this._hasLayout)
				{
					this._item.setContainer(this._wrapper);
					this._item.layout();
				}
			}

			if(this._itemBindings)
			{
				for(var i = 0, length = this._itemBindings.length; i < length; i++)
				{
					this._itemBindings[i].clearLayout();
				}
				this._itemBindings = null;
			}

			this.adjustSearchLayout();
		},
		setupEntity: function(entityId)
		{
			if(this._entityInfo && this._entityInfo.getId() === entityId)
			{
				return;
			}

			this.setEntity(null);

			var callback = BX.prop.getFunction(this._settings, "onChange");
			if(callback)
			{
				callback(this, this._entityInfo);
			}

			var entityLoader = BX.prop.getObject(this._loaderConfig, this._entityTypeName, null);
			if(entityLoader)
			{
				this.showSkeleton();

				BX.CrmDataLoader.create(
					this._id,
					{
						serviceUrl: entityLoader["url"],
						action: entityLoader["action"],
						params: { "ENTITY_TYPE_NAME": this._entityTypeName, "ENTITY_ID": entityId }
					}
				).load(BX.delegate(this.onEntityInfoLoad, this));
			}
		},
		showSkeleton: function()
		{
			if(!this._skeleton)
			{
				this._skeleton = BX.Crm.ClientEditorEntitySkeleton.create(this._id, { container: this._wrapper });
			}
			this._skeleton.layout();
		},
		hideSkeleton: function()
		{
			if(this._skeleton)
			{
				this._skeleton.clearLayout();
			}
		},
		onEntityInfoLoad: function(sender, result)
		{
			var entityData = BX.prop.getObject(result, "DATA", null);
			if(entityData)
			{
				var hasLayout = this._hasLayout;
				if(hasLayout)
				{
					this.clearLayout();
				}

				this.hideSkeleton();

				var entityInfo = BX.CrmEntityInfo.create(entityData);
				this.setEntity(entityInfo);

				var callback = BX.prop.getFunction(this._settings, "onChange");
				if(callback)
				{
					callback(this, this._entityInfo);
				}

				if(hasLayout)
				{
					this.layout();
				}
			}
		},
		getEntityCreateUrl: function(entityTypeName)
		{
			return this._editor.getEntityCreateUrl(entityTypeName);
		},
		createEntity: function(entityTypeName)
		{
			var url = this.getEntityCreateUrl(entityTypeName);
			if(url === "")
			{
				return "";
			}

			var contextId = this._editor.getContextId();
			url = BX.util.add_url_param(url, { external_context_id: contextId });

			if(!this._externalEventHandler)
			{
				this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
				BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}

			if(!this._externalContext)
			{
				this._externalContext = {};
			}
			this._externalContext[contextId] = url;
			BX.Crm.Page.open(url);
		},
		onEntitySelect: function(sender, item)
		{
			this._entityTypeName = BX.prop.getString(item, "type", "");
			var entityId = BX.prop.getInteger(item, "id", 0);
			if(entityId > 0)
			{
				this.setupEntity(entityId);
				this._searchControl.destroyPopupWindow();
			}
		},
		onExternalEvent: function(params)
		{
			if(BX.prop.getString(params, "key", "") !== "onCrmEntityCreate")
			{
				return;
			}

			var value = BX.prop.getObject(params, "value", {});
			var context = BX.prop.getString(value, "context", "");

			if(this._externalContext && typeof(this._externalContext[context]) !== "undefined")
			{
				var entityTypeName = BX.prop.getString(value, "entityTypeName", "");
				var entityId = BX.prop.getInteger(value, "entityId", 0);

				if(this._entityTypeName !== entityTypeName)
				{
					this._entityTypeName = entityTypeName;
				}
				this.setupEntity(entityId);

				BX.Crm.Page.close(this._externalContext[context]);
				delete this._externalContext[context];
			}
		},
		onItemBindingChange: function(item, action)
		{
			if(action === "unbind")
			{
				var callback = BX.prop.getFunction(this._settings, "onBindingRelease");
				if(callback)
				{
					callback(this, item.getEntity());
				}

				this.removeBinding(item);
			}
			else if(action === "delete")
			{
				this.removeBinding(item);
			}
		},
		onItemDelete: function(item)
		{
			var entityInfo = this._entityInfo;

			var hasLayout = this._hasLayout;
			if(hasLayout)
			{
				this.clearLayout();
			}
			this.setEntity(null);

			if(hasLayout)
			{
				this.layout();
			}

			var callback = BX.prop.getFunction(this._settings, "onDelete");
			if(callback)
			{
				callback(this, entityInfo);
			}
		},
		getBindings: function()
		{
			return this._itemBindings;
		},
		createBinding: function(entityInfo)
		{
			return(
				BX.Crm.ClientEditorEntityBindingPanel.create(
					this._id +  "_" + entityInfo.getId().toString(),
					{
						entityInfo: entityInfo,
						editor: this._editor,
						mode: this._mode,
						onChange: BX.delegate(this.onItemBindingChange, this)
					}
				)
			);
		},
		findBindingById: function(entityId)
		{
			for(var i = 0, length = this._itemBindings.length; i < length; i++)
			{
				var item = this._itemBindings[i];
				if(item.getEntity().getId() === entityId)
				{
					return item;
				}
			}

			return null;
		},
		getBindingIndex: function(binding)
		{
			for(var i = 0, length = this._itemBindings.length; i < length; i++)
			{
				if(this._itemBindings[i] === binding)
				{
					return i;
				}
			}

			return -1;
		},
		addBinding: function(item)
		{
			this._itemBindings.push(item);

			if(this._hasLayout)
			{
				item.setContainer(this._bindingWrapper);
				item.layout();
			}

			var callback = BX.prop.getFunction(this._settings, "onBindingAdd");
			if(callback)
			{
				callback(this, item.getEntity());
			}
		},
		removeBinding: function(item)
		{
			var index = this.getBindingIndex(item);
			if(index < 0)
			{
				return;
			}

			item.clearLayout();
			this._itemBindings.splice(index, 1);

			var callback = BX.prop.getFunction(this._settings, "onBindingDelete");
			if(callback)
			{
				callback(this, item.getEntity());
			}
		},
		getBindingEntities: function()
		{
			var results = [];
			if(this._itemBindings)
			{
				for(var i = 0, length = this._itemBindings.length; i < length; i++)
				{
					results.push(this._itemBindings[i].getEntity());
				}
			}
			return results;
		}
	};
	BX.Crm.PrimaryClientEditor.prototype.getMessage = function(name)
	{
		var m = BX.Crm.PrimaryClientEditor.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};

	if(typeof(BX.Crm.PrimaryClientEditor.messages) === "undefined")
	{
		BX.Crm.PrimaryClientEditor.messages = {};
	}
	BX.Crm.PrimaryClientEditor.create = function(id, settings)
	{
		var self = new BX.Crm.PrimaryClientEditor();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.SecondaryClientEditor === "undefined")
{
	BX.Crm.SecondaryClientEditor = function()
	{
		this._id = "";
		this._settings = {};
		this._mode = BX.Crm.EntityEditorMode.intermediate;
		this._container = null;
		this._wrapper = null;
		this._entityTypeName = "";
		this._entityInfos = null;
		this._items = null;

		this._externalEventHandler = null;
		this._externalContext = null;

		this._isMultiple = true;

		this._primaryLoaderConfig = null;
		this._secondaryLoaderConfig = null;

		this._editor = null;

		this._searchWrapper = null;
		this._searchInput = null;
		this._searchControl = null;

		this._addButton = null;
		this._addButtonHandler = BX.delegate(this.onAddButtonClick, this);

		this._bindButton = null;
		this._bindButtonClickHandler = BX.delegate(this.onBindButtonClick, this);
		this._bindingSelector = null;
		this._bindingSelectHandler = BX.delegate(this.onBindingSelect, this);

		this._isVisible = true;
		this._hasLayout = false;
	};

	BX.Crm.SecondaryClientEditor.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._mode = BX.prop.getInteger(this._settings, "mode", 0);
			this._editor = BX.prop.get(this._settings, "editor", null);

			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._entityTypeName = BX.prop.getString(this._settings, "entityTypeName", "");
			this._entityInfos = BX.prop.getArray(this._settings, "entityInfos", "");
			this._isMultiple = BX.prop.getBoolean(this._settings, "isMultiple", true);

			this._items = [];
			var itemCount = this._entityInfos.length;
			if(!this._isMultiple && itemCount > 1)
			{
				itemCount = 1;
			}
			for(var i = 0; i < itemCount; i++)
			{
				var item = this.createItem(this._entityInfos[i]);
				this._items.push(item);
			}

			this._primaryLoaderConfig = BX.prop.getObject(this._settings, "primaryLoader", {});
			this._secondaryLoaderConfig = BX.prop.getObject(this._settings, "secondaryLoader", {});
		},
		getMessage: function(name)
		{
			var m = BX.Crm.SecondaryClientEditor.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getEntityTypeName: function()
		{
			return this._entityTypeName;
		},
		getEntities: function()
		{
			return this._entityInfos;
		},
		setEntities: function(entityInfos)
		{
			this._entityInfos = entityInfos;
			this.clearItems();
			var itemCount = this._entityInfos.length;
			if(!this._isMultiple && itemCount > 1)
			{
				itemCount = 1;
			}
			for(var i = 0; i < itemCount; i++)
			{
				this.addItem(this.createItem(this._entityInfos[i]));
			}
		},
		findItemIndex: function(item)
		{
			for(var i = 0, j = this._items.length; i < j; i++)
			{
				if(this._items[i] === item)
				{
					return i;
				}
			}
			return -1;
		},
		getFirstItem: function()
		{
			return this._items.length > 0 ? this._items[0] : null;
		},
		getItemById: function(id)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				var item = this._items[i];
				if(item.getEntity().getId() === id)
				{
					return item;
				}
			}
			return null;
		},
		getItems: function()
		{
			return this._items;
		},
		getItemCount: function()
		{
			return this._items.length;
		},
		createItem: function(entityInfo)
		{
			return (
				BX.Crm.ClientEditorEntityPanel.create(
					this._id +  "_" + entityInfo.getId().toString(),
					{
						editor: this._editor,
						entityInfo: entityInfo,
						mode: this._mode,
						onDelete: BX.delegate(this.onItemDelete, this)
					}
				)
			);
		},
		clearItems: function()
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				var item = this._items[i];
				item.clearLayout();
				item.setContainer(null);
			}
			this._items = [];
		},
		addItemById: function(id)
		{
			var entityLoader = BX.prop.getObject(this._primaryLoaderConfig, this._entityTypeName, null);
			if(!entityLoader)
			{
				return;
			}

			BX.CrmDataLoader.create(
				this._id,
				{
					serviceUrl: entityLoader["url"],
					action: entityLoader["action"],
					params: { "ENTITY_TYPE_NAME": this._entityTypeName, "ENTITY_ID": id }
				}
			).load(BX.delegate(this.onEntityInfoLoad, this));
		},
		addItem: function(item)
		{
			var beforeCallback = BX.prop.getFunction(this._settings, "onBeforeAdd");
			if(beforeCallback)
			{
				var eventArgs = { cancel: false };
				beforeCallback(this, item.getEntity(), eventArgs);
				if(eventArgs["cancel"])
				{
					return false;
				}
			}

			if(!this._isMultiple)
			{
				this.clearItems();
			}

			this._items.push(item);
			if(this._hasLayout)
			{
				item.setContainer(this._itemsWrapper);
				item.layout();
			}

			var afterCallback = BX.prop.getFunction(this._settings, "onAdd");
			if(afterCallback)
			{
				afterCallback(this, item.getEntity());
			}

			this.adjustLayout();

			return true;
		},
		removeItem: function(item)
		{
			var index = this.findItemIndex(item);
			if(index < 0)
			{
				return;
			}

			this._items.splice(index, 1);
			if(this._hasLayout)
			{
				item.clearLayout();
				item.setContainer(null);
			}

			var callback = BX.prop.getFunction(this._settings, "onDelete");
			if(callback)
			{
				callback(this, item.getEntity());
			}

			this.adjustLayout();
		},
		reloadEntities: function()
		{
			if(!this._editor)
			{
				return;
			}

			var primaryEntity = this._editor.getPrimaryEntity();
			if(!primaryEntity)
			{
				return;
			}

			var entityLoader = BX.prop.getObject(this._secondaryLoaderConfig, primaryEntity.getTypeName(), null);
			if(entityLoader)
			{
				BX.CrmDataLoader.create(
					this._id,
					{
						serviceUrl: entityLoader["url"],
						action: entityLoader["action"],
						params:
							{
								"PRIMARY_TYPE_NAME": primaryEntity.getTypeName(),
								"PRIMARY_ID": primaryEntity.getId(),
								"SECONDARY_TYPE_NAME": this._entityTypeName,
								"OWNER_TYPE_NAME": this._editor.getOwnerTypeName()
							}
					}
				).load(BX.delegate(this.onEntityInfosReload, this));
			}
		},
		setVisible: function(visible)
		{
			visible = !!visible;
			if(this._isVisible === visible)
			{
				return;
			}

			this._isVisible = visible;
			if(this._wrapper)
			{
				this._wrapper.style.display = visible ? "" : "none";
			}
		},
		layout: function()
		{
			var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

			this._wrapper = BX.create("div", {});
			if(!this._isVisible)
			{
				this._wrapper.style.display = "none";
			}
			this._container.appendChild(this._wrapper);

			var legendText = BX.prop.getString(this._settings, "entityLegend", "");

			this._addButton = null;
			this._bindButton = null;

			if(isViewMode)
			{
				this._wrapper.appendChild(
					BX.create(
						"div",
						{
							props: { className: "crm-entity-widget-content-block-title" },
							children: [
								BX.create(
									"span",
									{
										attrs: { className: "crm-entity-widget-content-block-title-text" },
										text: legendText
									}
								)
							]
						}
					)
				);
			}
			else
			{
				this._bindButton = BX.create('span',
					{
						props: { className: 'crm-entity-widget-actions-btn-bind' },
						text: this.getMessage('bind'),
						events: { click: this._bindButtonClickHandler }
					}
				);

				this._wrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-participants-title" },
							children:
								[
									BX.create("div",
										{
											props: { className: "crm-entity-widget-clients-actions-block" },
											children:
												[
													BX.create("span",
														{
															props: { className: "crm-entity-widget-actions-btn-participants" },
															children:
																[
																	BX.create("span",
																		{
																			props: { className: "crm-entity-widget-participants-title-text" },
																			text: legendText
																		}
																	)
																]
														}
													),
													this._bindButton
												]
										}
									)
								]
						}
					)
				);
			}

			//region Search
			this._searchWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-search-box" } });
			this._searchWrapper.style.display = "none";

			this._itemsWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-item-container" } });

			this._wrapper.appendChild(this._searchWrapper);

			this._wrapper.appendChild(this._itemsWrapper);

			if(!isViewMode)
			{
				this._addButton = BX.create("span",
					{
						props: { className: "crm-entity-widget-actions-btn-add" },
						text: this.getMessage('addParticipant'),
						events: { click: this._addButtonHandler }
					}
				);
				this._wrapper.appendChild(this._addButton);
			}

			this.prepareSearchLayout();
			//endregion

			for(var i = 0, length = this._items.length; i < length; i++)
			{
				this._items[i].setContainer(this._itemsWrapper);
				this._items[i].layout();
			}

			this.adjustLayout();
			this._hasLayout = true;
		},
		clearLayout: function()
		{
			for(var i = 0, j = this._items.length; i < j; i++)
			{
				this._items[i].clearLayout();
				this._items[i].setContainer(null);
			}

			this._addButton = null;
			this._bindButton = null;

			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		},
		adjustLayout: function()
		{
			if(!this._bindButton)
			{
				return;
			}

			this._bindButton.style.display =
				this._editor.getPrimaryEntityTypeName() === BX.CrmEntityType.names.company
				&& BX.util.array_diff(
					this._editor.getSecondaryEntities(),
					this._editor.getPrimaryEntityBindings(),
					BX.CrmEntityInfo.getHashCode
				).length > 0 ? "" : "none";
		},
		//region Search
		prepareSearchLayout: function()
		{
			var entityTypeId = BX.CrmEntityType.resolveId(this._entityTypeName);

			this._searchInput = BX.create(
				"input",
				{
					props:
						{
							id: "dropdown-input",
							className: "crm-entity-widget-content-input crm-entity-widget-content-search-input"
						},
					attrs: { autocomplete: "nope" }
				}
			);
			this._searchWrapper.appendChild(this._searchInput);
			this._searchControl = new BX.UI.Dropdown(
				{
					searchAction: "crm.api.entity.search",
					searchOptions: { types: [ this._entityTypeName ] },
					//TODO: Implement CRM renderer
					searchResultRenderer: null,
					targetElement: this._searchInput,
					items: BX.prop.getArray(this._settings, "lastEntityInfos", []),
					footerItems:
						[
							{
								caption: this.getMessage("create"),
								buttons:
									[
										{
											type: "create",
											caption: BX.CrmEntityType.getCaption(entityTypeId),
											events:
												{
													click: BX.delegate(
														function()
														{
															this.createEntity();
															this._searchControl.destroyPopupWindow();
														},
														this
													)
												}
										}
									]
							}
						],
					events:
						{
							onSelect: this.onItemSelect.bind(this),
							onSearch: function(word) {}
						}
				}
			);
		},
		//endregion
		onAddButtonClick: function(e)
		{
			this._searchWrapper.style.display = this._searchWrapper.style.display === "none" ? "" : "none";
		},
		onBindButtonClick: function(e)
		{
			if(this._bindingSelector && this._bindingSelector.isOpened())
			{
				this._bindingSelector.close();
				return;
			}

			if(!this._bindingSelector)
			{
				this._bindingSelector = BX.CmrSelectorMenu.create(this._id, { items: [] });
				this._bindingSelector.addOnSelectListener(this._bindingSelectHandler);
			}

			var bindings = this._editor.getPrimaryEntityBindings();
			var bindingInfos = [];
			var i, length;
			for(i = 0, length = bindings.length; i < length; i++)
			{
				bindingInfos.push(bindings[i]);
			}

			var unboundEntities = BX.util.array_diff(
				this._editor.getSecondaryEntities(),
				bindingInfos,
				BX.CrmEntityInfo.getHashCode
			);

			var items = [];
			for(i = 0, length = unboundEntities.length; i < length; i++)
			{
				var entityInfo = unboundEntities[i];
				items.push({ text: entityInfo.getTitle(), value: entityInfo.getId() });
			}

			this._bindingSelector.setupItems(items);
			this._bindingSelector.open(this._bindButton);
		},
		onBindingSelect: function(sender, item)
		{
			this._editor.onSecondaryEntityBind(this, this._editor.getSecondaryEntityById(item.getValue()));
		},
		onItemSelect: function(sender, item)
		{
			var entityId = BX.prop.getInteger(item, "id", 0);
			if(entityId > 0)
			{
				this.addItemById(entityId);
				this._searchWrapper.style.display = "none";
				this._searchControl.destroyPopupWindow();
			}
		},
		onItemDelete: function(item)
		{
			this.removeItem(item);
		},
		onEntityInfoLoad: function(sender, result)
		{
			var entityData = BX.prop.getObject(result, "DATA", null);
			if(!entityData)
			{
				return;
			}

			var entityInfo = BX.CrmEntityInfo.create(entityData);
			if(this.getItemById(entityInfo.getId()) !== null)
			{
				return;
			}

			this.addItem(this.createItem(entityInfo));
		},
		onEntityInfosReload: function(sender, result)
		{
			var entityData = BX.type.isArray(result['ENTITY_INFOS']) ? result['ENTITY_INFOS'] : [];
			var entityInfos = [];
			for(var i = 0; i < entityData.length; i++)
			{
				entityInfos.push(BX.CrmEntityInfo.create(entityData[i]));
			}
			this.setEntities(entityInfos);
		},
		getEntityCreateUrl: function(entityTypeName)
		{
			return this._editor.getEntityCreateUrl(entityTypeName);
		},
		createEntity: function()
		{
			var url = this.getEntityCreateUrl(this.getEntityTypeName());
			if(url === "")
			{
				return;
			}

			var contextId = this._editor.getContextId();
			url = BX.util.add_url_param(url, { external_context_id: contextId });

			//region add company binding if required
			var ownerTypeName = this._editor.getOwnerTypeName();
			var ownerId = this._editor.getOwnerId();

			if(ownerId > 0 && ownerTypeName === BX.CrmEntityType.names.company)
			{
				url = BX.util.add_url_param(url, { company_id: ownerId });
			}
			//endregion

			if(!this._externalEventHandler)
			{
				this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
				BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}

			if(!this._externalContext)
			{
				this._externalContext = {};
			}
			this._externalContext[contextId] = url;
			BX.Crm.Page.open(url);
		},
		onExternalEvent: function(params)
		{
			if(!this._externalContext)
			{
				return;
			}

			var key = BX.type.isNotEmptyString(params["key"]) ? params["key"] : "";
			if(key !== "onCrmEntityCreate")
			{
				return;
			}

			var value = BX.prop.getObject(params, "value", {});
			if(BX.prop.getString(value, "entityTypeName", "") !== this.getEntityTypeName())
			{
				return;
			}

			var entityId = BX.prop.getInteger(value, "entityId", 0);
			var context = BX.prop.getString(value, "context", "");

			if(typeof(this._externalContext[context]) !== "undefined")
			{
				this.addItemById(entityId);
				BX.Crm.Page.close(this._externalContext[context]);
				delete this._externalContext[context];
			}
		}
	};
	if(typeof(BX.Crm.SecondaryClientEditor.messages) === "undefined")
	{
		BX.Crm.SecondaryClientEditor.messages = {};
	}
	BX.Crm.SecondaryClientEditor.create = function(id, settings)
	{
		var self = new BX.Crm.SecondaryClientEditor();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorEntity === "undefined")
{
	BX.Crm.EntityEditorEntity = function()
	{
		BX.Crm.EntityEditorEntity.superclass.constructor.apply(this);

		this._entityTypeName = "";
		this._entityInfo = null;

		this._entitySelectClickHandler = BX.delegate(this.onEntitySelectClick, this);
		this._entitySelectButton = null;
		this._entitySelector = null;

		this._entityWrapper = null;
		this._dataInput = null;
		this._skeleton = null;
	};
	BX.extend(BX.Crm.EntityEditorEntity, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorEntity.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorEntity.superclass.doInitialize.apply(this);

		this._loaderConfig = this._schemeElement.getDataObjectParam("loader", {});
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorEntity.prototype.initializeFromModel = function()
	{
		var entityInfo = this._model.getSchemeField(this._schemeElement, "info", null);
		if(entityInfo)
		{
			this.setEntity(BX.CrmEntityInfo.create(entityInfo));
		}
		else
		{
			this.setEntityTypeName(this._schemeElement.getDataStringParam("entityTypeName", ""));
		}
	};
	BX.Crm.EntityEditorEntity.prototype.getOwnerTypeName = function()
	{
		return this._editor.getEntityTypeName();
	};
	BX.Crm.EntityEditorEntity.prototype.getOwnerTypeId = function()
	{
		return this._editor.getEntityTypeId();
	};
	BX.Crm.EntityEditorEntity.prototype.getOwnerId = function()
	{
		return this._editor.getEntityId();
	};
	BX.Crm.EntityEditorEntity.prototype.getEntityTypeName = function()
	{
		return this._entityTypeName;
	};
	BX.Crm.EntityEditorEntity.prototype.setEntityTypeName = function(entityType)
	{
		if(this._entityTypeName === entityType)
		{
			return;
		}

		this._entityTypeName = entityType;
		if(this._entitySelector)
		{
			this._entitySelector = null;
		}
	};
	BX.Crm.EntityEditorEntity.prototype.setEntity = function(entityInfo)
	{
		if(this._item)
		{
			if(this._hasLayout)
			{
				this._item.clearLayout();
			}
			this._item = null;
		}

		if(!(entityInfo instanceof BX.CrmEntityInfo))
		{
			this._entityInfo = null;
		}
		else
		{
			this._entityInfo = entityInfo;
			this.setEntityTypeName(this._entityInfo.getTypeName());
			this._item = BX.Crm.ClientEditorEntityPanel.create(
				this._id +  "_" + this._entityInfo.getId().toString(),
				{
					editor: this,
					entityInfo: this._entityInfo,
					enableEntityTypeCaption: false,
					enableRequisite: true,
					//requisiteBinding: BX.prop.getObject(this._settings, "requisiteBinding", {}),
					mode: this._mode,
					onDelete: BX.delegate(this.onItemDelete, this)
				}
			);

			if(this._hasLayout)
			{
				this._item.setContainer(this._entityWrapper);
				this._item.layout();
			}
		}
	};
	BX.Crm.EntityEditorEntity.prototype.setupEntity = function(entityId)
	{
		if(this._entityInfo && this._entityInfo.getId() === entityId)
		{
			return;
		}

		this.setEntity(null);

		var entityLoader = BX.prop.getObject(this._loaderConfig, this._entityTypeName, null);
		if(entityLoader)
		{
			this.showSkeleton();

			BX.CrmDataLoader.create(
				this._id,
				{
					serviceUrl: entityLoader["url"],
					action: entityLoader["action"],
					params: { "ENTITY_TYPE_NAME": this._entityTypeName, "ENTITY_ID": entityId }
				}
			).load(BX.delegate(this.onEntityInfoLoad, this));
		}
	};
	BX.Crm.EntityEditorEntity.prototype.showSkeleton = function()
	{
		if(!this._skeleton)
		{
			this._skeleton = BX.Crm.ClientEditorEntitySkeleton.create(this._id, { container: this._entityWrapper });
		}
		this._skeleton.layout();
	};
	BX.Crm.EntityEditorEntity.prototype.hideSkeleton = function()
	{
		if(this._skeleton)
		{
			this._skeleton.clearLayout();
		}
	};
	BX.Crm.EntityEditorEntity.prototype.onEntityInfoLoad = function(sender, result)
	{
		var entityData = BX.prop.getObject(result, "DATA", null);
		if(entityData)
		{
			this.hideSkeleton();

			var entityInfo = BX.CrmEntityInfo.create(entityData);
			this.setEntity(entityInfo);
		}
	};
	BX.Crm.EntityEditorEntity.prototype.onItemDelete = function(item)
	{
		this.setEntity(null);
	};
	BX.Crm.EntityEditorEntity.prototype.reset = function()
	{
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorEntity.prototype.rollback = function()
	{
		if(this.isChanged())
		{
			this.initializeFromModel();
		}
	};
	BX.Crm.EntityEditorEntity.prototype.doSetMode = function(mode)
	{
		this.rollback();
		if(this._item)
		{
			this._item.setMode(mode);
		}
	};
	BX.Crm.EntityEditorEntity.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		var name = this.getName();
		var title = this._schemeElement.getTitle();
		var value = this.getValue();

		var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

		this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block" } });

		if(isViewMode && !this._item)
		{
			//There is nothing to show
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var innerWrapper = BX.create("div",{ props: { className: "crm-entity-widget-clients-block" } });
		this._wrapper.appendChild(innerWrapper);
		innerWrapper.appendChild(this.createTitleNode(title));

		var editorWrapper = BX.create("div",{ props: { className: !isViewMode ? "crm-entity-widget-content-block-clients" : "" } });
		innerWrapper.appendChild(editorWrapper);

		this._entityWrapper = BX.create("div", { props: { className: "crm-entity-widget-clients-container" } });
		editorWrapper.appendChild(this._entityWrapper);
		if(!isViewMode)
		{
			this._entitySelectButton = BX.create("span",
				{
					props: { className: "crm-entity-widget-actions-btn-select" },
					text: this.getMessage("select"),
					events: { click: this._entitySelectClickHandler }
				}
			);

			var actionWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-clients-actions-block" },
					children: [ this._entitySelectButton ]
				}
			);

			this._entityWrapper.appendChild(actionWrapper);

			this._dataInput = BX.create("input", { attrs: { name: name, type: "hidden", value: value } });
			this._entityWrapper.appendChild(this._dataInput);
		}

		if(this._item)
		{
			this._item.setContainer(this._entityWrapper);
			this._item.layout();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorEntity.prototype.clearLayout = function()
	{
		if(this._item)
		{
			this._item.clearLayout();
		}

		this._wrapper = BX.remove(this._wrapper);
		this._entityWrapper = null;
		this._dataInput = null;

		if(this._entitySelector)
		{
			if(this._entitySelector.isOpened())
			{
				this._entitySelector.close();
			}
			this._entitySelector = null;
		}

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorEntity.prototype.onEntitySelectClick = function(e)
	{
		if(this._entitySelector && this._entitySelector.isOpened())
		{
			this._entitySelector.close();
			return;
		}

		if(!this._entitySelector)
		{
			this._entitySelector = BX.Crm.EntityEditorCrmSelector.create(
				this._id,
				{
					entityTypeIds: [ BX.CrmEntityType.resolveId(this._entityTypeName) ],
					enableMyCompanyOnly: this._schemeElement.getDataBooleanParam("enableMyCompanyOnly", false),
					callback: BX.delegate(this.onEntitySelect, this)
				}
			);
		}
		this._entitySelector.open(this._entitySelectButton);
	};
	BX.Crm.EntityEditorEntity.prototype.onEntitySelect = function(sender, item)
	{
		var id = BX.prop.getInteger(item, "entityId", 0);
		if(this._entityInfo && this._entityInfo.getId() === id)
		{
			return;
		}

		this._entitySelector.close();
		this.setupEntity(id);
	};
	BX.Crm.EntityEditorEntity.prototype.save = function()
	{
		this._model.setField(this.getName(), this._entityInfo ? this._entityInfo.getId() : 0);
	};
	BX.Crm.EntityEditorEntity.prototype.onBeforeSubmit = function()
	{
		if(this._dataInput)
		{
			this._dataInput.value = this._model.getField(this.getName(), "");
		}
	};
	BX.Crm.EntityEditorEntity.prototype.getMessage = function(name)
	{
		return BX.prop.getString(BX.Crm.EntityEditorEntity.messages, name, name);
	};
	if(typeof(BX.Crm.EntityEditorEntity.messages) === "undefined")
	{
		BX.Crm.EntityEditorEntity.messages = {};
	}
	BX.Crm.EntityEditorEntity.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorEntity();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorFieldConfigurator === "undefined")
{
	BX.Crm.EntityEditorFieldConfigurator = function()
	{
		BX.Crm.EntityEditorFieldConfigurator.superclass.constructor.apply(this);
		this._field = null;
		this._name = null;
		this._isLocked = false;

		this._labelInput = null;
		this._isRequiredCheckBox = null;
		this._showAlwaysCheckBox = null;
		this._saveButton = null;
		this._cancelButton = null;
		this._optionWrapper = null;

		this._mandatoryConfigurator = null;
	};
	BX.extend(BX.Crm.EntityEditorFieldConfigurator, BX.Crm.EntityEditorControl);
	BX.Crm.EntityEditorFieldConfigurator.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorFieldConfigurator.superclass.doInitialize.apply(this);
		this._field = BX.prop.get(this._settings, "field", null);
		this._name = BX.prop.getString(this._fieldData, "name", "");

		this._mandatoryConfigurator = BX.prop.get(this._settings, "mandatoryConfigurator", null);
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorFieldConfigurator.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			throw "EntityEditorFieldConfigurator. View mode is not supported by this control type.";
		}

		this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-new-fields" } });
		this._labelInput = BX.create(
			"input",
			{
				attrs:
				{
					className: "crm-entity-widget-content-input",
					type: "text",
					value: this._field.getTitle()
				}
			}
		);

		this._saveButton = BX.create(
			"span",
			{
				props: { className: "ui-btn ui-btn-primary" },
				text: BX.message("CRM_EDITOR_SAVE"),
				events: {  click: BX.delegate(this.onSaveButtonClick, this) }
			}
		);
		this._cancelButton = BX.create(
			"span",
			{
				props: { className: "ui-btn ui-btn-light-border" },
				text: BX.message("CRM_EDITOR_CANCEL"),
				events: {  click: BX.delegate(this.onCancelButtonClick, this) }
			}
		);

		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block" },
					children:
					[
						BX.create(
							"div",
							{
								props: { className: "crm-entity-widget-content-block-title" },
								children:
								[
									BX.create(
										"span",
										{
											attrs: { className: "crm-entity-widget-content-block-title-text" },
											text: this.getMessage("labelField")
										}
									)
								]
							}
						),
						BX.create(
							"div",
							{
								props: { className: "crm-entity-widget-content-block-inner" },
								children:
								[
									BX.create(
										"div",
										{
											props: { className: "crm-entity-widget-content-block-field-container" },
											children: [ this._labelInput ]
										}
									)
								]
							}
						)
					]
				}
			)
		);

		this._optionWrapper = BX.create(
			"div",
			{
				props: { className: "crm-entity-widget-content-block-inner" }
			}
		);
		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block crm-entity-widget-content-block-checkbox" },
					children: [ this._optionWrapper ]
				}
			)
		);

		if(this._field.areAttributesEnabled() && !this._field.isRequired() && this._mandatoryConfigurator)
		{
			this._isRequiredCheckBox = this.createOption(
				{
					caption: this._mandatoryConfigurator.getTitle() + ":",
					labelSettings: { props: { className: "crm-entity-new-field-addiction-label" } },
					containerSettings: { style: { alignItems: "center" } },
					elements: this._mandatoryConfigurator.getButton().prepareLayout()
				}
			);
			this._isRequiredCheckBox.checked = !this._mandatoryConfigurator.isEmpty();

			this._mandatoryConfigurator.setSwitchCheckBox(this._isRequiredCheckBox);
			this._mandatoryConfigurator.setLabel(this._isRequiredCheckBox.nextSibling);

			this._mandatoryConfigurator.setEnabled(this._isRequiredCheckBox.checked);
			this._mandatoryConfigurator.adjust();
		}

		//region Show Always
		this._showAlwaysCheckBox = this.createOption(
			{ caption: this.getMessage("showAlways"), help: { code: "7046149" } }
		);
		this._showAlwaysCheckBox.checked = this._field.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
		//endregion

		this._wrapper.appendChild(
			BX.create("hr", { props: { className: "crm-entity-widget-hr" } })
		);

		this._wrapper.appendChild(
			BX.create (
				"div",
				{
					props: {
						className: "crm-entity-widget-content-block-new-fields-btn-container"
					},
					children:
						[
							this._saveButton,
							this._cancelButton
						]
				}
			)
		);

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.clearLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		this._wrapper = BX.remove(this._wrapper);

		this._labelInput = null;
		this._isRequiredCheckBox = null;
		this._showAlwaysCheckBox = null;
		this._saveButton = null;
		this._cancelButton = null;
		this._optionWrapper = null;

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.onSaveButtonClick = function(e)
	{
		if(this._isLocked)
		{
			return;
		}

		if(this._mandatoryConfigurator)
		{
			if(this._mandatoryConfigurator.isChanged())
			{
				this._mandatoryConfigurator.acceptChanges();
			}
			this._mandatoryConfigurator.close();
		}

		var params =
			{
				field: this._field,
				label: this._labelInput.value,
				showAlways: this._showAlwaysCheckBox.checked
			};

		BX.onCustomEvent(this, "onSave", [ this, params ]);
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.onCancelButtonClick = function(e)
	{
		if(this._isLocked)
		{
			return;
		}

		var params = { field: this._field };
		BX.onCustomEvent(this, "onCancel", [ this, params ]);
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.setLocked = function(locked)
	{
		locked = !!locked;
		if(this._isLocked === locked)
		{
			return;
		}

		this._isLocked = locked;
		if(this._isLocked)
		{
			BX.addClass(this._saveButton, "ui-btn-clock");
		}
		else
		{
			BX.removeClass(this._saveButton, "ui-btn-clock");
		}
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.getField = function()
	{
		return this._field;
	};
	BX.Crm.EntityEditorFieldConfigurator.prototype.createOption = function(params)
	{
		var element = BX.create("input", { props: { type: "checkbox" } });
		var label = BX.create(
			"label",
			{ children: [ element, BX.create("span", { text: BX.prop.getString(params, "caption", "") }) ] }
		);

		var labelSettings = BX.prop.getObject(params, "labelSettings", null);
		if(labelSettings)
		{
			BX.adjust(label, labelSettings);
		}

		var help = BX.prop.getObject(params, "help", null);
		if(help)
		{
			var helpLink = BX.create("a", { props: { className: "crm-entity-new-field-helper-icon" } });

			var helpUrl = BX.prop.getString(help, "url", "");
			if(helpUrl !== "")
			{
				helpLink.href = helpUrl;
				helpLink.target = "_blank";
			}
			else
			{
				helpLink.href = "#";
				BX.bind(
					helpLink,
					"click",
					function(e) {
						window.top.BX.Helper.show("redirect=detail&code=" + BX.prop.getString(help, "code", ""));
						e.preventDefault();
					}
				);
			}
			label.appendChild(helpLink);
		}

		var childElements = [ label ];
		var elements = BX.prop.getArray(params, "elements", []);
		for(var i = 0, length = elements.length; i < length; i++)
		{
			childElements.push(elements[i]);
		}

		var container = BX.create(
			"div",
			{
				props: { className: "crm-entity-widget-content-block-field-container" },
				children: childElements
			}
		);

		var containerSettings = BX.prop.getObject(params, "containerSettings", null);
		if(containerSettings)
		{
			BX.adjust(container, containerSettings);
		}
		this._optionWrapper.appendChild(container);

		return element;
	};
	if(typeof(BX.Crm.EntityEditorFieldConfigurator.messages) === "undefined")
	{
		BX.Crm.EntityEditorFieldConfigurator.messages = {};
	}
	BX.Crm.EntityEditorFieldConfigurator.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorFieldConfigurator();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorUserFieldConfigurator === "undefined")
{
	BX.Crm.EntityEditorUserFieldConfigurator = function()
	{
		BX.Crm.EntityEditorUserFieldConfigurator.superclass.constructor.apply(this);
		this._field = null;
		this._typeId = "";
		this._isLocked = false;

		this._labelInput = null;
		this._saveButton = null;
		this._cancelButton = null;
		this._isTimeEnabledCheckBox = null;
		this._isRequiredCheckBox = null;
		this._isMultipleCheckBox = null;
		this._showAlwaysCheckBox = null;
		this._enumItemWrapper = null;
		this._enumItemContainer = null;
		this._enumButtonWrapper = null;
		this._optionWrapper = null;

		this._enumItems = null;

		this._mandatoryConfigurator = null;
	};
	BX.extend(BX.Crm.EntityEditorUserFieldConfigurator, BX.Crm.EntityEditorControl);
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorUserFieldConfigurator.superclass.doInitialize.apply(this);
		this._field = BX.prop.get(this._settings, "field", null);
		if(this._field && !(this._field instanceof BX.Crm.EntityEditorUserField))
		{
			throw "EntityEditorUserFieldConfigurator. The 'field' param must be EntityEditorUserField.";
		}
		this._mandatoryConfigurator = BX.prop.get(this._settings, "mandatoryConfigurator", null);

		this._typeId = BX.prop.getString(this._settings, "typeId", "");
		this._enumItems = [];
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorUserFieldConfigurator.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			throw "EntityEditorUserFieldConfigurator. View mode is not supported by this control type.";
		}

		var isNew = this._field === null;

		var title = this.getMessage("labelField");
		var manager = this._editor.getUserFieldManager();
		var label = this._field ? this._field.getTitle() : manager.getDefaultFieldLabel(this._typeId);
		this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-new-fields" } });

		this._labelInput = BX.create("input",
			{
				attrs:
				{
					className: "crm-entity-widget-content-input",
					type: "text",
					value: label
				}
			}
		);

		this._saveButton = BX.create(
			"span",
			{
				props: { className: "ui-btn ui-btn-primary" },
				text: BX.message("CRM_EDITOR_SAVE"),
				events: {  click: BX.delegate(this.onSaveButtonClick, this) }
			}
		);
		this._cancelButton = BX.create(
			"span",
			{
				props: { className: "ui-btn ui-btn-light-border" },
				text: BX.message("CRM_EDITOR_CANCEL"),
				events: {  click: BX.delegate(this.onCancelButtonClick, this) }
			}
		);

		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block" },
					children:
					[
						BX.create(
							"div",
							{
								props: { className: "crm-entity-widget-content-block-title" },
								children:
								[
									BX.create(
										"span",
										{
											attrs: { className: "crm-entity-widget-content-block-title-text" },
											text: title
										}
									)
								]
							}
						),
						BX.create(
							"div",
							{
								props: { className: "crm-entity-widget-content-block-inner" },
								children:
								[
									BX.create(
										"div",
										{
											props: { className: "crm-entity-widget-content-block-field-container" },
											children: [ this._labelInput ]
										}
									)
								]
							}
						)
					]
				}
			)
		);

		if(this._typeId === "enumeration")
		{
			this._wrapper.appendChild(
				BX.create("hr", { props: { className: "crm-entity-widget-hr" } })
			);

			this._enumItemWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block" }
				}
			);

			this._wrapper.appendChild(this._enumItemWrapper);
			this._enumItemWrapper.appendChild(
				BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-block-title" },
						children: [
							BX.create(
								"span",
								{
									attrs: { className: "crm-entity-widget-content-block-title-text" },
									text: this.getMessage("enumItems")
								}
							)
						]
					}
				)
			);

			this._enumItemContainer = BX.create("div", { props: { className: "crm-entity-widget-content-block-inner" } });
			this._enumItemWrapper.appendChild(this._enumItemContainer);

			this._enumButtonWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-add-field" } });
			this._enumItemWrapper.appendChild(this._enumButtonWrapper);

			this._enumButtonWrapper.appendChild(
				BX.create(
					"span",
					{
						props: { className: "crm-entity-widget-content-add-field" },
						events: { click: BX.delegate(this.onEnumerationItemAddButtonClick, this) },
						text: this.getMessage("add")
					}
				)
			);

			if(this._field)
			{
				var fieldInfo = this._field.getFieldInfo();
				var enums = BX.prop.getArray(fieldInfo, "ENUM", []);
				for(var i = 0, length = enums.length; i < length; i++)
				{
					this.createEnumerationItem(enums[i]);
				}
			}

			this.createEnumerationItem();
		}

		this._optionWrapper = BX.create(
			"div",
			{
				props: { className: "crm-entity-widget-content-block-inner" }
			}
		);
		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block crm-entity-widget-content-block-checkbox" },
					children: [ this._optionWrapper ]
				}
			)
		);

		var flagCount = 0;
		if(isNew && (this._typeId === "datetime" || this._typeId === "date"))
		{
			this._isTimeEnabledCheckBox = this.createOption({ caption: this.getMessage("enableTime") });
			flagCount++;
		}

		if(this._typeId !== "boolean")
		{
			if(this._mandatoryConfigurator)
			{
				this._isRequiredCheckBox = this.createOption(
					{
						caption: this._mandatoryConfigurator.getTitle() + ":",
						labelSettings: { props: { className: "crm-entity-new-field-addiction-label" } },
						containerSettings: { style: { alignItems: "center" } },
						elements: this._mandatoryConfigurator.getButton().prepareLayout()
					}
				);

				this._isRequiredCheckBox.checked = (this._field && this._field.isRequired())
					|| this._mandatoryConfigurator.isCustomized();

				this._mandatoryConfigurator.setSwitchCheckBox(this._isRequiredCheckBox);
				this._mandatoryConfigurator.setLabel(this._isRequiredCheckBox.nextSibling);

				this._mandatoryConfigurator.setEnabled(this._isRequiredCheckBox.checked);
				this._mandatoryConfigurator.adjust();
			}
			else
			{
				this._isRequiredCheckBox = this.createOption({ caption: this.getMessage("isRequiredField") });
				this._isRequiredCheckBox.checked = this._field && this._field.isRequired();
			}

			flagCount++;

			if(isNew)
			{
				this._isMultipleCheckBox = this.createOption({ caption: this.getMessage("isMultipleField") });
				flagCount++;
			}
		}

		//region Show Always
		this._showAlwaysCheckBox = this.createOption(
			{ caption: this.getMessage("showAlways"), help: { code: "7046149" } }
		);
		this._showAlwaysCheckBox.checked = isNew
			? BX.prop.getBoolean(this._settings, "showAlways", true)
			: this._field.checkOptionFlag(BX.Crm.EntityEditorControlOptions.showAlways);
		flagCount++;
		//endregion

		if(flagCount > 0)
		{
			this._wrapper.appendChild(
				BX.create("hr", { props: { className: "crm-entity-widget-hr" } })
			);
		}

		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: {
						className: "crm-entity-widget-content-block-new-fields-btn-container"
					},
					children: [
						this._saveButton,
						this._cancelButton
					]
				}
			)
		);

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.clearLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		this._wrapper = BX.remove(this._wrapper);

		this._labelInput = null;
		this._saveButton = null;
		this._cancelButton = null;
		this._isTimeEnabledCheckBox = null;
		this._isRequiredCheckBox = null;
		this._isMultipleCheckBox = null;
		this._showAlwaysCheckBox = null;
		this._enumItemWrapper = null;
		this._enumButtonWrapper = null;
		this._enumItemContainer = null;
		this._optionWrapper = null;

		this._enumItems = [];

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.onEnumerationItemAddButtonClick = function(e)
	{
		this.createEnumerationItem().focus();
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.createEnumerationItem = function(data)
	{
		var item = BX.Crm.EntityEditorUserFieldListItem.create(
			"",
			{
				configurator: this,
				container: this._enumItemContainer,
				data: data
			}
		);

		this._enumItems.push(item);
		item.layout();
		return item;
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.removeEnumerationItem = function(item)
	{
		for(var i = 0, length = this._enumItems.length; i < length; i++)
		{
			if(this._enumItems[i] === item)
			{
				this._enumItems[i].clearLayout();
				this._enumItems.splice(i, 1);
				break;
			}
		}
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.createOption = function(params)
	{
		var element = BX.create("input", { props: { type: "checkbox" } });
		var label = BX.create(
			"label",
			{ children: [ element, BX.create("span", { text: BX.prop.getString(params, "caption", "") }) ] }
		);

		var labelSettings = BX.prop.getObject(params, "labelSettings", null);
		if(labelSettings)
		{
			BX.adjust(label, labelSettings);
		}

		var help = BX.prop.getObject(params, "help", null);
		if(help)
		{
			var helpLink = BX.create("a", { props: { className: "crm-entity-new-field-helper-icon" } });

			var helpUrl = BX.prop.getString(help, "url", "");
			if(helpUrl !== "")
			{
				helpLink.href = helpUrl;
				helpLink.target = "_blank";
			}
			else
			{
				helpLink.href = "#";
				BX.bind(
					helpLink,
					"click",
					function(e) {
						window.top.BX.Helper.show("redirect=detail&code=" + BX.prop.getString(help, "code", ""));
						e.preventDefault();
					}
				);
			}
			label.appendChild(helpLink);
		}

		var childElements = [ label ];
		var elements = BX.prop.getArray(params, "elements", []);
		for(var i = 0, length = elements.length; i < length; i++)
		{
			childElements.push(elements[i]);
		}

		var container = BX.create(
			"div",
			{
				props: { className: "crm-entity-widget-content-block-field-container" },
				children: childElements
			}
		);

		var containerSettings = BX.prop.getObject(params, "containerSettings", null);
		if(containerSettings)
		{
			BX.adjust(container, containerSettings);
		}
		this._optionWrapper.appendChild(container);

		return element;
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.onSaveButtonClick = function(e)
	{
		if(this._isLocked)
		{
			return;
		}

		if(this._mandatoryConfigurator)
		{
			if(this._mandatoryConfigurator.isChanged())
			{
				this._mandatoryConfigurator.acceptChanges();
			}
			this._mandatoryConfigurator.close();
		}

		var params =
		{
			typeId: this._typeId,
			label: this._labelInput.value
		};

		if(this._field)
		{
			params["field"] = this._field;
			if(this._isRequiredCheckBox)
			{
				params["mandatory"] = this._isRequiredCheckBox.checked;
			}
		}
		else
		{
			if(this._typeId === "boolean")
			{
				params["multiple"] = false;
			}
			else
			{
				if(this._isMultipleCheckBox)
				{
					params["multiple"] = this._isMultipleCheckBox.checked;
				}
				params["mandatory"] = this._isRequiredCheckBox.checked;
			}

			if(this._typeId === "datetime")
			{
				params["enableTime"] = this._isTimeEnabledCheckBox.checked;
			}
		}

		if(this._typeId === "enumeration")
		{
			params["enumeration"] = [];
			var hashes = [];
			for(var i = 0, length = this._enumItems.length; i < length; i++)
			{
				var enumData = this._enumItems[i].prepareData();
				if(!enumData)
				{
					continue;
				}

				var hash = BX.util.hashCode(enumData["VALUE"]);
				if(BX.util.in_array(hash, hashes))
				{
					continue;
				}

				hashes.push(hash);
				enumData["SORT"] = (params["enumeration"].length + 1) * 100;
				params["enumeration"].push(enumData);
			}
		}

		params["showAlways"] = this._showAlwaysCheckBox.checked;

		BX.onCustomEvent(this, "onSave", [ this, params]);
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.onCancelButtonClick = function(e)
	{
		if(this._isLocked)
		{
			return;
		}

		var params = { typeId: this._typeId };
		if(this._field)
		{
			params["field"] = this._field;
		}

		BX.onCustomEvent(this, "onCancel", [ this, params ]);
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.setLocked = function(locked)
	{
		locked = !!locked;
		if(this._isLocked === locked)
		{
			return;
		}

		this._isLocked = locked;
		if(this._isLocked)
		{
			BX.addClass(this._saveButton, "ui-btn-clock");
		}
		else
		{
			BX.removeClass(this._saveButton, "ui-btn-clock");
		}
	};
	BX.Crm.EntityEditorUserFieldConfigurator.prototype.getField = function()
	{
		return this._field;
	};
	if(typeof(BX.Crm.EntityEditorUserFieldConfigurator.messages) === "undefined")
	{
		BX.Crm.EntityEditorUserFieldConfigurator.messages = {};
	}
	BX.Crm.EntityEditorUserFieldConfigurator.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorUserFieldConfigurator();
		self.initialize(id, settings);
		return self;
	};
	BX.onCustomEvent(window, "BX.Crm.EntityEditorUserFieldConfigurator:onDefine");
}

if(typeof BX.Crm.EntityEditorUserFieldListItem === "undefined")
{
	BX.Crm.EntityEditorUserFieldListItem = function()
	{
		this._id = "";
		this._settings = null;
		this._data = null;
		this._configurator = null;
		this._container = null;
		this._labelInput = null;

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorUserFieldListItem.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = BX.type.isPlainObject(settings) ? settings : {};

			this._data = BX.prop.getObject(this._settings, "data", {});
			this._configurator = BX.prop.get(this._settings, "configurator");
			this._container = BX.prop.getElementNode(this._settings, "container");
		},
		layout: function()
		{
			if(this._hasLayout)
			{
				return;
			}

			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-field-container" } });

			this._labelInput = BX.create(
				"input",
				{
					props:
						{
							className: "crm-entity-widget-content-input",
							type: "input",
							value: BX.prop.getString(this._data, "VALUE", "")
						}
				}
			);

			this._wrapper.appendChild(this._labelInput);
			this._wrapper.appendChild(
				BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-remove-block" },
						events: { click: BX.delegate(this.onDeleteButtonClick, this) }
					}
				)
			);

			var anchor = BX.prop.getElementNode(this._settings, "anchor");
			if(anchor)
			{
				this._container.insertBefore(this._wrapper, anchor);
			}
			else
			{
				this._container.appendChild(this._wrapper);
			}

			this._hasLayout = true;
		},
		clearLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		},
		focus: function()
		{
			if(this._labelInput)
			{
				this._labelInput.focus();
			}
		},
		prepareData: function()
		{
			var value = this._labelInput ? BX.util.trim(this._labelInput.value) : "";
			if(value === "")
			{
				return null;
			}

			var data = { "VALUE": value };
			var id = BX.prop.getInteger(this._data, "ID", 0);
			if(id > 0)
			{
				data["ID"] = id;
			}

			var xmlId = BX.prop.getString(this._data, "XML_ID", "");
			if(id > 0)
			{
				data["XML_ID"] = xmlId;
			}

			return data;
		},
		onDeleteButtonClick: function(e)
		{
			this._configurator.removeEnumerationItem(this);
		}
	};
	BX.Crm.EntityEditorUserFieldListItem.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorUserFieldListItem();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorUserField === "undefined")
{
	BX.Crm.EntityEditorUserField = function()
	{
		BX.Crm.EntityEditorUserField.superclass.constructor.apply(this);
		this._innerWrapper = null;

		this._isLoaded = false;
		this._focusOnLoad = false;
	};

	BX.extend(BX.Crm.EntityEditorUserField, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorUserField.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorUserField.superclass.doInitialize.apply(this);
		this._manager = this._editor.getUserFieldManager();
	};
	BX.Crm.EntityEditorUserField.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorUserField.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldInfo = function()
	{
		return this._schemeElement.getDataParam("fieldInfo", {});
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldType = function()
	{
		return BX.prop.getString(this.getFieldInfo(), "USER_TYPE_ID", "");
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldSettings = function()
	{
		return BX.prop.getObject(this.getFieldInfo(), "SETTINGS", {});
	};
	BX.Crm.EntityEditorUserField.prototype.isMultiple = function()
	{
		return BX.prop.getString(this.getFieldInfo(), "MULTIPLE", "N") === "Y";
	};
	BX.Crm.EntityEditorUserField.prototype.getEntityValueId = function()
	{
		return BX.prop.getString(this.getFieldInfo(), "ENTITY_VALUE_ID", "");
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldValue = function()
	{
		var fieldData = this.getValue();
		var value = BX.prop.getArray(fieldData, "VALUE", null);
		if(value === null)
		{
			value = BX.prop.getString(fieldData, "VALUE", "");
		}
		return value;
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldSignature = function()
	{
		return BX.prop.getString(this.getValue(), "SIGNATURE", "");
	};
	BX.Crm.EntityEditorUserField.prototype.isTitleEnabled = function()
	{
		var info = this.getFieldInfo();
		var typeName = BX.prop.getString(info, "USER_TYPE_ID", "");

		if(typeName !== 'boolean')
		{
			return true;
		}

		//Disable title for checkboxes only.
		return BX.prop.getString(BX.prop.getObject(info, "SETTINGS", {}), "DISPLAY", "") !== "CHECKBOX";
	};
	BX.Crm.EntityEditorUserField.prototype.getFieldNode = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorUserField.prototype.doGetEditPriority = function()
	{
		return (BX.prop.get(BX.prop.getObject(this.getFieldInfo(), "SETTINGS"), "DEFAULT_VALUE")
			? BX.Crm.EntityEditorPriority.high
			: BX.Crm.EntityEditorPriority.normal
		);
	};
	BX.Crm.EntityEditorUserField.prototype.checkIfNotEmpty = function(value)
	{
		if(BX.prop.getBoolean(value, "IS_EMPTY", false))
		{
			return false;
		}

		var fieldValue;
		if(this.getFieldType() === BX.Crm.EntityUserFieldType.boolean)
		{
			fieldValue = BX.prop.getString(value, "VALUE", "");
			return fieldValue !== "";
		}

		fieldValue = BX.prop.getArray(value, "VALUE", null);
		if(fieldValue === null)
		{
			fieldValue = BX.prop.getString(value, "VALUE", "");
		}
		return BX.type.isArray(fieldValue) ? fieldValue.length > 0 : fieldValue !== "";
	};
	BX.Crm.EntityEditorUserField.prototype.getValue = function(defaultValue)
	{
		if(defaultValue === undefined)
		{
			defaultValue = null;
		}

		if(!this._model)
		{
			return defaultValue;
		}

		return this._model.getField(this.getName(), defaultValue);
	};
	BX.Crm.EntityEditorUserField.prototype.hasContentToDisplay = function()
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			return true;
		}
		return this.checkIfNotEmpty(this.getValue());
	};
	BX.Crm.EntityEditorUserField.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		var name = this.getName();
		var title = this.getTitle();

		var fieldInfo = this.getFieldInfo();
		var fieldData = this.getValue();

		var signature = BX.prop.getString(fieldData, "SIGNATURE", "");

		this.ensureWrapperCreated();
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var fieldType = this.getFieldType();
		if(fieldType === BX.Crm.EntityUserFieldType.string)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-text");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.integer || fieldType === BX.Crm.EntityUserFieldType.double)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-number");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.money)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-money");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.date || fieldType === BX.Crm.EntityUserFieldType.datetime)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-date");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.boolean)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-checkbox");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.enumeration)
		{
			BX.addClass(
				this._wrapper,
				this.isMultiple()
					? "crm-entity-widget-content-block-field-custom-multiselect"
					: "crm-entity-widget-content-block-field-custom-select"
			);
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.file)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-file");
		}
		else if(fieldType === BX.Crm.EntityUserFieldType.url)
		{
			BX.addClass(this._wrapper, "crm-entity-widget-content-block-field-custom-link");
		}

		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			if(this.isTitleEnabled())
			{
				this._wrapper.appendChild(this.createTitleNode(title));
			}

			this._innerWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-inner" }
				}
			);
		}
		else// if(this._mode === BX.Crm.EntityEditorMode.view)
		{
			this._wrapper.appendChild(this.createTitleNode(title));
			this._innerWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-inner" }
				}
			);
		}
		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		//It is strongly required to append wrapper to container before "setupContentHtml" will be called otherwise user field initialization will fail.
		this.registerLayout(options);

		if(this.hasContentToDisplay())
		{
			var html = BX.prop.getString(options, "html", "");
			if(html === "")
			{
				//Try get preloaded HTML
				html = BX.prop.getString(
					BX.prop.getObject(fieldData, "HTML", {}),
					BX.Crm.EntityEditorMode.getName(this._mode).toUpperCase(),
					""
				);

			}
			if(html !== "")
			{
				this.setupContentHtml(html);
				this._hasLayout = true;
			}
			else
			{
				this._isLoaded = false;

				var loader = null;
				//Ignore group loader for single edit mode
				if(!this.isInSingleEditMode())
				{
					loader = BX.prop.get(options, "userFieldLoader", null);
				}

				if(!loader)
				{
					loader = BX.Crm.EntityUserFieldLayoutLoader.create(
						this._id,
						{ mode: this._mode, enableBatchMode: false }
					);
				}


				var fieldParams = BX.clone(fieldInfo);
				fieldParams["SIGNATURE"] = signature;
				if(fieldType === BX.Crm.EntityUserFieldType.file && BX.type.isObject(fieldParams["ADDITIONAL"]))
				{
					var ownerToken = BX.prop.getString(
						BX.prop.getObject(fieldData, "EXTRAS", {}),
						"OWNER_TOKEN",
						""
					);
					if(ownerToken !== "")
					{
						fieldParams["ADDITIONAL"]["URL_TEMPLATE"] += "&owner_token=" + encodeURIComponent(ownerToken);
					}
				}
				if(this.checkIfNotEmpty(fieldData))
				{
					var value = BX.prop.getArray(fieldData, "VALUE", null);
					if(value === null)
					{
						value = BX.prop.getString(fieldData, "VALUE", "");
					}
					fieldParams["VALUE"] = value;
				}

				this.adjustFieldParams(fieldParams, true);
				loader.addItem(
					{
						name: name,
						field: fieldParams,
						callback: BX.delegate(this.onLayoutLoaded, this)
					}
				);
				loader.run();
			}
		}
		else
		{
			this._innerWrapper.appendChild(document.createTextNode(this.getMessage("isEmpty")));
			this._hasLayout = true;
		}
	};
	BX.Crm.EntityEditorUserField.prototype.doRegisterLayout = function()
	{
	};
	BX.Crm.EntityEditorUserField.prototype.adjustFieldParams = function(fieldParams, isLayoutContext)
	{
		var fieldType = this.getFieldType();
		if(fieldType === BX.Crm.EntityUserFieldType.boolean)
		{
			//HACK: Overriding original label for boolean field
			if(!BX.type.isPlainObject(fieldParams["SETTINGS"]))
			{
				fieldParams["SETTINGS"] = {};
			}
			fieldParams["SETTINGS"]["LABEL_CHECKBOX"] = this.getTitle();
		}

		//HACK: We have to assign fake ENTITY_VALUE_ID for render predefined value of new entity
		if(isLayoutContext
			&& typeof fieldParams["VALUE"] !== "undefined"
			&& this._mode === BX.Crm.EntityEditorMode.edit
			&& BX.prop.getInteger(fieldParams, "ENTITY_VALUE_ID") <= 0
		)
		{
			fieldParams["ENTITY_VALUE_ID"] = 1;
		}

	};
	BX.Crm.EntityEditorUserField.prototype.doClearLayout = function(options)
	{
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorUserField.prototype.validate = function()
	{
		return true;
	};
	BX.Crm.EntityEditorUserField.prototype.save = function()
	{
	};
	BX.Crm.EntityEditorUserField.prototype.focus = function()
	{
		if(this._mode !== BX.Crm.EntityEditorMode.edit)
		{
			return;
		}

		if(this._isLoaded)
		{
			this.doFocus();
		}
		else
		{
			this._focusOnLoad = true;
		}
	};
	BX.Crm.EntityEditorUserField.prototype.doFocus = function()
	{
		BX.Main.UF.Factory.focus(this.getName());
	};
	BX.Crm.EntityEditorUserField.prototype.setupContentHtml = function(html)
	{
		if(this._innerWrapper)
		{
			//console.log("setupContentHtml: %s->%s->%s", this._editor.getId(), this._id, BX.Crm.EntityEditorMode.getName(this._mode));

			BX.html(this._innerWrapper, html).then(
				function()
				{
					this.onLayoutSuccess();

					this._isLoaded = true;
					if(this._focusOnLoad === true)
					{
						this.doFocus();
						this._focusOnLoad = false;
					}
				}.bind(this)
			);
		}
	};
	BX.Crm.EntityEditorUserField.prototype.doSetActive = function()
	{
		//We can't call this._manager.registerActiveField. We have to wait field layout load(see onLayoutSuccess)
		if(!this._isActive)
		{
			this._manager.unregisterActiveField(this);
		}
	};
	BX.Crm.EntityEditorUserField.prototype.rollback = function()
	{
		this._manager.unregisterActiveField(this);
	};
	BX.Crm.EntityEditorUserField.prototype.onLayoutSuccess = function()
	{
		if(this._isActive)
		{
			this._manager.registerActiveField(this);
		}

		//Add Change Listener after timeout for prevent markAsChanged call in process of field initialization.
		window.setTimeout(
			function(){
				BX.bindDelegate(
					this._innerWrapper,
					"bxchange",
					{ tag: [ "input", "select", "textarea" ] },
					this._changeHandler
				);
			}.bind(this),
			200
		);

		//HACK: Try to resolve employee change button
		var fieldType = this.getFieldType();
		if(fieldType === BX.Crm.EntityUserFieldType.employee)
		{
			var button = this._innerWrapper.querySelector('.feed-add-destination-link');
			if(button)
			{
				BX.bind(button, "click", BX.delegate(this.onEmployeeSelectorOpen, this));
			}
		}

		//HACK: Mark empty boolean field as changed because of default value
		if(fieldType === BX.Crm.EntityUserFieldType.boolean)
		{
			if(this._mode === BX.Crm.EntityEditorMode.edit && !this.checkIfNotEmpty(this.getValue()))
			{
				this.markAsChanged();
			}
		}

		//Field content is added successfully. Layout is ready.
		if(!this._hasLayout)
		{
			this._hasLayout = true;
		}

		// Handler could be called by UF to trigger _changeHandler in complicated cases
		BX.removeCustomEvent(window, "onCrmEntityEditorUserFieldExternalChanged", BX.proxy(this.userFieldExternalChangedHandler, this));
		BX.addCustomEvent(window, "onCrmEntityEditorUserFieldExternalChanged", BX.proxy(this.userFieldExternalChangedHandler, this));

		BX.removeCustomEvent(window, "onCrmEntityEditorUserFieldSetValidator", BX.proxy(this.userFieldSetValidatorHandler, this));
		BX.addCustomEvent(window, "onCrmEntityEditorUserFieldSetValidator", BX.proxy(this.userFieldSetValidatorHandler, this));
	};

	BX.Crm.EntityEditorUserField.prototype.userFieldExternalChangedHandler = function(fieldId)
	{
		if (fieldId == this._id && BX.type.isFunction(this._changeHandler))
		{
			this._changeHandler();
		}
	};
	BX.Crm.EntityEditorUserField.prototype.userFieldSetValidatorHandler = function(fieldId, callback)
	{
		if (fieldId == this._id && BX.type.isFunction(callback))
		{
			this.validate = callback;
		}
	};
	BX.Crm.EntityEditorUserField.prototype.onLayoutLoaded = function(result)
	{
		var html = BX.prop.getString(result, "HTML", "");
		if(html !== "")
		{
			this.setupContentHtml(html);
			this._hasLayout = true;
			this.raiseLayoutEvent();
		}
	};
	BX.Crm.EntityEditorUserField.prototype.onEmployeeSelectorOpen = function(e)
	{
		var button = BX.getEventTarget(e);
		if(!button)
		{
			return;
		}

		//HACK: Try to resolve UserFieldEmployee object
		var match = button.id.match(/^add_user_([a-z_0-9-]+)/i);
		if(BX.type.isArray(match) && match.length > 1)
		{
			var selector = BX.Intranet.UserFieldEmployee.instance(match[1]);
			if(selector)
			{
				BX.addCustomEvent(selector, 'onUpdateValue', this._changeHandler);
			}
		}
	};
	BX.Crm.EntityEditorUserField.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorUserField();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorProductRowSummary === "undefined")
{
	BX.Crm.EntityEditorProductRowSummary = function()
	{
		BX.Crm.EntityEditorProductRowSummary.superclass.constructor.apply(this);
		this._loader = null;
		this._table = null;

		this._itemCount = 0;
		this._totalCount = 0;

		this._moreButton = null;
		this._moreButtonRow = null;
		this._moreButtonClickHandler = BX.delegate(this._onMoreButtonClick, this);
	};
	BX.extend(BX.Crm.EntityEditorProductRowSummary, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorProductRowSummary.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorProductRowSummary.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorProductRowSummary.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({});
		this.adjustWrapper();

		var data = this.getValue();

		if(!BX.type.isPlainObject(data))
		{
			return;
		}

		var title = this.getTitle();
		var items = BX.prop.getArray(data, "items", []);
		this._totalCount = BX.prop.getInteger(data, "count", 0);

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(title));

		this._table = BX.create("table", { props: { className: "crm-entity-widget-content-block-products-list" } });

		var length = this._itemCount = items.length;
		var restLength = 0;
		if(length > 5)
		{
			restLength = this._totalCount - 5;
			length = 5;
		}

		for(var i = 0; i < length; i++)
		{
			this.addProductRow(items[i], -1);
		}

		var row, cell;
		this._moreButton = null;
		if(restLength > 0)
		{
			row = this._moreButtonRow = this._table.insertRow(-1);
			row.className = "crm-entity-widget-content-block-products-item";
			cell = row.insertCell(-1);
			cell.className = "crm-entity-widget-content-block-products-item-name";

			this._moreButton = BX.create(
				"span",
				{
					attrs: { className: "crm-entity-widget-content-block-products-show-more" },
					events: { click: this._moreButtonClickHandler },
					text: this.getMessage("notShown").replace(/#COUNT#/gi, restLength.toString())
				}
			);

			cell.appendChild(this._moreButton);
			cell = row.insertCell(-1);
			cell.className = "crm-entity-widget-content-block-products-price";
		}

		row = this._table.insertRow(-1);
		row.className = "crm-entity-widget-content-block-products-item";
		cell = row.insertCell(-1);
		cell.className = "crm-entity-widget-content-block-products-item-name";
		cell.innerHTML = this.getMessage("total");

		cell = row.insertCell(-1);
		cell.className = "crm-entity-widget-content-block-products-price";
		cell.appendChild(
			BX.create(
				"div",
				{
					attrs: { className: "crm-entity-widget-content-block-products-price-value" },
					html: data["total"]
				}
			)
		);

		this._wrapper.appendChild(
			BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-products" },
					children: [ this._table ]
				}
			)
		);

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorProductRowSummary.prototype._onMoreButtonClick = function(e)
	{
		if(this._totalCount > 10)
		{
			BX.onCustomEvent(window, "OpenEntityDetailTab", ["tab_products"]);
			return;
		}

		this._moreButtonRow.style.display = "none";
		var data = this.getValue();
		var items = BX.prop.getArray(data, "items", []);
		for(var i = 5; i < this._itemCount; i++)
		{
			this.addProductRow(items[i], i);
		}
	};
	BX.Crm.EntityEditorProductRowSummary.prototype.clearLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		this._table = null;
		this._moreButton = null;
		this._moreButtonRow = null;
		this._wrapper = BX.remove(this._wrapper);
		this._hasLayout = false;
	};
	BX.Crm.EntityEditorProductRowSummary.prototype.addProductRow = function(data, index)
	{
		if(typeof(index) === "undefined")
		{
			index = -1;
		}

		var row, cell;
		row = this._table.insertRow(index);
		row.className = "crm-entity-widget-content-block-products-item";
		cell = row.insertCell(-1);
		cell.className = "crm-entity-widget-content-block-products-item-name";

		var url = BX.prop.getString(data, "URL", "");
		if(url !== "")
		{
			cell.appendChild(
				BX.create("a", { attrs: { target: "_blank", href: url }, text: data["PRODUCT_NAME"] })
			);
		}
		else
		{
			cell.innerHTML = BX.util.htmlspecialchars(data["PRODUCT_NAME"]);
		}

		cell = row.insertCell(-1);
		cell.className = "crm-entity-widget-content-block-products-price";
		cell.appendChild(
			BX.create(
				"div",
				{
					attrs: { className: "crm-entity-widget-content-block-products-price-value" },
					html: data["SUM"]
				}
			)
		);
	};

	if(typeof(BX.Crm.EntityEditorProductRowSummary.messages) === "undefined")
	{
		BX.Crm.EntityEditorProductRowSummary.messages = {};
	}

	BX.Crm.EntityEditorProductRowSummary.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorProductRowSummary();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorRequisiteSelector === "undefined")
{
	BX.Crm.EntityEditorRequisiteSelector = function()
	{
		BX.Crm.EntityEditorRequisiteSelector.superclass.constructor.apply(this);
		this._requisiteId = 0;
		this._bankDetailId = 0;

		this._itemWrappers = {};
		this._itemButtons = {};
		this._itemBankDetailButtons = {};
	};
	BX.extend(BX.Crm.EntityEditorRequisiteSelector, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorRequisiteSelector.prototype.doInitialize = function()
	{
		this._requisiteId = this._model.getIntegerField("REQUISITE_ID", 0);
		this._bankDetailId = this._model.getIntegerField("BANK_DETAIL_ID", 0);
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorRequisiteSelector.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.getPrefix = function()
	{
		return this._id.toLowerCase() + "_";
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		var data = this.getData();
		this._requisiteInfo = BX.CrmEntityRequisiteInfo.create(
			{
				requisiteId: this._requisiteId,
				bankDetailId: this._bankDetailId,
				data: BX.prop.getArray(data, "data", {})
			}
		);

		var items = this._requisiteInfo.getItems();

		this._wrapper = BX.create("div", { props: { className: "crm-entity-requisites-slider-wrapper" } });
		var contentWrapper = BX.create("div", { props: { className: "crm-entity-requisites-slider-content" } });
		this._wrapper.appendChild(contentWrapper);

		var innerContentWrapper = BX.create("div", { props: { className: "crm-entity-requisites-slider-widget-content" } });
		contentWrapper.appendChild(innerContentWrapper);

		var selectContainer = BX.create("div", { props: { className: "crm-entity-requisites-select-container" } });
		innerContentWrapper.appendChild(selectContainer);

		for(var i = 0, length = items.length; i < length; i++)
		{
			selectContainer.appendChild(this.prepareItemLayout(items[i]));
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.getItemData = function(itemId)
	{
		var items = this._requisiteInfo.getItems();
		for(var i = 0, length = items.length; i < length; i++)
		{
			var itemData = items[i];
			if(itemId === BX.prop.getInteger(itemData, "requisiteId", 0))
			{
				return itemData;
			}
		}
		return null;
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.prepareItemLayout = function(itemData)
	{
		var viewData = BX.prop.getObject(itemData, "viewData", null);
		if(!viewData)
		{
			return;
		}

		var isSelected = BX.prop.getBoolean(itemData, "selected", false);

		var prefix  = this.getPrefix();
		var itemId = BX.prop.getInteger(itemData, "requisiteId", 0);

		var wrapper = BX.create("label", { props: { className: "crm-entity-requisites-select-item" } });
		wrapper.appendChild(BX.create("strong", { text: BX.prop.getString(viewData, "title", "") }));
		if(isSelected)
		{
			BX.addClass(wrapper, "crm-entity-requisites-select-item-selected");
		}
		this._itemWrappers[itemId] = wrapper;

		var i, length;

		var fields = BX.prop.getArray(viewData, "fields", []);
		for(i = 0, length = fields.length; i < length; i++)
		{
			var field = fields[i];

			var fieldTitle = BX.prop.getString(field, "title", "");
			var fieldValue = BX.prop.getString(field, "textValue", "");

			if(fieldTitle !== "" && fieldValue !== "")
			{
				wrapper.appendChild(BX.create("br"));
				wrapper.appendChild(BX.create("span", { text: fieldTitle + ": " + fieldValue }));
			}
		}

		var button = BX.create("input",
			{
				props:
					{
						type: "radio",
						name: prefix + "requisite",
						checked: isSelected,
						className: "crm-entity-requisites-select-item-field"
					},
				attrs: { "data-requisiteid": itemId }
			}
		);
		wrapper.appendChild(button);
		this._itemButtons[itemId] = button;
		BX.bind(button, "change", BX.delegate(this.onItemChange, this));

		var bankDetailList = BX.prop.getArray(itemData, "bankDetailViewDataList", []);

		if(bankDetailList.length > 0)
		{
			var bankDetailWrapper = BX.create("span",
				{
					props: { className: "crm-entity-requisites-select-item-bank-requisites-container" }
				}
			);
			wrapper.appendChild(bankDetailWrapper);
			bankDetailWrapper.appendChild(
				BX.create("span",
					{
						props: { className: "crm-entity-requisites-select-item-bank-requisites-title" },
						html: this.getMessage("bankDetails")
					}
				)
			);

			var bankDetailContainer = BX.create("span",
				{
					props: { className: "crm-entity-requisites-select-item-bank-requisites-field-container" }
				}
			);
			bankDetailWrapper.appendChild(bankDetailContainer);

			this._itemBankDetailButtons[itemId] = {};
			for(i = 0, length = bankDetailList.length; i < length; i++)
			{
				var bankDetailItem = bankDetailList[i];
				var bankDetailItemId = BX.prop.getInteger(bankDetailItem, "pseudoId", 0);

				var bankDetailViewData = BX.prop.getObject(bankDetailItem, "viewData", null);
				if(!bankDetailViewData)
				{
					continue;
				}

				var isBankDetailItemSelected = isSelected && BX.prop.getBoolean(bankDetailItem, "selected", false);

				var bankDetailItemWrapper = BX.create("label",
					{
						props: { className: "crm-entity-requisites-select-item-bank-requisites-field-item" }
					}
				);
				bankDetailContainer.appendChild(bankDetailItemWrapper);

				var bankDetailButton = BX.create("input",
					{
						props:
							{
								type: "radio",
								name: prefix + "bankrequisite" + itemId,
								checked: isBankDetailItemSelected,
								className: "crm-entity-requisites-select-item-bank-requisites-field"
							},
						attrs:
							{
								"data-requisiteid": itemId,
								"data-bankdetailid": bankDetailItemId
							}
					}
				);
				bankDetailItemWrapper.appendChild(bankDetailButton);
				BX.bind(bankDetailButton, "change", BX.delegate(this.onItemBankDetailChange, this));
				this._itemBankDetailButtons[itemId][bankDetailItemId] = bankDetailButton;

				bankDetailItemWrapper.appendChild(
					document.createTextNode(BX.prop.getString(bankDetailViewData, "title", ""))
				);
			}

			wrapper.appendChild(
				BX.create("span", { style: { display: "block", clear: "both" } })
			);
		}

		return wrapper;

	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.clearLayout = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		this._wrapper = BX.remove(this._wrapper);
		this._itemWrappers = {};
		this._itemButtons = {};
		this._itemBankDetailButtons = {};

		this._hasLayout = false;
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.save = function()
	{
		this._model.setField("REQUISITE_ID", this._requisiteId, { originator: this });
		this._model.setField("BANK_DETAIL_ID", this._bankDetailId, { originator: this });
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.onItemChange = function(e)
	{
		var button = BX.getEventTarget(e);
		if(!button.checked)
		{
			return;
		}

		var requisiteId = parseInt(button.getAttribute("data-requisiteid"));
		if(isNaN(requisiteId) || requisiteId <= 0)
		{
			return;
		}

		this._requisiteId = requisiteId;
		this._bankDetailId = 0;

		var itemData = this.getItemData(this._requisiteId);
		var itemBankDetailList = BX.prop.getArray(itemData, "bankDetailViewDataList", []);
		for(var i = 0, length = itemBankDetailList.length; i < length; i++)
		{
			var itemBankDetailItem = itemBankDetailList[i];
			var itemBankDetailItemId = BX.prop.getInteger(itemBankDetailItem, "pseudoId", 0);
			if(itemBankDetailItemId > 0 && BX.prop.getBoolean(itemBankDetailItem, "selected", false))
			{
				this._bankDetailId = itemBankDetailItemId;
				break;
			}
		}

		for(var key in this._itemWrappers)
		{
			if(!this._itemWrappers.hasOwnProperty(key))
			{
				continue;
			}

			var itemWrapper = this._itemWrappers[key];
			var isSelected = this._requisiteId === parseInt(key);
			if(isSelected)
			{
				BX.addClass(itemWrapper, "crm-entity-requisites-select-item-selected");
			}
			else
			{
				BX.removeClass(itemWrapper, "crm-entity-requisites-select-item-selected");
			}

			if(this._itemButtons.hasOwnProperty(key))
			{
				var itemButton = this._itemButtons[key];
				if(itemButton.checked !== isSelected)
				{
					itemButton.checked = isSelected;
				}
			}

			if(this._itemBankDetailButtons.hasOwnProperty(key))
			{
				var itemBankDetailButtons = this._itemBankDetailButtons[key];
				for(var bankDetailItemId in itemBankDetailButtons)
				{
					if(!itemBankDetailButtons.hasOwnProperty(bankDetailItemId))
					{
						continue;
					}

					var isBankDetailItemSelected = isSelected && this._bankDetailId === parseInt(bankDetailItemId);
					var itemBankDetailButton = itemBankDetailButtons[bankDetailItemId];
					if(itemBankDetailButton.checked !== isBankDetailItemSelected)
					{
						itemBankDetailButton.checked = isBankDetailItemSelected;
					}
				}
			}
		}

		this.markAsChanged();
	};
	BX.Crm.EntityEditorRequisiteSelector.prototype.onItemBankDetailChange = function(e)
	{
		var button = BX.getEventTarget(e);
		if(!button.checked)
		{
			return;
		}

		var requisiteId = parseInt(button.getAttribute("data-requisiteid"));
		if(isNaN(requisiteId) || requisiteId <= 0)
		{
			return;
		}

		if(this._requisiteId !== requisiteId)
		{
			return;
		}

		var bankdetailId = parseInt(button.getAttribute("data-bankdetailid"));
		if(isNaN(bankdetailId) || bankdetailId <= 0)
		{
			return;
		}

		this._bankDetailId = bankdetailId;

	};
	if(typeof(BX.Crm.EntityEditorRequisiteSelector.messages) === "undefined")
	{
		BX.Crm.EntityEditorRequisiteSelector.messages = {};
	}
	BX.Crm.EntityEditorRequisiteSelector.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRequisiteSelector();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorRequisiteListItem === "undefined")
{
	BX.Crm.EntityEditorRequisiteListItem = function()
	{
		this._id = "";
		this._settings = null;
		this._owner = null;
		this._mode = BX.Crm.EntityEditorMode.intermediate;

		this._data = null;
		this._requisiteId = 0;

		this._container = null;
		this._wrapper = null;
		this._innerWrapper = null;
		this._editButton = null;
		this._deleteButton = null;

		this._hasLayout = false;
	};

	BX.Crm.EntityEditorRequisiteListItem.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = BX.type.isPlainObject(settings) ? settings : {};

			this._owner = BX.prop.get(this._settings, "owner", null);
			this._mode = BX.prop.getInteger(this._settings, "mode", BX.Crm.EntityEditorMode.intermediate);

			this._data = BX.prop.getObject(this._settings, "data", {});
			this._requisiteId = BX.prop.getInteger(this._data, "requisiteId", 0);

			this._container = BX.prop.getElementNode(this._settings, "container");
		},
		getId: function()
		{
			return this._id;
		},
		getMessage: function(name)
		{
			return BX.prop.getString(BX.Crm.EntityEditorRequisiteListItem.messages, name, name);
		},
		getRequisiteId: function()
		{
			return this._requisiteId;
		},
		getData: function()
		{
			return this._data;
		},
		setData: function(data)
		{
			this._data = data;
		},
		layout: function(options)
		{
			if(this._hasLayout)
			{
				return;
			}

			var viewData = BX.prop.getObject(this._data, "viewData", null);
			if(!viewData)
			{
				viewData = {};
			}

			var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

			this._wrapper = BX.create(
				"div",
				{ props: { className: "crm-entity-widget-client-requisites-container crm-entity-widget-client-requisites-container-opened" } }
			);

			this._innerWrapper = BX.create("dl", { props: { className: "crm-entity-widget-client-requisites-list" } });

			this.prepareViewLayout(viewData, [ "RQ_ADDR" ]);
			this.prepareFieldViewLayout(viewData, "RQ_ADDR");

			var bankDetails = BX.prop.getArray(this._data, "bankDetailViewDataList", []);
			for(var i = 0, length = bankDetails.length; i < length; i++)
			{
				var bankDetail = bankDetails[i];
				if(!BX.prop.getBoolean(bankDetail, "isDeleted", false))
				{
					this.prepareViewLayout(BX.prop.getObject(bankDetail, "viewData", null), []);
				}
			}

			if(!isViewMode)
			{
				this._deleteButton = BX.create(
					"span",
					{
						props: { className: "crm-entity-widget-client-requisites-remove-icon" },
						events: { click: BX.delegate(this.onRemoveButtonClick, this) }
					}
				);

				this._editButton = BX.create(
					"span",
					{
						props: { className: "crm-entity-widget-client-requisites-edit-icon" },
						events: { click: BX.delegate(this.onEditButtonClick, this) }
					}
				);
			}

			this._wrapper.appendChild(
				BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-client-requisites-inner-container" },
						children: [ this._deleteButton, this._editButton, this._innerWrapper ]
					}
				)
			);

			var anchor = BX.prop.getElementNode(options, "anchor", null);
			if(anchor)
			{
				this._container.insertBefore(this._wrapper, anchor);
			}
			else
			{
				this._container.appendChild(this._wrapper);
			}
			this._hasLayout = true;
		},
		prepareViewLayout: function(viewData, skipFields)
		{
			if(!viewData)
			{
				return;
			}

			var title = BX.prop.getString(viewData, "title", "");
			if(title !== "")
			{
				this._innerWrapper.appendChild(
					BX.create("dt",
						{
							props: { className: "crm-entity-widget-client-requisites-name" },
							text: title
						}
					)
				);
			}

			var i, length;
			var skipMap = {};
			if(BX.type.isArray(skipFields))
			{
				for(i = 0, length = skipFields.length; i < length; i++)
				{
					skipMap[skipFields[i]] = true;
				}
			}

			var fieldContent = [];
			var fields = BX.prop.getArray(viewData, "fields", []);
			for(i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];
				var name = BX.prop.getString(field, "name", "");
				if(skipMap.hasOwnProperty(name))
				{
					continue;
				}

				var fieldTitle = BX.prop.getString(field, "title", "");
				var fieldValue = BX.prop.getString(field, "textValue", "");
				if(fieldTitle !== "" && fieldValue !== "")
				{
					fieldContent.push(fieldTitle + ": " + fieldValue);
				}
			}

			this._innerWrapper.appendChild(
				BX.create("dd",
					{
						props: { className: "crm-entity-widget-client-requisites-value" },
						text: fieldContent.join(", ")
					}
				)
			);
		},
		prepareFieldViewLayout: function(viewData, fieldName)
		{
			if(!viewData)
			{
				return;
			}

			var fields = BX.prop.getArray(viewData, "fields", []);
			for(var i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];
				var name = BX.prop.getString(field, "name", "");

				if(name !== fieldName)
				{
					continue;
				}

				var title = BX.prop.getString(field, "title", "");
				var text = BX.prop.getString(field, "textValue", "");
				if(title === "" || text === "")
				{
					continue;
				}

				this._innerWrapper.appendChild(
					BX.create("dt",
						{
							props: { className: "crm-entity-widget-client-requisites-name" },
							text: title
						}
					)
				);

				this._innerWrapper.appendChild(
					BX.create("dd",
						{
							props: { className: "crm-entity-widget-client-requisites-value" },
							text: text
						}
					)
				);
			}
		},
		clearLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			this._wrapper = BX.remove(this._wrapper);
			this._innerWrapper = null;
			this._editButton = null;
			this._deleteButton = null;

			this._hasLayout = false;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
		},
		getWrapper: function()
		{
			return this._wrapper;
		},
		prepareData: function()
		{
			var value = this._labelInput ? BX.util.trim(this._labelInput.value) : "";
			if(value === "")
			{
				return null;
			}

			var data = { "VALUE": value };
			var id = BX.prop.getInteger(this._data, "ID", 0);
			if(id > 0)
			{
				data["ID"] = id;
			}

			var xmlId = BX.prop.getString(this._data, "XML_ID", "");
			if(id > 0)
			{
				data["XML_ID"] = xmlId;
			}

			return data;
		},
		onEditButtonClick: function(e)
		{
			this._owner.onEditItem(this);
		},
		onRemoveButtonClick: function(e)
		{
			var dlg = BX.Crm.EditorAuxiliaryDialog.create(
				this._id,
				{
					title: this.getMessage("deleteTitle"),
					content: this.getMessage("deleteConfirm"),
					buttons:
					[
						{
							id: "accept",
							type: BX.Crm.DialogButtonType.accept,
							text: BX.message("CRM_EDITOR_DELETE"),
							callback: BX.delegate(this.onRemovalConfirmationDialogButtonClick, this)
						},
						{
							id: "cancel",
							type: BX.Crm.DialogButtonType.cancel,
							text: BX.message("CRM_EDITOR_CANCEL"),
							callback: BX.delegate(this.onRemovalConfirmationDialogButtonClick, this)
						}
					]
				}
			);
			dlg.open();
			this._owner.onOpenItemRemovalConfirmation(this);
		},
		onRemovalConfirmationDialogButtonClick: function(button)
		{
			var dlg = button.getDialog();
			if(button.getId() === "accept")
			{
				this._owner.onRemoveItem(this);
			}
			dlg.close();
			this._owner.onCloseItemRemovalConfirmation(this);
		}
	};
	if(typeof(BX.Crm.EntityEditorRequisiteListItem.messages) === "undefined")
	{
		BX.Crm.EntityEditorRequisiteListItem.messages = {};
	}
	BX.Crm.EntityEditorRequisiteListItem.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRequisiteListItem();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorRequisiteList === "undefined")
{
	BX.Crm.EntityEditorRequisiteList = function()
	{
		BX.Crm.EntityEditorRequisiteList.superclass.constructor.apply(this);
		this._items = null;

		this._data = null;
		this._externalContext = null;
		this._externalEventHandler = null;

		this._createButton = null;

		this._dataInputs = {};
		this._dataSignInputs = {};

		this._itemWrapper = null;
		this._dataWrapper = null;

		this._isPresetMenuOpened = false;
		this._newItemIndex = -1;
		this._sliderUrls = {};
	};
	BX.extend(BX.Crm.EntityEditorRequisiteList, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorRequisiteList.prototype.doInitialize = function()
	{
		this.initializeFromModel();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.initializeFromModel = function()
	{
		var value = this.getValue();
		this._data = BX.type.isArray(value) ? BX.clone(value, true) : [];
		var i, length;
		for(i = 0, length = this._data.length; i < length; i++)
		{
			this.prepareRequisiteData(this._data[i]);
		}

		this._requisiteInfo = BX.CrmEntityRequisiteInfo.create(
			{
				requisiteId: 0,
				bankDetailId: 0,
				data: this._data
			}
		);
	};
	BX.Crm.EntityEditorRequisiteList.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.initializeFromModel();
		this.refreshLayout();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.reset = function()
	{
		this.initializeFromModel();

		//Destroy cached requisite sliders
		for(var key in this._sliderUrls)
		{
			if(this._sliderUrls.hasOwnProperty(key))
			{
				BX.Crm.Page.removeSlider(this._sliderUrls[key]);
			}
		}
		this._sliderUrls = {};
	};
	BX.Crm.EntityEditorRequisiteList.prototype.rollback = function()
	{
		if(this.isChanged())
		{
			this.reset();
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.doSetMode = function(mode)
	{
		this.rollback();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorRequisiteList.messages;
		return (m.hasOwnProperty(name)
			? m[name]
			: BX.Crm.EntityEditorRequisiteList.superclass.getMessage.apply(this, arguments)
		);
	};
	BX.Crm.EntityEditorRequisiteList.prototype.prepareDataInputName = function(requisiteKey, fieldName)
	{
		return this.getName() + "[" + requisiteKey.toString() + "]" + "[" + fieldName + "]";
	};
	BX.Crm.EntityEditorRequisiteList.prototype.prepareRequisiteData = function(data)
	{
		var id = BX.prop.getInteger(data, "requisiteId", 0);
		var pseudoId = BX.prop.getString(data, "pseudoId", "");

		if(id > 0)
		{
			data["key"] = id.toString();
			data["isNew"] = false;
			data["isChanged"] = BX.prop.getBoolean(data, "isChanged", false);
		}
		else
		{
			data["key"] = pseudoId;
			data["isNew"] = true;
			data["isChanged"] = BX.prop.getBoolean(data, "isChanged", true);
		}
		data["isDeleted"] = false;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.findRequisiteDataIndexByKey = function(key)
	{
		for(var i = 0, length = this._data.length; i < length; i++)
		{
			if(BX.prop.getString(this._data[i], "key", 0) === key)
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getRequisiteDataByKey = function(key)
	{
		var index = this.findRequisiteDataIndexByKey(key);
		return index >= 0 ? this._data[index] : null;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.setupRequisiteData = function(data)
	{
		var key = BX.prop.getString(data, "key", "");
		if(key === "")
		{
			return;
		}

		var index = this.findRequisiteDataIndexByKey(key);
		if(index >= 0)
		{
			this._data[index] = data;
		}
		else
		{
			this._data.push(data);
		}

		this._requisiteInfo = BX.CrmEntityRequisiteInfo.create(
			{
				requisiteId: 0,
				bankDetailId: 0,
				data: this._data
			}
		);
	};
	BX.Crm.EntityEditorRequisiteList.prototype.refreshRequisiteDataInputs = function()
	{
		if(!this._hasLayout)
		{
			return;
		}

		BX.cleanNode(this._dataWrapper);
		for(var i = 0, length = this._data.length; i < length; i++)
		{
			var item = this._data[i];

			var key = BX.prop.getString(item, "key", "");
			if(key === "")
			{
				continue;
			}

			var isChanged = BX.prop.getBoolean(item, "isChanged", false);
			var isDeleted = BX.prop.getBoolean(item, "isDeleted", false);
			if(!isChanged && !isDeleted)
			{
				continue;
			}

			if(isDeleted)
			{
					this._dataWrapper.appendChild(
						BX.create(
							"input",
							{
								props:
								{
									type: "hidden",
									name: this.prepareDataInputName(key, "DELETED"),
									value: "Y"
								}
							}
						)
					);
			}
			else
			{
				var requisiteDataSign = BX.prop.getString(item, "requisiteDataSign", "");
				if(requisiteDataSign !== "")
				{
					this._dataWrapper.appendChild(
						BX.create(
							"input",
							{
								props:
								{
									type: "hidden",
									name: this.prepareDataInputName(key, "SIGN"),
									value: requisiteDataSign
								}
							}
						)
					);
				}

				var requisiteData = BX.prop.getString(item, "requisiteData", "");
				if(requisiteData !== "")
				{
					this._dataWrapper.appendChild(
						BX.create(
							"input",
							{
								props:
								{
									type: "hidden",
									name: this.prepareDataInputName(key, "DATA"),
									value: requisiteData
								}
							}
						)
					);
				}
			}
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.hasContentToDisplay = function()
	{
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			return true;
		}
		return this._requisiteInfo && this._requisiteInfo.getItems().length > 0;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.layout = function(options)
	{
		if (this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated();
		this.adjustWrapper();

		this._items = [];

		if (!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		var i, length;
		var itemInfos = this._requisiteInfo.getItems();
		for(i = 0, length = itemInfos.length; i < length; i++)
		{
			var  data = itemInfos[i];
			var item = BX.Crm.EntityEditorRequisiteListItem.create(
				BX.prop.getString(data, "key", ""),
				{
					owner: this,
					mode: this._mode,
					data: data
				}
			);
			this._items.push(item);
		}

		if(this.isInEditMode())
		{
			this._dataWrapper = BX.create("div");
			this._wrapper.appendChild(this._dataWrapper);

			this._wrapper.appendChild(this.createTitleNode(this.getTitle()));
			this._itemWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-inner crm-entity-widget-content-block-requisites" } });
			this._wrapper.appendChild(this._itemWrapper);
			for(i = 0, length = this._items.length; i < length; i++)
			{
				this._items[i].setContainer(this._itemWrapper);
				this._items[i].layout();
			}

			this._createButton = BX.create(
				"span",
				{
					props: { className: "crm-entity-widget-client-requisites-add-btn" },
					text: BX.message("CRM_EDITOR_ADD")
				}
			);
			this._itemWrapper.appendChild(this._createButton);
			BX.bind(this._createButton, "click", BX.delegate(this.onCreateButtonClick, this));
		}
		else
		{
			this._wrapper.appendChild(this.createTitleNode(this.getTitle()));
			this._itemWrapper = BX.create("div", { props: { className: "crm-entity-widget-content-block-colums-block" } });
			this._wrapper.appendChild(
				BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						children: [ this._itemWrapper ]
					}
				)
			);

			this._wrapper.appendChild(this._itemWrapper);
			for(i = 0, length = this._items.length; i < length; i++)
			{
				this._items[i].setContainer(this._itemWrapper);
				this._items[i].layout();
			}
		}

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.doClearLayout = function(options)
	{
		if(this._items)
		{
			for(var i = 0, length = this._items.length; i < length; i++)
			{
				this._items[i].clearLayout();
			}
		}
		this._items = [];

		this._itemWrapper = null;
		this._createButton = null;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getItemByIndex = function(index)
	{
		return index >= 0 && index <= (this._items.length - 1) ? this._items[index] : null;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getItemById = function(requisiteId)
	{
		for(var i = 0, length = this._items.length; i < length; i++)
		{
			var item = this._items[i];
			if(item.getId() === requisiteId)
			{
				return item;
			}
		}
		return null;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getItemCount = function()
	{
		return this._items.length;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.getItemIndex = function(item)
	{
		for(var i = 0, length = this._items.length; i < length; i++)
		{
			if(this._items[i] === item)
			{
				return i;
			}
		}
		return -1;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.removeItemByIndex = function(index)
	{
		if(index < this._items.length)
		{
			this._items.splice(index, 1);
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.removeItem = function(item)
	{
		var index = this.getItemIndex(item);
		if(index < 0)
		{
			return;
		}

		var data = this.getRequisiteDataByKey(item.getId());
		if(data)
		{
			data["isDeleted"] = true;
		}
		item.clearLayout();
		this.removeItemByIndex(index);

		this.refreshRequisiteDataInputs();
		this.markAsChanged();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.openEditor = function(params)
	{
		var requisiteId = BX.prop.getInteger(params, "requisiteId", 0);
		var contextId = this._editor.getContextId();

		var urlParams =
			{
				etype: this._editor.getEntityTypeId(),
				eid: this._editor.getEntityId(),
				external_context_id: contextId
			};

		var presetId = BX.prop.getInteger(params, "presetId", 0);
		if(presetId > 0)
		{
			urlParams["pid"] = presetId;
		}

		var pseudoId = "";
		if(requisiteId <= 0)
		{
			this._newItemIndex++;
			pseudoId = "n" + this._newItemIndex.toString();
			urlParams["pseudo_id"] = pseudoId;
		}

		var url = BX.util.add_url_param(
			this._editor.getRequisiteEditUrl(requisiteId),
			urlParams
		);

		if(!this._externalEventHandler)
		{
			this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
			BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
		}

		if(!this._externalContext)
		{
			this._externalContext = {};
		}

		if(requisiteId > 0)
		{
			this._externalContext[requisiteId] = { requisiteId: requisiteId, url: url };
		}
		else
		{
			this._externalContext[pseudoId] = { pseudoId: pseudoId, url: url };
		}

		if(requisiteId > 0)
		{
			this._sliderUrls[requisiteId] = url;
		}

		BX.Crm.Page.openSlider(url, { width: 950 });
	};

	/*
	BX.Crm.EntityEditorRequisiteList.prototype.loadEditor = function(params)
	{
		var requisiteId = BX.prop.getInteger(params, "requisiteId", 0);
		var contextId = this._editor.getContextId();

		var urlParams =
			{
				etype: this._editor.getEntityTypeId(),
				eid: this._editor.getEntityId(),
				external_context_id: contextId
			};

		var presetId = BX.prop.getInteger(params, "presetId", 0);
		if(presetId > 0)
		{
			urlParams["pid"] = presetId;
		}

		var pseudoId = "";
		if(requisiteId <= 0)
		{
			this._newItemIndex++;
			pseudoId = "n" + this._newItemIndex.toString();
			urlParams["pseudo_id"] = pseudoId;
		}

		var url = BX.util.add_url_param(
			this._editor.getRequisiteEditUrl(requisiteId),
			urlParams
		);

		if(!this._externalEventHandler)
		{
			this._externalEventHandler = BX.delegate(this.onExternalEvent, this);
			BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
		}

		if(!this._externalContext)
		{
			this._externalContext = {};
		}

		if(requisiteId > 0)
		{
			this._externalContext[requisiteId] = { requisiteId: requisiteId, url: url };
		}
		else
		{
			this._externalContext[pseudoId] = { pseudoId: pseudoId, url: url };
		}

		var promise = new top.BX.Promise();
		var onEditorLoad = function(data)
		{
			var node = top.document.createElement("div");
			node.innerHTML = data;
			promise.fulfill(node);
		};
		BX.ajax(
			{
				'method': 'POST',
				'dataType': 'html',
				'url': url,
				'processData': false,
				'data':  {},
				'onsuccess': onEditorLoad
			}
		);

		return promise;
	};
	*/
	BX.Crm.EntityEditorRequisiteList.prototype.onEditItem = function(item)
	{
		this.openEditor( { requisiteId: item.getRequisiteId() });
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onRemoveItem = function(item)
	{
		this.removeItem(item);
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onOpenItemRemovalConfirmation = function(item)
	{
		if(this._singleEditController)
		{
			this._singleEditController.setActiveDelayed(false);
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onCloseItemRemovalConfirmation = function(item)
	{
		if(this._singleEditController)
		{
			this._singleEditController.setActiveDelayed(true);
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onExternalEvent = function(params)
	{
		var key = BX.type.isNotEmptyString(params["key"]) ? params["key"] : "";
		if(key !== "BX.Crm.RequisiteSliderEditor:onSave")
		{
			return;
		}

		var value = BX.type.isPlainObject(params["value"]) ? params["value"] : {};
		var contextId = BX.prop.getString(value, "context", "");
		if(contextId !== this._editor.getContextId())
		{
			return;
		}

		var presetId = BX.prop.getInteger(value, "presetId", 0);
		var pseudoId = BX.prop.getString(value, "pseudoId", "");
		var requisiteId = BX.prop.getInteger(value, "requisiteId", 0);
		var requisiteDataSign = BX.prop.getString(value, "requisiteDataSign", "");
		var requisiteData = BX.prop.getString(value, "requisiteData", "");

		var itemData =
		{
			entityTypeId: this._editor.getEntityTypeId(),
			entityId: this._editor.getEntityId(),
			presetId: presetId,
			pseudoId: pseudoId,
			requisiteId: requisiteId,
			requisiteData: requisiteData,
			requisiteDataSign: requisiteDataSign,
			isChanged: true
		};

		this.prepareRequisiteData(itemData);
		this.setupRequisiteData(itemData);
		this.refreshRequisiteDataInputs();
		this.markAsChanged();

		var requisiteKey = BX.prop.getString(itemData, "key", "");
		var contextData = BX.prop.getObject(this._externalContext, requisiteKey, null);
		if(!contextData)
		{
			return;
		}

		var item = this.getItemById(requisiteKey);
		var layoutOptions;
		if(item)
		{
			item.setData(itemData);
			item.clearLayout();
			layoutOptions = {};
			var itemIndex = this.getItemIndex(item);
			if(itemIndex < (this.getItemCount() - 1))
			{
				layoutOptions["anchor"] = this.getItemByIndex(itemIndex + 1).getWrapper();
			}
			else if(this._createButton)
			{
				layoutOptions["anchor"] = this._createButton;
			}
			item.layout(layoutOptions);
		}
		else
		{
			item = BX.Crm.EntityEditorRequisiteListItem.create(
				requisiteKey,
				{
					owner: this,
					mode: this._mode,
					data: itemData,
					container: this._itemWrapper
				}
			);
			this._items.push(item);
			layoutOptions = {};
			if(this._createButton)
			{
				layoutOptions["anchor"] = this._createButton;
			}
			item.layout(layoutOptions);
		}

		var url = BX.prop.getString(contextData, "url", "");
		if(url !== "")
		{
			BX.Crm.Page.closeSlider(url, true);
		}

		delete this._externalContext[requisiteId];
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onCreateButtonClick = function(e)
	{
		this.togglePresetMenu();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.togglePresetMenu = function()
	{
		if(this._isPresetMenuOpened)
		{
			this.closePresetMenu();
		}
		else
		{
			this.openPresetMenu();
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.openPresetMenu = function()
	{
		if(this._isPresetMenuOpened)
		{
			return;
		}

		var menu = [];
		var items = BX.prop.getArray(this._schemeElement.getData(), "presets");
		for(var i = 0, length = items.length; i < length; i++)
		{
			var item = items[i];
			var value = BX.prop.getString(item, "VALUE", i);
			var name = BX.prop.getString(item, "NAME", value);
			menu.push(
				{
					text: name,
					value: value,
					onclick: BX.delegate( this.onPresetSelect, this)
				}
			);
		}

		BX.PopupMenu.show(
			this._id,
			this._createButton,
			menu,
			{
				angle: false,
				events:
					{
						onPopupShow: BX.delegate( this.onPresetMenuShow, this),
						onPopupClose: BX.delegate( this.onPresetMenuClose, this)
					}
			}
		);
		//BX.PopupMenu.currentItem.popupWindow.setWidth(BX.pos(this._selectContainer)["width"]);
	};
	BX.Crm.EntityEditorRequisiteList.prototype.closePresetMenu = function()
	{
		if(!this._isPresetMenuOpened)
		{
			return;
		}

		var menu = BX.PopupMenu.getMenuById(this._id);
		if(menu)
		{
			menu.popupWindow.close();
		}
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onPresetMenuShow = function()
	{
		this._isPresetMenuOpened = true;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onPresetMenuClose = function()
	{
		BX.PopupMenu.destroy(this._id);
		this._isPresetMenuOpened = false;
	};
	BX.Crm.EntityEditorRequisiteList.prototype.onPresetSelect = function(e, item)
	{
		this.openEditor({ presetId: item.value });
		this.closePresetMenu();
	};
	BX.Crm.EntityEditorRequisiteList.prototype.save = function()
	{
	};
	if(typeof(BX.Crm.EntityEditorRequisiteList.messages) === "undefined")
	{
		BX.Crm.EntityEditorRequisiteList.messages = {};
	}
	BX.Crm.EntityEditorRequisiteList.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRequisiteList();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.ClientEditorEntityRequisitePanel === "undefined")
{
	BX.Crm.ClientEditorEntityRequisitePanel = function()
	{
		this._id = "";
		this._settings = {};

		this._editor = null;

		this._entityInfo = null;
		this._requisiteInfo = null;

		this._mode = BX.Crm.EntityEditorMode.intermediate;

		this._selectedRequisiteId = 0;
		this._selectedBankDetailId = 0;

		this._container = null;
		this._wrapper = null;
		this._contentWrapper = null;

		this._requisiteInput = null;
		this._bankDetailInput = null;

		this._toggleButton = null;
		this._editButton = null;

		this._toggleButtonHandler = BX.delegate(this.onToggleButtonClick, this);
		this._editButtonHandler = BX.delegate(this.onEditButtonClick, this);

		this._isExpanded = false;
		this._hasLayout = false;

		this._externalEventHandler = BX.delegate(this.onExternalEvent, this);

		this._changeNotifier = null;
	};
	BX.Crm.ClientEditorEntityRequisitePanel.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._editor = BX.prop.get(this._settings, "editor");

			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._mode = BX.prop.getInteger(this._settings, "mode", 0);

			this._entityInfo = BX.prop.get(this._settings, "entityInfo", null);
			this._requisiteInfo = BX.prop.get(this._settings, "requisiteInfo", null);

			this._selectedRequisiteId = this._requisiteInfo.getRequisiteId();
			this._selectedBankDetailId = this._requisiteInfo.getBankDetailId();

			this._changeNotifier = BX.CrmNotifier.create(this);

			if(BX.Crm.ClientEditorEntityRequisitePanel.options.hasOwnProperty(this._id))
			{
				this._isExpanded = BX.prop.getBoolean(
					BX.Crm.ClientEditorEntityRequisitePanel.options[this._id],
					"expanded",
					false
				);
			}
		},
		getMessage: function(name)
		{
			var m = BX.Crm.ClientEditorEntityRequisitePanel.messages;
			return m.hasOwnProperty(name) ? m[name] : name;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
		},
		isExpanded: function()
		{
			return this._isExpanded;
		},
		setExpanded: function(expand)
		{
			expand = !!expand;
			if(this._isExpanded === expand)
			{
				return;
			}
			this._isExpanded = expand;

			if(!BX.Crm.ClientEditorEntityRequisitePanel.options.hasOwnProperty(this._id))
			{
				BX.Crm.ClientEditorEntityRequisitePanel.options[this._id] = {};
			}
			BX.Crm.ClientEditorEntityRequisitePanel.options[this._id]["expanded"] = this._isExpanded;

			if(expand)
			{
				BX.addClass(this._wrapper, "crm-entity-widget-client-requisites-container-opened");
			}
			else
			{
				BX.removeClass(this._wrapper, "crm-entity-widget-client-requisites-container-opened");
			}
		},
		toggle: function()
		{
			this.setExpanded(!this._isExpanded);
		},
		addChangeListener: function(listener)
		{
			this._changeNotifier.addListener(listener);
		},
		removeChangeListener: function(listener)
		{
			this._changeNotifier.removeListener(listener);
		},
		layout: function()
		{
			if(this._hasLayout)
			{
				return;
			}

			var requisite = null;
			var bankDetail = null;

			var requisiteId = this._selectedRequisiteId;
			var bankDetailId = this._selectedBankDetailId;

			if(requisiteId > 0)
			{
				requisite = this._requisiteInfo.getItemById(requisiteId);
			}

			if(!requisite)
			{
				requisite = this._requisiteInfo.getSelectedItem();
			}

			if(!requisite)
			{
				requisite = this._requisiteInfo.getFirstItem();
			}

			if(requisite)
			{
				if(bankDetailId > 0)
				{
					bankDetail = this._requisiteInfo.getItemBankDetailById(requisiteId, bankDetailId);
				}
				if(!bankDetail)
				{
					bankDetail = this._requisiteInfo.getSelectedItemBankDetail(requisiteId);
				}
				if(!bankDetail)
				{
					bankDetail = this._requisiteInfo.getFirstItemBankDetail(requisiteId);
				}
			}

			var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-container" } });
			this._container.appendChild(this._wrapper);

			if(this._isExpanded)
			{
				BX.addClass(this._wrapper, "crm-entity-widget-client-requisites-container-opened");
			}

			if(!isViewMode)
			{
				this._requisiteInput = BX.create("input", { props: { type: "hidden", name: "REQUISITE_ID", value: requisiteId } });
				this._wrapper.appendChild(this._requisiteInput);

				this._bankDetailInput = BX.create("input", { props: { type: "hidden", name: "BANK_DETAIL_ID", value: bankDetailId } });
				this._wrapper.appendChild(this._bankDetailInput);
			}

			if(requisite)
			{
				this._toggleButton = BX.create("a",
					{
						props: { className: "crm-entity-widget-client-requisites-show-btn" },
						text: this.getMessage("toggle").toLowerCase()
					}
				);
				this._wrapper.appendChild(this._toggleButton);
				BX.bind(this._toggleButton, "click", this._toggleButtonHandler);

				var innerWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-inner-container" } });
				this._wrapper.appendChild(innerWrapper);

				if(!isViewMode)
				{
					this._editButton = BX.create("span",
						{ props: { className: "crm-entity-widget-client-requisites-edit-icon" } }
					);
					this._editButton.setAttribute("data-editor-control-type", "button");

					innerWrapper.appendChild(this._editButton);
					BX.bind(this._editButton, "click", this._editButtonHandler);
				}

				this._contentWrapper = BX.create("dl", { props: { className: "crm-entity-widget-client-requisites-list" } });
				innerWrapper.appendChild(this._contentWrapper);

				//HACK: addresses must be rendered as separate items
				var requisiteView = BX.prop.getObject(requisite, "viewData", null);
				this.prepareItemView(requisiteView, ["RQ_ADDR"]);
				this.prepareItemFieldView(requisiteView, "RQ_ADDR");

				if(bankDetail)
				{
					this.prepareItemView(BX.prop.getObject(bankDetail, "viewData", null));
				}
			}

			this._hasLayout = true;
		},
		prepareItemView: function(viewData, skipFields)
		{
			if(!viewData)
			{
				return;
			}

			var fieldTitle = BX.prop.getString(viewData, "title", "");
			if(fieldTitle !== "")
			{
				this._contentWrapper.appendChild(
					BX.create("dt",
						{
							props: { className: "crm-entity-widget-client-requisites-name" },
							text: fieldTitle
						}
					)
				);
			}

			var i, length;
			var skipMap = {};
			if(BX.type.isArray(skipFields))
			{
				for(i = 0, length = skipFields.length; i < length; i++)
				{
					skipMap[skipFields[i]] = true;
				}
			}

			var fieldContent = [];
			var fields = BX.prop.getArray(viewData, "fields", []);
			for(i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];
				var name = BX.prop.getString(field, "name", "");
				if(skipMap.hasOwnProperty(name))
				{
					continue;
				}

				var title = BX.prop.getString(field, "title", "");
				var text = BX.prop.getString(field, "textValue", "");
				if(title !== "" && text !== "")
				{
					fieldContent.push(title + ": " + text);
				}
			}

			this._contentWrapper.appendChild(
				BX.create("dd",
					{
						props: { className: "crm-entity-widget-client-requisites-value" },
						text: fieldContent.join(", ")
					}
				)
			);
		},
		prepareItemFieldView: function(viewData, fieldName)
		{
			if(!viewData)
			{
				return;
			}

			var fields = BX.prop.getArray(viewData, "fields", []);
			for(var i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];
				var name = BX.prop.getString(field, "name", "");

				if(name !== fieldName)
				{
					continue;
				}

				var title = BX.prop.getString(field, "title", "");
				var text = BX.prop.getString(field, "textValue", "");
				if(title === "" || text === "")
				{
					continue;
				}

				this._contentWrapper.appendChild(
					BX.create("dt",
						{
							props: { className: "crm-entity-widget-client-requisites-name" },
							text: title
						}
					)
				);

				this._contentWrapper.appendChild(
					BX.create("dd",
						{
							props: { className: "crm-entity-widget-client-requisites-value" },
							text: text
						}
					)
				);
			}
		},
		clearLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			if(this._toggleButton)
			{
				BX.unbind(this._toggleButton, "click", this._toggleButtonHandler);
				this._toggleButton = null;
			}

			if(this._editButton)
			{
				BX.unbind(this._editButton, "click", this._editButtonHandler);
				this._editButton = null;
			}

			this._isExpanded = false;
			this._requisiteInput = null;
			this._bankDetailInput = null;
			this._contentWrapper = null;
			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		},
		refreshLayout: function()
		{
			var expanded = this.isExpanded();
			this.clearLayout();
			this.layout();
			this.setExpanded(expanded);
		},
		getRuntimeValue: function()
		{
			return {
				REQUISITE_ID: this._selectedRequisiteId,
				BANK_DETAIL_ID: this._selectedBankDetailId
			}
		},
		onToggleButtonClick: function(e)
		{
			this.toggle();
			return BX.eventReturnFalse(e);
		},
		onEditButtonClick: function(e)
		{
			if(!this._editor)
			{
				return;
			}

			var url = BX.prop.getString(this._settings, "requisiteSelectUrl", "");
			if(url === "" && BX.type.isFunction(this._editor.getEntityRequisiteSelectUrl))
			{
				url = this._editor.getEntityRequisiteSelectUrl(
					this._entityInfo.getTypeName(),
					this._entityInfo.getId()
				);
			}

			if(url !== "")
			{
				url = BX.util.add_url_param(
					url,
					{
						external_context_id: this._editor.getContextId(),
						requisite_id: this._selectedRequisiteId,
						bank_detail_id: this._selectedBankDetailId
					}
				);

				BX.Crm.Page.openSlider(url);
				BX.addCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}

			BX.eventCancelBubble(e);
		},
		onExternalEvent: function(params)
		{
			if(this._mode === BX.Crm.EntityEditorMode.view)
			{
				return;
			}

			var key = BX.type.isNotEmptyString(params["key"]) ? params["key"] : "";
			var value = BX.type.isPlainObject(params["value"]) ? params["value"] : {};

			if(!(this._editor && this._editor.getContextId() === BX.prop.getString(value, "context")))
			{
				return;
			}

			if(key === "BX.Crm.EntityRequisiteSelector:onCancel")
			{
				BX.removeCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);
			}
			else if(key === "BX.Crm.EntityRequisiteSelector:onSave")
			{
				BX.removeCustomEvent(window, "onLocalStorageSet", this._externalEventHandler);

				var requisiteId = BX.prop.getInteger(value, "requisiteId");
				if(requisiteId > 0)
				{
					this._selectedRequisiteId = requisiteId;
					if(this._requisiteInput)
					{
						this._requisiteInput.value = this._selectedRequisiteId;
					}
				}

				var bankDetailId = BX.prop.getInteger(value, "bankDetailId");
				if(bankDetailId)
				{
					this._selectedBankDetailId = bankDetailId;
					if(this._bankDetailInput)
					{
						this._bankDetailInput.value = this._selectedBankDetailId;
					}
				}

				this._changeNotifier.notify(
					[
						{
							requisiteId: this._selectedRequisiteId,
							bankDetailId: this._selectedBankDetailId
						}
					]
				);

				this.refreshLayout();
			}
		}
	};
	if(typeof(BX.Crm.ClientEditorEntityRequisitePanel.messages) === "undefined")
	{
		BX.Crm.ClientEditorEntityRequisitePanel.messages = {};
	}
	BX.Crm.ClientEditorEntityRequisitePanel.options = {};
	BX.Crm.ClientEditorEntityRequisitePanel.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorEntityRequisitePanel();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.Crm.RequisiteNavigator) === "undefined")
{
	BX.Crm.RequisiteNavigator = function()
	{
		this._id = null;
		this._settings = {};

		this._requisite = null;
		this._bankDetail = null;
		this._bankDetailList = null;

		this._closingNotifier = null;

		this._nextButton = null;
		this._nextButtonHandler = BX.delegate(this.onNextButtonClick, this);

		this._wrapper = null;
		this._innerWrapper = null;
		this._titleContainer = null;
		this._contentContainer = null;
		this._bankDetailContainer = null;
		this._popup = null;

		this._isOpened = false;
		this._isExpanded = true;
		this._hasLayout = false;
	};

	BX.Crm.RequisiteNavigator.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._requisiteInfo = BX.prop.get(settings, "requisiteInfo");

			var requisiteId = this._requisiteInfo.getRequisiteId();
			var bankDetailId = this._requisiteInfo.getBankDetailId();

			this._requisite = requisiteId > 0 ? this._requisiteInfo.getItemById(requisiteId) : null;
			if(!this._requisite)
			{
				this._requisite = this._requisiteInfo.getSelectedItem();
			}
			if(!this._requisite)
			{
				this._requisite = this._requisiteInfo.getFirstItem();
			}

			if(this._requisite)
			{
				this._bankDetailList = this._requisiteInfo.getItemBankDetailList(requisiteId);
				if(this._bankDetailList)
				{
					if(bankDetailId > 0)
					{
						this._bankDetail = this._bankDetailList.getItemById(bankDetailId);
					}
					if(!this._bankDetail)
					{
						this._bankDetail = this._bankDetailList.getSelectedItem();
					}
					if(!this._bankDetail)
					{
						this._bankDetail = this._bankDetailList.getFirstItem();
					}
				}
			}

			this._closingNotifier = BX.CrmNotifier.create(this);
		},
		getId: function()
		{
			return this._id;
		},
		getMessage: function(name)
		{
			return BX.prop.getString(BX.Crm.RequisiteNavigator.messages, name, name);
		},
		addClosingListener: function(listener)
		{
			this._closingNotifier.addListener(listener);
		},
		removeClosingListener: function(listener)
		{
			this._closingNotifier.removeListener(listener);
		},
		isOpened: function()
		{
			return this._isOpened;
		},
		open: function(anchor)
		{
			if(this._isOpened)
			{
				return;
			}

			var offsetLeft = 0, offsetTop = 0;
			if(BX.type.isElementNode(anchor))
			{
				offsetLeft = anchor.offsetWidth + 15;
				offsetTop = -(anchor.offsetHeight + 30);
			}

			this._popup = new BX.PopupWindow(
				this._id,
				anchor,
				{
					autoHide: true,
					draggable: false,
					offsetLeft: offsetLeft,
					offsetTop: offsetTop,
					noAllPaddings: true,
					bindOptions: { forceBindPosition: true },
					closeByEsc: true,
					events:
						{
							onPopupShow: BX.delegate(this.onPopupShow, this),
							onPopupClose: BX.delegate(this.onPopupClose, this),
							onPopupDestroy: BX.delegate(this.onPopupDestroy, this)
						},
					content: this.prepareContent()
				}
			);
			//this._popup.setAngle({ position: "left" });
			this._popup.show();
		},
		close: function()
		{
			if(!this._isOpened)
			{
				return;
			}

			if(this._popup)
			{
				this._popup.close();
			}
		},
		prepareContent: function()
		{
			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-wrap" } });
			this._titleContainer = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-info-box" } });
			this._wrapper.appendChild(this._titleContainer);

			this._requisiteTitleWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-info-wrapper" } });
			this._titleContainer.appendChild(this._requisiteTitleWrapper);

			this._nextButton = BX.create("div",
				{
					props: { className: "crm-entity-widget-client-requisites-arrow-right" },
					children:
						[
							BX.create("div",
								{ props: { className: "crm-entity-widget-client-requisites-arrow-right-item" } }
							)
						]
				}
			);
			this._titleContainer.appendChild(this._nextButton);
			BX.bind(this._nextButton, "click", this._nextButtonHandler);

			this._contentWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-box crm-entity-widget-client-requisites-box-active" } });
			this._wrapper.appendChild(this._contentWrapper);

			this._contentInnerWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-box-inner" } });
			this._contentWrapper.appendChild(this._contentInnerWrapper);

			this._requisiteWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-list-container" } });
			this._contentInnerWrapper.appendChild(this._requisiteWrapper);

			this._bankDetailWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-list-container" } });
			this._contentInnerWrapper.appendChild(this._bankDetailWrapper);

			this.renderRequisites();

			return this._wrapper;
		},
		renderTitleFields: function(fields, container)
		{
			for(var i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];

				var title = BX.prop.getString(field, "title", "");
				var text = BX.prop.getString(field, "textValue", "");
				if(title === "" || text === "")
				{
					continue;
				}

				container.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-requisites-info-desc" },
							text: title
						}
					)
				);

				container.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-requisites-info-content" },
							children:
								[
									BX.create("div",
										{
											props: { className: "crm-entity-widget-client-requisites-info-content-item" },
											text: text
										}
									)
								]
						}
					)
				);
			}
		},
		renderContentFields: function(fields, caption, container)
		{
			var wrapper = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-list" } });
			container.appendChild(wrapper);

			var innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-client-requisites-item" }
				}
			);
			wrapper.appendChild(innerWrapper);

			innerWrapper.appendChild(
				BX.create("div",
					{
						props: { className: "crm-entity-widget-client-requisites-name" },
						text: caption
					}
				)
			);

			var values = [];
			for(var i = 0, length = fields.length; i < length; i++)
			{
				var field = fields[i];

				var title = BX.prop.getString(field, "title", "");
				var text = BX.prop.getString(field, "textValue", "");

				if(title !== "" && text !== "")
				{
					values.push(title + ": " + text);
				}
			}

			if(values.length > 0)
			{
				innerWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-requisites-value" },
							text: values.join(", ")
						}
					)
				);
			}
			else
			{
				BX.addClass(wrapper, "crm-entity-widget-client-requisites-empty-value");
				innerWrapper.appendChild(document.createTextNode(this.getMessage("stub")));
			}
		},
		renderRequisites: function()
		{
			BX.cleanNode(this._requisiteTitleWrapper);
			BX.cleanNode(this._requisiteWrapper);

			this._nextButton.style.display = this._requisiteInfo.getItemCount() > 1 ? "" : "none";

			if(this._requisite)
			{
				var viewData = BX.prop.getObject(this._requisite, "viewData", {});
				var fields = BX.prop.getArray(viewData, "fields", []);
				var titleFields = [];
				var contentFields = [];
				for(var i = 0, length = fields.length; i < length; i++)
				{
					var field = fields[i];
					var fieldName = BX.prop.getString(field, "name", "");
					if(fieldName === "RQ_ADDR")
					{
						titleFields.push(field);
					}
					else
					{
						contentFields.push(field);
					}
				}

				this._requisiteTitleWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-requisites-info-title" },
							text: BX.prop.getString(viewData, "title", "")
						}
					)
				);

				this.renderTitleFields(titleFields, this._requisiteTitleWrapper);
				this.renderContentFields(contentFields, "", this._requisiteWrapper);

				this.renderBankDetails();
			}
		},
		renderBankDetails: function()
		{
			BX.cleanNode(this._bankDetailWrapper);

			if(this._bankDetailList && this._bankDetail)
			{
				var viewData = BX.prop.getObject(this._bankDetail, "viewData", {});
				this.renderContentFields(
					BX.prop.getArray(viewData, "fields", []),
					BX.prop.getString(viewData, "title", ""),
					this._bankDetailWrapper
				);

				var bankDetailQty = this._bankDetailList.getItemCount();
				if(bankDetailQty > 1)
				{
					var bankDetailControlContainer = BX.create("div", { props: { className: "crm-entity-widget-client-requisites-control-box" } });
					this._bankDetailWrapper.appendChild(bankDetailControlContainer);

					bankDetailControlContainer.appendChild(
						BX.create("div",
							{
								props: { className: "crm-entity-widget-client-requisites-control-value" },
								text: this.getMessage("legend")
									.replace(/#NUMBER#/gi, this._bankDetailList.getItemIndex(this._bankDetail) + 1).toString()
									.replace(/#TOTAL#/gi, bankDetailQty.toString())
							}
						)
					);
					bankDetailControlContainer.appendChild(
						BX.create("div",
							{
								props: { className: "crm-entity-widget-client-requisites-control-btn" },
								html: this.getMessage("next") + "&rarr;",
								events: { click: BX.delegate(this.onNextBankDetailButtonClick, this) }
							}
						)
					);
				}
			}
		},
		getSelectedItemId: function()
		{
			return this._requisite ? BX.CrmEntityRequisiteInfo.resolveItemId(this._requisite) : 0;
		},
		getSelectedBankDetailId: function()
		{
			return this._bankDetail ? BX.CrmEntityBankDetailList.resolveItemId(this._bankDetail) : 0;
		},
		showNextItem: function()
		{
			if(!(this._requisiteInfo && this._requisite))
			{
				return;
			}

			var count = this._requisiteInfo.getItemCount();
			if(count === 0)
			{
				return;
			}

			var index = this._requisiteInfo.getItemIndex(this._requisite);
			if(index < 0)
			{
				index = 0;
			}

			index++;
			if(index === count)
			{
				index = 0;
			}

			this._requisite = this._requisiteInfo.getItemByIndex(index);

			if(this._requisite)
			{
				var requisiteId = BX.CrmEntityRequisiteInfo.resolveItemId(this._requisite);
				this._bankDetailList = this._requisiteInfo.getItemBankDetailList(requisiteId);
				if(this._bankDetailList)
				{
					this._bankDetail = this._bankDetailList.getSelectedItem();
					if(!this._bankDetail)
					{
						this._bankDetail = this._bankDetailList.getFirstItem();
					}
				}
			}

			this.renderRequisites();
		},
		showNextBankDetail: function()
		{
			if(!(this._bankDetailList && this._bankDetail))
			{
				return;
			}

			var count = this._bankDetailList.getItemCount();
			if(count === 0)
			{
				return;
			}

			var index = this._bankDetailList.getItemIndex(this._bankDetail);
			if(index < 0)
			{
				index = 0;
			}

			index++;
			if(index === count)
			{
				index = 0;
			}

			this._bankDetail = this._bankDetailList.getItemByIndex(index);
			this.renderBankDetails();
		},
		onPopupShow: function()
		{
			this._isOpened = true;
		},
		onPopupClose: function()
		{
			if(this._popup)
			{
				this._popup.destroy();
			}

			this._closingNotifier.notify(
				[
					{
						requisiteId: this.getSelectedItemId(),
						bankDetailId: this.getSelectedBankDetailId()
					}
				]
			);
		},
		onPopupDestroy: function()
		{
			this._isOpened = false;

			this._wrapper = null;
			this._innerWrapper = null;

			this._popup = null;
		},
		onNextButtonClick: function(e)
		{
			this.showNextItem();
		},
		onNextBankDetailButtonClick: function(e)
		{
			this.showNextBankDetail();
		}
	};
	BX.Crm.RequisiteNavigator.options = {};
	if(typeof(BX.Crm.RequisiteNavigator.messages) === "undefined")
	{
		BX.Crm.RequisiteNavigator.messages = {};
	}
	BX.Crm.RequisiteNavigator.create = function(id, settings)
	{
		var self = new BX.Crm.RequisiteNavigator();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorFileStorage === "undefined")
{
	BX.Crm.EntityEditorFileStorage = function()
	{
		BX.Crm.EntityEditorFileStorage.superclass.constructor.apply(this);
		this._uploaderName = "entity_editor_storage_" + this._id.toLowerCase();
		this._dataContainer = null;
		this._uploaderContainer = null;
	};

	BX.extend(BX.Crm.EntityEditorFileStorage, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorFileStorage.prototype.getStorageTypeId = function()
	{
		return this._model.getIntegerField("STORAGE_TYPE_ID", BX.Crm.EditorFileStorageType.undefined);
	};
	BX.Crm.EntityEditorFileStorage.prototype.getStorageElementInfos = function()
	{
		var storageTypeId = this.getStorageTypeId();
		if(storageTypeId === BX.Crm.EditorFileStorageType.diskfile)
		{
			return this._model.getArrayField(
				this._schemeElement.getDataStringParam("diskFileInfo", "DISK_FILES"),
				[]
			);
		}

		return [];
	};
	BX.Crm.EntityEditorFileStorage.prototype.hasContentToDisplay = function()
	{
		return(this.getStorageElementInfos().length > 0);
	};
	BX.Crm.EntityEditorFileStorage.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-filestorage" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(this.getTitle()));
		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._dataContainer = BX.create("DIV", {});
			this._wrapper.appendChild(this._dataContainer);
		}

		this._uploaderContainer = BX.create(
			"DIV",
			{ attrs: { className: "bx-crm-dialog-activity-webdav-container" } }
		);
		this._wrapper.appendChild(this._uploaderContainer);

		var storageTypeId = this.getStorageTypeId();
		if(storageTypeId === BX.Crm.EditorFileStorageType.diskfile)
		{
			var uploader = this.prepareDiskUploader();

			uploader.setMode(this._mode);
			uploader.clearValues();
			uploader.setValues(this.getStorageElementInfos());
			uploader.layout(this._uploaderContainer);
		}

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorFileStorage.prototype.doClearLayout = function(options)
	{
		this._dataContainer = this._uploaderContainer = null;
	};
	BX.Crm.EntityEditorFileStorage.prototype.prepareDiskUploader = function()
	{
		var uploader = null;
		if(typeof(BX.CrmDiskUploader) !== "undefined" &&
			typeof(BX.CrmDiskUploader.items[this._uploaderName]) !== "undefined"
		)
		{
			uploader = BX.CrmDiskUploader.items[this._uploaderName];
		}

		if(uploader)
		{
			uploader.cleanLayout();
		}
		else
		{
			uploader = BX.CrmDiskUploader.create(
				this._uploaderName,
				{
					msg :
						{
							diskAttachFiles : this.getMessage('diskAttachFiles'),
							diskAttachedFiles : this.getMessage('diskAttachedFiles'),
							diskSelectFile : this.getMessage('diskSelectFile'),
							diskSelectFileLegend : this.getMessage('diskSelectFileLegend'),
							diskUploadFile : this.getMessage('diskUploadFile'),
							diskUploadFileLegend : this.getMessage('diskUploadFileLegend')
						}
				}
			)
		}

		return uploader;
	};
	BX.Crm.EntityEditorFileStorage.prototype.getDiskUploaderValues = function()
	{
		var uploader = BX.CrmDiskUploader.items[this._uploaderName];
		return uploader ? uploader.getFileIds() : [];
	};
	BX.Crm.EntityEditorFileStorage.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorFileStorage.messages;
		return m.hasOwnProperty(name) ? m[name] : BX.Crm.EntityEditorFileStorage.superclass.getMessage.apply(this, arguments);
	};
	BX.Crm.EntityEditorFileStorage.prototype.save = function()
	{
		var storageTypeId = this.getStorageTypeId();
		if(storageTypeId === BX.Crm.EditorFileStorageType.diskfile)
		{
			this._model.setField(
				this._schemeElement.getDataStringParam("storageElementIds", "STORAGE_ELEMENT_IDS"),
				this.getDiskUploaderValues()
			);
		}
	};
	BX.Crm.EntityEditorFileStorage.prototype.onBeforeSubmit = function()
	{
		if(!this._dataContainer)
		{
			return;
		}

		BX.cleanNode(this._dataContainer, false);

		this._dataContainer.appendChild(
			BX.create(
				"INPUT",
				{
					attrs:
					{
						type: "hidden",
						name: this._schemeElement.getDataStringParam("storageTypeId", "STORAGE_TYPE_ID"),
						value: this.getStorageTypeId()
					}
				}
			)
		);

		var elementFieldName = this._schemeElement.getDataStringParam("storageElementIds", "STORAGE_ELEMENT_IDS");

		var values = this._model.getArrayField(elementFieldName, []);
		if(values.length > 0)
		{
			for(var i = 0, length = values.length; i < length; i++)
			{
				this._dataContainer.appendChild(
					BX.create("INPUT", { attrs: { type: "hidden", name: elementFieldName + "[]", value: values[i] } })
				);
			}
		}
		else
		{
			this._dataContainer.appendChild(
				BX.create("INPUT", { attrs: { type: "hidden", name: elementFieldName, value: "" } })
			);
		}
	};
	if(typeof(BX.Crm.EntityEditorFileStorage.messages) === "undefined")
	{
		BX.Crm.EntityEditorFileStorage.messages = {};
	}
	BX.Crm.EntityEditorFileStorage.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorFileStorage();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorCustom === "undefined")
{
	BX.Crm.EntityEditorCustom = function()
	{
		BX.Crm.EntityEditorCustom.superclass.constructor.apply(this);
		this._innerWrapper = null;
		this._runtimeValue = null;
	};

	BX.extend(BX.Crm.EntityEditorCustom, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorCustom.prototype.hasContentToDisplay = function()
	{
		return this.getHtmlContent() !== "";
	};
	BX.Crm.EntityEditorCustom.prototype.doClearLayout = function(options)
	{
		this.setRuntimeValue(this.getValue());
	};
	BX.Crm.EntityEditorCustom.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorCustom.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		var classNames = this._schemeElement.getDataArrayParam("classNames", []);
		classNames.push("crm-entity-widget-content-block-field-custom");

		this.ensureWrapperCreated({ classNames: classNames });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(this.getTitle()));
		this._innerWrapper = BX.create("div",
			{
				props: { className: "crm-entity-widget-content-block-inner" }
			}
		);
		this._wrapper.appendChild(this._innerWrapper);
		if (this._mode === BX.Crm.EntityEditorMode.edit)
		{
			BX.addClass(this._innerWrapper, "crm-entity-widget-content-block-inner-edit-mode");
		}

		var html = this.getHtmlContent();
		if(this._mode !== BX.Crm.EntityEditorMode.edit && !BX.type.isNotEmptyString(html))
		{
			html = this._model.getSchemeField(this._schemeElement, "empty",	"");
		}

		setTimeout(
			BX.delegate(function(){
				BX.html(this._innerWrapper, html);
				if (this._mode === BX.Crm.EntityEditorMode.edit)
				{
					BX.bindDelegate(
						this._innerWrapper,
						"bxchange",
						{ tag: [ "input", "select", "textarea" ] },
						this._changeHandler
					);
				}

			}, this),
			0
		);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorCustom.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorCustom.prototype.processModelChange = function(params)
	{
		if(BX.prop.get(params, "originator", null) === this)
		{
			return;
		}

		if(!BX.prop.getBoolean(params, "forAll", false)
			&& BX.prop.getString(params, "name", "") !== this.getName()
		)
		{
			return;
		}

		this.refreshLayout();
	};
	BX.Crm.EntityEditorCustom.prototype.getHtmlContent = function()
	{
		return(
			this._model.getSchemeField(
				this._schemeElement,
				this.isInEditMode() ? "edit" : "view",
				""
			)
		);
	};

	BX.Crm.EntityEditorCustom.prototype.setRuntimeValue = function(value)
	{
		this._runtimeValue = value;
	};

	BX.Crm.EntityEditorCustom.prototype.getRuntimeValue = function()
	{
		return (this._mode === BX.Crm.EntityEditorMode.edit ? this._runtimeValue : "");
	};

	BX.Crm.EntityEditorCustom.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorCustom();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorHidden === "undefined")
{
	BX.Crm.EntityEditorHidden = function()
	{
		BX.Crm.EntityEditorHidden.superclass.constructor.apply(this);
		this._input = null;
		this._view = null;
	};

	BX.extend(BX.Crm.EntityEditorHidden, BX.Crm.EntityEditorText);

	BX.Crm.EntityEditorHidden.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-text" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var name = this.getName();
		var title = this.getTitle();
		var value = this.getValue();

		this._input = null;
		this._innerWrapper = null;

		if(this.isDragEnabled())
		{
			this._wrapper.appendChild(this.createDragButton());
		}

		this._wrapper.appendChild(this.createTitleNode(title));

		if(this.hasContentToDisplay())
		{
			if(this.getLineCount() > 1)
			{
				this._innerWrapper = BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						html: BX.util.nl2br(BX.util.htmlspecialchars(value))
					}
				);
			}
			else
			{
				this._innerWrapper = BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-content-block-inner" },
						text: value
					}
				);
			}
		}
		else
		{
			this._innerWrapper = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-inner" },
					text: this.getMessage("isEmpty")
				}
			);
		}

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._input = BX.create("input", {
				props: {
					id: 'crm-entity-widget-content-input',
					name: name,
					type: 'hidden',
					value: value
				}
			});
			this._innerWrapper.appendChild(this._input);
		}

		this._wrapper.appendChild(this._innerWrapper);

		if(this.isContextMenuEnabled())
		{
			this._wrapper.appendChild(this.createContextMenuButton());
		}

		if(this.isDragEnabled())
		{
			this.initializeDragDropAbilities();
		}

		this.registerLayout(options);
		this._hasLayout = true;
	};

	BX.Crm.EntityEditorHidden.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorHidden();
		self.initialize(id, settings);
		return self;
	};
}
if(typeof BX.Crm.EntityBindingTracker === "undefined")
{
	BX.Crm.EntityBindingTracker = function()
	{
		this._id = "";
		this._settings = {};
		this._boundEntityInfos = null;
		this._unboundEntityInfos = null;
	};

	BX.Crm.EntityBindingTracker.prototype =
	{
		initialize: function()
		{
			this._boundEntityInfos = [];
			this._unboundEntityInfos = [];
		},
		bind: function(entityInfo)
		{
			if(this.findIndex(entityInfo, this._boundEntityInfos) >= 0)
			{
				return;
			}

			var index = this.findIndex(entityInfo, this._unboundEntityInfos);
			if(index >= 0)
			{
				this._unboundEntityInfos.splice(index, 1);
			}
			else
			{
				this._boundEntityInfos.push(entityInfo);
			}
		},
		unbind: function(entityInfo)
		{
			if(this.findIndex(entityInfo, this._unboundEntityInfos) >= 0)
			{
				return;
			}

			var index = this.findIndex(entityInfo, this._boundEntityInfos);
			if(index >= 0)
			{
				this._boundEntityInfos.splice(index, 1);
			}
			else
			{
				this._unboundEntityInfos.push(entityInfo);
			}
		},
		getBoundEntities: function()
		{
			return this._boundEntityInfos;
		},
		getUnboundEntities: function()
		{
			return this._unboundEntityInfos;
		},
		isBound: function(entityInfo)
		{
			return this.findIndex(entityInfo, this._boundEntityInfos) >= 0;
		},
		isUnbound: function(entityInfo)
		{
			return this.findIndex(entityInfo, this._unboundEntityInfos) >= 0;
		},
		reset: function()
		{
			this._boundEntityInfos = [];
			this._unboundEntityInfos = [];
		},
		findIndex: function(item, collection)
		{
			var id = item.getId();
			for(var i = 0, length = collection.length; i < length; i++)
			{
				if(id === collection[i].getId())
				{
					return i;
				}
			}
			return -1;
		}
	};
	BX.Crm.EntityBindingTracker.create = function()
	{
		var self = new BX.Crm.EntityBindingTracker();
		self.initialize();
		return self;
	};
}

if(typeof BX.Crm.ClientEditorEntitySkeleton === "undefined")
{
	BX.Crm.ClientEditorEntitySkeleton = function()
	{
		this._id = "";
		this._settings = {};
		this._container = null;
		this._wrapper = null;
		this._hasLayout = false;
	};
	BX.Crm.ClientEditorEntitySkeleton.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._container = BX.prop.getElementNode(this._settings, "container", null);
		},
		layout: function()
		{
			this._wrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-client-block crm-entity-widget-client-block-skeleton" },
					children: [ BX.create("div", { props: { className: "crm-entity-widget-client-box" } }) ]
				}
			);
			this._container.appendChild(this._wrapper);
			this._hasLayout = true;
		},
		clearLayout: function()
		{
			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		}
	};
	BX.Crm.ClientEditorEntitySkeleton.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorEntitySkeleton();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.ClientEditorEntityPanel === "undefined")
{
	BX.Crm.ClientEditorEntityPanel = function()
	{
		this._id = "";
		this._settings = {};
		this._editor = null;
		this._entityInfo = null;
		this._enableCommunications = true;
		this._isRequisiteEnabled = true;
		this._requisiteInfo = null;
		this._requisiteNavigator = null;

		this._mode = BX.Crm.EntityEditorMode.intermediate;
		this._communicationButtons = null;
		this._deleteButton = null;

		this._container = null;
		this._wrapper = null;

		this._deleteButtonHandler = BX.delegate(this.onDeleteButtonClick, this);
		this._requisiteChangeHandler = BX.delegate(this.onRequisiteChange, this);
		this._requisiteChangeNotifier = null;
		this._hasLayout = false;
	};
	BX.Crm.ClientEditorEntityPanel.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._editor = BX.prop.get(this._settings, "editor");
			this._entityInfo = BX.prop.get(this._settings, "entityInfo", null);
			this._mode = BX.prop.getInteger(this._settings, "mode", 0);

			this._enableCommunications = BX.prop.getBoolean(this._settings, "enableCommunications", true);
			this._isRequisiteEnabled = (this._entityInfo.hasRequisites()
				&& BX.prop.getBoolean(this._settings, "enableRequisite", false)
			);

			this._requisiteChangeNotifier = BX.CrmNotifier.create(this);
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
		},
		getEntity: function()
		{
			return this._entityInfo;
		},
		getMode: function()
		{
			return this._mode;
		},
		setMode: function(mode)
		{
			this._mode = mode;
		},
		isRequisiteEnabled: function()
		{
			return this._isRequisiteEnabled;
		},
		addRequisiteChangeListener: function(listener)
		{
			this._requisiteChangeNotifier.addListener(listener);
		},
		removeRequisiteChangeListener: function(listener)
		{
			this._requisiteChangeNotifier.removeListener(listener);
		},
		layout: function()
		{
			var isViewMode = this._mode === BX.Crm.EntityEditorMode.view;

			this._wrapper = BX.create("div", { props: { className: "crm-entity-widget-client-block" } });
			this._container.appendChild(this._wrapper);

			var innerWrapper = BX.create("div", { props: { className: "crm-entity-widget-client-box" } });
			this._wrapper.appendChild(innerWrapper);

			if(BX.prop.getBoolean(this._settings, "enableEntityTypeCaption", false))
			{
				innerWrapper.appendChild(
					BX.create(
						"div",
						{
							props: { className: "crm-entity-widget-client-box-type" },
							text: this._entityInfo.getTypeCaption()
						}
					)
				);
			}

			this._deleteButton = null;
			if(!isViewMode)
			{
				this._deleteButton = BX.create(
					"div",
					{
						props: { className: "crm-entity-widget-client-block-remove" },
						events: { click: this._deleteButtonHandler }
					}
				);
				innerWrapper.appendChild(this._deleteButton);
			}


			var titleWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-client-box-name-container" }
				}
			);
			innerWrapper.appendChild(titleWrapper);

			var buttonWrapper = BX.create("div",
				{ props: { className: "crm-entity-widget-client-actions-container" } }
			);

			var showUrl = this._entityInfo.getShowUrl();
			if(showUrl !== "")
			{
				var titleLink = BX.create("a",
					{
						props:
							{
								className: "crm-entity-widget-client-box-name",
								href: this._entityInfo.getShowUrl()
							},
						text: this._entityInfo.getTitle()
					}
				);

				if(this.isRequisiteEnabled())
				{
					BX.bind(titleLink, "mouseover", BX.debounce(this.onMouseOver, 300, this));
					BX.bind(titleLink, "mouseout", BX.debounce(this.onMouseOut, 300, this));
				}

				titleWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-box-name-row" },
							children: [ titleLink, buttonWrapper ]
						}
					)
				);
			}
			else
			{
				var titleNone = BX.create("span",
					{
						props:{ className: "crm-entity-widget-client-box-name" },
						text: this._entityInfo.getTitle()
					}
				);

				titleWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-box-name-row" },
							children: [ titleNone, buttonWrapper ]
						}
					)
				);
			}

			if(this._enableCommunications)
			{
				this._communicationButtons = [];
				var commTypes = [ "PHONE", "EMAIL", "IM" ];
				for(var i = 0, j = commTypes.length; i < j; i++)
				{
					var commType = commTypes[i];
					var button = BX.Crm.ClientEditorCommunicationButton.create(
						this._id +  "_" + commType,
						{
							entityInfo: this._entityInfo,
							type: commType,
							ownerTypeId: this._editor.getOwnerTypeId(),
							ownerId: this._editor.getOwnerId(),
							container: buttonWrapper
						}
					);
					button.layout();
					this._communicationButtons.push(button);
				}
			}

			var description = this._entityInfo.getDescription();
			if(description !== "")
			{
				innerWrapper.appendChild(
					BX.create("div",
						{
							props: { className: "crm-entity-widget-client-box-position" },
							text: description
						}
					)
				);
			}

			var phones = this._entityInfo.getPhones();
			var emails = this._entityInfo.getEmails();
			if(phones.length > 0 || emails.length > 0)
			{
				var communicationContainer = BX.create("div", { props: { className: "crm-entity-widget-client-contact" } });
				innerWrapper.appendChild(communicationContainer);

				if(phones.length > 0)
				{
					communicationContainer.appendChild(
						BX.create("div",
							{
								props: { className: "crm-entity-widget-client-contact-item crm-entity-widget-client-contact-phone" },
								//HACK: Disable autodetection of phone number for Microsoft Edge
								attrs: { "x-ms-format-detection": "none" },
								text: phones[0]["VALUE_FORMATTED"]
							}
						)
					);
				}

				if(emails.length > 0)
				{
					communicationContainer.appendChild(
						BX.create("div",
							{
								props: { className: "crm-entity-widget-client-contact-item crm-entity-widget-client-contact-email" },
								text: emails[0]["VALUE_FORMATTED"]
							}
						)
					);
				}
			}

			var callback = BX.prop.getFunction(this._settings, "onLayout", null);
			if(callback)
			{
				callback(this, this._wrapper);
			}

			this._hasLayout = true;
		},
		clearLayout: function()
		{
			if(this._requisiteNavigator)
			{
				this._requisiteNavigator.removeClosingListener(this._requisiteChangeHandler);
				this._requisiteNavigator.close();
				this._requisiteNavigator = null;
			}

			this._communicationButtons = null;
			this._wrapper = BX.remove(this._wrapper);
			this._hasLayout = false;
		},
		checkOwership: function(element)
		{
			return this._wrapper && BX.isParentForNode(this._wrapper, element);
		},
		onMouseOver: function(e)
		{
			if(this._requisiteHandle > 0)
			{
				window.clearTimeout(this._requisiteHandle);
				this._requisiteHandle = 0;
			}

			this._requisiteHandle = window.setTimeout(
				BX.delegate(this.openRequisiteNavigator, this),
				300
			);
		},
		onMouseOut: function(e)
		{
			if(this._requisiteHandle > 0)
			{
				window.clearTimeout(this._requisiteHandle);
				this._requisiteHandle = 0;
			}
		},
		openRequisiteNavigator: function()
		{
			if(!this.isRequisiteEnabled())
			{
				return;
			}

			if(this._requisiteHandle === 0)
			{
				return;
			}
			this._requisiteHandle = 0;

			if(!this._requisiteNavigator)
			{
				if(!this._requisiteInfo)
				{
					var requisiteBinding = BX.prop.getObject(this._settings, "requisiteBinding", {});
					this._requisiteInfo = BX.CrmEntityRequisiteInfo.create(
						{
							requisiteId: BX.prop.getInteger(requisiteBinding, "REQUISITE_ID", 0),
							bankDetailId: BX.prop.getInteger(requisiteBinding, "BANK_DETAIL_ID", 0),
							data: this._entityInfo.getRequisites()
						}
					);
				}

				this._requisiteNavigator = BX.Crm.RequisiteNavigator.create(this._id, { requisiteInfo: this._requisiteInfo });
				this._requisiteNavigator.addClosingListener(this._requisiteChangeHandler);
			}
			this._requisiteNavigator.open(this._wrapper);
		},
		closeRequisiteNavigator: function()
		{
			if(this._requisiteHandle === 0)
			{
				return;
			}
			this._requisiteHandle = 0;

			if(this._requisiteNavigator)
			{
				this._requisiteNavigator.close();
			}
		},
		onDeleteButtonClick: function(e)
		{
			var callback = BX.prop.getFunction(this._settings, "onDelete");
			if(callback)
			{
				callback(this);
			}
		},
		onRequisiteChange: function(sender, eventArgs)
		{
			var requisiteId = BX.prop.getInteger(eventArgs, "requisiteId", 0);
			var bankDetailId = BX.prop.getInteger(eventArgs, "bankDetailId", 0);

			if(!this._requisiteInfo
				|| this._requisiteInfo.getRequisiteId() !== requisiteId
				|| this._requisiteInfo.getBankDetailId() !== bankDetailId
			)
			{
				this._requisiteChangeNotifier.notify([ eventArgs ]);
			}
		}
	};
	BX.Crm.ClientEditorEntityPanel.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorEntityPanel();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.ClientEditorEntityBindingPanel === "undefined")
{
	BX.Crm.ClientEditorEntityBindingPanel = function()
	{
		this._id = "";
		this._settings = {};
		this._container = null;
		this._entityInfo = null;
		this._editor = null;
		this._mode = BX.Crm.EntityEditorMode.intermediate;
		this._item = null;
	};
	BX.Crm.ClientEditorEntityBindingPanel.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._editor = BX.prop.get(this._settings, "editor");
			this._entityInfo = BX.prop.get(this._settings, "entityInfo", null);

			this._mode = BX.prop.getInteger(this._settings, "mode", 0);
			this._item = BX.Crm.ClientEditorEntityPanel.create(
				this._id +  "_" + this._entityInfo.getId().toString(),
				{
					editor: this._editor,
					entityInfo: this._entityInfo,
					mode: this._mode,
					onLayout: BX.delegate(this.onItemLayout, this),
					onDelete: BX.delegate(this.onItemDelete, this)
				}
			);
		},
		getEntity: function()
		{
			return this._entityInfo;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function(container)
		{
			this._container = container;
		},
		layout: function()
		{
			this._button = BX.create("div",
				{
					props: { className: "crm-entity-widget-client-child-link" },
					events: { click: BX.delegate(this.onButtonClick, this) }
				}
			);

			this._item.setContainer(this._container);
			this._item.layout();
		},
		onItemLayout: function(item, wrapper)
		{
			BX.addClass(wrapper, "crm-entity-widget-client-block-child");
			var anchor = wrapper.firstChild;
			if(anchor)
			{
				wrapper.insertBefore(this._button, anchor);
			}
			else
			{
				wrapper.appendChild(this._button);
			}
		},
		clearLayout: function()
		{
			this._item.clearLayout();
		},
		onItemDelete: function(item)
		{
			if(this._mode !== BX.Crm.EntityEditorMode.edit)
			{
				return;
			}
			var callback = BX.prop.getFunction(this._settings, "onChange", null);
			if(callback)
			{
				callback(this, "delete");
			}
		},
		onButtonClick: function(e)
		{
			if(this._mode !== BX.Crm.EntityEditorMode.edit)
			{
				return;
			}
			var callback = BX.prop.getFunction(this._settings, "onChange", null);
			if(callback)
			{
				callback(this, "unbind");
			}
		}
	};
	BX.Crm.ClientEditorEntityBindingPanel.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorEntityBindingPanel();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.ClientEditorCommunicationButton === "undefined")
{
	BX.Crm.ClientEditorCommunicationButton = function()
	{
		this._id = "";
		this._settings = {};
		this._entityInfo = null;
		this._type = "";

		this._items = null;

		this._container = null;
		this._wrapper = null;
		this._menu = null;
	};
	BX.Crm.ClientEditorCommunicationButton.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._entityInfo = BX.prop.get(this._settings, "entityInfo", null);
			this._type = BX.prop.getString(this._settings, "type", "");

			this._container = BX.prop.getElementNode(this._settings, "container", "");
			if(this._type === "")
			{
				this._type = "PHONE";
			}

			this._items = this._entityInfo.getMultiFieldsByType(this._type);
		},
		layout: function()
		{
			var className = "";
			if(this._type === "EMAIL")
			{
				className = "crm-entity-widget-client-action-mail";
			}
			else if(this._type === "IM")
			{
				className = "crm-entity-widget-client-action-im";
			}
			else// if(this._type === "PHONE")
			{
				className = "crm-entity-widget-client-action-call";
			}

			if(this._items.length > 0)
			{
				className += " crm-entity-widget-client-action-available";
			}

			this._wrapper = BX.create("a", { props: { className: className } });
			BX.bind(this._wrapper, "click", BX.delegate(this.onClick, this));
			this._container.appendChild(this._wrapper);
		},
		onClick: function(e)
		{
			if(this._items.length === 0)
			{
				return BX.eventReturnFalse(e);
			}

			if(this._items.length === 1)
			{
				var item = this._items[0];
				var value = BX.prop.getString(item, "VALUE");
				if(value !== "")
				{
					if(this._type === "PHONE")
					{
						this.addCall(value);
					}
					else if(this._type === "EMAIL")
					{
						this.addEmail(value);
					}
					else if(this._type === "IM")
					{
						this.openChat(value);
					}
				}
				return BX.eventReturnFalse(e);
			}

			this.toggleMenu();
			BX.eventReturnFalse(e);
		},
		toggleMenu: function()
		{
			if(!this._menu)
			{
				var menuItems = [];
				for(var i = 0, l = this._items.length; i < l; i++)
				{
					var value = BX.prop.getString(this._items[i], "VALUE");
					var formattedValue = BX.prop.getString(this._items[i], "VALUE_FORMATTED");
					var complexName = BX.prop.getString(this._items[i], "COMPLEX_NAME");
					var itemText = (complexName ? complexName + ': ' : '') + (formattedValue ? formattedValue : value);

					if(value !== "")
					{
						menuItems.push({ id: value, text:  itemText });
					}
				}

				this._menu = BX.Crm.ClientEditorMenu.create(
					this._id.toLowerCase() + "_menu",
					{
						anchor: this._wrapper,
						items: menuItems,
						callback: BX.delegate(this.onMenuItemSelect, this)
					}
				);
			}
			this._menu.toggle();
		},
		onMenuItemSelect: function(menu, item)
		{
			if(this._type === "EMAIL")
			{
				this.addEmail(item["id"])
			}
			else if(this._type === "IM")
			{
				this.openChat(item["id"]);
			}
			else// if(this._type === "PHONE")
			{
				this.addCall(item["id"])
			}

			this._menu.close();
		},
		addCall: function(phone)
		{
			if(typeof(window.top['BXIM']) === 'undefined')
			{
				window.alert(this.getMessage("telephonyNotSupported"));
				return;
			}

			var params =
			{
				"ENTITY_TYPE_NAME": this._entityInfo.getTypeName(),
				"ENTITY_ID": this._entityInfo.getId(),
				"AUTO_FOLD": true
			};

			var ownerTypeId = BX.prop.getInteger(this._settings, "ownerTypeId", 0);
			var ownerId = BX.prop.getInteger(this._settings, "ownerId", 0);
			if(ownerTypeId !== this._entityInfo.getTypeId() || ownerId !== this._entityInfo.getId())
			{
				 params["BINDINGS"] = [ { "OWNER_TYPE_NAME": BX.CrmEntityType.resolveName(ownerTypeId), "OWNER_ID": ownerId } ];
			}

			window.top['BXIM'].phoneTo(phone, params);
		},
		addEmail: function(email)
		{
			BX.CrmActivityEditor.addEmail(
				{
					communicationsLoaded: true,
					communications:
						[
							{
								type: "EMAIL",
								entityType: this._entityInfo.getTypeName(),
								entityId: this._entityInfo.getId(),
								value: email
							}
						]
				}
			);
		},
		openChat: function (messengerValue)
		{
			if(typeof(window.top["BXIM"]) === "undefined")
			{
				window.alert(this.getMessage("messagingNotSupported"));
				return;
			}
			window.top["BXIM"].openMessengerSlider(messengerValue, {RECENT: 'N', MENU: 'N'});
		}
	};
	BX.Crm.ClientEditorCommunicationButton.prototype.getMessage = function(name)
	{
		var m = BX.Crm.ClientEditorCommunicationButton.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};

	if(typeof(BX.Crm.ClientEditorCommunicationButton.messages) === "undefined")
	{
		BX.Crm.ClientEditorCommunicationButton.messages = {};
	}
	BX.Crm.ClientEditorCommunicationButton.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorCommunicationButton();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.ClientEditorMenu === "undefined")
{
	BX.Crm.ClientEditorMenu = function()
	{
		this._id = null;
		this._settings = {};
		this._items = null;
		this._isOpened = false;
		this._popup = null;
	};

	BX.Crm.ClientEditorMenu.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._items = BX.prop.getArray(this._settings, "items", []);
			for(var i = 0, l = this._items.length; i < l; i++)
			{
				this._items[i]["onclick"] = BX.delegate(this.onItemSelect, this);
			}
		},
		onItemSelect: function(e, item)
		{
			var callback = BX.prop.getFunction(this._settings, "callback", null);
			if(callback)
			{
				callback(this, item);
			}
		},
		isOpened: function()
		{
			return this._isOpened;
		},
		open: function()
		{
			if(this._isOpened)
			{
				return;
			}

			BX.PopupMenu.show(
				this._id,
				BX.prop.getElementNode(this._settings, "anchor", null),
				this._items,
				{
					offsetTop: 0,
					offsetLeft: 0,
					events:
						{
							onPopupShow: BX.delegate(this.onPopupShow, this),
							onPopupClose: BX.delegate(this.onPopupClose, this),
							onPopupDestroy: BX.delegate(this.onPopupDestroy, this)
						}
				}
			);
			this._popup = BX.PopupMenu.currentItem;
		},
		close: function()
		{
			if(!this._isOpened)
			{
				return;
			}

			if(this._popup)
			{
				if(this._popup.popupWindow)
				{
					this._popup.popupWindow.close();
				}
			}
		},
		toggle: function()
		{
			if(!this._isOpened)
			{
				this.open();
			}
			else
			{
				this.close();
			}
		},
		onPopupShow: function()
		{
			this._isOpened = true;
		},
		onPopupClose: function()
		{
			if(this._popup && this._popup.popupWindow)
			{
				this._popup.popupWindow.destroy();
			}
		},
		onPopupDestroy: function()
		{
			this._isOpened = false;
			this._popup = null;

			if(typeof(BX.PopupMenu.Data[this._id]) !== "undefined")
			{
				delete(BX.PopupMenu.Data[this._id]);
			}
		}
	};
	BX.Crm.ClientEditorMenu.create = function(id, settings)
	{
		var self = new BX.Crm.ClientEditorMenu();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.Crm.UserFieldTypeMenu) === "undefined")
{
	BX.Crm.UserFieldTypeMenu = function()
	{
		this._id = null;
		this._settings = {};
		this._items = null;
		this._isOpened = false;

		this._wrapper = null;
		this._innerWrapper = null;

		this._topScrollButton = null;
		this._bottomScrollButton = null;

		this._bottomButtonMouseOverHandler = BX.delegate(this.onBottomButtonMouseOver, this);
		this._bottomButtonMouseOutHandler = BX.delegate(this.onBottomButtonMouseOut, this);

		this._topButtonMouseOverHandler = BX.delegate(this.onTopButtonMouseOver, this);
		this._topButtonMouseOutHandler = BX.delegate(this.onTopButtonMouseOut, this);

		this._scrollHandler = BX.throttle(this.onScroll, 100, this);

		this._enableScrollToBottom = false;
		this._enableScrollToTop = false;

		this._popup = null;
	};

	BX.Crm.UserFieldTypeMenu.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._items = [];
			var itemData = BX.prop.getArray(settings, "items");
			for(var i = 0, length = itemData.length; i < length; i++)
			{
				var data = itemData[i];
				data["menu"] = this;
				this._items.push(
					BX.Crm.UserFieldTypeMenuItem.create(
						BX.prop.getString(data, "value"),
						data
					)
				);
			}
		},
		getId: function()
		{
			return this._id;
		},
		isOpened: function()
		{
			return this._isOpened;
		},
		open: function(anchor)
		{
			if(this._isOpened)
			{
				return;
			}

			this._popup = new BX.PopupWindow(
				this._id,
				anchor,
				{
					autoHide: true,
					draggable: false,
					offsetLeft: 0,
					offsetTop: 0,
					noAllPaddings: true,
					bindOptions: { forceBindPosition: true },
					closeByEsc: true,
					events:
					{
						onPopupShow: BX.delegate(this.onPopupShow, this),
						onPopupClose: BX.delegate(this.onPopupClose, this),
						onPopupDestroy: BX.delegate(this.onPopupDestroy, this)
					},
					content: this.prepareContent()
				}
			);
			this._popup.show();
		},
		close: function()
		{
			if(!this._isOpened)
			{
				return;
			}

			if(this._popup)
			{
				this._popup.close();
			}
		},
		prepareContent: function()
		{
			this._wrapper = BX.create("div", { props: { className: "crm-entity-card-widget-create-field-popup" } });

			var scrollIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42\" height=\"13\" viewBox=\"0 0 42 13\">\n" +
				"  <polyline fill=\"none\" stroke=\"#CACDD1\" stroke-width=\"2\" points=\"274 98 284 78.614 274 59\" transform=\"rotate(90 186 -86.5)\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n" +
				"</svg>\n";

			this._topScrollButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-card-widget-popup-scroll-control-top" },
					html: scrollIcon
				}
			);
			this._wrapper.appendChild(this._topScrollButton);

			this._bottomScrollButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-card-widget-popup-scroll-control-bottom" },
					html: scrollIcon
				}
			);
			this._wrapper.appendChild(this._bottomScrollButton);

			this._innerWrapper = BX.create("div", { props: { className: "crm-entity-card-widget-create-field-list" } });
			this._wrapper.appendChild(this._innerWrapper);

			for(var i = 0, length = this._items.length; i < length; i++)
			{
				this._innerWrapper.appendChild(this._items[i].prepareContent());
			}
			return this._wrapper;
		},
		adjust: function()
		{
			var height = this._innerWrapper.offsetHeight;
			var scrollTop = this._innerWrapper.scrollTop;
			var scrollHeight = this._innerWrapper.scrollHeight;

			if(scrollTop === 0)
			{
				BX.addClass(this._topScrollButton, "control-hide");
			}
			else
			{
				BX.removeClass(this._topScrollButton, "control-hide");
			}

			if((scrollTop + height) === scrollHeight)
			{
				BX.addClass(this._bottomScrollButton, "control-hide");
			}
			else
			{
				BX.removeClass(this._bottomScrollButton, "control-hide");
			}
		},
		onItemSelect: function(item)
		{
			var callback = BX.prop.getFunction(this._settings, "callback", null);
			if(callback)
			{
				callback(this, item);
			}
		},
		onPopupShow: function()
		{
			this._isOpened = true;

			BX.bind(this._bottomScrollButton, "mouseover", this._bottomButtonMouseOverHandler);
			BX.bind(this._bottomScrollButton, "mouseout", this._bottomButtonMouseOutHandler);

			BX.bind(this._topScrollButton, "mouseover", this._topButtonMouseOverHandler);
			BX.bind(this._topScrollButton, "mouseout", this._topButtonMouseOutHandler);

			BX.bind(this._innerWrapper, "scroll", this._scrollHandler);

			window.setTimeout(this.adjust.bind(this), 100);
		},
		onPopupClose: function()
		{
			if(this._popup)
			{
				this._popup.destroy();
			}
		},
		onPopupDestroy: function()
		{
			this._isOpened = false;

			BX.unbind(this._bottomScrollButton, "mouseover", this._bottomButtonMouseOverHandler);
			BX.unbind(this._bottomScrollButton, "mouseout", this._bottomButtonMouseOutHandler);

			BX.unbind(this._topScrollButton, "mouseover", this._topButtonMouseOverHandler);
			BX.unbind(this._topScrollButton, "mouseout", this._topButtonMouseOutHandler);

			BX.unbind(this._innerWrapper, "scroll", this._scrollHandler);

			this._wrapper = null;
			this._innerWrapper = null;
			this._topScrollButton = null;
			this._bottomScrollButton = null;

			this._popup = null;
		},
		onBottomButtonMouseOver: function(e)
		{
			if(this._enableScrollToBottom)
			{
				return;
			}

			this._enableScrollToBottom = true;
			this._enableScrollToTop = false;

			(function scroll()
			{
				if(!this._enableScrollToBottom)
				{
					return;
				}

				var el = this._innerWrapper;
				if((el.scrollTop + el.offsetHeight) !== el.scrollHeight)
				{
					el.scrollTop += 3;
				}

				if((el.scrollTop + el.offsetHeight) === el.scrollHeight)
				{
					this._enableScrollToBottom = false;
					//console.log("scrollToBottom: completed");
				}
				else
				{
					window.setTimeout(scroll.bind(this), 20);
				}
			}).bind(this)();
		},
		onBottomButtonMouseOut: function()
		{
			this._enableScrollToBottom = false;
		},
		onTopButtonMouseOver: function(e)
		{
			if(this._enableScrollToTop)
			{
				return;
			}

			this._enableScrollToBottom = false;
			this._enableScrollToTop = true;

			(function scroll()
			{
				if(!this._enableScrollToTop)
				{
					return;
				}

				var el = this._innerWrapper;
				if(el.scrollTop > 0)
				{
					el.scrollTop -= 3;
				}

				if(el.scrollTop === 0)
				{
					this._enableScrollToTop = false;
					//console.log("scrollToTop: completed");
				}
				else
				{
					window.setTimeout(scroll.bind(this), 20);
				}
			}).bind(this)();
		},
		onTopButtonMouseOut: function()
		{
			this._enableScrollToTop = false;
		},
		onScroll: function(e)
		{
			this.adjust();
		}
	};
	BX.Crm.UserFieldTypeMenu.create = function(id, settings)
	{
		var self = new BX.Crm.UserFieldTypeMenu();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof(BX.Crm.UserFieldTypeMenuItem) === "undefined")
{
	BX.Crm.UserFieldTypeMenuItem = function()
	{
		this._id = "";
		this._settings = null;
		this._menu = "";
		this._value = "";
		this._text = "";
		this._legend = "";
	};
	BX.Crm.UserFieldTypeMenuItem.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._menu = BX.prop.get(settings, "menu");
			this._value = BX.prop.getString(settings, "value");
			this._text = BX.prop.getString(settings, "text");
			this._legend = BX.prop.getString(settings, "legend");
		},
		getId: function()
		{
			return this._id;
		},
		getValue: function()
		{
			return this._value;
		},
		getText: function()
		{
			return this._text;
		},
		getLegend: function()
		{
			return this._legend;
		},
		prepareContent: function()
		{
			var wrapper = BX.create(
				"span",
				{
					props: { className: "crm-entity-card-widget-create-field-item" },
					events: { click: BX.delegate(this.onClick, this) }
				}
			);

			wrapper.appendChild(
				BX.create(
					"span",
					{
						props: { className: "crm-entity-card-widget-create-field-item-title" },
						text: this._text
					}
				)
			);

			wrapper.appendChild(
				BX.create(
					"span",
					{
						props: { className: "crm-entity-card-widget-create-field-item-desc" },
						text: this._legend
					}
				)
			);

			return wrapper;
		},
		onClick: function(e)
		{
			this._menu.onItemSelect(this);
		}
	};
	BX.Crm.UserFieldTypeMenuItem.create = function(id, settings)
	{
		var self = new BX.Crm.UserFieldTypeMenuItem();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorSubsection === "undefined")
{
	BX.Crm.EntityEditorSubsection = function()
	{
		BX.Crm.EntityEditorSubsection.superclass.constructor.apply(this);
	};

	BX.extend(BX.Crm.EntityEditorSubsection, BX.Crm.EntityEditorSection);
	BX.Crm.EntityEditorSubsection.prototype.initialize =  function(id, settings)
	{
		BX.Crm.EntityEditorSubsection.superclass.initialize.call(this, id, settings);
		this.initializeFromModel();
	};

	BX.Crm.EntityEditorSubsection.prototype.ensureWrapperCreated = function(params)
	{
		if(!this._wrapper)
		{
			this._wrapper = BX.create("div");
		}

		return this._wrapper;
	};
	BX.Crm.EntityEditorSubsection.prototype.layout = function(options)
	{
		//Create wrapper
		this._contentContainer = BX.create("div");
		var isViewMode = this._mode === BX.Crm.EntityEditorMode.view ;
		this.ensureWrapperCreated();
		this.layoutTitle();

		this._wrapper.appendChild(this._contentContainer);

		//Layout fields
		for(var i = 0, l = this._fields.length; i < l; i++)
		{
			this.layoutChild(this._fields[i]);
		}

		this._addChildButton = this._createChildButton = null;

		if (this.isDragEnabled())
		{
			this._dragContainerController = BX.Crm.EditorDragContainerController.create(
				"section_" + this.getId(),
				{
					charge: BX.Crm.EditorFieldDragContainer.create(
						{
							section: this,
							context: this._draggableContextId
						}
					),
					node: this._wrapper
				}
			);
			this._dragContainerController.addDragFinishListener(this._dropHandler);

			this.initializeDragDropAbilities();
		}

		this._addChildButton = this._createChildButton = null;

		if(!isViewMode)
		{
			this.createButtonPanel();
			this._contentContainer.appendChild(this._buttonPanelWrapper);

		}

		this._hasLayout = true;
		this.registerLayout(options);
	};
	BX.Crm.EntityEditorSubsection.prototype.getChildDragScope = function()
	{
		return BX.Crm.EditorDragScope.parent;
	};
	BX.Crm.EntityEditorSubsection.prototype.createButtonPanel = function()
	{
		this._buttonPanelWrapper = BX.create("div", {
			props: { className: "crm-entity-widget-content-block" }
		});
	};

	BX.Crm.EntityEditorSubsection.prototype.layoutChild = function(field)
	{
		field.setContainer(this._contentContainer);
		field.setDraggableContextId(this._draggableContextId);
		this.setChildVisible(field);
		//Force layout reset because of animation implementation
		field.releaseLayout();
		field.layout();
		if(this._mode !== BX.Crm.EntityEditorMode.view && field.isHeading())
		{
			field.focus();
		}
	};

	BX.Crm.EntityEditorSubsection.prototype.setChildVisible = function(field)
	{
		field.setVisible(BX.prop.getBoolean(field._schemeElement._settings, "isVisible", true));
	};

	BX.Crm.EntityEditorSubsection.prototype.isDragEnabled = function()
	{
		return false;
	};

	BX.Crm.EntityEditorSubsection.prototype.layoutTitle = function()
	{
	};

	BX.Crm.EntityEditorSubsection.prototype.isCreationEnabled = function()
	{
		return false;
	};

	BX.Crm.EntityEditorSubsection.prototype.isContextMenuEnabled = function()
	{
		return false;
	};

	BX.Crm.EntityEditorSubsection.prototype.isRequired = function()
	{
		return true;
	};

	BX.Crm.EntityEditorSubsection.prototype.getRuntimeValue = function()
	{
		var data = [];

		for (var i=0; i < this.getChildCount();i++)
		{
			var fieldValue = this._fields[i].getRuntimeValue();

			if (BX.type.isArray(fieldValue))
			{
				for (var key in fieldValue)
				{
					if(fieldValue.hasOwnProperty(key))
					{
						data[key] = fieldValue[key];
					}
				}
			}
			else
			{
				data[this._fields[i].getName()] = fieldValue
			}
		}
		return data;
	};
	BX.Crm.EntityEditorSubsection.prototype.createDragButton = function()
	{
		if(!this._dragButton)
		{
			this._dragButton = BX.create(
				"div",
				{
					props: { className: "crm-entity-widget-content-block-draggable-btn-container" },
					children:
						[
							BX.create(
								"div",
								{
									props: { className: "crm-entity-widget-content-block-draggable-btn" }
								}
							)
						]
				}
			);
		}
		return this._dragButton;
	};
	BX.Crm.EntityEditorSubsection.prototype.initializeDragDropAbilities = function()
	{
		if(this._dragItem)
		{
			return;
		}

		this._dragItem = BX.Crm.EditorDragItemController.create(
			"field_" +  this.getId(),
			{
				charge: BX.Crm.EditorFieldDragItem.create(
					{
						control: this,
						contextId: this._draggableContextId,
						scope: this.getDragScope()
					}
				),
				node: this.createDragButton(),
				showControlInDragMode: false,
				ghostOffset: { x: 0, y: 0 }
			}
		);
	};
	BX.Crm.EntityEditorSubsection.prototype.processChildControlChange = function(child, params)
	{
		if(this._isChanged)
		{
			return;
		}

		this.markAsChanged(params);
	};
	BX.Crm.EntityEditorSubsection.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorSubsection();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorRecurring === "undefined")
{
	BX.Crm.EntityEditorRecurring = function()
	{
		BX.Crm.EntityEditorRecurring.superclass.constructor.apply(this);
	};

	BX.extend(BX.Crm.EntityEditorRecurring, BX.Crm.EntityEditorSubsection);
	BX.Crm.EntityEditorRecurring.prototype.initialize =  function(id, settings)
	{
		BX.Crm.EntityEditorRecurring.superclass.initialize.call(this, id, settings);
		var data = this._schemeElement.getData();
		this._schemeFieldData = BX.prop.getObject(data, 'fieldData', {});
		this._enableRecurring = BX.prop.getBoolean(this._schemeElement._settings, "enableRecurring", true);
		this._recurringModel = this._model.getField(this.getName());
	};

	BX.Crm.EntityEditorRecurring.prototype.initializeFromModel =  function()
	{
		BX.Crm.EntityEditorRecurring.superclass.initializeFromModel.call(this);
		var _this = this;
		for (var i = 0, length = this._fields.length; i < length; i++)
		{
			this._fields[i].getValue = function(name){
				if (!BX.type.isNotEmptyString(name))
				{
					name = this.getName();
				}
				return _this.getRecurringFieldValue(name);
			};
		}
	};

	BX.Crm.EntityEditorRecurring.prototype.getRecurringModel =  function()
	{
		var parent = this.getParent();
		if (parent instanceof BX.Crm.EntityEditorRecurring)
		{
			return parent.getRecurringModel();
		}

		return this._recurringModel;
	};
	BX.Crm.EntityEditorRecurring.prototype.isContextMenuEnabled = function()
	{
		return BX.Crm.EntityEditorSubsection.superclass.isContextMenuEnabled.call(this);
	};
	BX.Crm.EntityEditorRecurring.prototype.isNeedToDisplay = function()
	{
		return false;
	};
	BX.Crm.EntityEditorRecurring.prototype.isRequired = function()
	{
		return this._schemeElement && this._schemeElement.isRequired();
	};
	BX.Crm.EntityEditorRecurring.prototype.prepareContextMenuItems = function()
	{
		var results = [];
		results.push({ value: "hide", text: this.getMessage("hide") });

		return results;
	};
	BX.Crm.EntityEditorRecurring.prototype.processContextMenuCommand = function(e, command)
	{
		if(command === "hide")
		{
			window.setTimeout(BX.delegate(this.hide, this), 500);
		}
		else if (this._parent && this._parent.hasAdditionalMenu())
		{
			this._parent.processChildAdditionalMenuCommand(this, command);
		}
		this.closeContextMenu();
	};
	BX.Crm.EntityEditorRecurring.prototype.isDragEnabled = function()
	{
		return BX.Crm.EntityEditorSubsection.superclass.isDragEnabled.call(this);
	};
	BX.Crm.EntityEditorRecurring.prototype.getDragObjectType = function()
	{
		return BX.Crm.EditorDragObjectType.field;
	};
	BX.Crm.EntityEditorRecurring.prototype.hasContentToDisplay = function()
	{
		return true;
	};
	BX.Crm.EntityEditorRecurring.prototype.getRecurringMode =  function()
	{
		var parent = this.getParent();
		if (parent instanceof BX.Crm.EntityEditorRecurring)
		{
			return parent.getRecurringMode();
		}

		return this.getRecurringFieldValue('RECURRING[MODE]');
	};

	BX.Crm.EntityEditorRecurring.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorRecurring.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorRecurring.prototype.processChildControlChange = function(child, params)
	{
		var childName = child.getName();
		var refreshLayout = false;
		var previousValue = child.getValue();
		var changedValue = child.getRuntimeValue();
		if (previousValue !== changedValue)
		{
			switch (childName)
			{
				case 'RECURRING[MODE]':
				case 'RECURRING[MULTIPLE_TYPE_LIMIT]':
				case 'RECURRING[BEGINDATE_TYPE]':
				case 'RECURRING[CLOSEDATE_TYPE]':
					refreshLayout = true;
					break;
				case 'RECURRING[MULTIPLE_TYPE]':
					if (
						previousValue === this.getSchemeFieldValue('MULTIPLE_CUSTOM')
						|| changedValue === this.getSchemeFieldValue('MULTIPLE_CUSTOM')
					)
					{
						refreshLayout = true;
					}
			}
		}
		var recurringModel = this.getRecurringModel();
		this.setChangedValue(childName, changedValue, recurringModel);
		BX.Crm.EntityEditorRecurring.superclass.processChildControlChange.call(this, child, params);
		if (refreshLayout)
		{
			this.refreshLayout();
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.setChangedValue = function(childName, value, model)
	{
		if (typeof value === "object")
		{
			for (var key in value)
			{
				if(value.hasOwnProperty(key))
				{
					this.setChangedValue(key, value[key], model);
				}
			}
		}
		else
		{
			model[childName] = value;
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.layout = function(options)
	{
		//Create wrapper
		this._contentContainer = BX.create("div");

		if (this.isMainSubsection())
		{
			this._contentContainer.classList.add("crm-entity-widget-content");
		}

		var isViewMode = this._mode === BX.Crm.EntityEditorMode.view ;
		this.ensureWrapperCreated();
		this.layoutTitle();

		this._wrapper.appendChild(this._contentContainer);

		if (isViewMode)
		{
			var viewNode = BX.create("div", {
				props:{
					className: "crm-entity-widget-content-block crm-entity-widget-content-block-click-editable"
				},
				children: [this.createTitleNode(this.getTitle())]
			});
			this._contentContainer.appendChild(viewNode);

			var textNode = BX.create("div");
			var layoutData = this._schemeElement.getData();
			if (this._schemeElement._promise instanceof BX.Promise)
			{
				this.loadViewText();
				this._schemeElement._promise.then(
					BX.proxy(function() {
						textNode.classList = "crm-entity-widget-content-block-inner";
						textNode.innerHTML = BX.util.htmlspecialchars(layoutData.view.text);
						viewNode.innerHTML = '';
						viewNode.appendChild(textNode);
						this._schemeElement._promise = null;
					}, this)
				);
			}
			else if (BX.type.isNotEmptyString(layoutData.view.text))
			{
				textNode.classList = "crm-entity-widget-content-block-inner";
				textNode.innerHTML = layoutData.view.text;
				viewNode.appendChild(textNode)
			}
			if (this._enableRecurring)
			{
				BX.bind(textNode, "click", BX.delegate(this.toggle, this));
			}

			if(this.isContextMenuEnabled())
			{
				viewNode.appendChild(this.createContextMenuButton());
			}
			if(this.isDragEnabled())
			{
				viewNode.appendChild(this.createDragButton());
				this.initializeDragDropAbilities();
			}
		}
		else if(!this._enableRecurring)
		{
			var viewNode = BX.create("div", {
				props:{
					className: "crm-entity-widget-content-block"
				},
				children: [this.createTitleNode(this.getMessage('modeTitle'))]
			});

			var disabledField = BX.create("div",{
				props: {
					className:'crm-entity-widget-content-block-inner'
				},
				children:[
					BX.create("div",{
						type:"text",
						props: {
							className:'crm-entity-widget-content-input',
							disabled: "disabled"
						},
						text: this.getMessage('notRepeat'),
						events: {
							click: BX.delegate(this.showLicencePopup,this)
						}
					})
				]

			});
			viewNode.appendChild(disabledField);
			var lock = BX.create("button",{
				props: {
					className:'crm-entity-widget-content-block-locked-icon'
				},
				events: {
					click: BX.delegate(this.showLicencePopup,this)
				}
			});
			viewNode.appendChild(lock);
			this._contentContainer.appendChild(viewNode);
		}
		else
		{
			for(var i = 0, l = this._fields.length; i < l; i++)
			{
				this._fields[i].isDragEnabled = function(){
					return false;
				};
				this.layoutChild(this._fields[i]);
			}
		}
		//Layout fields

		this._addChildButton = this._createChildButton = null;
		this._hasLayout = true;
		this.registerLayout(options);
	};
	BX.Crm.EntityEditorRecurring.prototype.createTitleNode = function(title)
	{
		var titleNode = BX.create(
			"div",
			{
				attrs: { className: "crm-entity-widget-content-block-title" },
				children: [
					BX.create(
						"span",
						{
							attrs: { className: "crm-entity-widget-content-block-title-text" },
							text: title
						}
					)
				]
			}
		);

		return titleNode;
	};
	BX.Crm.EntityEditorRecurring.prototype.setChildVisible = function(field)
	{
		var value = false;
		var name = field.getName();
		var mode = this.getRecurringMode();
		if (name === 'RECURRING[MODE]')
		{
			value = true;
		}
		else if (mode === this.getSchemeFieldValue('SINGLE_EXECUTION'))
		{
			switch (name)
			{
				case 'SINGLE_PARAMS':
				case 'RECURRING[BEGINDATE_TYPE]':
				case 'RECURRING[CLOSEDATE_TYPE]':
				case 'SUBTITLE_NEW_ORDER_PARAMS':
				case 'NEW_BEGINDATE':
				case 'NEW_CLOSEDATE':
				case 'RECURRING[CATEGORY_ID]':
					value = true;
					break;
				case 'OFFSET_BEGINDATE':
					if (this.getRecurringFieldValue('RECURRING[BEGINDATE_TYPE]') === this.getSchemeFieldValue('CALCULATED_FIELD_VALUE'))
					{
						value = true;
					}
					break;
				case 'OFFSET_CLOSEDATE':
					if (this.getRecurringFieldValue('RECURRING[CLOSEDATE_TYPE]') === this.getSchemeFieldValue('CALCULATED_FIELD_VALUE'))
					{
						value = true;
					}
					break;
			}
		}
		else if (mode === this.getSchemeFieldValue('MULTIPLE_EXECUTION'))
		{
			switch (name)
			{
				case 'MULTIPLE_PARAMS':
				case 'RECURRING[MULTIPLE_TYPE]':
				case 'RECURRING[CATEGORY_ID]':
				case 'RECURRING[MULTIPLE_DATE_START]':
				case 'MULTIPLE_LIMIT':
				case 'RECURRING[MULTIPLE_TYPE_LIMIT]':
				case 'SUBTITLE_NEW_ORDER_PARAMS':
				case 'NEW_BEGINDATE':
				case 'NEW_CLOSEDATE':
				case 'RECURRING[BEGINDATE_TYPE]':
				case 'RECURRING[CLOSEDATE_TYPE]':
					value = true;
					break;
				case 'MULTIPLE_CUSTOM':
					if (this.getRecurringFieldValue('RECURRING[MULTIPLE_TYPE]') === this.getSchemeFieldValue('MULTIPLE_CUSTOM'))
					{
						value = true;
					}
					break;
				case 'RECURRING[MULTIPLE_DATE_LIMIT]':
					if (this.getRecurringFieldValue('RECURRING[MULTIPLE_TYPE_LIMIT]') === this.getSchemeFieldValue('LIMITED_BY_DATE'))
					{
						value = true;
					}
					break;
				case 'RECURRING[MULTIPLE_TIMES_LIMIT]':
					if (this.getRecurringFieldValue('RECURRING[MULTIPLE_TYPE_LIMIT]') === this.getSchemeFieldValue('LIMITED_BY_TIMES'))
					{
						value = true;
					}
					break;
				case 'OFFSET_BEGINDATE':
					if (this.getRecurringFieldValue('RECURRING[BEGINDATE_TYPE]') === this.getSchemeFieldValue('CALCULATED_FIELD_VALUE'))
					{
						value = true;
					}
					break;
				case 'OFFSET_CLOSEDATE':
					if (this.getRecurringFieldValue('RECURRING[CLOSEDATE_TYPE]') === this.getSchemeFieldValue('CALCULATED_FIELD_VALUE'))
					{
						value = true;
					}
					break;
			}
		}
		field.setVisible(value);
	};
	BX.Crm.EntityEditorRecurring.prototype.getRecurringFieldValue = function(name)
	{
		return BX.prop.get(this.getRecurringModel(), name)
	};
	BX.Crm.EntityEditorRecurring.prototype.getSchemeFieldValue = function(name)
	{
		return BX.prop.get(this._schemeFieldData, name, "")
	};
	BX.Crm.EntityEditorRecurring.prototype.isMainSubsection = function()
	{
		return !(this.getParent() instanceof BX.Crm.EntityEditorRecurring);
	};
	BX.Crm.EntityEditorRecurring.prototype.onBeforeSubmit = function()
	{
		if (this.isMainSubsection())
		{
			this._wrapper.appendChild(
				BX.create('input',{
					props:{
						type: 'hidden',
						name: 'IS_RECURRING',
						value: (this._model.getStringField('IS_RECURRING') === 'Y') ? 'Y' : 'N'
					}
				})
			);
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.save = function()
	{
		if (this.isMainSubsection())
		{
			this._schemeElement._promise = new BX.Promise();
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.loadViewText = function()
	{
		var data = this._schemeElement.getData();
		if (
			BX.type.isPlainObject(data.loaders)
			&& BX.type.isNotEmptyString(data.loaders["url"])
			&& BX.type.isNotEmptyString(data.loaders["action"])
		)
		{
			BX.ajax(
				{
					url: data.loaders["url"],
					method: "POST",
					dataType: "json",
					data: {
						ACTION: data.loaders["action"],
						PARAMS: {ID:this._model.getField('ID')}
					},
					onsuccess: BX.delegate(this.onEntityHintLoad, this)
				}
			);
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.onEntityHintLoad = function(result)
	{
		var entityData = BX.prop.getObject(result, "DATA", null);

		if(!entityData)
		{
			return;
		}
		if (BX.type.isNotEmptyString(entityData.HINT))
		{
			this._schemeElement._data.view.text = entityData.HINT;
		}

		if (this._schemeElement._promise instanceof BX.Promise)
		{
			this._schemeElement._promise.fulfill();
			this._schemeElement._promise = null;
		}
	};
	BX.Crm.EntityEditorRecurring.prototype.showLicencePopup = function(e)
	{
		e.preventDefault();

		if(!B24 || !B24['licenseInfoPopup'])
		{
			return;
		}

		var layoutData = this._schemeElement.getData();
		var restrictionScript = layoutData.restrictScript;
		if (BX.type.isNotEmptyString(restrictionScript))
		{
			eval(restrictionScript);
		}
	};
	BX.Crm.EntityEditorRecurring.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRecurring();
		self.initialize(id, settings);
		return self;
	};
}

if(typeof BX.Crm.EntityEditorRecurringCustomRowField === "undefined")
{
	BX.Crm.EntityEditorRecurringCustomRowField = function()
	{
		BX.Crm.EntityEditorRecurringCustomRowField.superclass.constructor.apply(this);
		// this._currencyEditor = null;
		this._amountInput = null;
		this._selectInput = null;
		this._sumElement = null;
		this._selectContainer = null;
		this._inputWrapper = null;
		this._innerWrapper = null;
		this._selectedValue = "";
		this._selectClickHandler = BX.delegate(this.onSelectorClick, this);
		this._isMesureMenuOpened = false;
	};
	BX.extend(BX.Crm.EntityEditorRecurringCustomRowField, BX.Crm.EntityEditorField);
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getModeSwitchType = function(mode)
	{
		var result = BX.Crm.EntityEditorModeSwitchType.common;
		if(mode === BX.Crm.EntityEditorMode.edit)
		{
			result |= BX.Crm.EntityEditorModeSwitchType.button|BX.Crm.EntityEditorModeSwitchType.content;
		}
		return result;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getContentWrapper = function()
	{
		return this._innerWrapper;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.focus = function()
	{
		if(this._amountInput)
		{
			BX.focus(this._amountInput);
			BX.Crm.EditorTextHelper.getCurrent().selectAll(this._amountInput);
		}
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getValue = function(defaultValue)
	{
		if(!this._model)
		{
			return "";
		}

		return(
			this._model.getStringField(
				this.getAmountFieldName(),
				(defaultValue !== undefined ? defaultValue : "")
			)
		);
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-recurring-custom" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var title = this.getTitle();
		var data = this.getData();

		var selectInputName = this.getSelectFieldName();
		this._selectedValue = this.getValue(selectInputName);
		var selectItems = BX.prop.getArray(BX.prop.getObject(data, "select"), "items");
		var selectName = '';
		if(!this._selectedValue)
		{
			var firstItem =  selectItems.length > 0 ? selectItems[0] : null;
			if(firstItem)
			{
				this._selectedValue = firstItem["VALUE"];
				selectName = firstItem["NAME"];
			}
		}
		else
		{
			selectName = this._editor.findOption(
				this._selectedValue,
				selectItems
			);
		}

		var amountInputName = this.getAmountFieldName();
		var amountValue = this.getValue(amountInputName);

		// this._amountValue = null;
		this._amountInput = null;
		this._selectInput = null;
		this._selectContainer = null;
		this._innerWrapper = null;
		this._sumElement = null;

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._amountInput = BX.create("input",
				{
					attrs:
						{
							className: "crm-entity-widget-content-input",
							name: amountInputName,
							type: "text",
							value: amountValue
						}
				}
			);
			BX.bind(this._amountInput, "input", this._changeHandler);

			this._selectInput = BX.create("input",
				{
					attrs:
						{
							name: selectInputName,
							type: "hidden",
							value: this._selectedValue
						}
				}
			);

			this._selectContainer = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-select" },
					text: selectName
				}
			);
			BX.bind(this._selectContainer, "click", this._selectClickHandler);

			this._inputWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-input-wrapper" },
					children:
						[
							this._amountInput,
							this._selectInput,
							BX.create('div',
								{
									props: { className: "crm-entity-widget-content-block-select" },
									children: [ this._selectContainer ]
								}
							)
						]
				}
			);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner crm-entity-widget-content-block-colums-input" },
					children: [ this._inputWrapper ]
				}
			);
		}

		this._wrapper.appendChild(this._innerWrapper);

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.doClearLayout = function(options)
	{
		BX.PopupMenu.destroy(this._id);
		this._amountInput = null;
		this._selectInput = null;
		this._sumElement = null;
		this._selectContainer = null;
		this._inputWrapper = null;
		this._innerWrapper = null;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getAmountFieldName = function()
	{
		return this._schemeElement.getDataStringParam("amount", "");
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getSelectFieldName = function()
	{
		return BX.prop.getString(
			this._schemeElement.getDataObjectParam("select", {}),
			"name",
			""
		);
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.onSelectorClick = function (e)
	{
		this.openListMenu();
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.openListMenu = function()
	{
		if(this._isListMenuOpened)
		{
			return;
		}

		var data = this._schemeElement.getData();
		var selectList = BX.prop.getArray(BX.prop.getObject(data, "select"), "items"); //{NAME, VALUE}

		var key = 0;
		var menu = [];
		while (key < selectList.length)
		{
			menu.push(
				{
					text: selectList[key]["NAME"],
					value: selectList[key]["VALUE"],
					onclick: BX.delegate( this.onSelectItem, this)
				}
			);
			key++
		}

		BX.PopupMenu.show(
			this._id,
			this._selectContainer,
			menu,
			{
				angle: false, width: this._selectContainer.offsetWidth + 'px',
				events:
					{
						onPopupShow: BX.delegate( this.onListMenuOpen, this),
						onPopupClose: BX.delegate( this.onListMenuClose, this)
					}
			}
		);
		BX.PopupMenu.currentItem.popupWindow.setWidth(BX.pos(this._selectContainer)["width"]);
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.closeListMenu = function()
	{
		if(!this._isListMenuOpened)
		{
			return;
		}

		var menu = BX.PopupMenu.getMenuById(this._id);
		if(menu)
		{
			menu.popupWindow.close();
		}
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.onListMenuOpen = function()
	{
		BX.addClass(this._selectContainer, "active");
		this._isListMenuOpened = true;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.onListMenuClose = function()
	{
		BX.PopupMenu.destroy(this._id);

		BX.removeClass(this._selectContainer, "active");
		this._isListMenuOpened = false;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.onSelectItem = function(e, item)
	{
		this.closeListMenu();

		this._selectedValue = this._selectInput.value = item.value;
		this._selectContainer.innerHTML = BX.util.htmlspecialchars(item.text);

		this.markAsChanged(
			{
				fieldName: this.getSelectFieldName(),
				fieldValue: this._selectedValue
			}
		);
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getRuntimeValue = function()
	{
		var data = [];
		if (this._mode === BX.Crm.EntityEditorMode.edit)
		{
			if(this._amountInput)
			{
				data[this.getAmountFieldName()] = this._amountInput.value;
			}
			data[this.getSelectFieldName()] = this._selectedValue;

			return data;
		}
		return "";
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.save = function()
	{
		this._model.setField(
			this.getSelectFieldName(),
			this._selectedValue
		);

		if(this._amountInput)
		{
			this._model.setField(this.getAmountFieldName(), this._amountInput.value);
		}
	};
	BX.Crm.EntityEditorRecurringCustomRowField.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRecurringCustomRowField();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorRecurringSingleField === "undefined")
{
	BX.Crm.EntityEditorRecurringSingleField = function()
	{
		BX.Crm.EntityEditorRecurringSingleField.superclass.constructor.apply(this);
		this._dateInput = null;
	};
	BX.extend(BX.Crm.EntityEditorRecurringSingleField, BX.Crm.EntityEditorRecurringCustomRowField);

	BX.Crm.EntityEditorRecurringSingleField.prototype.layout = function(options)
	{
		if(this._hasLayout)
		{
			return;
		}

		this.ensureWrapperCreated({ classNames: [ "crm-entity-widget-content-block-field-recurring-single" ] });
		this.adjustWrapper();

		if(!this.isNeedToDisplay())
		{
			this.registerLayout(options);
			this._hasLayout = true;
			return;
		}

		var title = this.getTitle();
		var data = this.getData();

		var amountInputName = this.getAmountFieldName();
		var amountValue = this.getValue(amountInputName);
		var selectInputName = this.getSelectFieldName();
		this._selectedValue = this.getValue(selectInputName);
		var dateInputName = this.getDateFieldName();
		this._dateValue = this.getValue(dateInputName);

		var selectItems = BX.prop.getArray(BX.prop.getObject(data, "select"), "items");
		var selectName = '';
		if(!this._selectedValue)
		{
			var firstItem =  selectItems.length > 0 ? selectItems[0] : null;
			if(firstItem)
			{
				this._selectedValue = firstItem["VALUE"];
				selectName = firstItem["NAME"];
			}
		}
		else
		{
			selectName = this._editor.findOption(
				this._selectedValue,
				selectItems
			);
		}
		this._amountInput = null;
		this._selectInput = null;
		this._selectContainer = null;
		this._innerWrapper = null;
		this._sumElement = null;

		if(this._mode === BX.Crm.EntityEditorMode.edit)
		{
			this._wrapper.appendChild(this.createTitleNode(title));

			this._amountInput = BX.create("input",
				{
					attrs:
						{
							className: "crm-entity-widget-content-input",
							name: amountInputName,
							type: "text",
							value: amountValue
						}
				}
			);
			BX.bind(this._amountInput, "input", this._changeHandler);

			this._selectInput = BX.create("input",
				{
					attrs:
						{
							name: selectInputName,
							type: "hidden",
							value: this._selectedValue
						}
				}
			);

			this._selectContainer = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-select" },
					text: selectName
				}
			);

			this._dateInput = BX.create('input',{
				style:{
					display:'inline-block'
				},
				props:{
					name: dateInputName,
					className:'crm-entity-widget-content-input crm-entity-widget-content-input-date',
					value: this._dateValue
				},
				events: {
					click: function(){
						BX.calendar({node: this, field: this, bTime: false})
					},
					change: BX.delegate(
						function(e){
							this.markAsChanged();
						}, this)
				}
			});

			BX.bind(this._selectContainer, "click", this._selectClickHandler);

			this._inputWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-input-wrapper" },
					children:
						[
							this._amountInput,
							this._selectInput,
							BX.create('div',
								{
									props: { className: "crm-entity-widget-content-block-select" },
									children: [ this._selectContainer ]
								}
							),
							BX.create('span',{ text: this.getMessage('until')}),
							this._dateInput
						]
				}
			);

			this._innerWrapper = BX.create("div",
				{
					props: { className: "crm-entity-widget-content-block-inner crm-entity-widget-content-block-colums-input" },
					children: [ this._inputWrapper ]
				}
			);
		}

		this._wrapper.appendChild(this._innerWrapper);

		this.registerLayout(options);
		this._hasLayout = true;
	};
	BX.Crm.EntityEditorRecurringCustomRowField.prototype.getDateFieldName = function()
	{
		return this._schemeElement.getDataStringParam("date", "");
	};
	BX.Crm.EntityEditorRecurringSingleField.prototype.getRuntimeValue = function()
	{
		var data = [];
		if (this._mode === BX.Crm.EntityEditorMode.edit)
		{
			if(this._amountInput)
			{
				data[this.getAmountFieldName()] = this._amountInput.value;
			}
			data[this.getSelectFieldName()] = this._selectedValue;
			data[this.getDateFieldName()] = this._dateInput.value;

			return data;
		}
		return "";
	};
	BX.Crm.EntityEditorRecurringSingleField.prototype.save = function()
	{
		var data = this._schemeElement.getData();
		this._model.setField(
			BX.prop.getString(BX.prop.getObject(data, "select"), "name"),
			this._selectedValue
		);

		if(this._amountInput)
		{
			this._model.setField(BX.prop.getString(data, "amount"), this._amountInput.value);
		}
		if(this._dateInput)
		{
			this._model.setField(BX.prop.getString(data, "date"), this._dateInput.value);
		}
	};
	BX.Crm.EntityEditorRecurringSingleField.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorRecurringSingleField.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	BX.Crm.EntityEditorRecurringSingleField.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorRecurringSingleField();
		self.initialize(id, settings);
		return self;
	}
}
//region CONTROLLERS
if(typeof BX.Crm.EditorFieldSingleEditController === "undefined")
{
	BX.Crm.EditorFieldSingleEditController = function()
	{
		this._id = "";
		this._settings = null;
		this._field = null;
		this._wrapper = null;

		this._fieldWrapperHandler = BX.delegate(this.onFieldWrapperClick, this);
		this._documentHandler = BX.delegate(this.onDocumentClick, this);
		this._documentTimeoutHandle = 0;

		this._isInitialized = false;
		this._isActive = false;
	};
	BX.Crm.EditorFieldSingleEditController.prototype =
		{
			initialize: function(id, settings)
			{
				this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
				this._settings = settings ? settings : {};

				this._time = (new Date()).toString();

				this._field = BX.prop.get(this._settings, "field");
				if(!(this._field instanceof BX.Crm.EntityEditorField))
				{
					throw "EditorFieldSingleEditController: The 'field' param must be EntityEditorField.";
				}

				this._wrapper = this._field.getWrapper();
				if(!BX.type.isElementNode(this._wrapper))
				{
					throw "EditorFieldSingleEditController: Could not find the wrapper element.";
				}

				window.setTimeout(BX.delegate(this.bind, this), 100);
				this._isActive = this._isInitialized = true;
			},
			isActive: function()
			{
				return this._isActive;
			},
			setActive: function(active)
			{
				this._isActive = !!active;
			},
			setActiveDelayed: function(active, delay)
			{
				if(typeof(delay) === "undefined")
				{
					delay = 0;
				}

				window.setTimeout(
					BX.delegate(function(){ this.setActive(active); }, this),
					delay
				);
			},
			release: function()
			{
				this._isActive = this._isInitialized = false;
				this.unbind();
			},
			bind: function()
			{
				if(this._isInitialized)
				{
					BX.bind(this._wrapper, "click", this._fieldWrapperHandler);
					BX.bind(document, "click", this._documentHandler);
				}
			},
			unbind: function()
			{
				BX.unbind(this._wrapper, "click", this._fieldWrapperHandler);
				BX.unbind(document, "click", this._documentHandler);
			},
			saveControl: function()
			{
				if(!this._isActive)
				{
					return;
				}

				var editor = this._field.getEditor();
				if(editor)
				{
					editor.switchControlMode(this._field, BX.Crm.EntityEditorMode.view, BX.Crm.EntityEditorModeOptions.none);
					//Is not supported by the all controls
					//editor.saveControl(this._field);
				}

				this._isActive = false;
			},
			onFieldWrapperClick: function(e)
			{
				//The call of "preventDefault" is not allowed because of the checkbox controls
				BX.eventCancelBubble(e);
			},
			onDocumentClick: function(e)
			{
				if(this._documentTimeoutHandle > 0)
				{
					window.clearTimeout(this._documentTimeoutHandle);
					this._documentTimeoutHandle = 0;
				}

				this._documentTimeoutHandle = window.setTimeout(
					BX.delegate(this.saveControl, this),
					400
				);
			}
		};
	BX.Crm.EditorFieldSingleEditController.create = function(id, settings)
	{
		var self = new BX.Crm.EditorFieldSingleEditController();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EditorFieldViewController === "undefined")
{
	BX.Crm.EditorFieldViewController = function()
	{
		this._id = "";
		this._settings = null;
		this._field = null;
		this._wrapper = null;

		this._timeoutHandle = 0;
		this._time = 0;
		this._pos = { x: 0, y: 0 };

		this._mouseDownHandler = BX.delegate(this.onMouseDown, this);
		this._mouseUpHandler = BX.delegate(this.onMouseUp, this);

		this._isInitialized = false;
		this._isActive = false;
	};
	BX.Crm.EditorFieldViewController.prototype =
		{
			initialize: function (id, settings)
			{
				this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
				this._settings = settings ? settings : {};

				this._field = BX.prop.get(this._settings, "field");
				if (!(this._field instanceof BX.Crm.EntityEditorField)) {
					throw "EditorFieldViewController: The 'field' param must be EntityEditorField.";
				}

				this._wrapper = BX.prop.getElementNode(this._settings, "wrapper");
				if (!BX.type.isElementNode(this._wrapper)) {
					throw "EditorFieldSingleEditController: Could not find the wrapper element.";
				}

				window.setTimeout(BX.delegate(this.bind, this), 100);
				this._isActive = this._isInitialized = true;
			},
			release: function()
			{
				this._isActive = this._isInitialized = false;
				this.unbind();
			},
			bind: function()
			{
				if(this._isInitialized)
				{
					BX.bind(this._wrapper, "mousedown", this._mouseDownHandler);
					BX.bind(this._wrapper, "mouseup", this._mouseUpHandler);
				}
			},
			unbind: function()
			{
				BX.unbind(this._wrapper, "mousedown", this._mouseDownHandler);
				BX.unbind(this._wrapper, "mouseup", this._mouseUpHandler);
			},
			onMouseDown: function(e)
			{
				if(this._timeoutHandle > 0)
				{
					window.clearTimeout(this._timeoutHandle);
					this._timeoutHandle = 0;
				}

				if(!this.isHandleableEvent(e))
				{
					return;
				}

				this._time = new Date().valueOf();
				this._pos = { x: e.clientX, y: e.clientY };
			},
			onMouseUp: function(e)
			{
				if(this._timeoutHandle > 0)
				{
					window.clearTimeout(this._timeoutHandle);
					this._timeoutHandle = 0;
				}

				if(!this.isHandleableEvent(e))
				{
					return;
				}

				//console.log(new Date().valueOf() - this._time);
				//console.log(Math.abs(this._pos.x - e.clientX));
				if((new Date().valueOf() - this._time) < 400 || Math.abs(this._pos.x - e.clientX) < 2)
				{
					this._timeoutHandle = window.setTimeout(
						function()
						{
							this.switchTo(BX.getEventTarget(e));
						}.bind(this),
						0
					);
				}

				this._time = 0;
			},
			isHandleableEvent: function(e)
			{
				var node = BX.getEventTarget(e);
				if(node.tagName === "A")
				{
					return false;
				}

				if(node.getAttribute("data-editor-control-type") === "button")
				{
					return false;
				}

				return !BX.findParent(node, { tagName: "a" }, this._wrapper);
			},
			switchTo: function(targetNode)
			{
				this._field.switchToSingleEditMode(targetNode);
			}
		};
	BX.Crm.EditorFieldViewController.create = function(id, settings)
	{
		var self = new BX.Crm.EditorFieldViewController();
		self.initialize(id, settings);
		return self;
	}
}

if(typeof BX.Crm.EntityEditorController === "undefined")
{
	BX.Crm.EntityEditorController = function()
	{
		this._id = "";
		this._settings = {};

		this._editor = null;
		this._model = null;
		this._config = null;

		this._isChanged = false;
	};
	BX.Crm.EntityEditorController.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._editor = BX.prop.get(this._settings, "editor", null);
			this._model = BX.prop.get(this._settings, "model", null);
			this._config = BX.prop.getObject(this._settings, "config", {});

			this.doInitialize();
		},
		doInitialize: function()
		{
		},
		getConfig: function()
		{
			return this._config;
		},
		getConfigStringParam: function(name, defaultValue)
		{
			return BX.prop.getString(this._config, name, defaultValue);
		},
		isChanged: function()
		{
			return this._isChanged;
		},
		markAsChanged: function()
		{
			if(this._isChanged)
			{
				return;
			}

			this._isChanged = true;
			if(this._editor)
			{
				this._editor.processControllerChange(this);
			}
		},
		rollback: function()
		{
		},
		innerCancel: function()
		{
		},
		onBeforeSubmit: function()
		{
		},
		onAfterSave: function()
		{
			if(this._isChanged)
			{
				this._isChanged = false;
			}
		},
		onBeforesSaveControl: function(data)
		{
			return data;
		}
	};
}

if(typeof BX.Crm.EntityEditorProductRowProxy === "undefined")
{
	BX.Crm.EntityEditorProductRowProxy = function()
	{
		BX.Crm.EntityEditorProductRowProxy.superclass.constructor.apply(this);
		this._externalEditor = null;
		this._editorCreateHandler = null;
		this._sumTotalChangeHandler = null;
		this._productAddHandler = null;
		this._productChangeHandler = null;
		this._productRemoveHandler = null;
		this._editorModeChangeHandler = BX.delegate(this.onEditorModeChange, this);
		this._editorControlChangeHandler = BX.delegate(this.onEditorControlChange, this);

		this._currencyId = "";
	};
	BX.extend(BX.Crm.EntityEditorProductRowProxy, BX.Crm.EntityEditorController);
	BX.Crm.EntityEditorProductRowProxy.prototype.doInitialize = function()
	{
		BX.Crm.EntityEditorProductRowProxy.superclass.doInitialize.apply(this);

		this._sumTotalChangeHandler = BX.delegate(this.onSumTotalChange, this);
		this._productAddHandler = BX.delegate(this.onProductAdd, this);
		this._productChangeHandler = BX.delegate(this.onProductChange, this);
		this._productRemoveHandler = BX.delegate(this.onProductRemove, this);

		var externalEditor = typeof BX.CrmProductEditor !== "undefined"
			? BX.CrmProductEditor.get(this.getExternalEditorId()) : null;
		if(externalEditor)
		{
			this.setExternalEditor(externalEditor);
		}
		else
		{
			this._editorCreateHandler = BX.delegate(this.onEditorCreate, this);
			BX.addCustomEvent(window, "ProductRowEditorCreated", this._editorCreateHandler);
		}

		this._editor.addModeChangeListener(this._editorModeChangeHandler);

		BX.addCustomEvent(window, "onEntityDetailsTabShow", BX.delegate(this.onTabShow, this));

	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onTabShow = function(tab)
	{
		if(tab.getId() !== "tab_products")
		{
			return;
		}

		if(this._externalEditor && !this._externalEditor.hasLayout())
		{
			this._externalEditor.layout();
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.getExternalEditorId = function()
	{
		return this.getConfigStringParam("editorId", "");
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.setExternalEditor = function(editor)
	{
		if(this._externalEditor === editor)
		{
			return;
		}

		if(this._externalEditor)
		{
			this._externalEditor.setForm(null);
			BX.removeCustomEvent(this._externalEditor, "sumTotalChange", this._sumTotalChangeHandler);
			BX.removeCustomEvent(this._externalEditor, "productAdd", this._productAddHandler);
			BX.removeCustomEvent(this._externalEditor, "productChange", this._productChangeHandler);
			BX.removeCustomEvent(this._externalEditor, "productRemove", this._productRemoveHandler);
		}

		this._externalEditor = editor;

		if(this._externalEditor)
		{
			this._externalEditor.setForm(this._editor.getFormElement());
			BX.addCustomEvent(this._externalEditor, "sumTotalChange", this._sumTotalChangeHandler);
			BX.addCustomEvent(this._externalEditor, "productAdd", this._productAddHandler);
			BX.addCustomEvent(this._externalEditor, "productChange", this._productChangeHandler);
			BX.addCustomEvent(this._externalEditor, "productRemove", this._productRemoveHandler);

			this.adjustLocks();
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.adjustLocks = function()
	{
		if(!this._externalEditor)
		{
			return;
		}

		if(this._externalEditor.getProductCount() > 0)
		{
			this._model.lockField("OPPORTUNITY");
		}
		else
		{
			this._model.unlockField("OPPORTUNITY");
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.adjustTotals = function(totals)
	{
		this._model.setField(
			"FORMATTED_OPPORTUNITY",
			totals["FORMATTED_SUM"],
			{ enableNotification: false }
		);

		this._model.setField(
			"FORMATTED_OPPORTUNITY_WITH_CURRENCY",
			totals["FORMATTED_SUM_WITH_CURRENCY"],
			{ enableNotification: false }
		);

		this._model.setField(
			"OPPORTUNITY",
			totals["SUM"],
			{ enableNotification: true }
		);
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onEditorCreate = function(sender)
	{
		if(sender.getId() !== this.getExternalEditorId())
		{
			return;
		}

		BX.removeCustomEvent(window, "ProductRowEditorCreated", this._editorCreateHandler);
		delete(this._editorCreateHandler);
		this.setExternalEditor(sender);
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onEditorModeChange = function(sender)
	{
		if(this._editor.getMode() === BX.Crm.EntityEditorMode.edit)
		{
			this._editor.addControlChangeListener(this._editorControlChangeHandler);
		}
		else
		{
			this._editor.removeControlChangeListener(this._editorControlChangeHandler);
		}

		this._isChanged = false;
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onEditorControlChange = function(sender, params)
	{
		if(!this._externalEditor)
		{
			return;
		}

		var name = BX.prop.getString(params, "fieldName", "");
		if(name !== "CURRENCY_ID")
		{
			return;
		}

		var currencyId = BX.prop.getString(params, "fieldValue", "");
		if(currencyId !== "")
		{
			this._currencyId = currencyId;
			this._externalEditor.setCurrencyId(this._currencyId);
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onProductAdd = function(product)
	{
		this.adjustLocks();
		this.markAsChanged();
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onProductChange = function(product)
	{
		this.adjustLocks();
		this.markAsChanged();
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onProductRemove = function(product)
	{
		this.adjustLocks();
		this.markAsChanged();
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onSumTotalChange = function(totalSum, allTotals)
	{
		this.adjustTotals(
			{
				"FORMATTED_SUM_WITH_CURRENCY": allTotals["TOTAL_SUM_FORMATTED"],
				"FORMATTED_SUM": allTotals["TOTAL_SUM_FORMATTED_SHORT"],
				"SUM": allTotals["TOTAL_SUM"]
			}
		);
		this.markAsChanged();
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.rollback = function()
	{
		var currencyId = this._model.getField("CURRENCY_ID", "");
		if(this._currencyId !== currencyId)
		{
			this._currencyId = currencyId;
			if(this._externalEditor)
			{
				this._externalEditor.setCurrencyId(this._currencyId);
			}
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onBeforeSubmit = function()
	{
		if(this._externalEditor)
		{
			this._externalEditor.handleFormSubmit();
		}
	};
	BX.Crm.EntityEditorProductRowProxy.prototype.onBeforesSaveControl = function(data)
	{
		if(this._externalEditor)
		{
			data = this._externalEditor.handleControlSave(data);
		}
		return data;
	};
	BX.Crm.EntityEditorProductRowProxy.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorProductRowProxy();
		self.initialize(id, settings);
		return self;
	}
}

//endregion

//region TOOL PANEL
if(typeof BX.Crm.EntityEditorToolPanel === "undefined")
{
	BX.Crm.EntityEditorToolPanel = function()
	{
		this._id = "";
		this._settings = {};
		this._container = null;
		this._wrapper = null;
		this._editor = null;
		this._isVisible = false;
		this._isLocked = false;
		this._hasLayout = false;
		this._keyPressHandler = BX.delegate(this.onKeyPress, this);
	};

	BX.Crm.EntityEditorToolPanel.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};

			this._container = BX.prop.getElementNode(this._settings, "container", null);
			this._editor = BX.prop.get(this._settings, "editor", null);
			this._isVisible = BX.prop.getBoolean(this._settings, "visible", false);
		},
		getId: function()
		{
			return this._id;
		},
		getContainer: function()
		{
			return this._container;
		},
		setContainer: function (container)
		{
			this._container = container;
		},
		isVisible: function()
		{
			return this._isVisible;
		},
		setVisible: function(visible)
		{
			visible = !!visible;
			if(this._isVisible === visible)
			{
				return;
			}

			this._isVisible = visible;
			this.adjustLayout();
		},
		isLocked: function()
		{
			return this._isLocked;
		},
		setLocked: function(locked)
		{
			locked = !!locked;
			if(this._isLocked === locked)
			{
				return;
			}

			this._isLocked = locked;

			if(locked)
			{
				BX.addClass(this._editButton, "ui-btn-clock");
			}
			else
			{
				BX.removeClass(this._editButton, "ui-btn-clock");
			}
		},
		disableSaveButton: function()
		{
			if(!this._editButton)
			{
				return;
			}

			this._editButton.disabled = true;
			BX.addClass(this._editButton, 'ui-btn-disabled');
		},
		enableSaveButton: function()
		{
			if(!this._editButton)
			{
				return;
			}

			this._editButton.disabled = false;
			BX.removeClass(this._editButton, 'ui-btn-disabled');
		},
		isSaveButtonEnabled: function()
		{
			return this._editButton && !this._editButton.disabled;
		},
		layout: function()
		{
			this._editButton = BX.create("button",
				{
					props: { className: "ui-btn ui-btn-success", title: "[Ctrl+Enter]" },
					text: BX.message("CRM_EDITOR_SAVE"),
					events: { click: BX.delegate(this.onSaveButtonClick, this) }
				}
			);

			this._cancelButton = BX.create("a",
				{
					props:  { className: "ui-btn ui-btn-link", title: "[Esc]" },
					text: BX.message("CRM_EDITOR_CANCEL"),
					attrs:  { href: "#" },
					events: { click: BX.delegate(this.onCancelButtonClick, this) }
				}
			);

			this._errorContainer = BX.create("DIV", { props: { className: "crm-entity-section-control-error-block" } });
			this._errorContainer.style.maxHeight = "0";

			this._wrapper = BX.create("DIV",
				{
					props: { className: "crm-entity-wrap" },
					children :
						[
							BX.create("DIV",
								{
									props: { className: "crm-entity-section crm-entity-section-control" },
									children : [ this._editButton, this._cancelButton, this._errorContainer ]
								}
							)
						]
				}
			);

			this._container.appendChild(this._wrapper);

			this._hasLayout = true;
			this.adjustLayout();
		},
		adjustLayout: function()
		{
			if(!this._hasLayout)
			{
				return;
			}

			if(!this._isVisible)
			{
				BX.removeClass(this._wrapper, "crm-section-control-active");
				BX.unbind(document, "keydown", this._keyPressHandler);
			}
			else
			{
				BX.addClass(this._wrapper, "crm-section-control-active");
				BX.bind(document, "keydown", this._keyPressHandler);
			}
		},
		getPosition: function()
		{
			return this._hasLayout ? BX.pos(this._wrapper) : null;
		}
	};
	BX.Crm.EntityEditorToolPanel.prototype.onSaveButtonClick = function(e)
	{
		if(!this._isLocked)
		{
			this._editor.saveChanged();
		}
	};
	BX.Crm.EntityEditorToolPanel.prototype.onCancelButtonClick = function(e)
	{
		if(!this._isLocked)
		{
			this._editor.cancel();
		}
		return BX.eventReturnFalse(e);
	};
	BX.Crm.EntityEditorToolPanel.prototype.onKeyPress = function(e)
	{
		if(!this._isVisible)
		{
			return;
		}

		//Emulation of dialog modal mode
		if(BX.Crm.EditorAuxiliaryDialog.hasOpenItems())
		{
			return;
		}

		if(BX.type.isFunction(BX.PopupWindowManager.isAnyPopupShown) && BX.PopupWindowManager.isAnyPopupShown())
		{
			return;
		}

		e = e || window.event;
		if (e.keyCode == 27)
		{
			//Esc pressed
			this._editor.cancel();
			BX.eventCancelBubble(e);
		}
		else if (e.keyCode == 13 && e.ctrlKey)
		{
			//Ctrl+Enter pressed
			this._editor.saveChanged();
			BX.eventCancelBubble(e);
		}
	};
	BX.Crm.EntityEditorToolPanel.prototype.addError = function(error)
	{
		this._errorContainer.appendChild(
			BX.create(
				"DIV",
				{
					attrs: { className: "crm-entity-section-control-error-text" },
					html: error
				}
			)
		);
		this._errorContainer.style.maxHeight = "";
	};
	BX.Crm.EntityEditorToolPanel.prototype.clearErrors = function()
	{
		this._errorContainer.innerHTML = "";
		this._errorContainer.style.maxHeight = "0px";
	};
	BX.Crm.EntityEditorToolPanel.prototype.getMessage = function(name)
	{
		var m = BX.Crm.EntityEditorToolPanel.messages;
		return m.hasOwnProperty(name) ? m[name] : name;
	};
	if(typeof(BX.Crm.EntityEditorToolPanel.messages) === "undefined")
	{
		BX.Crm.EntityEditorToolPanel.messages = {};
	}
	BX.Crm.EntityEditorToolPanel.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorToolPanel();
		self.initialize(id, settings);
		return self;
	};
}
//endregion

//region FIELD SELECTOR
if(typeof(BX.Crm.EntityEditorFieldSelector) === "undefined")
{
	BX.Crm.EntityEditorFieldSelector = function()
	{
		this._id = "";
		this._settings = {};
		this._scheme = null;
		this._excludedNames = null;
		this._closingNotifier = null;
		this._contentWrapper = null;
		this._popup = null;
	};

	BX.Crm.EntityEditorFieldSelector.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = id;
			this._settings = settings ? settings : {};
			this._scheme = BX.prop.get(this._settings, "scheme", null);
			if(!this._scheme)
			{
				throw "BX.Crm.EntityEditorFieldSelector. Parameter 'scheme' is not found.";
			}
			this._excludedNames = BX.prop.getArray(this._settings, "excludedNames", []);
			this._closingNotifier = BX.CrmNotifier.create(this);
		},
		getMessage: function(name)
		{
			return BX.prop.getString(BX.Crm.EntityEditorFieldSelector.messages, name, name);
		},
		isSchemeElementEnabled: function(schemeElement)
		{
			var name = schemeElement.getName();
			for(var i = 0, length = this._excludedNames.length; i < length; i++)
			{
				if(this._excludedNames[i] === name)
				{
					return false;
				}
			}
			return true;
		},
		addClosingListener: function(listener)
		{
			this._closingNotifier.addListener(listener);
		},
		removeClosingListener: function(listener)
		{
			this._closingNotifier.removeListener(listener);
		},
		isOpened: function()
		{
			return this._popup && this._popup.isShown();
		},
		open: function()
		{
			if(this.isOpened())
			{
				return;
			}

			this._popup = new BX.PopupWindow(
				this._id,
				null,
				{
					autoHide: false,
					draggable: true,
					bindOptions: { forceBindPosition: false },
					closeByEsc: true,
					closeIcon: {},
					zIndex: 1,
					titleBar: BX.prop.getString(this._settings, "title", ""),
					content: this.prepareContent(),
					lightShadow : true,
					contentNoPaddings: true,
					buttons: [
						new BX.PopupWindowButton(
							{
								text : this.getMessage("select"),
								className : "ui-btn ui-btn-success",
								events:
								{
									click: BX.delegate(this.onAcceptButtonClick, this)
								}
							}
						),
						new BX.PopupWindowButtonLink(
							{
								text : this.getMessage("cancel"),
								className : "ui-btn ui-btn-link",
								events:
								{
									click: BX.delegate(this.onCancelButtonClick, this)
								}
							}
						)
					]
				}
			);

			this._popup.show();
		},
		close: function()
		{
			if(!(this._popup && this._popup.isShown()))
			{
				return;
			}

			this._popup.close();
		},
		prepareContent: function()
		{
			this._contentWrapper = BX.create("div", { props: { className: "crm-entity-field-selector-window" } });
			var container = BX.create("div", { props: { className: "crm-entity-field-selector-window-list" } });
			this._contentWrapper.appendChild(container);

			var elements = this._scheme.getElements();
			for(var i = 0; i < elements.length; i++)
			{
				var element = elements[i];
				if(!this.isSchemeElementEnabled(element))
				{
					continue;
				}

				var effectiveElements = [];
				var elementChildren = element.getElements();
				var childElement;
				for(var j = 0; j < elementChildren.length; j++)
				{
					childElement = elementChildren[j];
					if(childElement.isTransferable() && childElement.getName() !== "")
					{
						effectiveElements.push(childElement);
					}
				}

				if(effectiveElements.length === 0)
				{
					continue;
				}

				var parentName = element.getName();
				var parentTitle = element.getTitle();

				container.appendChild(
					BX.create(
						"div",
						{
							attrs: { className: "crm-entity-field-selector-window-list-caption" },
							text: parentTitle
						}
					)
				);

				for(var k = 0; k < effectiveElements.length; k++)
				{
					childElement = effectiveElements[k];

					var childElementName = childElement.getName();
					var childElementTitle = childElement.getTitle();

					var itemId = parentName + "\\" + childElementName;
					var itemWrapper = BX.create(
						"div",
						{
							attrs: { className: "crm-entity-field-selector-window-list-item" }
						}
					);
					container.appendChild(itemWrapper);

					itemWrapper.appendChild(
						BX.create(
							"input",
							{
								attrs:
								{
									id: itemId,
									type: "checkbox",
									className: "crm-entity-field-selector-window-list-checkbox"
								}
							}
						)
					);

					itemWrapper.appendChild(
						BX.create(
							"label",
							{
								attrs:
								{
									for: itemId,
									className: "crm-entity-field-selector-window-list-label"
								},
								text: childElementTitle
							}
						)
					);
				}
			}
			return this._contentWrapper;
		},
		getSelectedItems: function()
		{
			if(!this._contentWrapper)
			{
				return [];
			}

			var results = [];
			var checkBoxes = this._contentWrapper.querySelectorAll("input.crm-entity-field-selector-window-list-checkbox");
			for(var i = 0, length = checkBoxes.length; i < length; i++)
			{
				var checkBox = checkBoxes[i];
				if(checkBox.checked)
				{
					var parts = checkBox.id.split("\\");
					if(parts.length >= 2)
					{
						results.push({ sectionName: parts[0], fieldName: parts[1] });
					}
				}
			}

			return results;
		},
		onAcceptButtonClick: function()
		{
			this._closingNotifier.notify([ { isCanceled: false, items: this.getSelectedItems() } ]);
			this.close();
		},
		onCancelButtonClick: function()
		{
			this._closingNotifier.notify([{ isCanceled: true }]);
			this.close();
		},
		onPopupClose: function()
		{
			if(this._popup)
			{
				this._contentWrapper = null;
				this._popup.destroy();
			}
		},
		onPopupDestroy: function()
		{
			if(!this._popup)
			{
				return;
			}

			this._contentWrapper = null;
			this._popup = null;
		}
	};

	if(typeof(BX.Crm.EntityEditorFieldSelector.messages) === "undefined")
	{
		BX.Crm.EntityEditorFieldSelector.messages = {};
	}

	BX.Crm.EntityEditorFieldSelector.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorFieldSelector(id, settings);
		self.initialize(id, settings);
		return self;
	}
}
//endregion

//region USER SELECTOR
if(typeof(BX.Crm.EntityEditorUserSelector) === "undefined")
{
	BX.Crm.EntityEditorUserSelector = function()
	{
		this._id = "";
		this._settings = {};
	};

	BX.Crm.EntityEditorUserSelector.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = id;
			this._settings = settings ? settings : {};
			this._isInitialized = false;
		},
		getId: function()
		{
			return this._id;
		},
		open: function(anchor)
		{
			if(this._mainWindow && this._mainWindow === BX.SocNetLogDestination.containerWindow)
			{
				return;
			}

			if(!this._isInitialized)
			{
				BX.SocNetLogDestination.init(
					{
						name: this._id,
						extranetUser:  false,
						userSearchArea: "I",
						bindMainPopup: { node: anchor, offsetTop: "5px", offsetLeft: "15px" },
						callback: { select : BX.delegate(this.onSelect, this) },
						showSearchInput: true,
						departmentSelectDisable: true,
						items:
						{
							users: BX.Crm.EntityEditorUserSelector.users,
							groups: {},
							sonetgroups: {},
							department: BX.Crm.EntityEditorUserSelector.department,
							departmentRelation : BX.SocNetLogDestination.buildDepartmentRelation(BX.Crm.EntityEditorUserSelector.department)
						},
						itemsLast: BX.Crm.EntityEditorUserSelector.last,
						itemsSelected: {},
						isCrmFeed: false,
						useClientDatabase: false,
						destSort: {},
						allowAddUser: false,
						allowSearchCrmEmailUsers: false,
						allowUserSearch: true
					}
				);
				this._isInitialized = true;
			}

			BX.SocNetLogDestination.openDialog(this._id, { bindNode: anchor });
			this._mainWindow = BX.SocNetLogDestination.containerWindow;
		},
		close: function()
		{
			if(this._mainWindow && this._mainWindow === BX.SocNetLogDestination.containerWindow)
			{
				BX.SocNetLogDestination.closeDialog();
				this._mainWindow = null;
				this._isInitialized = false;
			}

		},
		onSelect: function(item, type, search, bUndeleted)
		{
			if(type !== "users")
			{
				return;
			}

			var callback = BX.prop.getFunction(this._settings, "callback", null);
			if(callback)
			{
				callback(this, item);
			}
		}
	};

	BX.Crm.EntityEditorUserSelector.items = {};
	BX.Crm.EntityEditorUserSelector.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorUserSelector(id, settings);
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	}
}
//endregion

//region CRM SELECTOR
if(typeof(BX.Crm.EntityEditorCrmSelector) === "undefined")
{
	BX.Crm.EntityEditorCrmSelector = function()
	{
		this._id = "";
		this._settings = {};
		this._entityTypeIds = [];
		this._supportedItemTypes = {};
	};

	BX.Crm.EntityEditorCrmSelector.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = id;
			this._settings = settings ? settings : {};
			this._isInitialized = false;

			this._entityTypeIds = BX.prop.getArray(this._settings, "entityTypeIds", []);
			this._supportedItemTypes = [];
			for(var i = 0, l = this._entityTypeIds.length; i < l; i++)
			{
				var entityTypeId = this._entityTypeIds[i];
				if(entityTypeId === BX.CrmEntityType.enumeration.contact)
				{
					this._supportedItemTypes.push({ name: "contacts", altName: "CRMCONTACT" });
				}
				else if(entityTypeId === BX.CrmEntityType.enumeration.company)
				{
					this._supportedItemTypes.push({ name: "companies", altName: "CRMCOMPANY" });
				}
				else if(entityTypeId === BX.CrmEntityType.enumeration.lead)
				{
					this._supportedItemTypes.push({ name: "leads", altName: "CRMLEAD" });
				}
				else if(entityTypeId === BX.CrmEntityType.enumeration.deal)
				{
					this._supportedItemTypes.push({ name: "deals", altName: "CRMDEAL" });
				}
			}
		},
		getId: function()
		{
			return this._id;
		},
		isOpened: function()
		{
			return BX.SocNetLogDestination.isOpenDialog();
		},
		open: function(anchor)
		{
			if(this.isOpened())
			{
				return;
			}

			if(this._mainWindow && this._mainWindow === BX.SocNetLogDestination.containerWindow)
			{
				return;
			}

			if(!this._isInitialized)
			{
				var items = {};
				var itemsLast = {};
				var allowedCrmTypes = [];

				for(var i = 0, l = this._supportedItemTypes.length; i < l; i++)
				{
					var typeInfo = this._supportedItemTypes[i];
					items[typeInfo.name] = BX.Crm.EntityEditorCrmSelector[typeInfo.name];
					itemsLast[typeInfo.name] = BX.Crm.EntityEditorCrmSelector[typeInfo.name + "Last"];
					allowedCrmTypes.push(typeInfo.altName);
				}

				itemsLast["crm"] = {};

				var initParams =
				{
					name: this._id,
					extranetUser:  false,
					bindMainPopup: { node: anchor, offsetTop: "20px", offsetLeft: "20px" },
					callback: { select : BX.delegate(this.onSelect, this) },
					showSearchInput: true,
					departmentSelectDisable: true,
					items: items,
					itemsLast: itemsLast,
					itemsSelected: {},
					useClientDatabase: false,
					destSort: {},
					allowAddUser: false,
					allowSearchCrmEmailUsers: false,
					allowUserSearch: false,
					isCrmFeed: true,
					CrmTypes: allowedCrmTypes
				};

				if(BX.prop.getBoolean(this._settings, "enableMyCompanyOnly", false))
				{
					initParams["enableMyCrmCompanyOnly"] = true;
				}

				BX.SocNetLogDestination.init(initParams);
				this._isInitialized = true;
			}

			BX.SocNetLogDestination.openDialog(this._id, { bindNode: anchor });
			this._mainWindow = BX.SocNetLogDestination.containerWindow;
		},
		close: function()
		{
			if(!this.isOpened())
			{
				return;
			}

			if(this._mainWindow && this._mainWindow === BX.SocNetLogDestination.containerWindow)
			{
				BX.SocNetLogDestination.closeDialog();
				this._mainWindow = null;
			}
		},
		onSelect: function(item, type, search, bUndeleted, name, state)
		{
			if(state !== "select")
			{
				return;
			}

			var isSupported = false;
			for(var i = 0, l = this._supportedItemTypes.length; i < l; i++)
			{
				var typeInfo = this._supportedItemTypes[i];
				if(typeInfo.name === type)
				{
					isSupported = true;
					break;
				}
			}

			if(!isSupported)
			{
				return;
			}

			var callback = BX.prop.getFunction(this._settings, "callback", null);
			if(callback)
			{
				callback(this, item);
			}
		}
	};

	if(typeof(BX.Crm.EntityEditorCrmSelector.contacts) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.contacts = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.contactsLast) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.contactsLast = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.companies) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.companies = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.companiesLast) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.companiesLast = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.leads) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.leads = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.leadsLast) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.leadsLast = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.deals) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.deals = {};
	}

	if(typeof(BX.Crm.EntityEditorCrmSelector.dealsLast) === "undefined")
	{
		BX.Crm.EntityEditorCrmSelector.dealsLast = {};
	}

	BX.Crm.EntityEditorCrmSelector.items = {};
	BX.Crm.EntityEditorCrmSelector.create = function(id, settings)
	{
		var self = new BX.Crm.EntityEditorCrmSelector(id, settings);
		self.initialize(id, settings);
		this.items[self.getId()] = self;
		return self;
	}
}
//endregion

//region BIZPROC
if(typeof BX.Crm.EntityBizprocManager === "undefined")
{
	BX.Crm.EntityBizprocManager = function()
	{
		this._id = "";
		this._settings = {};
		this._moduleId = "";
		this._entity = "";
		this._documentType = "";
		this._autoExecuteType = 0;

		this._containerId = null;
		this._fieldName = null;

		this._validParameters = null;
		this._formInput = null;

		this._editor = null;
		this._starter = null;
	};
	BX.Crm.EntityBizprocManager.prototype =
	{
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._hasParameters = BX.prop.getBoolean(this._settings, "hasParameters", false);
			this._moduleId = BX.prop.getString(this._settings, "moduleId", "");
			this._entity = BX.prop.getString(this._settings, "entity", "");
			this._documentType = BX.prop.getString(this._settings, "documentType", "");
			this._autoExecuteType = BX.prop.getInteger(this._settings, "autoExecuteType", 0);
			this._containerId = BX.prop.getString(this._settings, "containerId", '');
			this._fieldName = BX.prop.getString(this._settings, "fieldName", '');
			this._contentNode = this._containerId ? BX(this._containerId) : null;

			if (this._hasParameters)
			{
				this._starter = new BX.Bizproc.Starter({
					moduleId: this._moduleId,
					entity: this._entity,
					documentType: this._documentType
				});
			}
		},
		/**
		 *
		 * @param {BX.Crm.EntityValidationResult} result
		 * @returns {BX.Promise}
		 */
		onBeforeSave: function(result)
		{
			var promise = new BX.Promise();

			var deferredWaiter = function()
			{
				window.setTimeout(
					BX.delegate(
						function()
						{
							promise.fulfill();
						},
						this
					),
					0
				);
			};

			if(result.getStatus() && this._hasParameters && this._validParameters === null)
			{
				try
				{
					this._starter.showAutoStartParametersPopup(
						this._autoExecuteType,
						{
							contentNode: this._contentNode,
							callback: this.onFillParameters.bind(this, promise)
						}
					);
					this._contentNode = null;
				}
				catch (e)
				{
					if ('console' in window)
					{
						window.console.log('Error occurred when bizproc popup is going to show', e);
					}
					deferredWaiter();
				}
			}
			else
			{
				deferredWaiter();
			}

			return promise;
		},

		onAfterSave: function()
		{
			this._validParameters = null;
		},

		onFillParameters: function(promise, data)
		{
			this._validParameters = data.parameters;

			if (!this._formInput && this._editor)
			{
				var form = this._editor.getFormElement();
				this._formInput = BX.create("input", { props: { type: "hidden", name: this._fieldName } });
				form.appendChild(this._formInput);
			}

			if (this._formInput)
			{
				this._formInput.value = this._validParameters;
			}

			promise.fulfill();
		}
	};
	if(typeof(BX.Crm.EntityBizprocManager.messages) === "undefined")
	{
		BX.Crm.EntityBizprocManager.messages = {};
	}
	BX.Crm.EntityBizprocManager.items = {};
	BX.Crm.EntityBizprocManager.create = function(id, settings)
	{
		var self = new BX.Crm.EntityBizprocManager();
		self.initialize(id, settings);
		this.items[id] = self;
		return self;
	};
}

if(typeof BX.Crm.EntityRestPlacementManager === "undefined")
{
	BX.Crm.EntityRestPlacementManager = function()
	{
		this._id = "";
		this._entity = "";

		this._editor = null;
	};

	BX.Crm.EntityRestPlacementManager.items = {};
	BX.Crm.EntityRestPlacementManager.prototype = {
		initialize: function(id, settings)
		{
			this._id = BX.type.isNotEmptyString(id) ? id : BX.util.getRandomString(4);
			this._settings = settings ? settings : {};
			this._entity = this.getSetting("entity");

			var bottomButton = BX(this.getSetting("bottom_button_id"));
			if(bottomButton)
			{
				BX.bind(bottomButton, 'click', BX.proxy(this.openMarketplace, this));
			}

			BX.defer(this.initializeInterface, this)();
		},

		openMarketplace: function()
		{
			BX.rest.Marketplace.open({
				PLACEMENT: this.getSetting("placement")
			});
		},

		getSetting: function(name)
		{
			return BX.prop.getString(this._settings, name, '')
		},

		initializeInterface: function()
		{
			if(!!BX.rest && !!BX.rest.AppLayout)
			{
				var PlacementInterface = BX.rest.AppLayout.initializePlacement('CRM_' + this._entity + '_DETAIL_TAB');

				var entityTypeId = this._editor._entityTypeId, entityId = this._editor._entityId;

				PlacementInterface.prototype.resizeWindow = function(params, cb)
				{
					var f = BX(this.params.layoutName);
					params.height = parseInt(params.height);

					if(!!params.height)
					{
						f.style.height = params.height + 'px';
					}

					var p = BX.pos(f);
					cb({width: p.width, height: p.height});
				};

				PlacementInterface.prototype.reloadData = function(params, cb)
				{
					BX.Crm.EntityEvent.fireUpdate(entityTypeId, entityId, '');
					cb();
				};
			}
		}
	};

	BX.Crm.EntityRestPlacementManager.create = function(id, settings)
	{
		var self = new BX.Crm.EntityRestPlacementManager();
		self.initialize(id, settings);
		this.items[id] = self;
		return self;
	};
}

//endregion

/* End */
;
; /* Start:"a:4:{s:4:"full";s:97:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/script.min.js?172873318163299";s:6:"source";s:77:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/script.js";s:3:"min";s:81:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/script.min.js";s:3:"map";s:81:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/script.map.js";}"*/
BX.namespace("BX.Main");if(typeof BX.Main.interfaceButtons==="undefined"){BX.Main.interfaceButtons=function(t,e){this.classItem="main-buttons-item";this.classItemSublink="main-buttons-item-sublink";this.classItemText="main-buttons-item-text";this.classItemCounter="main-buttons-item-counter";this.classItemIcon="main-buttons-item-icon";this.classItemMore="main-buttons-item-more";this.classOnDrag="main-buttons-drag";this.classDropzone="main-buttons-submenu-dropzone";this.classSeparator="main-buttons-submenu-delimiter";this.classHiddenLabel="main-buttons-hidden-label";this.classSubmenuItem="main-buttons-submenu-item";this.classItemDisabled="main-buttons-disabled";this.classItemOver="--over";this.classMenuShown="--menu-shown";this.classItemActive="main-buttons-item-active";this.classSubmenu="main-buttons-submenu";this.classSecret="secret";this.classItemLocked="--locked";this.classExtraItemLink="";this.classExtraItemText="";this.classExtraItemIcon="";this.classExtraItemCounter="";this.submenuIdPrefix="main_buttons_popup_";this.childMenuIdPrefix="main_buttons_popup_child_";this.submenuWindowIdPrefix="menu-popup-";this.classSettingMenuItem="main-buttons-submenu-setting";this.classEditState="main-buttons-edit";this.classEditItemButton="main-buttons-item-edit-button";this.classDragItemButton="main-buttons-item-drag-button";this.classSettingsApplyButton="main-buttons-submenu-settings-apply";this.classSettingsResetButton="main-buttons-submenu-settings-reset";this.classSetHome="main-buttons-set-home";this.classSetHide="main-buttons-set-hide";this.classManage="main-buttons-manage";this.classContainer="main-buttons";this.classSubmenuNoHiddenItem="main-buttons-submenu-item-no-hidden";this.classDefaultSubmenuItem="menu-popup-item";this.classDefaultSubmenuDelimimeter="popup-window-delimiter-section";this.classInner="main-buttons-inner-container";this.listContainer=null;this.dragItem=null;this.overItem=null;this.moreButton=null;this.messages=null;this.licenseParams=null;this.ajaxSettings=null;this.enableItemMouseEnter=true;this.menuShowTimeout=null;this.isMoreMenuShown=false;this.onDragStarted=false;this.isSettingsEnabled=true;this.containerId=e.containerId;this.isEditEnabledState=false;this.theme=BX.Type.isStringFilled(e.theme)?e.theme:"default";this.maxItemLength=BX.Type.isNumber(e.maxItemLength)&&e.maxItemLength>6?e.maxItemLength:20;this.tmp={};this.itemData=new WeakMap;this.handleMoreMenuItemMouseEnter=this.handleMoreMenuItemMouseEnter.bind(this);this.init(t,e);return{addMenuItem:this.addMenuItem.bind(this),deleteMenuItem:this.deleteMenuItem.bind(this),updateMenuItemText:this.updateMenuItemText.bind(this),getItemById:this.getItemById.bind(this),getAllItems:this.getAllItems.bind(this),getHiddenItems:this.getHiddenItems.bind(this),getVisibleItems:this.getVisibleItems.bind(this),getDisabledItems:this.getDisabledItems.bind(this),getMoreButton:this.getMoreButton.bind(this),adjustMoreButtonPosition:this.adjustMoreButtonPosition.bind(this),getItemData:this.getItemData.bind(this),getSubmenu:this.getMoreMenu.bind(this),showSubmenu:this.showMoreMenu.bind(this),closeSubmenu:this.closeMoreMenu.bind(this),refreshSubmenu:this.refreshMoreMenu.bind(this),getMoreMenu:this.getMoreMenu.bind(this),showMoreMenu:this.showMoreMenu.bind(this),closeMoreMenu:this.closeMoreMenu.bind(this),refreshMoreMenu:this.refreshMoreMenu.bind(this),getCurrentSettings:this.getCurrentSettings.bind(this),saveSettings:this.saveSettings.bind(this),updateCounter:this.updateCounter.bind(this),getActive:this.getActive.bind(this),isDisabled:this.isDisabled.bind(this),isVisibleItem:this.isVisibleItem.bind(this),isEditEnabled:this.isEditEnabled.bind(this),isActiveInMoreMenu:this.isActiveInMoreMenu.bind(this),isSettingsEnabled:this.isSettingsEnabled,classes:{item:this.classItem,itemText:this.classItemText,itemCounter:this.classItemCounter,itemIcon:this.classItemIcon,itemDisabled:this.classItemDisabled,itemOver:this.classItemOver,itemActive:this.classItemActive,itemLocked:this.classItemLocked,menuShown:this.classMenuShown,submenu:this.classSubmenu,submenuItem:this.classSubmenuItem,containerOnDrag:this.classOnDrag,classSettingMenuItem:this.classSettingMenuItem},itemsContainer:this.listContainer,itemsContainerId:this.listContainer.id}};BX.Main.interfaceButtons.prototype={init:function(t,e){this.listContainer=BX(this.getId());if(!BX.Type.isPlainObject(e)){throw"BX.MainButtons: params is not Object"}if(!("containerId"in e)||!BX.Type.isStringFilled(e.containerId)){throw"BX.MainButtons: containerId not set in params"}if(!BX.Type.isDomNode(this.listContainer)){throw"BX.MainButtons: #"+e.containerId+" is not dom node"}if("classes"in e&&BX.Type.isPlainObject(e.classes)){this.setCustomClasses(e.classes)}if("messages"in e&&BX.Type.isPlainObject(e.messages)){this.setMessages(e.messages)}if("licenseWindow"in e&&BX.Type.isPlainObject(e.licenseWindow)){this.setLicenseWindowParams(e.licenseWindow)}if("disableSettings"in e&&e.disableSettings==="true"){this.isSettingsEnabled=false;this.visibleControlMoreButton()}this.initSaving(e.ajaxSettings);this.moreButton=this.getMoreButton();this.listChildItems={};this.initItems();this.adjustMoreButtonPosition();this.bindEventsOnMoreButton();this.bindOnResizeFrame();BX.Event.bind(this.getContainer(),"click",BX.delegate(this._onDocumentClick,this));BX.addCustomEvent("onPullEvent-main",BX.delegate(this._onPush,this));this.updateMoreButtonCounter();if(this.isActiveInMoreMenu()){this.activateItem(this.moreButton)}const s=this.getHomeItem();if(s){const{url:t}=s;this.lastHomeLink=t}const i=Array.from(this.container.querySelectorAll(".main-buttons-item-child-button"));i.forEach((function(t){const e=t.closest(".main-buttons-item-child");if(e.dataset.isOpened){this.realChildButton=e;const t=e.closest(".main-buttons-item-child-button-cloned");if(t){this.clonedChildButton=t}}BX.Event.bind(t,"click",this.onShowChildButtonClick.bind(this))}),this)},calculateChildListWidth:function(){if(this.realChildButton){const t=this.realChildButton.querySelectorAll(".main-buttons-item-child-list-inner .main-buttons-item");const e=10;return Array.from(t).reduce((function(t,e){const s=BX.Text.toNumber(BX.Dom.style(e,"width"));const i=BX.Text.toNumber(BX.Dom.style(e,"margin-left"));const n=BX.Text.toNumber(BX.Dom.style(e,"margin-right"));return t+s+i+n}),e)}return 0},onShowChildButtonClick:function(t){t.preventDefault();if(!this.realChildButton){this.realChildButton=t.currentTarget.closest(".main-buttons-item-child")}const e=this.realChildButton.querySelector(".main-buttons-item-child-list");this.enableItemMouseEnter=false;setTimeout((()=>{this.enableItemMouseEnter=true}),200);const s=BX.Dom.attr(this.realChildButton,"data-child-items");const i=BX.Dom.attr(this.realChildButton,"data-is-opened");let n={};if(i){BX.Dom.attr(this.realChildButton,"data-is-opened",null);s.forEach((function(t){const e=this.getContainer().querySelector('[data-id="'+t+'"]');BX.Dom.style(e,"display",null);if(t.hasOwnProperty("PARENT_ITEM_ID")){n[t["PARENT_ITEM_ID"]]="N"}}),this);if(this.clonedChildButton){BX.Dom.remove(this.clonedChildButton)}BX.Dom.style(e,{overflow:null,"max-width":null});n=JSON.stringify(n);this.saveOptions("expanded_lists",n)}else{BX.Dom.attr(this.realChildButton,"data-is-opened",true);BX.Dom.style(e,"max-width",this.calculateChildListWidth()+"px");this.cloneChildButton(this.realChildButton);s.forEach((t=>{const e=this.getContainer().querySelector('[data-id="'+t+'"]');BX.Dom.insertBefore(e,this.realChildButton);BX.Dom.style(e,"display","inline-block");if(t.hasOwnProperty("PARENT_ITEM_ID")){n[t["PARENT_ITEM_ID"]]="Y"}}));setTimeout((()=>{BX.Dom.style(e,"overflow","unset")}),200);n=JSON.stringify(n);this.saveOptions("expanded_lists",n)}setTimeout((()=>{this._onResizeHandler()}),200)},cloneChildButton:function(t){this.clonedChildButton=BX.Runtime.clone(t);const e=this.clonedChildButton.querySelector(".main-buttons-item-child-list");if(e){BX.Dom.remove(e)}BX.Dom.addClass(this.clonedChildButton,"main-buttons-item-child-button-cloned");BX.Dom.style(this.clonedChildButton,"transition","none");BX.Dom.insertBefore(this.clonedChildButton,t);BX.Event.bind(this.clonedChildButton,"click",this.onShowChildButtonClick.bind(this));setTimeout((()=>{BX.Dom.style(this.clonedChildButton,"transition",null)}),0)},_onDocumentClick:function(t){if(this.isDragButton(t.target)){t.preventDefault();t.stopPropagation()}let e=this.getItem(t);if(BX.Type.isDomNode(e)){if(this.isSettings(e)){this.enableEdit();return false}if(this.isApplySettingsButton(e)){t.preventDefault();t.stopPropagation();this.disableEdit();return false}if(this.isResetSettingsButton(e)){this.resetSettings();return false}if(this.isEditButton(t.target)){this.handleEditButtonClick(t);return false}if(this.isSetHide(e)){const t=this.getVisibleItems();const e=BX.Type.isArray(t)?t.length:null;const s=this.editItemData.ID.replace(this.listContainer.id+"_","");let i=this.getItemById(s);const n=this.getItemAlias(i);i=this.isVisibleItem(i)?i:n;if(this.isDisabled(n)){this.enableItem(n)}else if(!this.isDisabled(n)&&e>2){this.disableItem(n)}if(e===1){BX.onCustomEvent(window,"BX.Main.InterfaceButtons:onHideLastVisibleItem",[i,this])}this.refreshMoreMenu();this.saveSettings();this.adjustMoreButtonPosition();if(this.isEditEnabled()){this.enableEdit()}this.editMenu.popupWindow.close();return false}if(this.isSetHome(e)){const t=this.editItemData.ID.replace(this.listContainer.id+"_","");const e=this.getItemById(t);const s=this.getItemAlias(e);if(this.isDisabled(s)){this.enableItem(s)}this.listContainer.insertBefore(e,BX.firstChild(this.listContainer));this.adjustMoreButtonPosition();this.refreshMoreMenu();this.saveSettings();if(this.isEditEnabled()){this.enableEdit()}this.editMenu.popupWindow.close();return false}if(!this.isDragButton(t.target)&&!this.isEditButton(t.target)){const s=this.getItemData(e);let i=s["ON_CLICK"];if(this.isSublink(t.target)){i=BX.Type.isPlainObject(s["SUB_LINK"])?s["SUB_LINK"]["ON_CLICK"]:""}if(BX.Type.isStringFilled(i)){t.preventDefault();this.execScript(i,t)}}}if(this.isEditEnabled()&&this.getMoreMenu()){this.getMoreMenu().getPopupWindow().setAutoHide(false)}},isActiveInMoreMenu:function(){const t=this.getHiddenItems();const e=this.getDisabledItems();const s=t.concat(e);return s.some((function(t){const e=this.getItemData(t);return e["IS_ACTIVE"]===true}),this)},_onPush:function(t,e){if(t==="user_counter"&&e&&BX.message("SITE_ID")in e){const t=e[BX.message("SITE_ID")];for(const e in t){if(t.hasOwnProperty(e)){this.updateCounter(e,t[e])}}}},getActive:function(){let t=this.getAllItemsData();let e=null;let s=null;while(BX.Type.isArrayFilled(t)){const i=t.shift();if(i["IS_ACTIVE"]===true){if(s===null){s=i}e=i;t=BX.Type.isArrayFilled(i["ITEMS"])?[...i["ITEMS"]]:null}}if(e!==null&&s!==null){const t=BX(s.ID);if(BX.Type.isDomNode(t)){e.NODE=t}else{e.NODE=null}}return e},isSetHome:function(t){return BX.Dom.hasClass(t,this.classSetHome)},isSetHide:function(t){return BX.Dom.hasClass(t,this.classSetHide)},getSettingsButton:function(){return BX.Buttons.Utils.getByClass(this.getMoreMenuContainer(),this.classSettingMenuItem)},getSettingsApplyButton:function(){return BX.Buttons.Utils.getByClass(this.getMoreMenuContainer(),this.classSettingsApplyButton)},isApplySettingsButton:function(t){return BX.Dom.hasClass(t,this.classSettingsApplyButton)},enableEdit:function(){const t=this.getMoreMenu();if(t){const e=t.getPopupWindow();e.setAutoHide(false);BX.Dom.addClass(e.getPopupContainer(),this.classEditState)}BX.Dom.addClass(this.listContainer,this.classEditState);this.isEditEnabledState=true},disableEdit:function(){const t=this.getMoreMenu();if(t){const e=t.getPopupWindow();e.setAutoHide(true);BX.Dom.removeClass(e.getPopupContainer(),this.classEditState)}BX.Dom.removeClass(this.listContainer,this.classEditState);this.isEditEnabledState=false;this.destroyItemEditMenu()},isEditEnabled:function(){return this.isEditEnabledState},showItemEditMenu:function(t,e){if(BX.Type.isPlainObject(t)&&"ID"in t){const s=[this.listContainer.id,"_edit_item"].join("");let i=BX.Main.MenuManager.getMenuById(s);if(i){BX.Main.MenuManager.destroy(s)}i=this.createItemEditMenu(t,s,e);i.popupWindow.show()}},destroyItemEditMenu:function(){const t=[this.listContainer.id,"_edit_item"].join("");const e=BX.Main.MenuManager.getMenuById(t);if(e){BX.Main.MenuManager.destroy(t)}},getContainer:function(){if(!BX.Type.isDomNode(this.container)){this.container=BX(this.containerId).parentNode.parentNode}return this.container},getItemEditMenu:function(){return BX.Main.MenuManager.getMenuById([this.listContainer.id,"_edit_item"].join(""))},createItemEditMenu:function(t,e,s){const i=[{text:this.message("MIB_SET_HOME"),className:"main-buttons-set-home menu-popup-no-icon"}];const n=t["ID"].replace(this.listContainer.id+"_","");const o=this.getItemById(n);if(this.isDisabled(o)){i.push({text:this.message("MIB_SET_SHOW"),className:"main-buttons-set-hide menu-popup-no-icon"})}else{i.push({text:this.message("MIB_SET_HIDE"),className:"main-buttons-set-hide menu-popup-no-icon"})}if(t["IS_PINNED"]){const e=this.getParentItem(t["ID"]);i.push({text:this.message("MIB_UNPIN_ITEM").replace("#NAME#",e?e["TEXT"]:""),onclick:(e,s)=>{this.handleItemUnpin(t,o);s.getMenuWindow().close()}})}const a=BX.pos(s);const u={menuId:e,anchor:s,menuItems:i,settings:{autoHide:true,offsetTop:0,offsetLeft:a.width/2,zIndex:20,angle:{position:"top",offset:a.width/2}}};const r=BX.Main.MenuManager.create(u.menuId,u.anchor,u.menuItems,u.settings);if(this.isVisibleItem(o)){t.NODE=o}else{t.NODE=this.getItemAlias(o)}this.editItemData=t;if("menuItems"in r&&BX.Type.isArray(r.menuItems)){r.menuItems.forEach((function(t){BX.Event.bind(t.layout.item,"click",BX.delegate(this._onDocumentClick,this))}),this)}BX.onCustomEvent(window,"BX.Main.InterfaceButtons:onBeforeCreateEditMenu",[r,t,this]);this.editMenu=r;return r},prepareMenuItemData:function(t){const e={CLASS:"",CLASS_SUBMENU_ITEM:"",COUNTER:0,COUNTER_ID:t.counterId,DATA_ID:t.dataId,HAS_CHILD:false,HAS_MENU:false,HTML:"",ID:t.id,IS_ACTIVE:false,IS_DISABLED:"false",IS_LOCKED:false,IS_PASSIVE:false,MAX_COUNTER_SIZE:99,NODE:BX.Tag.render`<div id="${t.id}" class="main-buttons-item"></div>`,ON_CLICK:t.onClick,SUB_LINK:false,SUPER_TITLE:false,TEXT:t.text,TITLE:"",URL:t.url};return e},addMenuItem:function(t){const e=this.getCurrentSettings();const s=Object.keys(e);const i=this.prepareMenuItemData(t);const n=this.createRootItem(i);const o=this.getItemById(s[s.length-1]);BX.Dom.insertAfter(n,o);this.initItems()},deleteMenuItem:function(t){this.itemData.delete(t);BX.Dom.remove(t)},updateMenuItemText:function(t,e){if(!t||!e){return}const s=this.getItemData(t);s.TEXT=e;const i=this.getItemById(s.ID);const n="main-buttons-item-text-box";const o=BX.Buttons.Utils.getByClass(i,n);o.innerText=e},getHomeItem:function(){const t=this.getVisibleItems();const e=BX.Type.isArray(t)&&t.length>0?t[0]:null;if(!e){return null}const s=this.getItemData(e);const i=this.normalizeUrl(s["URL"]);if(this.canBeHomed(i,s)){return{itemData:s,url:i,firstVisibleItem:e}}if(BX.Type.isArrayFilled(s["ITEMS"])){for(let t=0;t<s["ITEMS"].length;t++){const i=s["ITEMS"][t];if(i["IS_PINNED"]||i["IS_DISBANDED"]||i["IS_DELIMITER"]){continue}const n=this.normalizeUrl(i["URL"]);if(this.canBeHomed(n,i)){return{itemData:i,url:n,firstVisibleItem:e}}}}return null},normalizeUrl:function(t){if(!BX.Type.isStringFilled(t)){return""}if(t.charAt(0)==="?"){const e=document.createElement("a");e.href=t;t=e.pathname+e.search}return t},canBeHomed:function(t,e){if(!BX.Type.isStringFilled(t)||BX.Type.isStringFilled(e["ON_CLICK"])){return false}if(BX.Reflection.getClass("BX.SidePanel.Instance")){const e=BX.SidePanel.Instance.getUrlRule(t);if(e){return false}}const s=new BX.Event.BaseEvent({data:{itemLink:t,itemData:e}});BX.Event.EventEmitter.emit("BX.Main.InterfaceButtons:onBeforeFirstItemChange",s);return!s.isDefaultPrevented()},isEditButton:function(t){return BX.Dom.hasClass(t,this.classEditItemButton)},isDragButton:function(t){return BX.Dom.hasClass(t,this.classDragItemButton)},isResetSettingsButton:function(t){return BX.Dom.hasClass(t,this.classSettingsResetButton)},getContainerHeight:function(){const t=this.getAllItems().map((function(t){const e=getComputedStyle(t);return BX.height(t)+parseInt(e.marginTop)+parseInt(e.marginBottom)}));return Math.max.apply(Math,t)},setLicenseWindowParams:function(t){this.licenseParams=t||{}},message:function(t){let e;try{e=this.messages[t]}catch(t){e=""}return e},setCustomClasses:function(t){if(!BX.Type.isPlainObject(t)){return}this.classItem=t.item||this.classItem;this.classItemSublink=t.itemSublink||this.classItemSublink;this.classItemText=t.itemText||this.classItemText;this.classItemCounter=t.itemCounter||this.classItemCounter;this.classItemIcon=t.itemIcon||this.classItemIcon;this.classItemMore=t.itemMore||this.classItemMore;this.classItemOver=t.itemOver||this.classItemOver;this.classMenuShown=t.menuShown||this.classMenuShown;this.classItemActive=t.itemActive||this.classItemActive;this.classItemDisabled=t.itemDisabled||this.classItemDisabled;this.classOnDrag=t.onDrag||this.classOnDrag;this.classDropzone=t.dropzone||this.classDropzone;this.classSeparator=t.separator||this.classSeparator;this.classSubmenuItem=t.submenuItem||this.classSubmenuItem;this.classSubmenu=t.submenu||this.classSubmenu;this.classSecret=t.secret||this.classSecret;this.classItemLocked=t.itemLocked||this.classItemLocked;this.classExtraItemLink=t.extraItemLink||this.classExtraItemLink;this.classExtraItemText=t.extraItemText||this.classExtraItemText;this.classExtraItemIcon=t.extraItemIcon||this.classExtraItemIcon;this.classExtraItemCounter=t.extraItemCounter||this.classExtraItemCounter},setMessages:function(t){if(!BX.Type.isPlainObject(t)){return}this.messages=t},makeFullItemId:function(t){if(!BX.Type.isStringFilled(t)){return}return[this.listContainer.id,t.replace("-","_")].join("_")},getItemById:function(t){let e=null;if(BX.Type.isStringFilled(t)){const s=t.startsWith(this.listContainer.id)?t:this.makeFullItemId(t);e=BX.Buttons.Utils.getBySelector(this.listContainer,"#"+s.replaceAll(":","\\:"))}return e},getItemCounterObject:function(t){let e=null;if(BX.Type.isDomNode(t)){e=BX.Buttons.Utils.getByClass(t,this.classItemCounter)}return e},updateCounter:function(t,e){if(t.indexOf("crm")===0&&e<0){return}this.updateItemsByCounterId(this.getAllItemsData(),t,e);this.updateMoreButtonCounter()},updateItemsByCounterId:function(t,e,s,i=[]){for(let n=0;n<t.length;n++){const o=t[n];if(o["COUNTER_ID"]===e){o["COUNTER"]=Number(s);this.setCounterValueById(e,o["COUNTER"]);for(let t=i.length-1;t>=0;t--){const e=i[t];e["COUNTER"]=e["ITEMS"].reduce(((t,e)=>{const s=e["IS_PINNED"]===true;const i=BX.Type.isNumber(e["COUNTER"])&&!s?e["COUNTER"]:0;return t+i}),0);this.setCounterValueById(e["COUNTER_ID"],e["COUNTER"])}}if(o["ITEMS"]){this.updateItemsByCounterId(o["ITEMS"],e,s,[...i,o])}}},recalculateItemsCounters:function(t,e=[]){let s=0;for(let i=0;i<t.length;i++){const n=t[i];if(n["ITEMS"]){n["COUNTER"]=this.recalculateItemsCounters(n["ITEMS"],[...e,n])}const o=n["IS_PINNED"]===true;s+=BX.Type.isNumber(n["COUNTER"])&&!o?n["COUNTER"]:0}for(let t=e.length-1;t>=0;t--){const s=e[t];s["COUNTER"]=s["ITEMS"].reduce(((t,e)=>{const s=e["IS_PINNED"]===true;const i=BX.Type.isNumber(e["COUNTER"])&&!s?e["COUNTER"]:0;return t+i}),0);this.setCounterValueById(s["COUNTER_ID"],s["COUNTER"])}return s},setCounterValueById:function(t,e){if(!BX.Type.isStringFilled(t)){return}const s=e>99?"99+":e>0?e:"";const i=document.querySelectorAll(`[data-mib-counter-id="${t}"]`);Array.from(i).forEach((t=>{t.textContent=s}))},setMoreButtonCounter:function(t){const e=this.getItemCounterObject(this.moreButton);e.textContent=t>99?"99+":t>0?t:""},bindEventsOnMoreButton:function(){BX.Event.bind(this.moreButton,"click",this.handleMoreButtonClick.bind(this));BX.Event.bind(this.moreButton,"mouseenter",this.handleMoreButtonMouseEnter.bind(this));BX.Event.bind(this.moreButton,"mouseleave",this.handleMoreButtonMouseLeave.bind(this))},bindOnResizeFrame:function(){window.frames["maininterfacebuttonstmpframe-"+this.getId()].onresize=BX.throttle(this._onResizeHandler,20,this)},getId:function(){return BX.Buttons.Utils.getByClass(this.getContainer(),this.classInner).id},getAllItems:function(){return BX.Buttons.Utils.getByClass(this.listContainer,this.classItem,true)},getAllItemsData:function(){return this.getAllItems().map((t=>this.getItemData(t)))},getVisibleItems:function(){const t=this.getAllItems();let e=[];if(t&&t.length){e=t.filter((t=>this.isVisibleItem(t)&&!this.isDisabled(t)))}return e},getHiddenItems:function(){const t=this.getAllItems();let e=[];if(t&&t.length){e=t.filter((t=>!this.isVisibleItem(t)&&!this.isDisabled(t)))}return e},getDisabledItems:function(){return this.getAllItems().filter((t=>this.isDisabled(t)))},getMoreButton:function(){const t=this.getContainer().getElementsByClassName(this.classItemMore);return t[0]||null},getLastVisibleItem:function(){const t=this.getVisibleItems();let e=null;if(BX.Type.isArray(t)&&t.length){e=t[t.length-1]}if(!BX.Type.isDomNode(e)){e=null}return e},getLastDisabledItem:function(){const t=this.getDisabledItems();let e=null;if(BX.Type.isArray(t)&&t.length){e=t[t.length-1]}if(!BX.Type.isDomNode(e)){e=null}return e},adjustMoreButtonPosition:function(){this.updateMoreButtonCounter();if(this.getMoreMenu()){this.getMoreMenu().getPopupWindow().adjustPosition()}},getMoreMenuId:function(t){let e="";if(BX.Type.isDomNode(this.listContainer)&&BX.Type.isStringFilled(this.listContainer.id)){e=this.submenuIdPrefix+this.listContainer.id}if(t){e=this.submenuWindowIdPrefix+e}return e},getChildMenuId:function(){let t="";if(BX.Type.isDomNode(this.listContainer)&&BX.Type.isStringFilled(this.listContainer.id)){t=this.childMenuIdPrefix+this.listContainer.id}return t},getMenuItemText:function(t,e=null){const s=BX.Type.isElementNode(t)?this.getItemData(t):t;return BX.Tag.render`
				<span class="main-buttons-menu-popup-item">${[BX.Tag.render`<span class="${this.classItemIcon}"></span>`,this.createItemText(s),this.createItemCounter(s),e&&this.isEditEnabled()?this.createItemPin(s,e):""]}</span>
			`},createRootItem:function(t){let e=this.classItem;e+=BX.Type.isStringFilled(t["CLASS"])?" "+t["CLASS"]:"";if(t["IS_PASSIVE"]){e+=" --passive"}else if(t["IS_ACTIVE"]){if(BX.Type.isStringFilled(this.classItemActive)){e+=" "+this.classItemActive}else{e+=" main-buttons-item-active"}}if(t["HAS_MENU"]){e+=" --has-menu"}if(t["IS_LOCKED"]){e+=" --locked"}const s=BX.Tag.render`
				<div
					id="${t["ID"]}"
					class="${e}"
					data-disabled="${t["IS_DISABLED"]}"
					data-class="${t["CLASS_SUBMENU_ITEM"]}"
					data-id="${t["DATA_ID"]}"
					data-top-menu-id="${this.getId()}"
					title=""
				>${[this.createItemLink(t,true),BX.Type.isPlainObject(t["SUB_LINK"])?this.createItemSubLink(t["SUB_LINK"]):""]}</div>
			`;this.setItemData(s,t);return s},createItemLink:function(t,e=false){t=BX.Type.isPlainObject(t)?t:{};let s;const i=["main-buttons-item-link",this.classExtraItemLink].join(" ").trim();if(BX.Type.isStringFilled(t["URL"])){s=BX.Tag.render`<a class="${i}" href="${BX.Text.encode(t["URL"])}"></a>`}else{s=BX.Tag.render`<span class="${i}"></span>`}BX.Dom.append(this.createItemIcon(t),s);BX.Dom.append(this.createItemText(t,e),s);BX.Dom.append(this.createItemCounter(t),s);return s},createItemSubLink:function(t){t=BX.Type.isPlainObject(t)?t:{};const e=BX.Type.isStringFilled(t["CLASS"])?" "+t["CLASS"]:"";const s=BX.Type.isStringFilled(t["URL"])?BX.Text.encode(t["URL"]):"";return BX.Tag.render`
				<a class="${this.classItemSublink}${e}" href="${s}"></a>
			`},createItemIcon:function(t){const e=[this.classItemIcon,this.classExtraItemIcon].join(" ").trim();return BX.Tag.render`<span class="${e}"></span>`},createItemText:function(t,e=false){t=BX.Type.isPlainObject(t)?t:{};const s=[this.classItemText,this.classExtraItemText].join(" ").trim();let i=BX.Type.isStringFilled(t["TEXT"])?t["TEXT"]:"";if(e&&i.length>this.maxItemLength){i=i.substring(0,this.maxItemLength-3)+"..."}let n="";if(BX.Type.isPlainObject(t["SUPER_TITLE"])){let{TEXT:e,CLASS:s,COLOR:i}=t["SUPER_TITLE"];s=BX.Type.isStringFilled(s)?` ${s}`:"";const o=BX.Type.isStringFilled(i)?` style="color:${i}"`:"";n=BX.Tag.render`
					<span class="main-buttons-item-super-title${s}"${o}>${e}</span>
				`}return BX.Tag.render`
				<span class="${s}">${[BX.Tag.render`<span 
						class="main-buttons-item-drag-button"
						onclick="${this.handleDragButtonClick.bind(this)}" 
						data-slider-ignore-autobinding="true"
					></span>`,n,BX.Tag.render`
						<span class="main-buttons-item-text-title">
							<span class="main-buttons-item-text-box">${BX.Text.encode(i)}<span class="main-buttons-item-menu-arrow"></span></span>
						</span>
					`,BX.Tag.render`<span 
						class="main-buttons-item-edit-button"
						onclick="${this.handleEditButtonClick.bind(this)}" 
						data-slider-ignore-autobinding="true"
					></span>`,BX.Tag.render`<span class="main-buttons-item-text-marker"></span>`]}</span>
			`},createItemCounter:function(t){t=BX.Type.isPlainObject(t)?t:{};const e=[this.classItemCounter,this.classExtraItemCounter].join(" ").trim();let s="";const i=BX.Type.isNumber(t["MAX_COUNTER_SIZE"])?t["MAX_COUNTER_SIZE"]:99;if(BX.Type.isNumber(t["COUNTER"])&&t["COUNTER"]>0){s=t["COUNTER"]>i?`${i}+`:t["COUNTER"]}const n=BX.Type.isStringFilled(t["COUNTER_ID"])?t["COUNTER_ID"]:"";return BX.Tag.render`<span data-mib-counter-id="${n}" class="${e}">${s}</span>`},createItemPin:function(t,e){return BX.Tag.render`
				<span class="main-buttons-item-pin" 
					data-slider-ignore-autobinding="true"
					onclick="${this.handleItemPin.bind(this,t,e)}"
					onmouseenter="${this.handleItemPinEnter.bind(this)}"
					onmouseleave="${this.handleItemPinLeave.bind(this)}"
				></span>
			`},getLockedClass:function(t){let e="";if(BX.Type.isDomNode(t)&&this.isLocked(t)){e=this.classItemLocked}return e},getMoreMenuItems:function(){const t=this.getAllItems();const e=this.getHiddenItems();const s=this.getDisabledItems();const i=[];if(t.length){t.forEach((t=>{if(e.indexOf(t)===-1&&s.indexOf(t)===-1){const e=this.getItemData(t);i.push({id:e["DATA_ID"],html:this.getMenuItemText(t),href:e["URL"],onclick:e["ON_CLICK"],title:t.getAttribute("title"),className:[this.classSubmenuItem,this.getIconClass(t),this.classSecret,this.getAliasLink(t),this.getLockedClass(t)].join(" "),items:this.getMoreMenuSubItems(t),events:{onMouseEnter:this.handleMoreMenuItemMouseEnter}})}}))}if(e.length){e.forEach((t=>{const e=this.getItemData(t);const s=[this.classSubmenuItem,this.getIconClass(t),this.getAliasLink(t),this.getLockedClass(t)];if(e["IS_ACTIVE"]===true){s.push(this.classItemActive)}i.push({id:e["DATA_ID"],html:this.getMenuItemText(t),href:e["URL"],onclick:e["ON_CLICK"],title:t.getAttribute("title"),className:s.join(" "),items:this.getMoreMenuSubItems(t),events:{onMouseEnter:this.handleMoreMenuItemMouseEnter}})}))}if(this.isSettingsEnabled){i.push({delimiter:true,html:"<span>"+this.message("MIB_MANAGE")+"</span>",className:[this.classSeparator,this.classSubmenuItem,this.classManage].join(" ")});i.push({html:this.message("MIB_SETTING_MENU_ITEM"),className:[this.classSettingMenuItem,this.classSubmenuItem].join(" ")});const t=["ui-btn",this.theme==="default"?"ui-btn-sm":"ui-btn-xs","ui-btn-success-light","ui-btn-no-caps","ui-btn-round","ui-btn-icon-main-buttons-apply"];i.push({html:`\n\t\t\t\t\t<span class="${t.join(" ")}">\n\t\t\t\t\t\t<span class="ui-btn-text">${this.message("MIB_APPLY_SETTING_MENU_ITEM")}</span>\n\t\t\t\t\t</span>`,className:[this.classSettingsApplyButton,this.classSubmenuItem].join(" ")});i.push({html:this.message("MIB_RESET_SETTINGS"),className:[this.classSettingsResetButton,this.classSubmenuItem].join(" ")});i.push({delimiter:true,html:"<span>"+this.message("MIB_HIDDEN")+"</span>",className:[this.classSeparator,this.classSubmenuItem,this.classHiddenLabel].join(" ")});if(!s.length){i.push({html:"<span>"+this.message("MIB_NO_HIDDEN")+"</span>",className:[this.classSubmenuItem,this.classSubmenuNoHiddenItem].join(" ")})}if(s.length){s.forEach((t=>{const e=this.getItemData(t);const s=[this.classSubmenuItem,this.classItemDisabled,this.getIconClass(t),this.getAliasLink(t),this.getLockedClass(t)];if(e["IS_ACTIVE"]===true){s.push(this.classItemActive)}i.push({id:e["DATA_ID"],html:this.getMenuItemText(t),href:e["URL"],onclick:e["ON_CLICK"],title:t.getAttribute("title"),className:s.join(" "),items:this.getMoreMenuSubItems(t),events:{onMouseEnter:this.handleMoreMenuItemMouseEnter}})}))}}return i},getMenuItems:function(t){return this.createMenuItems(this.getItemData(t),t)},getMoreMenuSubItems:function(t){return this.createMenuItems(this.getItemData(t),null)},createMenuItems:function(t,e=null){if(!BX.Type.isArrayFilled(t["ITEMS"])){return[]}const s=t["ITEMS"];const i=[];for(let t=0;t<s.length;t++){const n=s[t];if(n["IS_PINNED"]||n["IS_DISBANDED"]){continue}const o=n["IS_DELIMITER"]===true;if(o){const t=i.length===0;const e=i[i.length-1];if(t||e&&e["delimiter"]===true){continue}}const a=["menu-popup-no-icon","main-buttons-menu-item"];if(n["IS_ACTIVE"]===true){a.push("main-buttons-menu-item-active")}const u=BX.Text.toBoolean(n["IS_LOCKED"]);if(u){a.push(this.classItemLocked)}if(this.isEditEnabled()){a.push(this.classEditState)}let r;if(o){r={delimiter:true,className:a.join(" "),text:n["TEXT"]}}else{r={html:this.getMenuItemText(n,e),href:n["URL"],onclick:n["ON_CLICK"],title:n["TITLE"],className:a.join(" ")}}const l=n.hasOwnProperty("AJAX_OPTIONS");if(l){r.cacheable=true;r.events=this._getEvents(n["AJAX_OPTIONS"]);r.items=[{id:"loading",text:this.message("MIB_MAIN_BUTTONS_LOADING")}]}else if(BX.Type.isArrayFilled(n["ITEMS"])&&!this.isEditEnabled()){const t=this.createMenuItems(n,e);if(t.length){r.items=t}}i.push(r)}if(i.length&&i[i.length-1]["delimiter"]===true){i.pop()}return i},_setAjaxMode:function(t){for(let e in t){if(!t.hasOwnProperty(e)){continue}if(t[e].hasOwnProperty("ajaxOptions")){t[e].cacheable=true;t[e].events=this._getEvents(t[e]["ajaxOptions"]);t[e].items=[{id:"loading",text:this.message("MIB_MAIN_BUTTONS_LOADING")}]}}},_getEvents:function(t){return{onSubMenuShow:()=>{if(this.subMenuLoaded){return}const e=this.getSubMenu();e.removeMenuItem("loading");const s=e.getMenuItem("loading");this.getSubItems(t).then((t=>{this._setAjaxMode(t);this.subMenuLoaded=true;this.addSubMenu(t);this.showSubMenu()})).catch((t=>{if(s){s.getLayout().text.innerText=t}}))}}},getSubItems:function(t){return new Promise((function(e,s){if(this.progress){s(this.message("MIB_MAIN_BUTTONS_LOADING"));return}if(t.mode==="component"){this.progress=true;BX.ajax.runComponentAction(t.component,t.action,{mode:t.componentMode,signedParameters:t.signedParameters?t.signedParameters:{},data:t.data}).then((t=>{this.progress=false;e(t.data)}))}else{this.progress=true;BX.ajax.runAction(t.action,{data:t.data}).then((t=>{this.progress=false;e(t.data)}))}}))},getMoreMenuArgs:function(){const t=this.getMoreMenuId();const e=this.moreButton;const s=this.getMoreMenuItems();let i;const n=800;if(this.theme==="default"){const t=350;const s=25;i={autoHide:false,compatibleMode:false,offsetLeft:-s,offsetTop:4,cacheable:false,className:"main-buttons-menu-popup main-buttons-more-menu-popup",minWidth:240,maxWidth:t,maxHeight:n,subMenuOptions:{className:"main-buttons-menu-popup main-buttons-more-menu-popup --sub-menu",minWidth:150,maxWidth:t,events:{onFirstShow:this.handleMoreMenuFirstShow.bind(this)}},bindOptions:{position:"bottom",forceTop:true},events:{onClose:this.handleMoreMenuClose.bind(this),onDestroy:this.handleMoreMenuClose.bind(this),onFirstShow:this.handleMoreMenuFirstShow.bind(this),onShow:this.handleMoreMenuShow.bind(this),onBeforeAdjustPosition:this.handleAdjustPosition.bind(this,e)}}}else{const t=this.moreButton.querySelector(".main-buttons-item-text-title");const e=t.offsetWidth;const s=250;const o=e/2-s/2+BX.Main.Popup.getOption("angleLeftOffset");const a=BX.Main.Popup.getOption("angleLeftOffset")-BX.Main.Popup.getOption("angleMinTop");const u=s/2-a;i={autoHide:false,compatibleMode:false,offsetTop:4,offsetLeft:o,minWidth:s,maxWidth:s,maxHeight:n,angle:{position:"top",offset:u},className:"main-buttons-default-menu-popup main-buttons-more-menu-popup",subMenuOptions:{className:"main-buttons-default-menu-popup main-buttons-more-menu-popup --sub-menu",minWidth:null,events:{onFirstShow:this.handleMoreMenuFirstShow.bind(this)}},cacheable:false,bindOptions:{position:"bottom",forceTop:true},events:{onClose:this.handleMoreMenuClose.bind(this),onDestroy:this.handleMoreMenuClose.bind(this),onFirstShow:this.handleMoreMenuFirstShow.bind(this),onShow:this.handleMoreMenuShow.bind(this)}}}if(this.isEditEnabled()){i.className+=" "+this.classEditState}return[t,e,s,i]},getChildMenuArgs:function(t){const e=800;if(this.theme==="default"){const s=25;const i=350;return{autoHide:false,compatibleMode:false,offsetLeft:-s,offsetTop:4,cacheable:false,className:"main-buttons-menu-popup",maxWidth:i,minWidth:t.offsetWidth+s*2+30,maxHeight:e,subMenuOptions:{className:"main-buttons-menu-popup --sub-menu",minWidth:null,events:{onFirstShow:this._onChildMenuFirstShow.bind(this)}},bindOptions:{position:"bottom",forceTop:true},events:{onFirstShow:this._onChildMenuFirstShow.bind(this),onShow:this._onChildMenuShow.bind(this,t),onClose:this._onChildMenuClose.bind(this,t),onDestroy:this._onChildMenuClose.bind(this,t),onBeforeAdjustPosition:this.handleAdjustPosition.bind(this,t)}}}else{const s=250;return{autoHide:false,compatibleMode:false,offsetTop:4,cacheable:false,className:"main-buttons-default-menu-popup",minWidth:Math.min(t.offsetWidth+25*2+30,s),maxWidth:s,maxHeight:e,bindOptions:{position:"bottom",forceTop:true},subMenuOptions:{className:"main-buttons-default-menu-popup --sub-menu",minWidth:null,events:{onFirstShow:this._onChildMenuFirstShow.bind(this)}},events:{onFirstShow:this._onChildMenuFirstShow.bind(this),onShow:this._onChildMenuShow.bind(this,t),onClose:this._onChildMenuClose.bind(this,t),onDestroy:this._onChildMenuClose.bind(this,t)}}}},centerPopupArrow(t,e){const s=e.offsetWidth;const i=t.getPopupContainer().offsetWidth;const n=s/2-i/2;const o=BX.Main.Popup.getOption("angleLeftOffset")-BX.Main.Popup.getOption("angleMinTop");t.setAngle({offset:i/2-o});t.setOffset({offsetLeft:n+BX.Main.Popup.getOption("angleLeftOffset")})},visibleControlMoreButton:function(){const t=this.getHiddenItems();if(!t.length){this.getMoreButton().style.display="none"}else{this.getMoreButton().style.display=""}},createMoreMenu:function(){const t=BX.Main.MenuManager.create(...this.getMoreMenuArgs());if(this.isSettingsEnabled){this.dragAndDropInitInSubmenu()}t.getMenuItems().forEach((function(t){const e=t.getLayout().item;BX.Event.bind(e,"click",BX.delegate(this._onDocumentClick,this))}),this);return t},createChildMenu:function(t){const e=this.getMenuItems(t);if(e.length){const s=BX.Main.MenuManager.create(this.getChildMenuId(),t,e,this.getChildMenuArgs(t));if(!this.isEditEnabled()&&this.isSettingsEnabled){const e=()=>{this.showMoreMenu();this.enableEdit();this.destroyChildMenu();this.showChildMenu(t)};s.getMenuItems().forEach((t=>{const s=t.getLayout().item;s.draggable=true;BX.Event.bind(s,"dragstart",e)}))}return s}return null},showMoreMenu:function(){clearTimeout(this.submenuLeaveTimeout);if(!this.isEditEnabled()){this.closeChildMenu()}let t=this.getMoreMenu();if(t!==null){t.getPopupWindow().show()}else{this.destroyMoreMenu();t=this.createMoreMenu();t.getPopupWindow().show()}this.setMoreMenuShown(true);this.activateItem(this.moreButton);if(this.isEditEnabled()){t.getPopupWindow().setAutoHide(false)}},showChildMenu:function(t){clearTimeout(this.childMenuLeaveTimeout);if(!this.isEditEnabled()){this.closeMoreMenu()}if(!this.isVisibleItem(t)){return}const e=BX.Main.MenuManager.getMenuById(this.getChildMenuId());if(e&&e.bindElement===t){e.getPopupWindow().show();this.destroyItemEditMenu()}else{this.destroyChildMenu(t);const e=this.createChildMenu(t);if(e){e.getPopupWindow().show();this.destroyItemEditMenu()}}},closeMoreMenu:function(){const t=this.getMoreMenu();if(t===null){return}t.getPopupWindow().close();if(!this.isActiveInMoreMenu()){this.deactivateItem(this.moreButton)}this.setMoreMenuShown(false)},closeChildMenu:function(){const t=this.getChildMenu();if(t===null){return}this.closePinHint();t.close()},getMoreMenu:function(){return BX.Main.MenuManager.getMenuById(this.getMoreMenuId())},getChildMenu:function(){return BX.Main.MenuManager.getMenuById(this.getChildMenuId())},destroyMoreMenu:function(){BX.Main.MenuManager.destroy(this.getMoreMenuId())},destroyChildMenu:function(){BX.Main.MenuManager.destroy(this.getChildMenuId())},refreshMoreMenu:function(){const t=this.getMoreMenu();if(t===null){return}const e=this.getMoreMenuArgs();if(BX.Type.isArray(e)){this.destroyMoreMenu();this.createMoreMenu();this.showMoreMenu()}},setMoreMenuShown:function(t){this.isSubmenuShown=false;if(BX.type.isBoolean(t)){this.isSubmenuShown=t}if(this.isSubmenuShown){BX.Dom.addClass(this.moreButton,this.classMenuShown)}else{BX.Dom.removeClass(this.moreButton,this.classMenuShown)}},activateItem:function(t){if(!BX.Type.isDomNode(t)){return}if(!BX.Dom.hasClass(t,this.classItemActive)){BX.Dom.addClass(t,this.classItemActive)}},deactivateItem:function(t){if(!BX.Type.isDomNode(t)){return}if(BX.Dom.hasClass(t,this.classItemActive)){BX.Dom.removeClass(t,this.classItemActive)}},getCurrentSettings:function(){const t={};this.getAllItems().forEach(((e,s)=>{t[e.id]={sort:s,isDisabled:this.isDisabled(e),isPinned:this.isPinned(e)}}));return t},initSaving:function(t){this.sendOptions=this.sendOptions.bind(this);this.optionsToSave=[];this.debouncedSendOptions=BX.debounce(this.sendOptions,5e3);if(BX.Type.isPlainObject(t)){this.ajaxSettings={componentName:t.componentName,signedParams:t.signedParams}}},sendOptions:function(){if(this.optionsToSave.length<=0){return}const t={};this.optionsToSave.forEach((function(e){t[e.name]=e.value}));this.optionsToSave=[];window.removeEventListener("beforeunload",this.sendOptions);BX.removeCustomEvent("SidePanel.Slider:onClose",this.sendOptions);return BX.ajax.runComponentAction(this.ajaxSettings.componentName,"save",{mode:"class",signedParameters:this.ajaxSettings.signedParams,data:{options:t}})},saveOptions:function(t,e){if(this.ajaxSettings){if(this.optionsToSave.length<=0){window.addEventListener("beforeunload",this.sendOptions);BX.addCustomEvent("SidePanel.Slider:onClose",this.sendOptions)}this.optionsToSave.push({name:t,value:e});this.debouncedSendOptions()}else if(this.listContainer.id){BX.userOptions.save("ui",this.listContainer.id,t,e)}},saveSettings:function(){const t=this.getCurrentSettings();const e="settings";if(!BX.Type.isPlainObject(t)){return}if(BX.Type.isDomNode(this.listContainer)&&"id"in this.listContainer){this.saveOptions(e,JSON.stringify(t));const s=this.getHomeItem();if(s){const{itemData:t,url:e,firstVisibleItem:i}=s;if(t){if(this.lastHomeLink!==e){this.saveOptions("firstPageLink",e);this.sendOptions();BX.onCustomEvent("BX.Main.InterfaceButtons:onFirstItemChange",[e,i])}this.lastHomeLink=e}}}},resetSettings:function(){let t=null;const e=BX.PopupWindowManager.create(this.listContainer.id+"_reset_popup",null,{content:this.message("MIB_RESET_ALERT"),autoHide:false,overlay:true,closeByEsc:true,closeIcon:true,draggable:{restrict:true},titleBar:this.message("MIB_RESET_SETTINGS"),buttons:[t=new BX.PopupWindowButton({text:this.message("MIB_RESET_BUTTON"),className:"popup-window-button-create",events:{click:()=>{if(BX.Dom.hasClass(t.buttonNode,"popup-window-button-wait")){return}BX.Dom.addClass(t.buttonNode,"popup-window-button-wait");this.handleResetSettings((s=>{if(s){BX.Dom.removeClass(t.buttonNode,"popup-window-button-wait");e.setContent(s)}else{this.saveOptions("settings",JSON.stringify({}));this.saveOptions("firstPageLink","");this.sendOptions().then((function(){window.location.reload()})).catch((function(){window.location.reload()}))}}))}}}),new BX.PopupWindowButtonLink({text:this.message("MIB_CANCEL_BUTTON"),className:"popup-window-button-link-cancel",events:{click:function(){this.popupWindow.close()}}})]});e.show()},handleResetSettings:function(t){const e=[];BX.onCustomEvent("BX.Main.InterfaceButtons:onBeforeResetMenu",[e,this]);let s=new BX.Promise;const i=s;for(let t=0;t<e.length;t++){s=s.then(e[t])}s.then((function(e){t(null,e)}),(function(e){t(e,null)}));i.fulfill()},moveButtonAlias:function(t,e){if(!t||!this.dragItem){return}const s=this.getItemAlias(this.dragItem);const i=this.getItemAlias(t);if(this.isListItem(s)){if(i){if(e){BX.Dom.insertAfter(s,i)}else{this.listContainer.insertBefore(s,i)}}else{this.listContainer.appendChild(s)}}if(this.getMoreMenu()){this.getMoreMenu().getPopupWindow().adjustPosition()}},moveButton:function(t,e){if(!BX.Type.isDomNode(t)||!BX.Type.isDomNode(this.dragItem)){return}if(this.isListItem(t)){if(this.isDisabled(this.dragItem)){this.dragItem.dataset.disabled="false"}if(BX.Type.isDomNode(t)){if(e){BX.Dom.insertAfter(this.dragItem,t)}else{this.listContainer.insertBefore(this.dragItem,t)}}else{this.listContainer.appendChild(this.dragItem)}}if(this.isSubmenuItem(t)){if(e){BX.Dom.insertAfter(this.dragItem,t)}else{this.getMoreMenuContainer().insertBefore(this.dragItem,t)}}},getMoreMenuContainer:function(){const t=this.getMoreMenu();let e=null;if(t!==null){e=t.itemsContainer}return e},findNextSiblingByClass:function(t,e){const s=t;for(;!!t;t=t.nextElementSibling){if(e){if(BX.Dom.hasClass(t,e)&&t!==s){return t}}else{return null}}return null},findChildrenByClassName:function(t,e){let s=null;if(BX.Type.isDomNode(t)&&BX.Type.isStringFilled(e)){s=BX.Buttons.Utils.getByClass(t,e)}return s},initItems:function(){this.getAllItems().forEach((t=>{this.initItem(t)}))},initItem:function(t){if(this.isSettingsEnabled){t.setAttribute("draggable","true");t.setAttribute("tabindex","-1");BX.Event.bind(t,"dragstart",BX.delegate(this._onDragStart,this));BX.Event.bind(t,"dragend",BX.delegate(this._onDragEnd,this));BX.Event.bind(t,"dragenter",BX.delegate(this._onDragEnter,this));BX.Event.bind(t,"dragover",BX.delegate(this._onDragOver,this));BX.Event.bind(t,"dragleave",BX.delegate(this._onDragLeave,this));BX.Event.bind(t,"drop",BX.delegate(this._onDrop,this));t.dataset.link="item-"+BX.Text.getRandom().toLowerCase()}BX.Event.bind(t,"click",this._handleItemClick.bind(this));BX.Event.bind(t,"mouseenter",this.handleItemMouseEnter.bind(this));BX.Event.bind(t,"mouseleave",this.handleItemMouseLeave.bind(this))},dragAndDropInitInSubmenu:function(){const t=this.getMoreMenu();if(!t){return}const e=t.menuItems;e.forEach((t=>{if(this.isSeparator(t.layout.item)||this.isSettings(t.layout.item)||this.isApplySettingsButton(t.layout.item)||this.isResetSettingsButton(t.layout.item)){t.layout.item.draggable=false}else{t.layout.item.draggable=true;t.layout.item.dataset.sortable=true;BX.Event.bind(t.layout.item,"dragstart",BX.delegate(this._onDragStart,this));BX.Event.bind(t.layout.item,"dragenter",BX.delegate(this._onDragEnter,this));BX.Event.bind(t.layout.item,"dragover",BX.delegate(this._onDragOver,this));BX.Event.bind(t.layout.item,"dragleave",BX.delegate(this._onDragLeave,this));BX.Event.bind(t.layout.item,"dragend",BX.delegate(this._onDragEnd,this));BX.Event.bind(t.layout.item,"drop",BX.delegate(this._onDrop,this))}if(BX.Dom.hasClass(t.layout.item,this.classHiddenLabel)||BX.Dom.hasClass(t.layout.item,this.classManage)){BX.Event.bind(t.layout.item,"dragover",BX.delegate(this._onDragOver,this))}}))},getItem:function(t){if(!BX.Type.isDomNode(t)){if(!t||!BX.Type.isDomNode(t.target)){return null}}else{t={target:t}}let e=t.target.closest("."+this.classItem);if(!BX.Type.isDomNode(e)){e=t.target.closest("."+this.classDefaultSubmenuItem+", ."+this.classDefaultSubmenuDelimimeter)}return e},getItemData:function(t){if(!BX.Type.isDomNode(t)){return{}}const e=this.itemData.get(t);if(e){return e}let s;try{s=JSON.parse(t.dataset.item)}catch(t){s={}}this.setItemData(t,s);return s},setItemData(t,e){if(BX.Type.isElementNode(t)&&BX.Type.isPlainObject(e)){e.NODE=t;this.itemData.set(t,e)}},setOpacity:function(t){if(!BX.Type.isDomNode(t)){return}BX.style(t,"opacity",.5)},unsetOpacity:function(t){if(!BX.Type.isDomNode(t)){return}BX.style(t,"opacity","1")},setDragStyles:function(){BX.Dom.addClass(this.listContainer,this.classOnDrag);BX.Dom.addClass(BX(this.getMoreMenuId(true)),this.classOnDrag);this.setOpacity(this.dragItem)},unsetDragStyles:function(){const t=this.getMoreMenu();this.getAllItems().forEach((t=>{this.unsetOpacity(t);BX.Dom.removeClass(t,this.classItemOver)}));if(t&&BX.Type.isArray(t.menuItems)&&t.menuItems.length){t.menuItems.forEach((t=>{this.unsetOpacity(t);BX.Dom.removeClass(t.layout.item,this.classItemOver)}))}BX.Dom.removeClass(this.listContainer,this.classOnDrag);BX.Dom.removeClass(BX(this.getMoreMenuId(true)),this.classOnDrag)},getIconClass:function(t){let e="";if(BX.Type.isDomNode(t)&&"dataset"in t&&"class"in t.dataset&&BX.Type.isStringFilled(t.dataset.class)){e=t.dataset.class}return e},disableItem:function(t){const e=this.getItemAlias(t);if(t&&"dataset"in t){t.dataset.disabled="true";if(e){e.dataset.disabled="true"}}},enableItem:function(t){let e;if(!BX.Type.isDomNode(t)){return}if(this.isSubmenuItem(t)){BX.Dom.removeClass(t,this.classItemDisabled);e=this.getItemAlias(t);if(BX.Type.isDomNode(e)){e.dataset.disabled="false"}}},getAliasLink:function(t){return this.dataValue(t,"link")||""},getItemAlias:function(t){let e=null;if(!BX.Type.isDomNode(t)){return e}const s=this.getAllItems();const i=this.isSubmenuItem(t);const n=this.isListItem(t);if(!i&&!n){return e}if(i){s.forEach((function(s){BX.Dom.hasClass(t,this.getAliasLink(s))&&(e=s)}),this)}if(n){e=BX.Buttons.Utils.getByClass(document,this.getAliasLink(t))}return e},hideItem:function(t){!!t&&BX.Dom.addClass(t,this.classSecret)},showItem:function(t){!!t&&BX.Dom.removeClass(t,this.classSecret)},fakeDragItem:function(){if(!BX.Type.isDomNode(this.dragItem)||!BX.Type.isDomNode(this.overItem)){return}let t=null;if(this.isDragToSubmenu()){t=this.getItemAlias(this.dragItem);if(t!==this.dragItem){this.listContainer.appendChild(this.dragItem);this.dragItem=t;this.showItem(this.dragItem);this.adjustMoreButtonPosition();this.updateMoreMenuItems();this.tmp.moved=false;this.tmp.movetToSubmenu=true;this.setOpacity(this.dragItem)}}if(this.isDragToList()&&!this.tmp.movetToSubmenu){t=this.getItemAlias(this.dragItem);if(t!==this.dragItem){this.hideItem(this.dragItem);this.dragItem=t;this.adjustMoreButtonPosition();this.updateMoreMenuItems();this.setOpacity(this.dragItem)}}this.tmp.movetToSubmenu=false},updateMoreMenuItems:function(){const t=this.getMoreMenu();if(t===null){return}const e=t.menuItems;if(!BX.Type.isArray(e)||!e.length){return}const s=this.getHiddenItems();const i=this.getDisabledItems();const n=i.concat(s);e.forEach((t=>{const e=[].some.call(n,(e=>BX.Dom.hasClass(t.layout.item,this.dataValue(e,"link"))||this.isDisabled(t.layout.item)||this.isSeparator(t.layout.item)||this.isDropzone(t.layout.item)));if(e||(this.isSettings(t.layout.item)||this.isApplySettingsButton(t.layout.item)||this.isResetSettingsButton(t.layout.item)||this.isNotHiddenItem(t.layout.item)||this.isSeparator(t.layout.item)||t.layout.item===this.dragItem)&&!this.isMoreButton(t.layout.item)){this.showItem(t.layout.item)}else{this.hideItem(t.layout.item)}}))},isNotHiddenItem:function(t){return BX.Dom.hasClass(t,this.classSubmenuNoHiddenItem)},getNotHidden:function(){return BX.Buttons.Utils.getByClass(this.getMoreMenuContainer(),this.classSubmenuNoHiddenItem)},setOverStyles:function(t){if(BX.Type.isDomNode(t)&&!BX.Dom.hasClass(t,this.classItemOver)){BX.Dom.addClass(t,this.classItemOver)}},unsetOverStyles:function(t){if(BX.Type.isDomNode(t)&&BX.Dom.hasClass(t,this.classItemOver)){BX.Dom.removeClass(t,this.classItemOver)}},dataValue:function(t,e){let s="";if(BX.Type.isDomNode(t)){const i=BX.data(t,e);if(typeof i!=="undefined"){s=i}}return s},execScript:function(t,e){if(BX.Type.isStringFilled(t)){const s=new Function("event",t);s(e)}},showLicenseWindow:function(){if(!B24.licenseInfoPopup){return}const t=B24.licenseInfoPopup;t.init({B24_LICENSE_BUTTON_TEXT:this.message("MIB_LICENSE_BUY_BUTTON"),B24_TRIAL_BUTTON_TEXT:this.message("MIB_LICENSE_TRIAL_BUTTON"),IS_FULL_DEMO_EXISTS:this.licenseParams.isFullDemoExists,HOST_NAME:this.licenseParams.hostname,AJAX_URL:this.licenseParams.ajaxUrl,LICENSE_ALL_PATH:this.licenseParams.licenseAllPath,LICENSE_DEMO_PATH:this.licenseParams.licenseDemoPath,FEATURE_GROUP_NAME:this.licenseParams.featureGroupName,AJAX_ACTIONS_URL:this.licenseParams.ajaxActionsUrl,B24_FEATURE_TRIAL_SUCCESS_TEXT:this.message("MIB_LICENSE_WINDOW_TRIAL_SUCCESS_TEXT")});t.show("main-buttons",this.message("MIB_LICENSE_WINDOW_HEADER_TEXT"),this.message("MIB_LICENSE_WINDOW_TEXT"))},_handleItemClick:function(t){if(!this.isEditEnabled()){const e=this.getItem(t);this.showChildMenu(e)}},handleEditButtonClick:function(t){t.preventDefault();t.stopPropagation();let e=this.getItem(t);if(!BX.Type.isDomNode(e)){return}if(this.isSubmenuItem(e)){e=this.getItemAlias(e)}const s=this.getItemData(e);const i=this.getItemEditMenu();if(i&&i.popupWindow.isShown()&&this.lastEditNode===e){i.popupWindow.close()}else{this.showItemEditMenu(s,t.target)}this.lastEditNode=e},handleDragButtonClick:function(t){t.preventDefault();t.stopPropagation()},handleItemPinEnter:function(t){const e=this.getChildMenu();if(e){this.showPinHint(t.currentTarget)}},showPinHint:function(t){const e=48;const s=BX.Main.PopupManager.create({id:"main-buttons-pin-hint",closeByEsc:true,padding:15,className:"main-buttons-pin-hint-popup",height:e,cacheable:false,autoHide:true,bindOptions:{forceBindPosition:true},content:this.message("MIB_PIN_HINT"),darkMode:true,events:{onAfterShow:function(e){const s=e.getTarget();const i=BX.Dom.getPosition(t);const n=BX.Dom.getPosition(s.getPopupContainer());if(n.left<i.left+i.width){s.setAngle({position:"top",offset:0});s.setOffset({offsetLeft:20,offsetTop:5});s.adjustPosition()}}}});s.setAngle({position:"left",offset:0});s.setOffset({offsetLeft:t.offsetWidth+5,offsetTop:-t.offsetHeight/2-e/2-2});s.setBindElement(t);s.show();s.adjustPosition()},closePinHint:function(){const t=BX.Main.PopupManager.getPopupById("main-buttons-pin-hint");if(t){t.close()}},handleItemPinLeave:function(t){this.closePinHint()},handleItemPin:function(t,e,s){s.stopPropagation();s.preventDefault();const i=this.createRootItem(t);BX.Dom.addClass(i,"main-buttons-item-insert-animation");BX.Dom.insertBefore(i,e);requestAnimationFrame((()=>{requestAnimationFrame((()=>{BX.Dom.style(i,{width:i.scrollWidth+"px",opacity:1})}))}));const n=()=>{BX.Dom.removeClass(i,"main-buttons-item-insert-animation");BX.Dom.style(i,"width",null);BX.Dom.style(i,"opacity",null);const t=this.getItemData(e);this.recalculateItemsCounters([t]);this.showMoreMenu();this.updateMoreButtonCounter();this.showChildMenu(e);this.saveSettings()};setTimeout(n,300);this.initItem(i);this.pinItem(t);this.destroyMoreMenu();this.destroyChildMenu()},handleItemUnpin:function(t,e){BX.Dom.style(e,{width:e.offsetWidth+"px"});BX.Dom.addClass(e,"main-buttons-item-insert-animation");requestAnimationFrame((()=>{requestAnimationFrame((()=>{BX.Dom.style(e,{width:0,margin:0,opacity:0})}))}));const s=()=>{BX.Dom.remove(e);this.showMoreMenu();this.updateMoreButtonCounter();this.saveSettings()};setTimeout(s,300);this.pinItem(t,false);const i=[];let n="";const o=t["ID"].split(":");o.forEach((t=>{n+=`${n===""?"":":"}${t}`;const e=this.getItemById(n);if(e){i.push(this.getItemData(e))}}));this.destroyMoreMenu();this.recalculateItemsCounters(i)},pinItem:function(t,e=true){const s=t["ID"];const i=s.split(":");let n="";i.forEach(((t,o)=>{n+=`${n===""?"":":"}${t}`;const a=this.getItemById(n);if(!a){return}const u=this.getItemData(a);let r=u["ITEMS"];let l=n;const h=i.slice(o+1);const m=[u];while(BX.Type.isArrayFilled(h)&&BX.Type.isArrayFilled(r)){l=l+":"+h.shift();for(let t=0;t<r.length;t++){const i=r[t];if(i["ID"]===s){i["IS_PINNED"]=e;for(let t=m.length-1;t>=0;t--){const s=m[t];const i=t===0;if(e){const t=s["ITEMS"].some((t=>{const e=t["IS_PINNED"]===true;const s=t["IS_DISBANDED"]===true;const i=t["IS_DELIMITER"]===true;return!e&&!s&&!i}));if(!t){s["IS_DISBANDED"]=true;if(i){a.dataset.disbanded=true}}}else{if(i){a.dataset.disbanded=false}s["IS_DISBANDED"]=false}const n=s["ITEMS"].some((t=>t["IS_ACTIVE"]===true&&t["IS_PINNED"]!==true&&t["IS_DELIMITER"]!==true));if(n){s["IS_ACTIVE"]=true;if(i){this.activateItem(a)}}else{s["IS_ACTIVE"]=false;if(i){this.deactivateItem(a)}}}return}else if(i["ID"]===l){r=i["ITEMS"];l=i["ID"];m.push(i);break}}}}))},getParentItem:function(t){const e=t.split(":");let s="";for(let i=0;i<e.length;i++){s+=`${s===""?"":":"}${e[i]}`;const n=this.getItemById(s);if(!n){continue}const o=this.getItemData(n);let a=o["ITEMS"];let u=s;const r=e.slice(i+1);let l=null;while(BX.Type.isArrayFilled(r)&&BX.Type.isArrayFilled(a)){u=u+":"+r.shift();for(let e=0;e<a.length;e++){const s=a[e];if(s["ID"]===t){return l===null?o:l}else if(s["ID"]===u){a=s["ITEMS"];u=s["ID"];l=s;break}}}}return null},_onDragStart:function(t){const e=this.getVisibleItems();const s=BX.Type.isArray(e)?e.length:null;this.dragItem=this.getItem(t);if(!BX.Type.isDomNode(this.dragItem)){return}if(s===1&&this.isListItem(this.dragItem)){t.preventDefault();BX.onCustomEvent(window,"BX.Main.InterfaceButtons:onHideLastVisibleItem",[this.dragItem,this]);return}if(this.isMoreButton(this.dragItem)||this.isSeparator(this.dragItem)||this.isNotHiddenItem(this.dragItem)||BX.Dom.attr(this.dragItem,"data-parent-item-id")||BX.Dom.attr(this.dragItem,"data-has-child")){t.preventDefault();return}this.onDragStarted=true;this.closeChildMenu();this.destroyItemEditMenu();if(this.isListItem(this.dragItem)){this.showMoreMenu()}this.setDragStyles();if(!this.isEditEnabled()){this.enableEdit()}},_onDragEnd:function(t){t.preventDefault();const e=this.getItem(t);this.onDragStarted=false;if(!BX.Type.isDomNode(e)){return}this.unsetDragStyles();this.refreshMoreMenu();if(!this.isEditEnabled()){this.closeMoreMenu()}const s=BX.findNextSibling(this.dragItem,(t=>this.isVisibleItem(t)));const i=BX.findPreviousSibling(this.dragItem,(t=>this.isVisibleItem(t)));if(BX.Dom.hasClass(i,this.classHiddenLabel)||this.isDisabled(i)&&this.isSubmenuItem(i)||this.isDisabled(s)&&this.isSubmenuItem(s)){this.disableItem(this.dragItem);this.refreshMoreMenu()}if(this.isEditEnabled()){this.enableEdit()}else{this.disableEdit()}this.updateMoreButtonCounter();this.saveSettings();this.dragItem=null;this.overItem=null;this.tmp.moved=false},updateMoreButtonCounter:function(){let t=this.getHiddenItems();const e=this.getDisabledItems();t=t.concat(e);let s=0;if(BX.Type.isArray(t)){t.forEach((t=>{const e=this.getItemData(t);const i=BX.Type.isNumber(e["COUNTER"])&&e["COUNTER"]>0?e["COUNTER"]:0;s+=i}))}if(BX.Type.isNumber(s)){this.setMoreButtonCounter(s)}},_onDragEnter:function(t){const e=this.getItem(t);if(BX.Type.isDomNode(e)&&this.isNotHiddenItem(e)){this.setOverStyles(e)}},_onDragOver:function(t){t.preventDefault();this.overItem=this.getItem(t);if(!BX.Type.isDomNode(this.overItem)||!BX.Type.isDomNode(this.dragItem)||this.overItem===this.dragItem||this.isNotHiddenItem(this.overItem)||BX.Dom.attr(this.overItem,"data-parent-item-id")||BX.Dom.attr(this.overItem,"data-has-child")){return}this.fakeDragItem();const e=this.isNext(t);const s=this.isGoodPosition(t);if(e&&s){let t;let e=false;if(this.isListItem(this.overItem)){t=this.findNextSiblingByClass(this.overItem,this.classItem);if(t===null&&this.getLastVisibleItem()===this.overItem){t=this.overItem;e=true}}else{t=this.findNextSiblingByClass(this.overItem,this.classSubmenuItem);if(this.isSettings(t)||this.isApplySettingsButton(t)||this.isResetSettingsButton(t)){return}if(t===null&&this.getItemAlias(this.getLastDisabledItem())===this.overItem){t=this.overItem;e=true}}if(BX.Type.isDomNode(t)){this.moveButton(t,e);this.moveButtonAlias(t,e);this.adjustMoreButtonPosition();this.updateMoreMenuItems()}}else if(!e&&s&&!BX.Dom.hasClass(this.overItem,this.classHiddenLabel)){this.moveButton(this.overItem);this.moveButtonAlias(this.overItem);this.adjustMoreButtonPosition();this.updateMoreMenuItems()}},_onDragLeave:function(t){const e=this.getItem(t);if(BX.Type.isDomNode(e)){this.unsetOverStyles(t.target)}},_onDrop:function(t){const e=this.getItem(t);if(!BX.Type.isDomNode(e)){return}if(this.isNotHiddenItem(e)||this.isDisabled(e)){this.disableItem(this.dragItem);this.adjustMoreButtonPosition()}const s=this.getItemAlias(this.dragItem);if(this.isListItem(s)){s.dataset.disabled="false"}this.unsetDragStyles();t.preventDefault()},handleMoreMenuFirstShow:function(t){const e=t.getTarget();BX.Event.bind(e.getPopupContainer(),"mouseenter",this.handleMoreMenuMouseEnter.bind(this));BX.Event.bind(e.getPopupContainer(),"mouseleave",this.handleMoreMenuMouseLeave.bind(this))},handleMoreMenuMouseEnter:function(){clearTimeout(this.submenuLeaveTimeout)},handleMoreMenuMouseLeave:function(){this.tryCloseMoreMenuOnTimeout()},tryCloseMoreMenuOnTimeout:function(){clearTimeout(this.submenuLeaveTimeout);if(!this.isEditEnabled()){this.submenuLeaveTimeout=setTimeout((()=>{this.closeMoreMenu()}),500)}},handleMoreMenuShow:function(t){BX.Event.EventEmitter.emit("BX.Main.InterfaceButtons:onMenuShow");BX.Event.EventEmitter.emit(this,"BX.Main.InterfaceButtons:onMoreMenuShow",{event:t});setTimeout((()=>{if(!this.isEditEnabled()){t.getTarget().setAutoHide(true)}}),500)},handleMoreMenuClose:function(){BX.Event.EventEmitter.emit(this,"BX.Main.InterfaceButtons:onMoreMenuClose");this.setMoreMenuShown(false);if(this.isEditEnabled()){this.activateItem(this.moreButton)}else{if(!this.isActiveInMoreMenu()){this.deactivateItem(this.moreButton)}}this.destroyItemEditMenu()},_onChildMenuFirstShow:function(t){const e=t.getTarget();BX.Event.bind(e.getPopupContainer(),"mouseenter",this._onChildMenuMouseEnter.bind(this));BX.Event.bind(e.getPopupContainer(),"mouseleave",this._onChildMenuMouseLeave.bind(this))},_onChildMenuMouseEnter:function(){clearTimeout(this.childMenuLeaveTimeout)},_onChildMenuMouseLeave:function(){this.tryCloseChildMenuOnTimeout()},tryCloseChildMenuOnTimeout:function(){if(this.isEditEnabled()){return}clearTimeout(this.childMenuLeaveTimeout);this.childMenuLeaveTimeout=setTimeout((()=>{this.closeChildMenu()}),500)},_onChildMenuShow:function(t,e){BX.Dom.addClass(t,this.classMenuShown);BX.Event.EventEmitter.emit("BX.Main.InterfaceButtons:onMenuShow");BX.Event.EventEmitter.emit(this,"BX.Main.InterfaceButtons:onSubMenuShow",{item:t,event:e});if(this.theme!=="default"){this.centerPopupArrow(e.getTarget(),t)}setTimeout((()=>{e.getTarget().setAutoHide(true)}),500)},_onChildMenuClose:function(t){BX.Event.EventEmitter.emit(this,"BX.Main.InterfaceButtons:onSubMenuClose");BX.Dom.removeClass(t,this.classMenuShown);this.closePinHint()},handleAdjustPosition:function(t,e){const s=25;const i=BX.Dom.getPosition(t);const n=e.getTarget();if(e.left<i.left-s){const t=n.getPopupContainer().offsetWidth;const o=i.right-t+s;if(o>0){e.left=o;BX.Dom.addClass(n.getPopupContainer(),"--left-handed")}}else{BX.Dom.removeClass(n.getPopupContainer(),"--left-handed")}},_onResizeHandler:function(){this.adjustMoreButtonPosition();this.updateMoreMenuItems();this.closeChildMenu();if(!this.isSettingsEnabled){this.visibleControlMoreButton()}},handleMoreButtonClick:function(t){t.preventDefault();this.showMoreMenu()},handleMoreButtonMouseEnter:function(t){if(this.enableItemMouseEnter){clearTimeout(this.menuShowTimeout);this.menuShowTimeout=setTimeout((()=>{this.showMoreMenu()}),100)}clearTimeout(this.submenuLeaveTimeout)},handleMoreButtonMouseLeave:function(){clearTimeout(this.menuShowTimeout);this.tryCloseMoreMenuOnTimeout()},handleItemMouseEnter:function(t){if(!this.enableItemMouseEnter){return}if(this.onDragStarted){return}const e=this.getItem(t);clearTimeout(this.childMenuLeaveTimeout);clearTimeout(this.menuShowTimeout);this.menuShowTimeout=setTimeout((()=>{this.showChildMenu(e)}),100);BX.Dom.addClass(e,this.classItemOver)},handleItemMouseLeave:function(t){clearTimeout(this.menuShowTimeout);if(!this.enableItemMouseEnter){return}if(this.onDragStarted){return}const e=this.getItem(t);BX.Dom.removeClass(e,this.classItemOver);this.tryCloseChildMenuOnTimeout()},handleMoreMenuItemMouseEnter:function(t){if(this.isEditEnabled()){t.preventDefault()}},getSettingsResetButton:function(){return BX.Buttons.Utils.getByClass(this.getMoreMenuContainer(),this.classSettingsResetButton)},isDisabled:function(t){let e=false;if(BX.Type.isDomNode(t)){e=this.dataValue(t,"disabled")==="true"||BX.Dom.hasClass(t,this.classItemDisabled)}return e},isPinned:function(t){let e=false;if(BX.Type.isDomNode(t)){e=this.getItemData(t)["IS_PINNED"]===true}return e},isSettings:function(t){let e=false;if(BX.Type.isDomNode(t)){e=BX.Dom.hasClass(t,this.classSettingMenuItem)}return e},isLocked:function(t){let e=false;if(BX.Type.isDomNode(t)){e=this.dataValue(t,"locked")==="true"||BX.Dom.hasClass(t,this.classItemLocked)}return e},isDropzone:function(t){return BX.Dom.hasClass(t,this.classDropzone)},isNext:function(t){const e=this.dragItem.getBoundingClientRect();const s=this.overItem.getBoundingClientRect();const i=getComputedStyle(this.dragItem);const n=parseInt(i.marginRight.replace("px",""));let o=null;if(this.isListItem(this.overItem)){o=t.clientX>s.left-n&&t.clientX>e.right}if(this.isSubmenuItem(this.overItem)){o=t.clientY>e.top}return o},isGoodPosition:function(t){const e=this.overItem;if(!BX.Type.isDomNode(e)){return false}let s;const i=e.getBoundingClientRect();if(this.isListItem(e)){s=this.isNext(t)&&t.clientX>=i.left+i.width/2||!this.isNext(t)&&t.clientX<=i.left+i.width/2}if(this.isSubmenuItem(e)){s=this.isNext(t)&&t.clientY>=i.top+i.height/2||!this.isNext(t)&&t.clientY<=i.top+i.height/2}return s},isSubmenuItem:function(t){return BX.Dom.hasClass(t,this.classSubmenuItem)},isVisibleItem:function(t){if(!BX.Type.isDomNode(t)){return false}return t.offsetTop===0},isMoreButton:function(t){let e=false;if(BX.Type.isDomNode(t)&&BX.Dom.hasClass(t,this.classItemMore)){e=true}return e},isListItem:function(t){let e=false;if(BX.Type.isDomNode(t)&&BX.Dom.hasClass(t,this.classItem)){e=true}return e},isSublink:function(t){let e=false;if(BX.Type.isDomNode(t)){e=BX.Dom.hasClass(t,this.classItemSublink)}return e},isSeparator:function(t){let e=false;if(BX.Type.isDomNode(t)){e=BX.Dom.hasClass(t,this.classSeparator)}return e},isDragToSubmenu:function(){return!this.isSubmenuItem(this.dragItem)&&this.isSubmenuItem(this.overItem)},isDragToList:function(){return this.isSubmenuItem(this.dragItem)&&!this.isSubmenuItem(this.overItem)}}}if(typeof BX.Main.interfaceButtonsManager==="undefined"){BX.Main.interfaceButtonsManager={data:{},init:function(t){let e=null;if(!BX.Type.isPlainObject(t)||!("containerId"in t)){throw"BX.Main.interfaceButtonsManager: containerId not set in params Object"}e=BX(t.containerId);if(BX.Type.isDomNode(e)){this.data[t.containerId]=new BX.Main.interfaceButtons(e,t)}else{BX(BX.delegate((function(){e=BX(t.containerId);if(!BX.Type.isDomNode(e)){throw"BX.Main.interfaceButtonsManager: container is not dom node"}this.data[t.containerId]=new BX.Main.interfaceButtons(e,t)}),this))}},getById:function(t){let e=null;if(BX.type.isString(t)&&BX.Type.isStringFilled(t)){try{e=this.data[t]}catch(t){}}return e},getObjects:function(){return this.data}}}
/* End */
;
; /* Start:"a:4:{s:4:"full";s:94:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/utils.min.js?1728733181575";s:6:"source";s:76:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/utils.js";s:3:"min";s:80:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/utils.min.js";s:3:"map";s:80:"/bitrix/components/bitrix/main.interface.buttons/templates/.default/utils.map.js";}"*/
(function(){"use strict";BX.namespace("BX.Buttons");BX.Buttons.Utils={getByClass:function(e,t,l){var n=[];if(t){n=(e||document.body).getElementsByClassName(t);if(!l){n=n.length?n[0]:null}else{n=[].slice.call(n)}}return n},getByTag:function(e,t,l){var n=[];if(t){n=(e||document.body).getElementsByTagName(t);if(!l){n=n.length?n[0]:null}else{n=[].slice.call(n)}}return n},getBySelector:function(e,t,l){var n=[];if(t){if(!l){n=(e||document.body).querySelector(t)}else{n=(e||document.body).querySelectorAll(t);n=[].slice.call(n)}}return n}}})();
/* End */
;
; /* Start:"a:4:{s:4:"full";s:86:"/bitrix/components/bitrix/crm.timeline/templates/.default/script.min.js?17287331814886";s:6:"source";s:67:"/bitrix/components/bitrix/crm.timeline/templates/.default/script.js";s:3:"min";s:71:"/bitrix/components/bitrix/crm.timeline/templates/.default/script.min.js";s:3:"map";s:71:"/bitrix/components/bitrix/crm.timeline/templates/.default/script.map.js";}"*/
BX.CrmTimelineManager=BX.Crm.Timeline.Manager;BX.CrmTimeline=BX.Crm.Timeline.Stream;BX.CrmHistory=BX.Crm.Timeline.Streams.History;BX.CrmFixedHistory=BX.Crm.Timeline.Streams.FixedHistory;BX.CrmSchedule=BX.Crm.Timeline.Streams.Schedule;BX.CrmEntityChatLayoutType=BX.Crm.Timeline.Streams.EntityChat.LayoutType;BX.CrmEntityChat=BX.Crm.Timeline.Streams.EntityChat;BX.CrmTimelineType=BX.Crm.Timeline.Types.Item;BX.CrmTimelineMarkType=BX.Crm.Timeline.Types.Mark;BX.CrmTimelineDeliveryType=BX.Crm.Timeline.Types.Delivery;BX.CrmTimelineOrderType=BX.Crm.Timeline.Types.Order;BX.CrmTimelineAction=BX.Crm.Timeline.Action;BX.CrmTimelineActivityAction=BX.Crm.Timeline.Actions.Activity;BX.CrmTimelineEmailAction=BX.Crm.Timeline.Actions.Email;BX.CrmTimelineCallAction=BX.Crm.Timeline.Actions.Call;BX.CrmTimelineOpenLineAction=BX.Crm.Timeline.Actions.OpenLine;BX.CrmHistoryEmailAction=BX.Crm.Timeline.Actions.HistoryEmail;BX.CrmHistoryCallAction=BX.Crm.Timeline.Actions.HistoryCall;BX.CrmHistoryOpenLineAction=BX.Crm.Timeline.Actions.OpenLine;BX.CrmScheduleEmailAction=BX.Crm.Timeline.Actions.ScheduleEmail;BX.CrmSchedulePostponeController=BX.Crm.Timeline.Tools.SchedulePostponeController;BX.CrmSchedulePostponeAction=BX.Crm.Timeline.Actions.SchedulePostpone;BX.CrmScheduleCallAction=BX.Crm.Timeline.Actions.ScheduleCall;BX.CrmScheduleOpenLineAction=BX.Crm.Timeline.Actions.OpenLine;BX.CrmTimelineItem=BX.Crm.Timeline.CompatibleItem;BX.Crm.TimelineEditorMode=BX.Crm.Timeline.Types.EditorMode;BX.CrmHistoryItem=BX.Crm.Timeline.Items.History;BX.CrmHistoryItemActivity=BX.Crm.Timeline.Items.HistoryActivity;BX.CrmHistoryItemComment=BX.Crm.Timeline.Items.Comment;BX.CrmHistoryItemModification=BX.Crm.Timeline.Items.Modification;BX.CrmHistoryItemMark=BX.Crm.Timeline.Items.Mark;BX.CrmHistoryItemCreation=BX.Crm.Timeline.Items.Creation;BX.CrmHistoryItemRestoration=BX.Crm.Timeline.Items.Restoration;BX.CrmHistoryItemRelation=BX.Crm.Timeline.Items.Relation;BX.CrmHistoryItemLink=BX.Crm.Timeline.Items.Link;BX.CrmHistoryItemUnlink=BX.Crm.Timeline.Items.Unlink;BX.CrmHistoryItemEmail=BX.Crm.Timeline.Items.Email;BX.CrmHistoryItemCall=BX.Crm.Timeline.Items.Call;BX.CrmHistoryItemMeeting=BX.Crm.Timeline.Items.Meeting;BX.CrmHistoryItemTask=BX.Crm.Timeline.Items.Task;BX.CrmHistoryItemWebForm=BX.Crm.Timeline.Items.WebForm;BX.CrmHistoryItemWait=BX.Crm.Timeline.Items.Wait;BX.CrmHistoryItemDocument=BX.Crm.Timeline.Items.Document;BX.CrmHistoryItemSender=BX.Crm.Timeline.Items.Sender;BX.CrmHistoryItemBizproc=BX.Crm.Timeline.Items.Bizproc;BX.CrmHistoryItemSms=BX.Crm.Timeline.Items.Sms;BX.CrmHistoryItemActivityRequest=BX.Crm.Timeline.Items.Request;BX.CrmHistoryItemActivityRestApplication=BX.Crm.Timeline.Items.Rest;BX.CrmHistoryItemOpenLine=BX.Crm.Timeline.Items.OpenLine;BX.CrmHistoryItemZoom=BX.Crm.Timeline.Items.Zoom;BX.CrmHistoryItemCallTracker=BX.Crm.Timeline.Items.Call;BX.CrmHistoryItemConversion=BX.Crm.Timeline.Items.Conversion;BX.CrmHistoryItemVisit=BX.Crm.Timeline.Items.Visit;BX.CrmHistoryItemScoring=BX.Crm.Timeline.Items.Scoring;BX.CrmHistoryItemOrderModification=BX.Crm.Timeline.Items.OrderModification;BX.CrmHistoryItemExternalNoticeModification=BX.Crm.Timeline.Items.ExternalNoticeModification;BX.CrmHistoryItemExternalNoticeStatusModification=BX.Crm.Timeline.Items.ExternalNoticeStatusModification;BX.CrmScheduleItem=BX.Crm.Timeline.Items.ScheduledBase;BX.CrmScheduleItemActivity=BX.Crm.Timeline.Items.Scheduled.Activity;BX.CrmScheduleItemEmail=BX.Crm.Timeline.Items.Scheduled.Email;BX.CrmScheduleItemCall=BX.Crm.Timeline.Items.Scheduled.Call;BX.CrmScheduleItemCallTracker=BX.Crm.Timeline.Items.Scheduled.CallTracker;BX.CrmScheduleItemMeeting=BX.Crm.Timeline.Items.Scheduled.Meeting;BX.CrmScheduleItemTask=BX.Crm.Timeline.Items.Scheduled.Task;BX.CrmScheduleItemStoreDocument=BX.Crm.Timeline.Items.Scheduled.StoreDocument;BX.CrmScheduleItemWebForm=BX.Crm.Timeline.Items.Scheduled.WebForm;BX.CrmScheduleItemDelivery=BX.Crm.Timeline.Items.Scheduled.Activity;BX.CrmScheduleItemWait=BX.Crm.Timeline.Items.Scheduled.Wait;BX.CrmScheduleItemActivityRequest=BX.Crm.Timeline.Items.Scheduled.Request;BX.CrmScheduleItemActivityRestApplication=BX.Crm.Timeline.Items.Scheduled.Rest;BX.CrmScheduleItemActivityOpenLine=BX.Crm.Timeline.Items.Scheduled.OpenLine;BX.CrmScheduleItemActivityZoom=BX.Crm.Timeline.Items.Scheduled.Zoom;BX.CrmTimelineItemAnimation=BX.Crm.Timeline.Animations.Item;BX.CrmTimelineItemAnimationNew=BX.Crm.Timeline.Animations.ItemNew;BX.CrmTimelineItemExpand=BX.Crm.Timeline.Animations.Expand;BX.CrmTimelineItemShift=BX.Crm.Timeline.Animations.Shift;BX.CrmCommentAnimation=BX.Crm.Timeline.Animations.Comment;BX.CrmTimelineItemFasten=BX.Crm.Timeline.Animations.Fasten;BX.CrmTimelineMenuBar=BX.Crm.Timeline.Tools.MenuBar;BX.CrmSmsWatcher=BX.Crm.Timeline.Tools.SmsWatcher;BX.CrmTimelineAudioPlaybackRateSelector=BX.Crm.Timeline.Tools.AudioPlaybackRateSelector;
/* End */
;
; /* Start:"a:4:{s:4:"full";s:87:"/bitrix/components/bitrix/disk.uf.file/templates/.default/script.min.js?172873318213285";s:6:"source";s:67:"/bitrix/components/bitrix/disk.uf.file/templates/.default/script.js";s:3:"min";s:71:"/bitrix/components/bitrix/disk.uf.file/templates/.default/script.min.js";s:3:"map";s:71:"/bitrix/components/bitrix/disk.uf.file/templates/.default/script.map.js";}"*/
this.BX=this.BX||{};this.BX.Disk=this.BX.Disk||{};(function(e,t,i,s){"use strict";const o=new Map;var a=babelHelpers.classPrivateFieldLooseKey("container");var n=babelHelpers.classPrivateFieldLooseKey("eventObject");var l=babelHelpers.classPrivateFieldLooseKey("uploader");var r=babelHelpers.classPrivateFieldLooseKey("id");var d=babelHelpers.classPrivateFieldLooseKey("onProgressHandler");var c=babelHelpers.classPrivateFieldLooseKey("handleFileComplete");var u=babelHelpers.classPrivateFieldLooseKey("handleFileAdd");var p=babelHelpers.classPrivateFieldLooseKey("handleFileProgress");var h=babelHelpers.classPrivateFieldLooseKey("handleFileError");var f=babelHelpers.classPrivateFieldLooseKey("handleMyDriveClick");var b=babelHelpers.classPrivateFieldLooseKey("handleCloudDriveClick");var v=babelHelpers.classPrivateFieldLooseKey("createFileInfo");var m=babelHelpers.classPrivateFieldLooseKey("createFileResult");class g{constructor(e){Object.defineProperty(this,m,{value:I});Object.defineProperty(this,v,{value:y});Object.defineProperty(this,b,{value:w});Object.defineProperty(this,f,{value:k});Object.defineProperty(this,h,{value:L});Object.defineProperty(this,p,{value:P});Object.defineProperty(this,u,{value:F});Object.defineProperty(this,c,{value:D});Object.defineProperty(this,a,{writable:true,value:null});Object.defineProperty(this,n,{writable:true,value:null});Object.defineProperty(this,l,{writable:true,value:null});Object.defineProperty(this,r,{writable:true,value:`dialog-${t.Text.getRandom(5)}`});Object.defineProperty(this,d,{writable:true,value:null});babelHelpers.classPrivateFieldLooseBase(this,a)[a]=e.container;babelHelpers.classPrivateFieldLooseBase(this,n)[n]=e.eventObject;let o=null;const g=babelHelpers.classPrivateFieldLooseBase(this,a)[a].querySelector(".diskuf-fileUploader");if(g){if(g.tagName.toLowerCase()==="input"){o=g.parentNode;g.disabled=true}else{o=g}}const _=babelHelpers.classPrivateFieldLooseBase(this,a)[a].querySelector(".diskuf-selector-link");if(_){t.Event.bind(_.parentNode,"click",babelHelpers.classPrivateFieldLooseBase(this,f)[f].bind(this))}const S=babelHelpers.classPrivateFieldLooseBase(this,a)[a].querySelector(".diskuf-selector-link-cloud");if(S){t.Event.bind(S.parentNode,"click",babelHelpers.classPrivateFieldLooseBase(this,b)[b].bind(this))}const U={_onUploadProgress:null};s.EventEmitter.emit(babelHelpers.classPrivateFieldLooseBase(this,n)[n],"DiskDLoadFormControllerInit",new s.BaseEvent({compatData:[U]}));if(t.Type.isFunction(U._onUploadProgress)){babelHelpers.classPrivateFieldLooseBase(this,d)[d]=U._onUploadProgress}babelHelpers.classPrivateFieldLooseBase(this,l)[l]=new i.Uploader({id:e.id,controller:"disk.uf.integration.diskUploaderController",browseElement:o,multiple:true,maxFileSize:null,treatOversizeImageAsFile:true,ignoreUnknownImageTypes:true,hiddenFieldName:e.hiddenFieldName,hiddenFieldsContainer:babelHelpers.classPrivateFieldLooseBase(this,a)[a],events:{[i.UploaderEvent.FILE_ADD]:babelHelpers.classPrivateFieldLooseBase(this,u)[u].bind(this),[i.UploaderEvent.FILE_COMPLETE]:babelHelpers.classPrivateFieldLooseBase(this,c)[c].bind(this),[i.UploaderEvent.FILE_ERROR]:babelHelpers.classPrivateFieldLooseBase(this,h)[h].bind(this),[i.UploaderEvent.FILE_UPLOAD_PROGRESS]:babelHelpers.classPrivateFieldLooseBase(this,p)[p].bind(this)}})}getUploader(){return babelHelpers.classPrivateFieldLooseBase(this,l)[l]}}function D(e){const t=e.getData().file;s.EventEmitter.emit(babelHelpers.classPrivateFieldLooseBase(this,n)[n],"OnFileUploadSuccess",new s.BaseEvent({compatData:[babelHelpers.classPrivateFieldLooseBase(this,m)[m](t),this,t.getBinary(),babelHelpers.classPrivateFieldLooseBase(this,v)[v](t)]}))}function F(e){if(babelHelpers.classPrivateFieldLooseBase(this,d)[d]!==null){const t=e.getData().file;babelHelpers.classPrivateFieldLooseBase(this,d)[d](babelHelpers.classPrivateFieldLooseBase(this,v)[v](t),5)}}function P(e){if(babelHelpers.classPrivateFieldLooseBase(this,d)[d]!==null){const t=e.getData().file;const i=e.getData().progress;babelHelpers.classPrivateFieldLooseBase(this,d)[d](babelHelpers.classPrivateFieldLooseBase(this,v)[v](t),i)}}function L(e){const t=e.getData().file;console.log("UploadMenu Error:",t.getError());s.EventEmitter.emit(babelHelpers.classPrivateFieldLooseBase(this,n)[n],"OnFileUploadFailed",new s.BaseEvent({compatData:[this,t.getBinary(),babelHelpers.classPrivateFieldLooseBase(this,v)[v](t)]}))}function k(){t.Runtime.loadExtension("disk.uploader.user-field-widget").then((e=>{const{openDiskFileDialog:t}=e;t({dialogId:`file-${babelHelpers.classPrivateFieldLooseBase(this,r)[r]}`,uploader:babelHelpers.classPrivateFieldLooseBase(this,l)[l]})}))}function w(){t.Runtime.loadExtension("disk.uploader.user-field-widget").then((e=>{const{openCloudFileDialog:t}=e;t({dialogId:`cloud-${babelHelpers.classPrivateFieldLooseBase(this,r)[r]}`,uploader:babelHelpers.classPrivateFieldLooseBase(this,l)[l]})}))}function y(e){const t=e.getState();t.size=e.getSizeFormatted();t.sizeInt=e.getSize();t.ext=e.getExtension();t.nameWithoutExt=i.Helpers.getFilenameWithoutExtension(e.getName());return t}function I(e){return{element_id:e.getServerFileId(),element_name:e.getName(),element_url:e.getPreviewUrl(),storage:e.getCustomData("storage")||"disk"}}const _=e=>{const t=document.getElementById(`diskuf-selectdialog-${e["UID"]}`);if(!t){return null}if(o.has(e["UID"])){return o.get(e["UID"])}const i=new g({id:`disk-uf-file-${e["UID"]}`,container:t,eventObject:t.parentNode,hiddenFieldName:e.controlName});o.set(e["UID"],i);return i};e.add=_})(this.BX.Disk.UF=this.BX.Disk.UF||{},BX,BX.UI.Uploader,BX.Event);(function(e){if(e.BX.Disk&&e.BX.Disk.UFShowController)return;var t=e.BX;var i=0;var s={};var o=function(e){return t.Disk.ajaxPromise({url:t.Disk.addToLinkParam("/bitrix/tools/disk/uf.php","action","getBreadcrumbs"),method:"POST",dataType:"json",data:{attachedId:e}})};var a=function(e){if(!t(e)||e.hasAttribute("bx-is-bound"))return;e.setAttribute("bx-is-bound","Y");this.img=e;this.node=e.parentNode.parentNode.parentNode;t.unbindAll(e);t.unbindAll(this.node);t.show(this.node);t.remove(this.node.nextSibling);this.id="wufdp_"+Math.random()};a.prototype={turnOn:function(){this.timeout=setTimeout(t.delegate((function(){this.show()}),this),500)},turnOff:function(){clearTimeout(this.timeout);this.timeout=null;this.hide()},show:function(){if(this.popup!=null)this.popup.close();if(this.popup==null){var e={width:this.img.naturalWidth,height:this.img.naturalHeight};if(t["UploaderUtils"]){var i=t.UploaderUtils.scaleImage(e,{width:parseInt(t.message("DISK_THUMB_WIDTH")),height:parseInt(t.message("DISK_THUMB_HEIGHT"))});e=i.destin}this.popup=new t.PopupWindow("bx-wufd-preview-img-"+this.id,this.img.parentNode,{lightShadow:true,offsetTop:-7,offsetLeft:(51-28)/2+14,autoHide:true,closeByEsc:true,bindOptions:{position:"top"},events:{onPopupClose:function(){this.destroy()},onPopupDestroy:t.proxy((function(){this.popup=null}),this)},content:t.create("DIV",{props:e,children:[t.create("IMG",{props:e,attrs:{src:this.img.src}})]})});this.popup.show()}this.popup.setAngle({position:"bottom"});this.popup.bindOptions.forceBindPosition=true;this.popup.adjustPosition();this.popup.bindOptions.forceBindPosition=false},hide:function(){if(this.popup!=null)this.popup.close()}};t.addCustomEvent("onDiskPreviewIsReady",(function(e){new a(e)}));t.Disk.UF.runImport=function(e){t.Disk.showActionModal({text:t.message("DISK_UF_FILE_STATUS_PROCESS_LOADING"),showLoaderIcon:true,autoHide:false});t.Disk.ExternalLoader.reloadLoadAttachedObject({attachedObject:{id:e.id,name:e.name,service:e.service},onFinish:t.delegate((function(e){if(e.hasOwnProperty("hasNewVersion")&&!e.hasNewVersion){t.Disk.showActionModal({text:t.message("DISK_UF_FILE_STATUS_HAS_LAST_VERSION"),showSuccessIcon:true,autoHide:true})}else if(e.status==="success"){t.Disk.showActionModal({text:t.message("DISK_UF_FILE_STATUS_SUCCESS_LOADING"),showSuccessIcon:true,autoHide:true})}else{t.Disk.showActionModal({text:t.message("DISK_UF_FILE_STATUS_FAIL_LOADING"),autoHide:true})}}),this),onProgress:t.delegate((function(e){}),this)}).start()};t.Disk.UF.disableAutoCommentToAttachedObject=function(e){var i=e.attachedId;t.Disk.ajax({method:"POST",dataType:"json",url:t.Disk.addToLinkParam("/bitrix/tools/disk/uf.php","action","disableAutoCommentToAttachedObject"),data:{attachedId:i},onsuccess:t.delegate((function(e){}),this)})};t.Disk.UF.enableAutoCommentToAttachedObject=function(e){var i=e.attachedId;t.Disk.ajax({method:"POST",dataType:"json",url:t.Disk.addToLinkParam("/bitrix/tools/disk/uf.php","action","enableAutoCommentToAttachedObject"),data:{attachedId:i},onsuccess:t.delegate((function(e){}),this)})};t.Disk.UF.showTransformationUpgradePopup=function(e){B24.licenseInfoPopup.show("disk_transformation_video_limit",t.message("DISK_UF_CONTROLLER_TRANSFORMATION_UPGRADE_POPUP_TITLE"),t.message("DISK_UF_CONTROLLER_TRANSFORMATION_UPGRADE_POPUP_CONTENT"),false)};t.Disk.UFShowController=function(e){if(!t.type.isPlainObject(e)){e={}}this.entityType=t.type.isNotEmptyString(e.entityType)?e.entityType:"";this.entityId=parseInt(e.entityId)>0?e.entityId:"";this.signedParameters=t.type.isNotEmptyString(e.signedParameters)?e.signedParameters:"";this.loader=null;this.container=t.type.isNotEmptyString(e.nodeId)?document.getElementById(e.nodeId):null;if(this.container){var i=this.container.querySelector(".disk-uf-file-switch-control");if(i){t.Event.bind(i,"click",t.Disk.UFShowController.onToggleView)}}if(t.type.isNotEmptyString(e.nodeId)){s[e.nodeId]=this}};t.Disk.UFShowController.getInstance=function(e){return t.type.isNotEmptyString(e)&&s[e]?s[e]:null};t.Disk.UFShowController.onToggleView=function(e){var i=e.currentTarget.closest(".diskuf-files-toggle-container"),s=e.currentTarget.getAttribute("data-bx-view-type");if(!t.type.isDomNode(i)||!t.type.isNotEmptyString(i.id)){return}var o=t.Disk.UFShowController.getInstance(i.id);if(o){o.toggleViewType({viewType:s})}e.preventDefault()};t.Disk.UFShowController.prototype.toggleViewType=function(e){this.showToggleViewLoader();t.ajax.runComponentAction("bitrix:disk.uf.file","toggleViewType",{mode:"class",signedParameters:this.signedParameters,data:{params:{viewType:e.viewType}}}).then(function(e){this.hideToggleViewLoader();t.clean(this.container);t.html(this.container,e.data.html)}.bind(this),(function(e){this.hideToggleViewLoader()}))};t.Disk.UFShowController.prototype.showToggleViewLoader=function(e){this.container.classList.add("diskuf-files-toggle-container-active");this.loader=new t.Loader({target:this.container});this.loader.show()};t.Disk.UFShowController.prototype.hideToggleViewLoader=function(e){this.container.classList.remove("diskuf-files-toggle-container-active");if(this.loader){this.loader.destroy()}};e.DiskOpenMenuCreateService=function(e){var i=[t.Disk.UF.getDocumentHandler("onlyoffice")?{text:t.Disk.UF.getDocumentHandler("onlyoffice").name,className:"bx-viewer-popup-item item-b24-docs",onclick:function(i,s){s.getMenuWindow().close();t.Disk.saveDocumentService("onlyoffice");t.adjust(e,{text:t.Disk.UF.getDocumentHandler("onlyoffice").name})}}:null,t.Disk.Document.Local.Instance.isEnabled()?{text:t.message("DISK_FOLDER_TOOLBAR_LABEL_LOCAL_BDISK_EDIT"),className:"bx-viewer-popup-item item-b24",onclick:function(i,s){s.getMenuWindow().close();t.Disk.saveDocumentService("l");t.adjust(e,{text:t.message("DISK_FOLDER_TOOLBAR_LABEL_LOCAL_BDISK_EDIT")})}}:null,{text:t.Disk.UF.getDocumentHandler("gdrive").name,className:"bx-viewer-popup-item item-gdocs",onclick:function(i,s){s.getMenuWindow().close();t.Disk.saveDocumentService("gdrive");t.adjust(e,{text:t.Disk.UF.getDocumentHandler("gdrive").name})}},{text:t.Disk.UF.getDocumentHandler("office365").name,className:"bx-viewer-popup-item item-office365",onclick:function(i,s){s.getMenuWindow().close();t.Disk.saveDocumentService("office365");t.adjust(e,{text:t.Disk.UF.getDocumentHandler("office365").name})}},{text:t.Disk.UF.getDocumentHandler("onedrive").name,className:"bx-viewer-popup-item item-office",onclick:function(i,s){s.getMenuWindow().close();t.Disk.saveDocumentService("onedrive");t.adjust(e,{text:t.Disk.UF.getDocumentHandler("onedrive").name})}}];t.PopupMenu.show("disk_open_menu_with_services",t(e),i,{offsetTop:0,offsetLeft:25,angle:{position:"top",offset:45},autoHide:true,zIndex:1e4,overlay:{opacity:.01},events:{}})};e.DiskOpenMenuImportService=function(e,i){var s=[];for(var o in i){if(!i.hasOwnProperty(o))continue;s.push({text:i[o].name,code:i[o].id,href:"#",onclick:function(e,i){var s=i.layout.item;t.addClass(s,"diskuf-selector-link-cloud");s.setAttribute("data-bx-doc-handler",i.code);t.onCustomEvent("onManualChooseCloudImport",[{target:s}]);t.removeClass(s,"diskuf-selector-link-cloud");s.removeAttribute("data-bx-doc-handler");t.PopupMenu.destroy("disk_open_menu_with_import_services");return t.PreventDefault(e)}})}var a=new t.CViewer({});a.openMenu("disk_open_menu_with_import_services",t(e),s,{offsetTop:0,offsetLeft:25});return t.PreventDefault()};e.DiskActionFileMenu=function(e,s,o){i++;t.PopupMenu.show("bx-viewer-wd-popup"+i+"_"+e,t(s),o,{angle:{position:"top",offset:25},autoHide:true});return false};e.WDInlineElementClickDispatcher=function(e,i){var s=t(i);if(s){t.fireEvent(s,"click")}return false}})(window);
/* End */
;
; /* Start:"a:4:{s:4:"full";s:90:"/bitrix/components/bitrix/main.ui.filter/templates/.default/script.min.js?1728733181189396";s:6:"source";s:69:"/bitrix/components/bitrix/main.ui.filter/templates/.default/script.js";s:3:"min";s:73:"/bitrix/components/bitrix/main.ui.filter/templates/.default/script.min.js";s:3:"map";s:73:"/bitrix/components/bitrix/main.ui.filter/templates/.default/script.map.js";}"*/
this.BX=this.BX||{};(function(e,t,i,n,s,r,a){"use strict";(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["date-group"]=function(e){var t,i,n,s,r;t={block:"main-ui-control-field-group",name:e.name+"_datesel",mix:"mix"in e?e.mix:null,attrs:{"data-type":"type"in e?e.type:"","data-name":"name"in e?e.name:"","data-time":e.enableTime},content:[]};if("label"in e&&BX.type.isNotEmptyString(e.label)){var a=e.label;if("icon"in e&&BX.Type.isPlainObject(e.icon)){a=[{block:"main-ui-control-field-label-icon",tag:"img",attrs:{title:e.icon.title?e.icon.title:"",src:e.icon.url}},{block:"main-ui-control-field-label-text",tag:"span",content:a}]}s={block:"main-ui-control-field-label",tag:"span",attrs:{title:e.label},content:a};t.content.push(s)}i={block:"main-ui-control-field",dragButton:false,content:{block:"main-ui-select",tabindex:"tabindex"in e?e.tabindex:"",value:"value"in e?e.value:"",items:"items"in e?e.items:"",name:"name"in e?e.name+"_datesel":"",params:"params"in e?e.params:"",valueDelete:false}};t.content.push(i);if("content"in e&&BX.type.isArray(e.content)){e.content.forEach((function(e){t.content.push(e)}))}if("content"in e&&(BX.type.isPlainObject(e.content)||BX.type.isNotEmptyString(e.content))){t.content.push(e.content)}n={block:"main-ui-item-icon-container",content:{block:"main-ui-item-icon",mix:["main-ui-delete","main-ui-filter-field-delete"],tag:"span",attrs:{title:"deleteTitle"in e&&e.deleteTitle?e.deleteTitle:""}}};t.content.push(n);if(!("dragButton"in e)||e.dragButton!==false){r={block:"main-ui-filter-icon-grab",mix:["main-ui-item-icon"],tag:"span",attrs:{title:"dragTitle"in e&&e.dragTitle?e.dragTitle:""}};t.content.push(r)}return t}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-control-field"]=function(e){var t,i,n,s,r;t={block:"main-ui-control-field",mix:"mix"in e?e.mix:null,attrs:{"data-type":"type"in e?e.type:"","data-name":"name"in e?e.name:""},content:[]};if("label"in e&&BX.type.isNotEmptyString(e.label)){var a=e.label;if("icon"in e&&BX.Type.isPlainObject(e.icon)){a=[{block:"main-ui-control-field-label-icon",tag:"img",attrs:{title:e.icon.title?e.icon.title:"",src:e.icon.url}},{block:"main-ui-control-field-label-text",tag:"span",content:a}]}s={block:"main-ui-control-field-label",tag:"span",attrs:{title:e.label},content:a};t.content.push(s)}if(BX.type.isArray(e.content)){e.content.forEach((function(e){t.content.push(e)}))}else if(BX.type.isPlainObject(e.content)||BX.type.isNotEmptyString(e.content)){t.content.push(e.content)}if("valueDelete"in e&&e.valueDelete===true){n={block:"main-ui-control-value-delete",content:{block:"main-ui-control-value-delete-item",tag:"span"}};t.content.push(n)}if("deleteButton"in e&&e.deleteButton===true){i={block:"main-ui-item-icon-container",content:{block:"main-ui-item-icon",mix:["main-ui-delete","main-ui-filter-field-delete"],tag:"span",attrs:{title:"deleteTitle"in e&&e.deleteTitle?e.deleteTitle:""}}};t.content.push(i)}if(!("dragButton"in e)||e.dragButton!==false){r={block:"main-ui-filter-icon-grab",mix:["main-ui-item-icon"],tag:"span",attrs:{title:"dragTitle"in e&&e.dragTitle?e.dragTitle:""}};t.content.push(r)}return t}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-control-field-group"]=function(e){var t,i,n,s;t={block:"main-ui-control-field-group",mix:"mix"in e?e.mix:null,attrs:{"data-type":"type"in e?e.type:"","data-name":"name"in e?e.name:""},content:[]};if("label"in e&&BX.type.isNotEmptyString(e.label)){var r=e.label;if("icon"in e&&BX.Type.isPlainObject(e.icon)){r=[{block:"main-ui-control-field-label-icon",tag:"img",attrs:{title:e.icon.title?e.icon.title:"",src:e.icon.url}},{block:"main-ui-control-field-label-text",tag:"span",content:r}]}n={block:"main-ui-control-field-label",tag:"span",attrs:{title:e.label},content:r};t.content.push(n)}if(BX.type.isArray(e.content)){e.content.forEach((function(e){t.content.push(e)}))}else if(BX.type.isPlainObject(e.content)||BX.type.isNotEmptyString(e.content)){t.content.push(e.content)}if("deleteButton"in e&&e.deleteButton===true){i={block:"main-ui-item-icon-container",content:{block:"main-ui-item-icon",mix:["main-ui-delete","main-ui-filter-field-delete"],tag:"span",attrs:{title:"deleteTitle"in e&&e.deleteTitle?e.deleteTitle:""}}};t.content.push(i)}if(!("dragButton"in e)||e.dragButton!==false){s={block:"main-ui-filter-icon-grab",mix:["main-ui-item-icon"],tag:"span",attrs:{title:"dragTitle"in e&&e.dragTitle?e.dragTitle:""}};t.content.push(s)}return t}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-control-string"]=function(e){return{block:"main-ui-control-string",mix:["main-ui-control"],tag:"input",attrs:{type:"type"in e?e.type:"text",name:"name"in e?e.name:"",placeholder:"placeholder"in e?e.placeholder:"",tabindex:"tabindex"in e?e.tabindex:"",value:"value"in e?e.value:""}}}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-control-textarea"]=function(e){return{block:"main-ui-control-string",mix:["main-ui-control main-ui-control-textarea"],tag:"textarea",attrs:{name:"name"in e?e.name:"",placeholder:"placeholder"in e?e.placeholder:"",tabindex:"tabindex"in e?e.tabindex:""},content:"value"in e?e.value:""}}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-filter-field-list-item"]=function(e){var t={block:"main-ui-select-inner-label",content:"label"in e?e.label:""};var i={block:"main-ui-filter-field-list-item",mix:"main-ui-select-inner-item",attrs:{"data-id":e.id,"data-name":e.name,"data-item":"item"in e?JSON.stringify(e.item):{}},events:{click:"onClick"in e?e.onClick:""},content:t};return i}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-filter-info"]=function(e){return{block:"main-ui-filter-info",tag:"span",content:e.content,attrs:{title:e.title}}}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-number"]=function(e){var t,i,n;t={block:"main-ui-number",mix:["main-ui-control"],content:[]};if("mix"in e&&BX.type.isArray(e.mix)){e.mix.forEach((function(e){t.mix.push(e)}))}i={block:"main-ui-number-input",mix:["main-ui-control-input"],tag:"input",attrs:{type:"number",name:"name"in e?e.name:"",tabindex:"tabindex"in e?e.tabindex:"",value:"value"in e?e.value:"",placeholder:"placeholder"in e?e.placeholder:"",autocomplete:"off"}};t.content.push(i);if("valueDelete"in e&&e.valueDelete===true){n={block:"main-ui-control-value-delete",content:{block:"main-ui-control-value-delete-item",tag:"span"}};t.content.push(n)}return t}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["main-ui-search-square"]=function(e){var t=["main-ui-filter-search-square"];if("isPreset"in e&&e.isPreset){t.push("main-ui-filter-search-square-preset")}var i="title"in e?e.title:"";var n="name"in e?BX.util.htmlspecialcharsback(e.name):"";if("icon"in e&&BX.Type.isPlainObject(e.icon)){var s=e.icon.title;i=i.length?s+": "+i:"";n=n.length?s+": "+n:""}return{block:"main-ui-square",mix:t,attrs:{"data-item":"item"in e?JSON.stringify(e.item):"",title:i},content:[{block:"main-ui-square-item",content:n},{block:"main-ui-square-delete",mix:["main-ui-item-icon"]}]}}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["number-group"]=function(e){var t,i,n,s,r;t={block:"main-ui-control-field-group",name:"name"in e?e.name+"_numsel":"",mix:"mix"in e?e.mix:null,attrs:{"data-type":"type"in e?e.type:"","data-name":"name"in e?e.name:""},content:[]};if("label"in e&&BX.type.isNotEmptyString(e.label)){var a=e.label;if("icon"in e&&BX.Type.isPlainObject(e.icon)){a=[{block:"main-ui-control-field-label-icon",tag:"img",attrs:{title:e.icon.title?e.icon.title:"",src:e.icon.url}},{block:"main-ui-control-field-label-text",tag:"span",content:a}]}s={block:"main-ui-control-field-label",tag:"span",attrs:{title:e.label},content:a};t.content.push(s)}i={block:"main-ui-control-field",dragButton:false,content:{block:"main-ui-select",tabindex:"tabindex"in e?e.tabindex:"",value:"value"in e?e.value:"",items:"items"in e?e.items:"",name:"name"in e?e.name+"_numsel":"",params:"params"in e?e.params:"",valueDelete:false}};t.content.push(i);if("content"in e&&BX.type.isArray(e.content)){e.content.forEach((function(e){t.content.push(e)}))}if("content"in e&&(BX.type.isPlainObject(e.content)||BX.type.isNotEmptyString(e.content))){t.content.push(e.content)}n={block:"main-ui-item-icon-container",content:{block:"main-ui-item-icon",mix:["main-ui-delete","main-ui-filter-field-delete"],tag:"span",attrs:{title:"deleteTitle"in e&&e.deleteTitle?e.deleteTitle:""}}};t.content.push(n);if(!("dragButton"in e)||e.dragButton!==false){r={block:"main-ui-filter-icon-grab",mix:["main-ui-item-icon"],tag:"span",attrs:{title:"dragTitle"in e&&e.dragTitle?e.dragTitle:""}};t.content.push(r)}return t}})();(function(){BX.namespace("BX.Main.ui.block");BX.Main.ui.block["sidebar-item"]=function(e){return{block:"main-ui-filter-sidebar-item"+("pinned"in e&&e.pinned?" main-ui-item-pin":""),attrs:{"data-id":"id"in e?e.id:""},content:[{block:"main-ui-filter-icon-grab",tag:"span",mix:["main-ui-item-icon"],attrs:{title:"dragTitle"in e&&e.dragTitle?e.dragTitle:""}},{block:"main-ui-filter-sidebar-item-text-container",tag:"span",content:[{block:"main-ui-filter-sidebar-item-input",tag:"input",attrs:{type:"text",placeholder:"placeholder"in e?e.placeholder:"",value:"text"in e?BX.util.htmlspecialchars(BX.util.htmlspecialcharsback(e.text)):""}},{block:"main-ui-filter-sidebar-item-text",tag:"span",content:"text"in e?e.text:"",attrs:{title:"text"in e?e.text:""}},{block:"main-ui-filter-icon-pin",tag:"span",mix:["main-ui-item-icon"],attrs:{title:"noEditPinTitle"in e&&e.noEditPinTitle?e.noEditPinTitle:""}}]},{block:"main-ui-filter-icon-edit",tag:"span",mix:["main-ui-item-icon"],attrs:{title:"editNameTitle"in e&&e.editNameTitle?e.editNameTitle:""}},{block:"main-ui-delete",tag:"span",mix:["main-ui-item-icon"],attrs:{title:"removeTitle"in e&&e.removeTitle?e.removeTitle:""}},{block:"main-ui-filter-icon-pin",tag:"span",mix:["main-ui-item-icon"],attrs:{title:"editPinTitle"in e&&e.editPinTitle?e.editPinTitle:""}},{block:"main-ui-filter-edit-mask"}]}}})();(function(){BX.namespace("BX.Filter");BX.Filter.Utils={cache:{},styleForEach:function e(t,i){var n;i=BX.type.isPlainObject(i)?i:null;n=Object.keys(i);[].forEach.call(t||[],(function(e){n.forEach((function(t){BX.style(e,t,i[t])}))}))},closestParent:function e(t,i){if(t){if(!i){return t.parentNode||null}else{return BX.findParent(t,{className:i})}}},closestChilds:function e(t){return!!t?t.children:null},getNext:function e(t){return!!t?t.nextElementSibling:null},getPrev:function e(t){return!!t?t.previousElementSibling:null},collectionSort:function e(t,i){var n,s,r,a,l;if(t&&i&&t!==i&&t.parentNode===i.parentNode){n=this.closestParent(i);s=this.closestChilds(n);r=s.length;a=this.getIndex(s,t);l=this.getIndex(s,i);if(r===l){n.appendChild(i)}if(a>l){n.insertBefore(t,i)}if(a<l&&r!==l){n.insertBefore(t,this.getNext(i))}}},getIndex:function e(t,i){return[].indexOf.call(t||[],i)},getByClass:function e(t,i,n){var s=[];if(i){s=(t||document.body).getElementsByClassName(i);if(!n){s=s.length?s[0]:null}else{s=[].slice.call(s)}}return s},getByTag:function e(t,i,n){var s=[];if(i){s=(t||document.body).getElementsByTagName(i);if(!n){s=s.length?s[0]:null}else{s=[].slice.call(s)}}return s},getBySelector:function e(t,i,n){var s=[];if(i){if(!n){s=(t||document.body).querySelector(i)}else{s=(t||document.body).querySelectorAll(i);s=[].slice.call(s)}}return s},requestAnimationFrame:function e(){var t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)};t.apply(window,arguments)},sortObject:function e(t){var i={};Object.keys(t).sort().forEach((function(e){i[e]=t[e]}));return i},objectsIsEquals:function e(t,i){return JSON.stringify(t)===JSON.stringify(i)},isKey:function e(t,i){var n={8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",18:"alt",27:"escape",32:"space",37:"leftArrow",38:"upArrow",39:"rightArrow",40:"downArrow",46:"delete",112:"f1",113:"f2",114:"f3",115:"f4",116:"f5",117:"f6",118:"f7",119:"f8",120:"f9",121:"f10",122:"f11",123:"f12",65:"a"};var s=!!t?"keyCode"in t?t.keyCode:"which"in t?t.which:0:0;return s in n&&n[s]===i}}})();(function(){BX.namespace("BX.Filter");BX.Filter.DestinationSelectorManager={fields:[],controls:{},onSelect:function e(t,i,n){if(!BX.type.isNotEmptyObject(n)||!BX.type.isNotEmptyObject(n.item)||!BX.type.isNotEmptyString(n.selectorId)){return}var s=n.selectorId,r=n.item;var a=BX.Filter.DestinationSelectorManager.controls[s];if(a){var l=r.id;if(BX.type.isNotEmptyString(t)&&t=="Y"&&BX.type.isNotEmptyString(i)){var o=new RegExp("^"+i+"(\\d+)$");var u=l.match(o);if(BX.type.isArray(u)){l=u[1]}}else{var c={};BX.onCustomEvent(window,"BX.Filter.DestinationSelector:convert",[{selectorId:s,value:l},c]);if(BX.type.isNotEmptyString(c.value)){l=c.value}}a.setData(BX.util.htmlspecialcharsback(r.name),l);a.getLabelNode().value="";a.getLabelNode().blur()}},onDialogOpen:function e(t){if(typeof t=="undefined"||!BX.type.isNotEmptyString(t.selectorId)){return}var i=t.selectorId;var n=BX.Filter.DestinationSelector.items[i];if(n){n.onDialogOpen()}},onDialogClose:function e(t){if(typeof t=="undefined"||!BX.type.isNotEmptyString(t.selectorId)){return}var i=t.selectorId;var n=BX.Filter.DestinationSelector.items[i];if(n){n.onDialogClose()}}};BX.Filter.DestinationSelector=function(){this.id="";this.filterId="";this.settings={};this.fieldId="";this.control=null;this.inited=null};BX.Filter.DestinationSelector.items={};BX.Filter.DestinationSelector.create=function(e,t){if(typeof this.items[e]!="undefined"){return this.items[e]}var i=new BX.Filter.DestinationSelector(e,t);i.initialize(e,t);this.items[e]=i;BX.onCustomEvent(window,"BX.Filter.DestinationSelector:create",[e]);return i};BX.Filter.DestinationSelector.prototype.getSetting=function(e,t){return this.settings.hasOwnProperty(e)?this.settings[e]:t};BX.Filter.DestinationSelector.prototype.getSearchInput=function(){return this.control?this.control.getLabelNode():null};BX.Filter.DestinationSelector.prototype.initialize=function(e,t){this.id=e;this.settings=t?t:{};this.fieldId=this.getSetting("fieldId","");this.filterId=this.getSetting("filterId","");this.inited=false;this.opened=null;var i=this.getSetting("initialValue",false);if(!!i){var n={};n[this.fieldId]=i.itemId;n[this.fieldId+"_label"]=i.itemName;BX.Main.filterManager.getById(this.filterId).getApi().setFields(n)}BX.addCustomEvent(window,"BX.Main.Filter:customEntityFocus",BX.delegate(this.onCustomEntitySelectorOpen,this));BX.addCustomEvent(window,"BX.Main.Filter:customEntityBlur",BX.delegate(this.onCustomEntitySelectorClose,this));BX.addCustomEvent(window,"BX.Main.Filter:onGetStopBlur",BX.delegate(this.onGetStopBlur,this));BX.addCustomEvent(window,"BX.Main.SelectorV2:beforeInitDialog",BX.delegate(this.onBeforeInitDialog,this));BX.addCustomEvent(window,"BX.Main.Filter:customEntityRemove",BX.delegate(this.onCustomEntityRemove,this))};BX.Filter.DestinationSelector.prototype.open=function(){var e=this.id;if(!this.inited){var t=this.getSearchInput();t.id=t.name;BX.addCustomEvent(window,"BX.Main.SelectorV2:afterInitDialog",BX.delegate((function(e){if(typeof e.id!="undefined"||e.id!=this.id){return}this.opened=true}),this));BX.addCustomEvent(window,"BX.UI.SelectorManager:onCreate",BX.delegate((function(e){if(!BX.type.isNotEmptyString(e)||e!=this.id){return}BX.onCustomEvent(window,"BX.Filter.DestinationSelector:setSelected",[{selectorId:e,current:this.control.getCurrentValues()}])}),this));BX.onCustomEvent(window,"BX.Filter.DestinationSelector:openInit",[{id:this.id,inputId:t.id,containerId:t.id}])}else{var i={};i[this.currentUser.entityId]="users";BX.onCustomEvent(window,"BX.Filter.DestinationSelector:open",[{id:this.id,bindNode:this.control.getField(),value:i}]);this.opened=true}};BX.Filter.DestinationSelector.prototype.close=function(){if(typeof BX.Main.selectorManagerV2.controls[this.id]!=="undefined"){BX.Main.selectorManagerV2.controls[this.id].closeDialog()}};BX.Filter.DestinationSelector.prototype.onCustomEntitySelectorOpen=function(e){var t=e.getId();if(this.fieldId!==t){this.control=null}else{this.control=e;if(this.control){var i=this.control.getCurrentValues();this.currentUser={entityId:i["value"]}}BX.Filter.DestinationSelectorManager.controls[this.id]=this.control;if(!this.opened){this.open()}else{this.close()}}};BX.Filter.DestinationSelector.prototype.onCustomEntitySelectorClose=function(e){if(this.fieldId===e.getId()&&this.inited===true&&this.opened===true){this.control=null;window.setTimeout(BX.delegate(this.close,this),0)}};BX.Filter.DestinationSelector.prototype.onGetStopBlur=function(e,t){if(BX.findParent(e.target,{className:"bx-lm-box"})){t.stopBlur=true}};BX.Filter.DestinationSelector.prototype.onCustomEntityRemove=function(e){if(this.fieldId===e.getId()){var t=BX.UI.SelectorManager.instances[e.getId()];if(t&&typeof e.hiddenInput!="undefined"&&typeof e.hiddenInput.value!="undefined"&&BX.type.isNotEmptyObject(t.itemsSelected)&&typeof t.itemsSelected[e.hiddenInput.value]!="undefined"){delete t.itemsSelected[e.hiddenInput.value]}}};BX.Filter.DestinationSelector.prototype.onBeforeInitDialog=function(e){if(typeof e.id=="undefined"||e.id!=this.id){return}this.inited=true;if(!this.control){e.blockInit=true}};BX.Filter.DestinationSelector.prototype.onDialogOpen=function(){this.opened=true};BX.Filter.DestinationSelector.prototype.onDialogClose=function(){this.opened=false}})();function l(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?l(Object(i),!0).forEach((function(t){babelHelpers.defineProperty(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}var u=function(){function e(t,i){babelHelpers.classCallCheck(this,e);babelHelpers.defineProperty(this,"id",null);babelHelpers.defineProperty(this,"filter",null);babelHelpers.defineProperty(this,"dialog",null);babelHelpers.defineProperty(this,"dialogOptions",null);babelHelpers.defineProperty(this,"control",null);babelHelpers.defineProperty(this,"isMultiple",false);babelHelpers.defineProperty(this,"needAddEntityIdToFilter",false);babelHelpers.defineProperty(this,"isActive",false);babelHelpers.defineProperty(this,"needShowDialogOnEmptyInput",true);this.id=t;this.settings=i?i:{};this.filter=this.getSetting("filter",null);if(!this.filter){throw new Error("Filter option is required for EntitySelector field")}this.isMultiple=!!this.getSetting("isMultiple",false);this.needAddEntityIdToFilter=this.getSetting("addEntityIdToResult","N")==="Y";this.needShowDialogOnEmptyInput=!!this.getSetting("showDialogOnEmptyInput",true);this.dialogOptions=this.prepareDialogOptions();this.dialog=null;s.EventEmitter.subscribe("BX.Main.Filter:customEntityFocus",this.onCustomEntityFocus.bind(this));s.EventEmitter.subscribe("BX.Main.Filter:customEntityBlur",this.onCustomEntityBlur.bind(this));s.EventEmitter.subscribe("BX.Main.Filter:onGetStopBlur",this.onGetStopBlur.bind(this));s.EventEmitter.subscribe("BX.Main.Filter:move",this.onCustomEntityRemove.bind(this));s.EventEmitter.subscribe("BX.Main.Filter:onApplyPreset",this.onApplyPreset.bind(this));this.controlInputChangeHandler=this.onSearchInputChange.bind(this)}babelHelpers.createClass(e,[{key:"open",value:function e(){var t=this;this.isActive=true;if(!this.dialog){this.initDialog().then((function(){if(t.isActive){t.openDialog()}}))}else{this.openDialog()}}},{key:"close",value:function e(){this.isActive=false;if(this.dialog&&this.dialog.isOpen()){this.dialog.hide()}}},{key:"getFilterField",value:function e(){return this.filter.getField(this.id)}},{key:"getFilterFieldInputWrapper",value:function e(){var t=this.getFilterField();if(!t){return null}return BX.Filter.Utils.getBySelector(t.node,".main-ui-control-entity")}},{key:"getFilterFieldInput",value:function e(){var t=this.getFilterField();if(!t){return null}return BX.Filter.Utils.getBySelector(t.node,"."+this.filter.settings.classStringInput+'[type="text"]')}},{key:"setControl",value:function e(t){this.control=t}},{key:"unsetControl",value:function e(){this.control=null}},{key:"getSetting",value:function e(t,i){return this.settings.hasOwnProperty(t)?this.settings[t]:i}},{key:"prepareDialogOptions",value:function e(){var t={enableSearch:false,hideOnSelect:true,autoHide:false,hideByEsc:false};var i=this.getSetting("dialogOptions",{});i=Object.assign(t,i);return i}},{key:"openDialog",value:function e(){if(this.dialog.isOpen()){return}var t=this.getFilterFieldInputWrapper();var i=this.getFilterFieldInput();var n=a.Type.isDomNode(i)?i.value.trim():"";this.dialog.setTargetNode(t);this.dialog.setWidth(t.offsetWidth);if(this.needShowDialogOnEmptyInput||n.length){this.dialog.show()}this.updateSelectedItemsInDialog(this.dialog);if(n.length){this.dialog.search(n)}}},{key:"initDialog",value:function t(){var i=this;return e.initDialogExtension().then((function(e){var t=e.Dialog;i.dialog=new t(o(o({},i.dialogOptions),{},{id:i.getDialogId(),multiple:i.isMultiple}));s.EventEmitter.subscribe(i.dialog,"Item:onSelect",i.onDialogItemSelect.bind(i));s.EventEmitter.subscribe(i.dialog,"Item:onDeselect",i.onDialogItemDeSelect.bind(i));s.EventEmitter.subscribe(i.dialog,"onLoad",i.onDialogLoad.bind(i));var n=i.getFilterFieldInput();a.Event.bind(n,"input",i.controlInputChangeHandler)}))}},{key:"addItemToFilter",value:function e(t,i){if(!this.control){return}if(this.isMultiple){var n=this.control.getCurrentValues();if(!n.filter((function(e){return e.value===t})).length){n.push({value:t,label:i});this.control.setMultipleData(n)}}else{this.control.setSingleData(i,t)}}},{key:"removeItemFromFilter",value:function e(t){if(!this.control){return}if(this.isMultiple){var i=this.control.getCurrentValues();this.control.setMultipleData(i.filter((function(e){return e.value!==t})))}else{this.control.clearValue()}}},{key:"getDialogId",value:function e(){return this.id+"_"+this.filter.getParam("FILTER_ID")}},{key:"getItemId",value:function e(t){if(this.needAddEntityIdToFilter){return JSON.stringify([t.getEntityId()+"",t.getId()+""])}return t.getId()+""}},{key:"updateSelectedItemsInDialog",value:function e(t){var i=this;if(!this.control){return}var n=this.control.getCurrentValues();if(!this.isMultiple){n=[n]}var s=n.map((function(e){return e.value}));t.getItems().forEach((function(e){if(s.indexOf(i.getItemId(e))>-1){e.select(true)}else{e.deselect()}}))}},{key:"onCustomEntityFocus",value:function e(t){var i=t.getData(),n=babelHelpers.slicedToArray(i,1),s=n[0];if(this.id!==s.getId()){return}this.setControl(s);this.open()}},{key:"onCustomEntityBlur",value:function e(t){var i=t.getData(),n=babelHelpers.slicedToArray(i,1),s=n[0];if(this.id!==s.getId()){return}this.close();this.unsetControl()}},{key:"onGetStopBlur",value:function e(t){var i=t.getData(),n=babelHelpers.slicedToArray(i,2),s=n[0],r=n[1];if(!(this.dialog&&this.dialog.isOpen())){return}var l=this.getFilterField();if(!l){return}var o=s.target;if(o===l.node||l.node.contains(o)&&!a.Dom.hasClass(o,this.filter.settings.classFieldDelete)||o===document.body){r.stopBlur=true;return}var u=this.dialog.getPopup().getContentContainer();if(o===u||u.contains(o)){r.stopBlur=true}}},{key:"onCustomEntityRemove",value:function e(t){var i=t.getData(),n=babelHelpers.slicedToArray(i,1),s=n[0];if(this.id!==s.getId()){return}if(this.dialog){this.dialog.destroy();this.dialog=null}this.unsetControl()}},{key:"onApplyPreset",value:function e(t){if(this.dialog){this.dialog.destroy();this.dialog=null}this.unsetControl()}},{key:"onSearchInputChange",value:function e(t){if(this.dialog){if(!this.needShowDialogOnEmptyInput){if(t.target.value){this.open()}else{this.close()}}this.dialog.search(t.target.value)}}},{key:"onDialogItemSelect",value:function e(t){var i=t.getData(),n=i.item;this.addItemToFilter(this.getItemId(n),n.getTitle());this.getFilterFieldInput().value=""}},{key:"onDialogItemDeSelect",value:function e(t){var i=t.getData(),n=i.item;this.removeItemFromFilter(this.getItemId(n))}},{key:"onDialogLoad",value:function e(t){var i=t.getTarget();this.updateSelectedItemsInDialog(i)}}],[{key:"initDialogExtension",value:function t(){if(!e.initExtensionPromise){e.initExtensionPromise=a.Runtime.loadExtension("ui.entity-selector")}return e.initExtensionPromise}},{key:"create",value:function t(i,n){if(a.Type.isObject(this.items[i])){if(a.Type.isObject(n.filter)){this.items[i].filter=n.filter}return this.items[i]}var s=new e(i,n);this.items[i]=s;return s}}]);return e}();babelHelpers.defineProperty(u,"initExtensionPromise",null);babelHelpers.defineProperty(u,"items",{});var c=a.Reflection.namespace("BX.Filter");c.EntitySelector=u;(function(){BX.namespace("BX.Filter");BX.Filter.FieldController=function(e,t){this.field=null;this.parent=null;this.type=null;this.input=null;this.deleteButton=null;this.init(e,t)};BX.Filter.FieldController.prototype={init:function e(t,i){if(!BX.type.isDomNode(t)){throw"BX.Filter.FieldController.init: field isn't dom node"}if(!(i instanceof BX.Main.Filter)){throw"BX.Filter.FieldController.init: parent not instance of BX.Main.ui.Filter"}this.field=t;this.parent=i;this.bind();this.isShowDelete()?this.showDelete():this.hideDelete()},isShowDelete:function e(){var t=this.getSquares();return this.getInputValue()||BX.type.isArray(t)&&t.length},getField:function e(){return this.field},getInput:function e(){var t,i;if(!BX.type.isDomNode(this.input)){t=this.getType();i=this.parent.types;if(t===i.DATE){this.input=BX.Filter.Utils.getByClass(this.getField(),this.parent.settings.classDateInput)}if(t===i.NUMBER||t==="number"){this.input=BX.Filter.Utils.getByClass(this.getField(),this.parent.settings.classNumberInput)}if(t===i.STRING){this.input=BX.Filter.Utils.getByClass(this.getField(),this.parent.settings.classStringInput)}if(t===i.CUSTOM_ENTITY){this.input=BX.Filter.Utils.getBySelector(this.getField(),'input[type="hidden"]')}}return this.input},getDeleteButton:function e(){if(!BX.type.isDomNode(this.deleteButton)){this.deleteButton=BX.Filter.Utils.getByClass(this.getField(),this.parent.settings.classValueDelete)}return this.deleteButton},getSquares:function e(){return BX.Filter.Utils.getByClass(this.getField(),this.parent.settings.classSquare)},bind:function e(){if(this.getType()!==this.parent.types.MULTI_SELECT&&this.getType()!==this.parent.types.SELECT){BX.bind(this.getDeleteButton(),"click",BX.delegate(this._onDeleteClick,this));BX.bind(this.getInput(),"input",BX.delegate(this._onInput,this))}},clearInput:function e(){var t=this.getInput();if(BX.type.isDomNode(t)){t.value=""}},hideDelete:function e(){var t=this.getDeleteButton();if(BX.type.isDomNode(t)){BX.addClass(t,this.parent.settings.classHide)}},showDelete:function e(){var t=this.getDeleteButton();if(BX.type.isDomNode(t)){BX.removeClass(t,this.parent.settings.classHide)}},removeSquares:function e(){var t=this.getSquares();if(BX.type.isArray(t)&&t.length){t.forEach((function(e){BX.remove(e)}))}},_onDeleteClick:function e(){this.removeSquares();this.clearInput();this.hideDelete()},_onInput:function e(){this.getInputValue()?this.showDelete():this.hideDelete()},getInputValue:function e(){var t="";var i=this.getInput();if(BX.type.isDomNode(i)){t=i.value}return t},getType:function e(){if(!BX.type.isNotEmptyString(this.type)){this.type=BX.data(this.getField(),"type")}return this.type}}})();(function(){BX.namespace("BX.Main.ui");BX.Main.ui.CustomEntity=function(){this.field=null;this.labelInput=null;this.hiddenInput=null;this.popupContainer=null;this.inputClass="main-ui-control-string";this.squareClass="main-ui-square";this.multiple=null};BX.Main.ui.CustomEntity.isMultiple=function(e){if(!!e&&!BX.hasClass(e,"main-ui-control-entity")){e=BX.Filter.Utils.getByClass(e,"main-ui-control-entity")}return!!e&&JSON.parse(BX.data(e,"multiple"))};BX.Main.ui.CustomEntity.prototype={setField:function e(t){if(this.field!==t){this.field=t;this.reset()}},isMultiple:function e(){return BX.Main.ui.CustomEntity.isMultiple(this.getField())},reset:function e(){this.labelInput=null;this.hiddenInput=null},getField:function e(){return this.field},getId:function e(){var t=this.getHiddenNode();var i=null;if(BX.type.isDomNode(t)){i=t.name}return i},getLabelNode:function e(){if(!BX.type.isDomNode(this.labelInput)){this.labelInput=BX.Filter.Utils.getBySelector(this.getField(),"."+this.inputClass+'[type="text"]')}return this.labelInput},getHiddenNode:function e(){if(!BX.type.isDomNode(this.hiddenInput)){this.hiddenInput=BX.Filter.Utils.getBySelector(this.getField(),"."+this.inputClass+'[type="hidden"]')}return this.hiddenInput},getSquareByValue:function e(t){return BX.Filter.Utils.getBySelector(this.getField(),['[data-item*=":'+BX.util.jsencode(t)+'}"]','[data-item*=":\\"'+BX.util.jsencode(t)+'\\"}"]'].join(", "))},getSquares:function e(){return BX.Filter.Utils.getByClass(this.getField(),this.squareClass,true)},removeSquares:function e(){this.getSquares().forEach(BX.remove)},setSquare:function e(t,i){var n=this.getField();var s={block:"main-ui-square",name:t,item:{_label:t,_value:i}};var r=BX.decl(s);var a=this.getSquares();if(!a.length){BX.prepend(r,n)}else{BX.insertAfter(r,a[a.length-1])}},getCurrentValues:function e(){var t=this.getSquares();var i,n;if(this.isMultiple()){n=[];for(var s=0,r=t.length;s<r;s++){try{i=JSON.parse(BX.data(t[s],"item"));n.push({label:i._label,value:i._value})}catch(e){}}}else{if(t.length===0){n={label:"",value:""}}else{try{i=JSON.parse(BX.data(t[0],"item"));n={label:i._label,value:i._value}}catch(e){n={label:"",value:""}}}}return n},setData:function e(t,i){return this.isMultiple()?this.setMultipleData(t,i):this.setSingleData(t,i)},setSingleData:function e(t,i){var n=this.getHiddenNode();this.removeSquares();this.setSquare(t,i);if(BX.type.isDomNode(n)){n.value=i;BX.fireEvent(n,"input")}},setMultipleData:function e(t,i){var n=[];var s=this.getHiddenNode();if(BX.type.isArray(t)){this.removeSquares();if(BX.type.isArray(t)){t.forEach((function(e){n.push(e.value);this.setSquare(e.label,e.value)}),this);if(BX.type.isDomNode(s)){s.value=JSON.stringify(n);BX.fireEvent(s,"input")}}}if(!BX.type.isArray(t)&&i!==null){if(!this.getSquareByValue(i)){this.setSquare(t,i);this.getSquares().forEach((function(e){var t=JSON.parse(BX.data(e,"item"));if(BX.type.isPlainObject(t)){n.push(t._value)}}));s.value=JSON.stringify(n);BX.fireEvent(s,"input")}}},clearValue:function e(){this.removeSquares();var t=this.getHiddenNode();t.value=this.isMultiple()?"[]":""},setPopupContainer:function e(t){if(BX.type.isDomNode(t)){this.popupContainer=t}},getPopupContainer:function e(){return this.popupContainer}}})();(function(){BX.namespace("BX.Filter");BX.Filter.Search=function(e){this.parent=null;this.container=null;this.input=null;this.preset=null;this.buttonsContainer=null;this.delay=800;this.timeout=null;this.init(e)};BX.Filter.Search.prototype={init:function e(t){this.parent=t;BX.bind(this.getInput(),"input",BX.delegate(this._onInputWithoutDebounce,this));if(this.parent.getParam("ENABLE_LIVE_SEARCH")){BX.bind(this.getInput(),"input",BX.debounce(this._onInput,this.delay,this))}BX.bind(this.getInput(),"keydown",BX.delegate(this._onKeyDown,this));BX.bind(this.getFindButton(),"click",BX.delegate(this._onSearchClick,this));BX.bind(this.getContainer(),"click",BX.delegate(this._onSearchContainerClick,this));this.removeAutofocus();this.firstInit=true},removeAutofocus:function e(){var t=this.getInput();if(!!t){t.blur();t.autofocus=null}},getFindButton:function e(){if(!BX.type.isDomNode(this.findButton)){this.findButton=BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classSearchButton)}return this.findButton},_onSearchClick:function e(){this.apply()},selectSquare:function e(t){!!t&&BX.addClass(t,this.parent.settings.classSquareSelected)},selectSquares:function e(){this.getSquares().forEach(this.selectSquare,this)},unselectSquare:function e(t){!!t&&BX.removeClass(t,this.parent.settings.classSquareSelected)},unselectSquares:function e(){this.getSquares().forEach(this.unselectSquare,this)},removeSquares:function e(){this.getSquares().forEach(this.removeSquare,this)},isSquaresSelected:function e(){var t=this.getSquares();return t.length&&t.every(this.isSquareSelected,this)},isSquareSelected:function e(t){return!!t&&BX.hasClass(t,this.parent.settings.classSquareSelected)},getLastSquare:function e(){var t=this.getSquares();return!!t?t[t.length-1]:null},isTextSelected:function e(){var t=this.getSearchString().length;var i=this.getInput();var n=i.selectionStart;var s=i.selectionEnd;return n===0&&s!==0&&s===t},isSelectionStart:function e(){var t=this.getInput();var i=t.selectionStart;var n=t.selectionEnd;return i===0&&n===0},isSquareRemoveButton:function e(t){return!!t&&BX.hasClass(t,this.parent.settings.classSquareDelete)},isClearButton:function e(t){return!!t&&BX.hasClass(t,this.parent.settings.classClearSearchValueButton)},getClearButton:function e(){return this.getContainer().querySelector("."+this.parent.settings.classClearSearchValueButton)},isSearchButton:function e(t){return!!t&&BX.hasClass(t,this.parent.settings.classSearchButton)},adjustFocus:function e(){if(!BX.browser.IsMobile()){var t=this.getInput();if(document.activeElement!==t&&window.scrollY<BX.pos(t).top){t.value=t.value;t.blur();t.focus()}}},findSquareByChild:function e(t){return BX.findParent(t,{className:this.parent.settings.classSquare},true,false)},getSquareData:function e(t){var i=BX.data(t,"item");return!!t&&!!i?JSON.parse(i):null},isSquareControl:function e(t){var i=this.getSquareData(t);return!!i&&(i.type==="control"||BX.type.isArray(i))},onPresetSquareRemove:function e(){var t=this.parent;var i=t.getPreset();var n=i.getCurrentPresetId();var s=t.getParam("RESET_TO_DEFAULT_MODE");var r=t.getParam("VALUE_REQUIRED");var a=i.isPinned(n);var l=this.getSquares();if(l.length===1){if(r&&a){this.parent.showPopup();this.adjustPlaceholder();this.parent.getPreset().deactivateAllPresets()}else{if(s&&a||!s){var o=true;this.lastPromise=t.resetFilter(o);t.closePopup()}}if(s&&!a){this.lastPromise=t.getPreset().applyPinnedPreset()}}if(l.length>1){var u=i.getPreset(i.getCurrentPresetId());var c=i.getPreset("tmp_filter");c.FIELDS=BX.clone(u.ADDITIONAL);u.ADDITIONAL=[];i.deactivateAllPresets();i.applyPreset("tmp_filter");t.applyFilter()}},onControlSquareRemove:function e(t){var i=this.parent;var n=i.getPreset();var s=i.getParam("RESET_TO_DEFAULT_MODE");var r=i.getParam("VALUE_REQUIRED");var a;if(s&&this.getSquares().length===1){if(r){a=this.getSquareData(t);i.clearControls(a);this.parent.showPopup();this.adjustPlaceholder();this.parent.getPreset().deactivateAllPresets()}else{this.lastPromise=i.getPreset().applyPinnedPreset()}}else{a=this.getSquareData(t);i.clearControls(a);i.closePopup();if(BX.type.isArray(a)){a.forEach((function(e){n.removeAdditionalField(e.name)}))}if(BX.type.isPlainObject(a)){n.removeAdditionalField(a.name)}this.apply()}},onValueRequiredSquareRemove:function e(){var t=this.parent;t.getPreset().deactivateAllPresets();t.showPopup();this.adjustPlaceholder()},complexSquareRemove:function e(t){var i=this.parent.getParam("VALUE_REQUIRED_MODE");var n=!this.isSquareControl(t);if(i){this.onValueRequiredSquareRemove()}else{if(n){this.onPresetSquareRemove()}else{this.onControlSquareRemove(t)}}this.removeSquare(t);this.adjustClearButton()},adjustClearButton:function e(){!!this.getLastSquare()?this.showClearButton():this.hideClearButton()},removeSquare:function e(t){!!t&&BX.remove(t)},_onSearchContainerClick:function e(t){var i=this.parent;if(this.isClearButton(t.target)){if(!i.getParam("VALUE_REQUIRED")){if(!i.getParam("VALUE_REQUIRED_MODE")){if(i.getParam("RESET_TO_DEFAULT_MODE")){this.clearInput();this.lastPromise=i.getPreset().applyPinnedPreset()}else{i.resetFilter()}i.closePopup();this.adjustFocus()}else{this.removeSquares();i.showPopup();this.adjustPlaceholder();this.hideClearButton();i.getPreset().deactivateAllPresets()}}else{var n=i.getPreset().isPinned(i.getPreset().getCurrentPresetId());if(n||i.getPreset().getCurrentPresetId()==="tmp_filter"){var s=i.getPreset().getPreset(i.getPreset().getCurrentPresetId());if(s.ADDITIONAL.length){s.ADDITIONAL=[];this.lastPromise=i.getPreset().applyPreset(i.getPreset().getCurrentPresetId());this.apply()}else{this.removeSquares();i.showPopup();this.adjustPlaceholder();this.hideClearButton();i.getPreset().deactivateAllPresets()}}else{if(i.getParam("RESET_TO_DEFAULT_MODE")){this.lastPromise=i.getPreset().applyPinnedPreset()}else{i.resetFilter()}i.closePopup();this.adjustFocus()}this.clearInput()}}else if(this.isSearchButton(t.target)){this.apply();this.adjustFocus()}else if(this.isSquareRemoveButton(t.target)){var r=this.findSquareByChild(t.target);this.complexSquareRemove(r);this.adjustFocus()}else{if(!i.getPopup().isShown()){i.showPopup()}else{var a=this.getInput();var l=a.selectionStart;var o=a.selectionEnd;var u=this.getSearchString().length;if(!(u&&l===0&&o===u)){if(i.getParam("VALUE_REQUIRED")){if(!this.getSquares().length){this.lastPromise=i.getPreset().applyPinnedPreset()}else{i.closePopup()}}else{i.closePopup();if(i.getParam("VALUE_REQUIRED_MODE")){i.restoreRemovedPreset()}}}}}},_onKeyDown:function e(t){var i=BX.Filter.Utils;var n=this.parent;if(i.isKey(t,"enter")){if(n.getParam("VALUE_REQUIRED")){if(!this.getSquares().length){this.parent.getPreset().applyPinnedPreset()}else{this.apply();this.firstInit=false;this.lastSearchString=this.getSearchString()}}else{this.apply();this.firstInit=false;this.lastSearchString=this.getSearchString()}n.closePopup()}if(i.isKey(t,"tab")||i.isKey(t,"downArrow")){n.showPopup();n.adjustFocus();this.unselectSquares()}if(i.isKey(t,"upArrow")){n.closePopup();if(n.getParam("VALUE_REQUIRED_MODE")){this.parent.restoreRemovedPreset()}if(n.getParam("VALUE_REQUIRED")){if(!this.getSquares().length){this.parent.getPreset().applyPinnedPreset()}}}if(i.isKey(t,"a")&&t.metaKey||i.isKey(t,"a")&&t.ctrlKey){this.selectSquares()}if(i.isKey(t,"backspace")&&this.isTextSelected()&&this.isSquaresSelected()){clearTimeout(this.timeout);if(this.parent.getParam("VALUE_REQUIRED")){var s=this.parent.getPreset().isPinned(this.parent.getPreset().getCurrentPresetId());if(s){this.removeSquares();this.parent.showPopup();this.adjustPlaceholder();this.hideClearButton();this.parent.getPreset().deactivateAllPresets()}else{if(this.parent.getParam("RESET_TO_DEFAULT_MODE")){this.lastPromise=this.parent.getPreset().applyPinnedPreset()}else{this.parent.resetFilter()}this.parent.closePopup();this.adjustFocus()}this.clearInput()}else{if(this.parent.getParam("RESET_TO_DEFAULT_MODE")){this.lastPromise=this.parent.getPreset().applyPinnedPreset()}else{this.lastPromise=this.parent.resetFilter()}this.parent.closePopup()}}if(i.isKey(t,"backspace")&&this.isSelectionStart()){clearTimeout(this.timeout);var r=this.getLastSquare();this.isSquareSelected(r)?this.complexSquareRemove(r):this.selectSquare(r)}if(!i.isKey(t,"backspace")&&!t.metaKey&&this.isSquaresSelected()){this.unselectSquares()}},getSearchString:function e(){var t=this.getInput();return!!t?t.value:""},getSquares:function e(){return BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classSquare,true)},adjustPlaceholder:function e(){if(this.parent.getParam("LIMITS_ENABLED")){this.setInputPlaceholder(this.parent.getParam("MAIN_UI_FILTER__PLACEHOLDER_LIMITS_EXCEEDED"))}else if(this.parent.getParam("DISABLE_SEARCH")||!this.parent.settings.get("SEARCH")){this.setInputPlaceholder(this.parent.getParam("MAIN_UI_FILTER__PLACEHOLDER"))}else{this.setInputPlaceholder(this.parent.getParam("MAIN_UI_FILTER__PLACEHOLDER_DEFAULT"))}},isResolvedRequest:function e(){return!this.lastPromise||!!this.lastPromise&&this.lastPromise.state},apply:function e(){if(this.isResolvedRequest()){this.lastPromise=this.parent._onFindButtonClick()}return this.lastPromise},reset:function e(){if(this.isResolvedRequest()){this.parent.getSearch().removePreset();this.parent.getPreset().deactivateAllPresets();this.parent.getPreset().resetPreset(true);this.timeout=setTimeout(BX.delegate((function(){this.lastPromise=this.parent.resetFilter()}),this),this.delay)}return this.lastPromise},_onInputWithoutDebounce:function e(){clearTimeout(this.timeout);var t=this.getSearchString();this.lastSearchString=!!this.lastSearchString?this.lastSearchString:t;if(t!==this.lastSearchString&&(!this.parent.isIe()||!this.firstInit)){if(this.parent.getParam("ENABLE_LIVE_SEARCH")){this.parent.showGridAnimation();BX.onCustomEvent(window,"BX.Filter.Search:input",[this.parent.params.FILTER_ID,t])}this.parent.getPopup().isShown()&&this.parent.closePopup()}if(t){this.showClearButton();this.parent.setIsSetOutsideState(false);this.parent.setDefaultPresetAppliedState(false)}else{if(!this.getSquares().length&&this.lastSearchString!==t){this.hideClearButton();this.adjustPlaceholder()}if(this.parent.isAppliedDefaultPreset()){this.parent.setDefaultPresetAppliedState(true)}}if(this.parent.isAppliedUserFilter()){BX.Dom.addClass(this.container,"main-ui-filter-search--active")}else{BX.Dom.removeClass(this.container,"main-ui-filter-search--active")}},_onInput:function e(){var t=this.getSearchString();if(t!==this.lastSearchString&&(!this.parent.isIe()||!this.firstInit)){this.apply()}this.firstInit=false;this.lastSearchString=t},getButtonsContainer:function e(){if(!BX.type.isDomNode(this.buttonsContainer)){this.buttonsContainer=BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classSearchButtonsContainer)}return this.buttonsContainer},showClearButton:function e(){BX.addClass(this.getButtonsContainer(),this.parent.settings.classShow)},hideClearButton:function e(){BX.removeClass(this.getButtonsContainer(),this.parent.settings.classShow)},getInput:function e(){var t;if(!BX.type.isDomNode(this.input)){t=[this.parent.getParam("FILTER_ID",""),"_search"].join("");this.input=BX(t)}return this.input},getContainer:function e(){var t;if(!BX.type.isDomNode(this.container)){t=[this.parent.getParam("FILTER_ID"),"_search_container"].join("");this.container=BX(t)}return this.container},setInputPlaceholder:function e(t){var i=this.getInput();i.placeholder=t},clearInput:function e(){var t=this.getInput();if(BX.type.isDomNode(t)){t.value=null}},clearForm:function e(){this.clearInput();this.removePreset()},makeSquares:function e(t,i,n){var s;var r=null;var a=this.getContainer();var l={squares:[],moreSquares:[]};t.forEach((function(e,t){if(t<i){s=BX.decl(e);r=r||s;if(!n){if(t===0){BX.prepend(s,a)}else{BX.insertAfter(s,r)}}else{var o=BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classSquare);if(o){BX.insertAfter(s,o)}else{BX.prepend(s,a)}}r=s;l.squares.push(s)}else{l.moreSquares.push({type:"control",name:e.value,title:e.title,icon:e.icon})}}),this);return l},squares:function e(t,i,n){var s,r,a,l,o;var e=BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classSquare,true);if(n){e.forEach((function(e){var t=BX.data(e,"item");if(t){BX.remove(e)}}))}else{e.forEach(BX.remove)}s=this.prepareSquaresData(t);r=this.makeSquares(s,i,n);l=0;o={squaresData:s,width:0};if(r.moreSquares.length){a={block:"main-ui-search-square",name:this.parent.getParam("MAIN_UI_FILTER__AND")+" "+this.parent.getParam("MAIN_UI_FILTER__MORE")+" "+r.moreSquares.length,item:r.moreSquares,title:r.moreSquares.map((function(e){var t=e.title;if("icon"in e&&BX.Type.isPlainObject(e.icon)){var i=e.icon.title;t=t.length?i+": "+t:""}return t})).join(", \n")};a=BX.decl(a);r.squares.push(a);BX.insertAfter(a,r.squares[r.squares.length-2]);l=r.squares.reduce((function(e,t){return e+BX.width(t)+(parseFloat(BX.style(t,"margin-right"))||0)}),0)}o.width=l;return o},setPreset:function e(t){var i=this.getContainer();var n,s;var r;if(BX.type.isPlainObject(t)){s=BX.Filter.Utils.getByClass(i,this.parent.settings.classSquare,true);s.forEach(BX.remove);t=BX.clone(t);t.ADDITIONAL=t.ADDITIONAL||[];BX.onCustomEvent(window,"BX.Filter.Search:beforeSquaresUpdate",[t,this]);if(t.ID!=="default_filter"&&t.ID!=="tmp_filter"){n=BX.decl({block:"main-ui-search-square",name:t.TITLE,value:t.ID,isPreset:true});BX.prepend(n,i);if("ADDITIONAL"in t&&BX.type.isArray(t.ADDITIONAL)&&t.ADDITIONAL.length){r=this.squares(t.ADDITIONAL,1,true);if(BX.width(i)-r.width<100){r=this.squares(t.ADDITIONAL,0,true)}}}else{if("ADDITIONAL"in t&&BX.type.isArray(t.ADDITIONAL)&&t.ADDITIONAL.length){t.ADDITIONAL.forEach((function(e,i){if(!("ID"in e)){e.ID="ADDITIONAL_ID_"+i}if(!("NAME"in e)){e.NAME="ADDITIONAL_NAME_"+i}if(!("TYPE"in e)){e.TYPE="STRING"}if("LABEL"in e&&"LABEL"in e){t.FIELDS.push(e)}}))}if(BX.type.isArray(t.FIELDS)&&t.FIELDS.length){r=this.squares(t.FIELDS,2);if(BX.width(i)-r.width<100){r=this.squares(t.FIELDS,1)}}}if(r&&BX.type.isArray(r.squaresData)&&r.squaresData.length||t.ID!=="default_filter"&&t.ID!=="tmp_filter"){if(this.parent.getParam("LIMITS_ENABLED")){this.setInputPlaceholder(this.parent.getParam("MAIN_UI_FILTER__PLACEHOLDER_LIMITS_EXCEEDED"))}else{this.setInputPlaceholder(this.parent.getParam("MAIN_UI_FILTER__PLACEHOLDER_WITH_FILTER"))}this.showClearButton()}else{this.adjustPlaceholder()}if(BX.type.isNotEmptyString(this.parent.getSearch().getInput().value)){this.showClearButton()}}},prepareSquaresData:function e(t){var i,n,s;var r=[];t=t.filter((function(e){return!!e&&this.parent.params.FIELDS.some((function(t){return e.NAME===t.NAME}))}),this);t.map((function(e){i=null;if(!BX.Type.isStringFilled(e.ADDITIONAL_FILTER)){switch(e.TYPE){case this.parent.types.DATE:{i=e.LABEL+": "+e.SUB_TYPE.NAME;if(e.SUB_TYPE.VALUE===this.parent.dateTypes.QUARTER&&BX.type.isNotEmptyString(e.VALUES._quarter)){var t=e.QUARTERS.filter((function(t){return t.VALUE==e.VALUES._quarter})).map((function(e){return e.NAME}));t=t.length?t.join(""):"";i=e.LABEL+": "+t+" "+this.parent.getParam("MAIN_UI_FILTER__QUARTER").toLocaleLowerCase()+" "+e.VALUES._year}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.YEAR&&BX.type.isNotEmptyString(e.VALUES._year)){i=e.LABEL+": "+e.VALUES._year}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.MONTH&&BX.type.isNotEmptyString(e.VALUES._month)){var a=e.MONTHS.filter((function(t){return t.VALUE==e.VALUES._month})).map((function(e){return e.NAME}));a=a.length?a.join(""):"";i=e.LABEL+": "+a+" "+e.VALUES._year}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.EXACT&&BX.type.isNotEmptyString(e.VALUES._from)){i=e.LABEL+": "+e.VALUES._from}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.RANGE){if(BX.type.isNotEmptyString(e.VALUES._from)&&BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+e.VALUES._from+"-"+e.VALUES._to}else if(!BX.type.isNotEmptyString(e.VALUES._from)&&BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__BEFORE")+" "+e.VALUES._to}else if(BX.type.isNotEmptyString(e.VALUES._from)&&!BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__AFTER")+" "+e.VALUES._from}}if((e.SUB_TYPE.VALUE===this.parent.dateTypes.NEXT_DAYS||e.SUB_TYPE.VALUE===this.parent.dateTypes.PREV_DAYS)&&!BX.type.isNumber(parseInt(e.VALUES._days))){i=null}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.NEXT_DAYS&&BX.type.isNumber(parseInt(e.VALUES._days))){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__DATE_NEXT_DAYS_LABEL").replace("#N#",e.VALUES._days)}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.PREV_DAYS&&BX.type.isNumber(parseInt(e.VALUES._days))){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__DATE_PREV_DAYS_LABEL").replace("#N#",e.VALUES._days)}if(e.SUB_TYPE.VALUE===this.parent.dateTypes.NONE){i=null}break}case this.parent.types.CUSTOM_DATE:{if(BX.type.isArray(e.VALUE.days)&&e.VALUE.days.length||BX.type.isArray(e.VALUE.months)&&e.VALUE.months.length||BX.type.isArray(e.VALUE.years)&&e.VALUE.years.length){i=e.LABEL}break}case this.parent.types.SELECT:{if(BX.type.isPlainObject(e.VALUE)&&e.VALUE.VALUE||e.STRICT){i=e.LABEL+": "+e.VALUE.NAME}break}case this.parent.types.MULTI_SELECT:{if(BX.type.isArray(e.VALUE)&&e.VALUE.length){n=[];i=e.LABEL+": ";e.VALUE.forEach((function(e,t){if(t<2){n.push(e.NAME)}}));i+=n.join(", ");if(e.VALUE.length>2){s=[];e.VALUE.forEach((function(e){s.push(e.NAME)}));i=s.join(", ")}}break}case this.parent.types.NUMBER:{if(e.SUB_TYPE.VALUE==="exact"){if(BX.type.isNotEmptyString(e.VALUES._from)){i=e.LABEL+": "+e.VALUES._from}else{i=null}}if(e.SUB_TYPE.VALUE==="range"){if(BX.type.isNotEmptyString(e.VALUES._from)&&BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+e.VALUES._from+"-"+e.VALUES._to}else if(!BX.type.isNotEmptyString(e.VALUES._from)&&BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__NUMBER_LESS")+" "+e.VALUES._to}else if(BX.type.isNotEmptyString(e.VALUES._from)&&!BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": "+this.parent.getParam("MAIN_UI_FILTER__NUMBER_MORE")+" "+e.VALUES._from}else{i=null}}if(e.SUB_TYPE.VALUE==="more"){if(BX.type.isNotEmptyString(e.VALUES._from)){i=e.LABEL+": > ";i+=e.VALUES._from}}if(e.SUB_TYPE.VALUE==="less"){if(BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": < ";i+=e.VALUES._to}}if(e.SUB_TYPE.VALUE==="before_n"){if(BX.type.isNotEmptyString(e.VALUES._to)){i=e.LABEL+": < ";i+=e.VALUES._to}}break}case this.parent.types.CUSTOM_ENTITY:case this.parent.types.DEST_SELECTOR:case this.parent.types.ENTITY_SELECTOR:{if(e.MULTIPLE){var l=!!e.VALUES._label?e.VALUES._label:[];if(BX.type.isPlainObject(l)){l=Object.keys(l).map((function(e){return l[e]}))}if(!BX.type.isArray(l)){l=[l]}if(l.length>0){i=e.LABEL+": ";i+=l.join(", ")}}else{if(BX.type.isNotEmptyString(e.VALUES._value)&&BX.type.isNotEmptyString(e.VALUES._label)){i=e.LABEL+": ";i+=e.VALUES._label}}break}case this.parent.types.CUSTOM:{i="_VALUE"in e&&BX.type.isNotEmptyString(e._VALUE)?e.LABEL:null;break}default:{if(BX.type.isNotEmptyString(e.VALUE)){i=e.LABEL+": "+e.VALUE}break}}}else{var o={block:"main-ui-search-square",name:e.LABEL+": "+BX.Loc.getMessage("MAIN_UI_FILTER__ADDITIONAL_FILTER_PLACEHOLDER_IS_EMPTY"),value:e.NAME,icon:"ICON"in e?e.ICON:null,item:{type:"control",name:e.NAME},title:e.LABEL+": "+BX.Loc.getMessage("MAIN_UI_FILTER__ADDITIONAL_FILTER_PLACEHOLDER_IS_EMPTY")};if(e.ADDITIONAL_FILTER===BX.Filter.AdditionalFilter.Type.HAS_ANY_VALUE){o.name=e.LABEL+": "+BX.Loc.getMessage("MAIN_UI_FILTER__ADDITIONAL_FILTER_PLACEHOLDER_HAS_ANY_VALUE");o.title=e.LABEL+": "+BX.Loc.getMessage("MAIN_UI_FILTER__ADDITIONAL_FILTER_PLACEHOLDER_HAS_ANY_VALUE")}r.push(o)}if(i!==null){r.push({block:"main-ui-search-square",name:i,value:e.NAME,icon:"ICON"in e?e.ICON:null,item:{type:"control",name:e.NAME},title:i})}}),this);return r},getPreset:function e(){var t=this.getContainer();var i=this.parent.settings.classSquare;var n=null;if(BX.type.isDomNode(t)){n=BX.Filter.Utils.getByClass(t,i)}return n},removePreset:function e(){var t=this.getPreset();if(BX.type.isDomNode(t)){BX.remove(t);this.adjustPlaceholder()}this.hideClearButton()},updatePreset:function e(t){this.removePreset();this.setPreset(t)}}})();(function(){BX.namespace("BX.Filter");BX.Filter.Settings=function(e,t){this.classField="main-ui-control-field";this.classFieldGroup="main-ui-control-field-group";this.classFieldLine="main-ui-filter-field-line";this.classFieldDelete="main-ui-filter-field-delete";this.classFieldLabel="main-ui-control-field-label";this.classFieldWithLabel="main-ui-filter-wield-with-label";this.classPresetName="main-ui-filter-sidebar-item-text";this.classControl="main-ui-control";this.classDateInput="main-ui-date-input";this.classHide="main-ui-hide";this.classNumberInput="main-ui-number-input";this.classSelect="main-ui-select";this.classMultiSelect="main-ui-multi-select";this.classValueDelete="main-ui-control-value-delete";this.classStringInput="main-ui-control-string";this.classAddField="main-ui-filter-field-add-item";this.classAddPresetField="main-ui-filter-new-filter";this.classAddPresetFieldInput="main-ui-filter-sidebar-edit-control";this.classAddPresetButton="main-ui-filter-add-item";this.classButtonsContainer="main-ui-filter-field-button-container";this.classSaveButton="main-ui-filter-save";this.classCancelButton="main-ui-filter-cancel";this.classMenuItem="main-ui-select-inner-item";this.classMenuItemText="main-ui-select-inner-item-element";this.classMenuMultiItemText="main-ui-select-inner-label";this.classMenuItemChecked="main-ui-checked";this.classSearchContainer="main-ui-filter-search";this.classDefaultPopup="popup-window";this.classPopupFieldList="main-ui-filter-popup-field-list";this.classPopupFieldList1Column="main-ui-filter-field-list-1-column";this.classPopupFieldList2Column="main-ui-filter-field-list-2-column";this.classPopupFieldList3Column="main-ui-filter-field-list-3-column";this.classPopupFieldList4Column="main-ui-filter-field-list-4-column";this.classPopupFieldList5Column="main-ui-filter-field-list-5-column";this.classPopupFieldList6Column="main-ui-filter-field-list-6-column";this.classFieldListItem="main-ui-filter-field-list-item";this.classEditButton="main-ui-filter-add-edit";this.classPresetEdit="main-ui-filter-edit";this.classPresetNameEdit="main-ui-filter-edit-text";this.classPresetDeleteButton="main-ui-delete";this.classPresetDragButton="main-ui-filter-icon-grab";this.classPresetEditButton="main-ui-filter-icon-edit";this.classPresetEditInput="main-ui-filter-sidebar-item-input";this.classPresetOndrag="main-ui-filter-sidebar-item-ondrag";this.classSquare="main-ui-square";this.classSquareDelete="main-ui-square-delete";this.classSquareSelected="main-ui-square-selected";this.classPresetsContainer="main-ui-filter-sidebar-item-container";this.classPreset="main-ui-filter-sidebar-item";this.classPresetCurrent="main-ui-filter-current-item";this.classFilterContainer="main-ui-filter-wrapper";this.classFileldControlList="main-ui-filter-field-container-list";this.classRestoreFieldsButton="main-ui-filter-field-restore-items";this.classClearSearchValueButton="main-ui-delete";this.classSearchButtonsContainer="main-ui-item-icon-block";this.classSearchButton="main-ui-search";this.classDisabled="main-ui-disable";this.classAnimationShow="main-ui-popup-show-animation";this.classAnimationClose="main-ui-popup-close-animation";this.classLimitsAnimation="main-ui-filter-field-limits-animate";this.classSidebarControlsContainer="main-ui-filter-add-container";this.searchContainerPostfix="_search_container";this.classPresetButtonsContainer="main-ui-filter-field-preset-button-container";this.classFindButton="main-ui-filter-find";this.classResetButton="main-ui-filter-reset";this.classDefaultFilter="main-ui-filter-default-preset";this.classRestoreButton="main-ui-filter-reset-link";this.classPinButton="main-ui-filter-icon-pin";this.classPopupOverlay="popup-window-overlay";this.classSidePanelContainer="side-panel-container";this.classPinnedPreset="main-ui-item-pin";this.classWaitButtonClass="ui-btn-clock";this.classForAllCheckbox="main-ui-filter-save-for-all";this.classShow="main-ui-show";this.classFocus="main-ui-focus";this.classPresetField="main-ui-filter-preset-field";this.classPopupSearchFieldListItemHidden="main-ui-filter-field-list-item-hidden";this.classPopupSearchFieldListItemVisible="main-ui-filter-field-list-item-visible";this.classPopupSearchSectionItem="main-ui-filter-popup-search-section-input";this.classPopupSearchSectionItemIcon="main-ui-filter-popup-search-section-item-icon";this.classPopupSearchSectionItemIconActive="main-ui-filter-popup-search-section-item-icon-active";this.numberPostfix="_numsel";this.datePostfix="_datesel";this.toPostfix="_to";this.fromPostfix="_from";this.daysPostfix="_days";this.monthPostfix="_month";this.quarterPostfix="_quarter";this.yearPostfix="_year";this.generalTemplateId="";this.maxPopupColumnCount=6;this.popupWidth=630;this.init(e,t)};BX.Filter.Settings.prototype={init:function e(t,i){this.generalTemplateId=i.getParam("FILTER_ID")+"_GENERAL_template";this.mergeSettings(t)},get:function e(t,i){return t&&t in this&&!BX.type.isFunction(this[t])?this[t]:i},mergeSettings:function e(t){if(BX.type.isPlainObject(t)){Object.keys(t).forEach((function(e){if(!BX.type.isFunction(this[e])){this[e]=t[e]}}),this)}}}})();var d,h;function p(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function f(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?p(Object(i),!0).forEach((function(t){babelHelpers.defineProperty(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):p(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}var m=function(e){babelHelpers.inherits(t,e);babelHelpers.createClass(t,null,[{key:"getInstance",value:function e(){return t.cache.remember("instance",(function(){return new t}))}},{key:"fetchAdditionalFilter",value:function e(i,n){if(a.Type.isStringFilled(i)&&a.Type.isPlainObject(n)){if("".concat(i,"_").concat(t.Type.IS_EMPTY)in n){return t.Type.IS_EMPTY}if("".concat(i,"_").concat(t.Type.HAS_ANY_VALUE)in n){return t.Type.HAS_ANY_VALUE}}return null}}]);function t(){var e;var i=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};babelHelpers.classCallCheck(this,t);e=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).call(this));babelHelpers.defineProperty(babelHelpers.assertThisInitialized(e),"cache",new a.Cache.MemoryCache);e.setEventNamespace("BX.Main.Filter.AdditionalFilter");e.options=f({},i);a.Event.bind(document,"click",e.onDocumentClick.bind(babelHelpers.assertThisInitialized(e)));return e}babelHelpers.createClass(t,[{key:"getAdditionalFilterMenu",value:function e(){var i=this;return this.cache.remember("menu",(function(){return new r.Menu({id:"additional_filter_menu",autoHide:false,items:[{id:"isEmpty",text:a.Loc.getMessage("MAIN_UI_FILTER__ADDITIONAL_FILTER_MENU_IS_EMPTY"),onclick:i.onAdditionalFilterMenuItemClick.bind(i,t.Type.IS_EMPTY)},{id:"hasAnyValue",text:a.Loc.getMessage("MAIN_UI_FILTER__ADDITIONAL_FILTER_MENU_HAS_ANY_VALUE"),onclick:i.onAdditionalFilterMenuItemClick.bind(i,t.Type.HAS_ANY_VALUE)},{id:"delimiter",delimiter:true},{id:"helper",html:a.Loc.getMessage("MAIN_UI_FILTER__ADDITIONAL_FILTER_PLACEHOLDER_HOW")+'<span class="ui-hint"><span class="ui-hint-icon"></span></span>',onclick:function e(){if(top.BX.Helper){top.BX.Helper.show("redirect=detail&code=14006190");event.preventDefault()}}}]})}))}},{key:"onAdditionalFilterMenuItemClick",value:function e(t){var i=this.getCurrentFieldNode();this.initAdditionalFilter(i,t)}},{key:"onDocumentClick",value:function e(){this.getAdditionalFilterMenu().close()}},{key:"setCurrentFieldId",value:function e(t){this.cache.set("currentFieldId",t)}},{key:"getCurrentFieldId",value:function e(){return this.cache.get("currentFieldId","")}},{key:"setCurrentFieldNode",value:function e(t){this.cache.set("currentFieldNode",t)}},{key:"getCurrentFieldNode",value:function e(){return this.cache.get("currentFieldNode")}},{key:"onAdditionalFilterButtonClick",value:function e(t,i){i.stopPropagation();var n=i.currentTarget;this.setCurrentFieldId(t);this.setCurrentFieldNode(n.parentElement);var s=this.getAdditionalFilterMenu();var r=String(a.Dom.attr(n,"data-allowed-types")).split(",");s.getMenuItems().forEach((function(e){var t=e.getId();if(r.includes(t)||t==="helper"||t==="delimiter"){a.Dom.removeClass(e.layout.item,"main-ui-disable")}else{a.Dom.addClass(e.layout.item,"main-ui-disable")}}));if(s.getPopupWindow().isShown()){if(s.getPopupWindow().bindElement!==n){s.getPopupWindow().setBindElement(n);s.getPopupWindow().adjustPosition()}else{s.close()}}else{s.getPopupWindow().setBindElement(n);s.show()}}},{key:"getAdditionalFilterButton",value:function e(i){var n=this;var s=i.fieldId,r=i.enabled;return this.cache.remember("field_".concat(s),(function(){var e=!a.Type.isArrayFilled(r)&&r!==true;var i=function(){if(a.Type.isArrayFilled(r)){return r.join(",")}if(!e){return[t.Type.IS_EMPTY,t.Type.HAS_ANY_VALUE].join(",")}return""}();return a.Tag.render(d||(d=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t<span \n\t\t\t\t\tclass="ui-icon ui-icon-service-light-other main-ui-filter-additional-filters-button','"\n\t\t\t\t\tonclick="','"\n\t\t\t\t\tdata-allowed-types="','"\n\t\t\t\t>\n\t\t\t\t\t<i></i>\n\t\t\t\t</span>\n\t\t\t'])),e?" main-ui-disable":"",n.onAdditionalFilterButtonClick.bind(n,s),i)}))}},{key:"initAdditionalFilter",value:function e(t,i){var n=this.getCurrentFieldId();if(n===""){n=t.attributes[1].value}var s=this.getAdditionalFilterPlaceholderField(n,i);a.Dom.addClass(t,"main-ui-filter-field-with-additional-filter");var r=t.querySelector(".main-ui-filter-additional-filter-placeholder");if(r){a.Dom.replace(r,s)}else{a.Dom.append(s,t)}}},{key:"restoreField",value:function e(t){if(a.Type.isDomNode(t)){var i=t.querySelector(".main-ui-filter-additional-filter-placeholder");if(i){a.Dom.remove(i)}a.Dom.removeClass(t,"main-ui-filter-field-with-additional-filter")}}},{key:"getAdditionalFilterPlaceholderField",value:function e(i,n){var s=this;return this.cache.remember("placeholder_".concat(i,"_").concat(n),(function(){var e=function(){if(n===t.Type.HAS_ANY_VALUE){return a.Loc.getMessage("MAIN_UI_FILTER__ADDITIONAL_FILTER_PLACEHOLDER_HAS_ANY_VALUE")}return a.Loc.getMessage("MAIN_UI_FILTER__ADDITIONAL_FILTER_PLACEHOLDER_IS_EMPTY")}();var i=function e(t){s.restoreField(t.currentTarget.closest(".main-ui-filter-field-with-additional-filter"))};return a.Tag.render(h||(h=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t<div class="main-ui-control main-ui-filter-additional-filter-placeholder" data-type="','">\n\t\t\t\t\t<div class="main-ui-square">\n\t\t\t\t\t\t<div class="main-ui-square-item">','</div>\n\t\t\t\t\t\t<div class="main-ui-item-icon main-ui-square-delete" onclick="','"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t'])),n,e,i)}))}},{key:"getFilter",value:function e(t){if(a.Type.isDomNode(t)){var i=t.querySelector(".main-ui-filter-additional-filter-placeholder");if(a.Type.isDomNode(i)){var n=a.Dom.attr(i,"data-type");var s=a.Dom.attr(t,"data-name");return babelHelpers.defineProperty({},"".concat(s,"_").concat(n),"y")}}return null}}]);return t}(s.EventEmitter);babelHelpers.defineProperty(m,"Type",{IS_EMPTY:"isEmpty",HAS_ANY_VALUE:"hasAnyValue"});babelHelpers.defineProperty(m,"cache",new a.Cache.MemoryCache);var g=function(){function e(t){babelHelpers.classCallCheck(this,e);this.parent=null;this.presets=null;this.container=null;this.init(t)}babelHelpers.createClass(e,[{key:"init",value:function e(t){this.parent=t}},{key:"bindOnPresetClick",value:function e(){var t=this;(this.getPresets()||[]).forEach((function(e){a.Event.bind(e,"click",BX.delegate(t._onPresetClick,t))}))}},{key:"getAddPresetField",value:function e(){return this.getContainer().querySelector(".main-ui-filter-new-filter")}},{key:"getAddPresetFieldInput",value:function e(){return this.getAddPresetField().querySelector(".main-ui-filter-sidebar-edit-control")}},{key:"clearAddPresetFieldInput",value:function e(){var t=this.getAddPresetFieldInput();if(a.Type.isDomNode(t)){t.value=""}}},{key:"normalizePreset",value:function e(t){return t.closest(".main-ui-filter-sidebar-item")}},{key:"deactivateAllPresets",value:function e(){this.getPresets().forEach((function(e){a.Dom.removeClass(e,"main-ui-filter-current-item")}))}},{key:"createSidebarItem",value:function e(t,i,n){return BX.decl({block:"sidebar-item",text:a.Text.decode(i),id:t,pinned:n,noEditPinTitle:this.parent.getParam("MAIN_UI_FILTER__IS_SET_AS_DEFAULT_PRESET"),editNameTitle:this.parent.getParam("MAIN_UI_FILTER__EDIT_PRESET_TITLE"),removeTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_PRESET"),editPinTitle:this.parent.getParam("MAIN_UI_FILTER__SET_AS_DEFAULT_PRESET"),dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_TITLE")})}},{key:"activatePreset",value:function e(t){var i=this;this.deactivateAllPresets();var n=function(){if(a.Type.isString(t)){return i.getPresetNodeById(t)}return t}();if(a.Type.isDomNode(n)){a.Dom.addClass(n,"main-ui-filter-current-item")}}},{key:"getPresetNodeById",value:function e(t){return this.getPresets().find((function(e){return a.Dom.attr(e,"data-id")===t}))}},{key:"getPresetId",value:function e(t){return a.Dom.attr(t,"data-id")}},{key:"updatePresetName",value:function e(t,i){if(a.Type.isDomNode(t)&&a.Type.isString(i)&&i!==""){var n=this.getPresetNameNode(t);if(a.Type.isDomNode(n)){a.Runtime.html(n,i)}}}},{key:"removePreset",value:function e(t,i,n){var s=this.getCurrentPresetId();var r=[];var a={preset_id:i,is_default:n};var l={FILTER_ID:this.parent.getParam("FILTER_ID"),action:"REMOVE_FILTER"};this.parent.saveOptions(a,l);BX.remove(t);if(BX.type.isArray(this.parent.params.PRESETS)){r=this.parent.params.PRESETS.filter((function(e){return e.ID!==i}),this);this.parent.params.PRESETS=r}if(BX.type.isArray(this.parent.editablePresets)){r=this.parent.editablePresets.filter((function(e){return e.ID!==i}),this);this.parent.editablePresets=r}if(i===s){this.parent.getSearch().removePreset();this.resetPreset()}}},{key:"pinPreset",value:function e(t){if(!BX.type.isNotEmptyString(t)){t="default_filter"}var i=this.getPresetNodeById(t);if(this.parent.getParam("VALUE_REQUIRED_MODE")){if(t==="default_filter"){return}}var n={FILTER_ID:this.parent.getParam("FILTER_ID"),GRID_ID:this.parent.getParam("GRID_ID"),action:"PIN_PRESET"};var s={preset_id:t};this.getPresets().forEach((function(e){a.Dom.removeClass(e,this.parent.settings.classPinnedPreset)}),this);BX.addClass(i,this.parent.settings.classPinnedPreset);this.parent.saveOptions(s,n)}},{key:"_onPresetClick",value:function e(t){var i;var n;var s;var r;var l;var o;var u;t.preventDefault();u=this.parent;o=u.settings;l=t.target;i=t.currentTarget;n=this.getPresetId(i);s=this.getPreset(n);if(a.Dom.hasClass(l,o.classPinButton)){if(this.parent.isEditEnabled()){if(a.Dom.hasClass(i,o.classPinnedPreset)){this.pinPreset("default_filter")}else{this.pinPreset(n)}}}if(a.Dom.hasClass(l,o.classPresetEditButton)){this.enableEditPresetName(i)}if(a.Dom.hasClass(l,o.classPresetDeleteButton)){r="IS_DEFAULT"in s?s.IS_DEFAULT:false;this.removePreset(i,n,r);return false}if(!a.Dom.hasClass(l,o.classPresetDragButton)&&!a.Dom.hasClass(l,o.classAddPresetFieldInput)){if(this.parent.isEditEnabled()){this.updateEditablePreset(this.getCurrentPresetId())}var c=this.getPreset(this.getCurrentPresetId());var d=this.getPreset(n);c.ADDITIONAL=[];d.ADDITIONAL=[];this.activatePreset(i);this.applyPreset(n);if(!this.parent.isEditEnabled()){u.applyFilter(null,true);if(t.isTrusted){u.closePopup()}if(u.isAddPresetEnabled()){u.disableAddPreset()}}}}},{key:"applyPinnedPreset",value:function e(){var t=this.parent;var i=this.isPinned(this.getCurrentPresetId());var n;if(this.parent.getParam("VALUE_REQUIRED")&&this.getPinnedPresetId()==="default_filter"){this.applyPreset("default_filter");this.deactivateAllPresets();n=this.parent.applyFilter()}else if(!i){var s=this.getPinnedPresetId();var r=this.getPreset(s);r.ADDITIONAL=[];var a=this.getPinnedPresetNode();var l=false;var o=true;this.deactivateAllPresets();this.activatePreset(a);this.applyPreset(s);n=t.applyFilter(l,o);t.closePopup()}else{n=t.resetFilter()}return n}},{key:"updateEditablePreset",value:function e(t){var i=this.parent.getFilterFieldsValues();var n=this.getFields().map((function(e){return BX.data(e,"name")}));var s=this.parent.preparePresetFields(i,n);var r=this.getPreset(t);r.FIELDS=s;r.TITLE=this.getPresetInput(this.getPresetNodeById(t)).value;r.ROWS=n}},{key:"getPresetInput",value:function e(t){return BX.Filter.Utils.getByClass(t,this.parent.settings.classPresetEditInput)}},{key:"enableEditPresetName",value:function e(t){var i=this.getPresetInput(t);BX.addClass(t,this.parent.settings.classPresetNameEdit);i.select();i.value=BX.util.htmlspecialcharsback(i.value);a.Event.bind(i,"input",BX.delegate(this._onPresetNameInput,this))}},{key:"_onPresetNameInput",value:function e(t){var i=this.parent.getSearch();var n=t.currentTarget.value;var s=BX.findParent(t.currentTarget,{className:this.parent.settings.classPreset},true,false);var r=this.getPresetId(s);var a=this.getCurrentPresetId();var l={ID:r,TITLE:n};if(r===a){i.updatePreset(l)}}},{key:"getPresetNameNode",value:function e(t){return BX.Filter.Utils.getByClass(t,this.parent.settings.classPresetName)}},{key:"disableEditPresetName",value:function e(t){var i=this.getPresetInput(t);a.Dom.removeClass(t,this.parent.settings.classPresetNameEdit);if(BX.type.isDomNode(i)){i.blur();BX.unbind(i,"input",BX.delegate(this._onPresetNameInput,this))}}},{key:"getPreset",value:function e(t,i){var n=this.parent.getParam(i?"DEFAULT_PRESETS":"PRESETS",[]);if(this.parent.isEditEnabled()&&!i){n=this.parent.editablePresets}var s=n.filter((function(e){return e.ID===t}));if(t==="tmp_filter"&&!s.length){var r=BX.clone(this.getPreset("default_filter"));r.ID="tmp_filter";n.push(r);s.push(r)}return s.length!==0?s[0]:null}},{key:"getPresetField",value:function e(t,i){var n=this.getPreset(t);var s=null;if(BX.type.isPlainObject(n)&&"FIELDS"in n&&BX.type.isArray(n.FIELDS)){s=n.FIELDS.filter((function(e){return e.NAME===i}));s=s.length?s[0]:null}return s}},{key:"applyPreset",value:function e(t,i){t=i?"default_filter":t||"default_filter";var n=this.getPreset(t);if(t!=="default_preset"){n=this.extendPreset(n)}this.parent.getSearch().updatePreset(n);this.updatePresetFields(n,i);BX.onCustomEvent("BX.Main.Filter:onApplyPreset",[t])}},{key:"extendPreset",value:function e(t){var i=BX.clone(this.getPreset("default_filter"));if(BX.type.isPlainObject(t)){t=BX.clone(t);t.FIELDS.forEach((function(e){var t;var n=i.FIELDS.some((function(i,n){var s=false;if(i.NAME===e.NAME){t=n;s=true}return s}),this);if(n&&t||n&&t===0){i.FIELDS[t]=e}else if(!this.isEmptyField(e)){i.FIELDS.push(e)}}),this);t.FIELDS=i.FIELDS}return t}},{key:"isEmptyField",value:function e(t){var i=true;if(a.Type.isStringFilled(t.ADDITIONAL_FILTER)){return false}if(t.TYPE===this.parent.types.STRING){if(t.VALUE&&t.VALUE.length){i=false}}if(t.TYPE===this.parent.types.SELECT){if(BX.type.isPlainObject(t.VALUE)&&"VALUE"in t.VALUE&&t.VALUE.VALUE){i=false}}if(t.TYPE===this.parent.types.MULTI_SELECT){if(BX.type.isArray(t.VALUE)&&t.VALUE.length){i=false}}if(t.TYPE===this.parent.types.CUSTOM_DATE){if(BX.type.isArray(t.VALUE.days)&&t.VALUE.days.length||BX.type.isArray(t.VALUE.months)&&t.VALUE.months.length||BX.type.isArray(t.VALUE.years)&&t.VALUE.years.length){i=false}}if(t.TYPE===this.parent.types.CUSTOM_ENTITY||t.TYPE===this.parent.types.DEST_SELECTOR||t.TYPE===this.parent.types.ENTITY_SELECTOR){if(BX.type.isPlainObject(t.VALUES)){if(BX.type.isNotEmptyString(t.VALUES._label)&&BX.type.isNotEmptyString(t.VALUES._value)){i=false}if(BX.type.isPlainObject(t.VALUES._label)&&BX.type.isPlainObject(t.VALUES._value)&&Object.keys(t.VALUES._label).length&&Object.keys(t.VALUES._value).length){i=false}if(BX.type.isArray(t.VALUES._label)&&BX.type.isArray(t.VALUES._value)&&t.VALUES._label.length&&t.VALUES._value.length){i=false}if((BX.type.isArray(t.VALUES._label)&&t.VALUES._label.length||BX.type.isPlainObject(t.VALUES._label)&&Object.keys(t.VALUES._label).length)&&(BX.type.isArray(t.VALUES._value)&&t.VALUES._value.length||BX.type.isPlainObject(t.VALUES._value)&&Object.keys(t.VALUES._value).length)){i=false}}}if(t.TYPE===this.parent.types.DATE){var n="_datesel"in t.VALUES?t.VALUES._datesel:t.SUB_TYPE.VALUE;if(BX.type.isPlainObject(t.VALUES)&&(t.VALUES._from||t.VALUES._to||t.VALUES._quarter||t.VALUES._month&&!BX.type.isArray(t.VALUES._month)||t.VALUES._year&&!BX.type.isArray(t.VALUES._year)||t.VALUES._days&&!BX.type.isArray(t.VALUES._days))||BX.type.isArray(t.VALUES._days)&&t.VALUES._days.length||BX.type.isArray(t.VALUES._month)&&t.VALUES._month.length||BX.type.isArray(t.VALUES._year)&&t.VALUES._year.length||n===this.parent.dateTypes.CURRENT_DAY||n===this.parent.dateTypes.CURRENT_WEEK||n===this.parent.dateTypes.CURRENT_MONTH||n===this.parent.dateTypes.CURRENT_QUARTER||n===this.parent.dateTypes.LAST_7_DAYS||n===this.parent.dateTypes.LAST_30_DAYS||n===this.parent.dateTypes.LAST_60_DAYS||n===this.parent.dateTypes.LAST_90_DAYS||n===this.parent.dateTypes.LAST_WEEK||n===this.parent.dateTypes.LAST_MONTH||n===this.parent.dateTypes.TOMORROW||n===this.parent.dateTypes.YESTERDAY||n===this.parent.dateTypes.NEXT_WEEK||n===this.parent.dateTypes.NEXT_MONTH){i=false}}if(t.TYPE===this.parent.types.NUMBER){if(BX.type.isPlainObject(t.VALUES)&&(t.VALUES._from||t.VALUES._to)){i=false}}if(t.TYPE===this.parent.types.CHECKBOX){if(BX.type.isPlainObject(t.VALUE)&&t.VALUE.VALUE){i=false}}return i}},{key:"resetPreset",value:function e(t){this.applyPreset("",t)}},{key:"getFields",value:function e(){var t=this.parent.getFieldListContainer();var i=null;if(BX.type.isDomNode(t)){i=BX.Filter.Utils.getBySelector(t.parentNode,".".concat(this.parent.settings.classFileldControlList," > div"),true)}return i}},{key:"getField",value:function e(t){var i=this.getFields();var n=null;var s;var r;if(BX.type.isArray(i)&&i.length){r=i.filter((function(e){if(BX.type.isDomNode(e)){s=BX.data(e,"name")}return s===t.NAME}),this);n=r.length>0?r[0]:null}return n}},{key:"removeField",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var n;var s;i=i||false;if(BX.type.isPlainObject(t)){s=t.NAME;t=this.getField(t);if(BX.type.isArray(this.parent.fieldsList)){n=this.parent.fieldsList.indexOf(t);if(n!==-1){delete this.parent.fieldsList[n]}}this.parent.unregisterDragItem(t)}if(BX.type.isDomNode(t)){s=BX.data(t,"name");this.parent.getFields().deleteField(t)}if(!this.parent.isEditEnabled()&&!this.parent.isAddPresetEnabled()){var r=this.getCurrentPresetId();var a=this.getPresetField(r,s);if(a&&!this.isEmptyField(a)){this.deactivateAllPresets();this.parent.applyFilter()}}if(!i){this.parent.saveFieldsSort()}}},{key:"removeFields",value:function e(t){t.forEach((function(e){this.removeField(e,true)}),this);this.parent.saveFieldsSort()}},{key:"addField",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var n;var s;var r;if(BX.type.isPlainObject(t)){n=this.parent.getFieldListContainer();r=this.parent.getControls();s=BX.type.isArray(r)?r[r.length-1]:null;if(BX.type.isDomNode(s)){if(s.nodeName!=="INPUT"){s=BX.Filter.Utils.getByTag(s,"input")}if(BX.type.isDomNode(s)){t.TABINDEX=parseInt(s.getAttribute("tabindex"))+1}}else{t.TABINDEX=2}if(BX.type.isDomNode(n)){s=this.createControl(t);if(BX.type.isDomNode(s)){BX.append(s,n);if(BX.type.isArray(this.parent.fieldsList)){this.parent.fieldsList.push(s)}this.parent.registerDragItem(s)}}}if(!this.parent.isEditEnabled()&&!this.parent.isAddPresetEnabled()){var a=this.getCurrentPresetId();var l=this.getPresetField(a,t.NAME);if(l&&!this.isEmptyField(l)){this.parent.updatePreset("tmp_filter");this.deactivateAllPresets();this.parent.getSearch().updatePreset(this.getPreset("tmp_filter"))}}if(!i){this.parent.saveFieldsSort()}}},{key:"createControl",value:function e(t){var i;switch(t.TYPE){case this.parent.types.STRING:{i=this.parent.getFields().createInputText(t);break}case this.parent.types.TEXTAREA:{i=this.parent.getFields().createTextarea(t);break}case this.parent.types.SELECT:{i=this.parent.getFields().createSelect(t);break}case this.parent.types.MULTI_SELECT:{i=this.parent.getFields().createMultiSelect(t);break}case this.parent.types.NUMBER:{i=this.parent.getFields().createNumber(t);break}case this.parent.types.DATE:{i=this.parent.getFields().createDate(t);break}case this.parent.types.CUSTOM_DATE:{i=this.parent.getFields().createCustomDate(t);break}case this.parent.types.DEST_SELECTOR:{i=this.parent.getFields().createDestSelector(t);break}case this.parent.types.ENTITY_SELECTOR:{i=this.parent.getFields().createEntitySelector(t);break}case this.parent.types.CUSTOM:{i=this.parent.getFields().createCustom(t);break}case this.parent.types.CUSTOM_ENTITY:{i=this.parent.getFields().createCustomEntity(t);break}default:{break}}if(this.parent.getParam("ENABLE_ADDITIONAL_FILTERS")){var n=m.getInstance();var s=n.getAdditionalFilterButton({fieldId:t.NAME,enabled:t.ADDITIONAL_FILTER_ALLOWED});a.Dom.append(s,i);if(!t.ADDITIONAL_FILTER_ALLOWED){BX.Dom.addClass(i,"main-ui-filter-additional-filters-hide")}if(a.Type.isStringFilled(t.ADDITIONAL_FILTER)){n.initAdditionalFilter(i,t.ADDITIONAL_FILTER)}}if(BX.type.isDomNode(i)){i.dataset.name=t.NAME;i.FieldController=new BX.Filter.FieldController(i,this.parent);if(t.REQUIRED){var r=i.querySelector(".main-ui-filter-field-delete");if(r){BX.remove(r)}}}return i}},{key:"removeNotCompareVariables",value:function e(t,i){if(BX.type.isPlainObject(t)){var n=this.parent.dateTypes;var s=this.parent.additionalDateTypes;if("FIND"in t){delete t.FIND}if(!i){Object.keys(t).forEach((function(e){if(e.indexOf("_numsel")!==-1){delete t[e]}if(e.indexOf("_datesel")!==-1){var i=t[e];if(i===n.EXACT||i===n.RANGE||i===s.PREV_DAY||i===s.NEXT_DAY||i===s.MORE_THAN_DAYS_AGO||i===s.AFTER_DAYS||i===n.PREV_DAYS||i===n.NEXT_DAYS||i===n.YEAR||i===n.MONTH||i===n.QUARTER||i===n.NONE||i===n.CUSTOM_DATE){delete t[e]}}var r=this.parent.getFieldByName(e);if(t[e]===""&&(!r||!r.STRICT)){delete t[e]}}),this)}}}},{key:"isPresetValuesModified",value:function e(t){var i=this.getPreset(t);var n=this.parent.preparePresetSettingsFields(i.FIELDS);var s=this.parent.getFilterFieldsValues();this.removeNotCompareVariables(n);this.removeNotCompareVariables(s);var r=BX.Filter.Utils.sortObject(n);var a=BX.Filter.Utils.sortObject(s);return!Object.keys(r).every((function(e){return r[e]===a[e]||(BX.type.isPlainObject(r[e])||BX.type.isArray(r[e]))&&BX.Filter.Utils.objectsIsEquals(r[e],a[e])}))}},{key:"getAdditionalValues",value:function e(t){var i=this.getPreset(t);var n=i.FIELDS.filter((function(e){return!this.isEmptyField(e)}),this);var s=this.parent.preparePresetSettingsFields(n);var r=this.parent.getFilterFieldsValues();this.removeNotCompareVariables(s,true);this.removeNotCompareVariables(r,true);this.removeSameProperties(r,s);return r}},{key:"removeSameProperties",value:function e(t,i){if(BX.type.isPlainObject(t)&&BX.type.isPlainObject(i)){Object.keys(i).forEach((function(e){if(e in t){delete t[e]}}))}}},{key:"removeAdditionalField",value:function e(t){var i=this.getPreset(this.getCurrentPresetId());if(BX.type.isArray(i.ADDITIONAL)){i.ADDITIONAL=i.ADDITIONAL.filter((function(e){return e.NAME!==t}))}}},{key:"updatePresetFields",value:function e(t,i){var n=this;var s;var r;var a=[];if(BX.type.isPlainObject(t)&&"FIELDS"in t){s=t.FIELDS;if(BX.type.isArray(t.ADDITIONAL)){t.ADDITIONAL.filter((function(e){return n.parent.params.FIELDS.some((function(t){return e.NAME===t.NAME}))})).forEach((function(e){var t=false;e.IS_PRESET_FIELD=true;s.forEach((function(i,n){if(e.NAME===i.NAME){s[n]=e;t=true}}));if(!t){s.push(e)}}))}(s||[]).filter((function(e){return n.parent.params.FIELDS.some((function(t){return e.NAME===t.NAME}))})).forEach((function(e,t){e.TABINDEX=t+1;if(i){switch(e.TYPE){case this.parent.types.SELECT:{e.VALUE=e.ITEMS[0];break}case this.parent.types.MULTI_SELECT:{e.VALUE=[];break}case this.parent.types.DATE:{e.SUB_TYPE=e.SUB_TYPES[0];e.VALUES={_from:"",_to:"",_days:""};break}case this.parent.types.CUSTOM_DATE:{e.VALUE={days:[],months:[],years:[]};break}case this.parent.types.NUMBER:{e.SUB_TYPE=e.SUB_TYPES[0];e.VALUES={_from:"",_to:""};break}case this.parent.types.CUSTOM_ENTITY:{e.VALUES={_label:"",_value:""};break}case this.parent.types.CUSTOM:{e._VALUE="";break}default:{if("VALUE"in e){if(BX.type.isArray(e.VALUE)){e.VALUE=[]}else{e.VALUE=""}}break}}}a.push(this.createControl(e))}),this);this.parent.disableFieldsDragAndDrop();r=this.parent.getFieldListContainer();BX.cleanNode(r);if(a.length){a.forEach((function(e,i){if(BX.type.isDomNode(e)){if(t.ID!=="tmp_filter"&&t.ID!=="default_filter"&&!("IS_PRESET_FIELD"in s[i])&&!this.isEmptyField(s[i])){BX.addClass(e,this.parent.settings.classPresetField)}BX.append(e,r);if(BX.type.isString(s[i].HTML)){var n=BX.create("div");this.parent.getHiddenElement().appendChild(n);BX.html(n,s[i].HTML)}}}),this);this.parent.enableFieldsDragAndDrop()}}}},{key:"showCurrentPresetFields",value:function e(){var t=this.getCurrentPresetData();this.updatePresetFields(t)}},{key:"getCurrentPreset",value:function e(){return BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classPresetCurrent)}},{key:"getCurrentPresetId",value:function e(){var t=this.getCurrentPreset();var i=null;if(BX.type.isDomNode(t)){i=this.getPresetId(t)}else{i="tmp_filter"}return i}},{key:"getCurrentPresetData",value:function e(){var t=this.getCurrentPresetId();var i=null;if(BX.type.isNotEmptyString(t)){i=this.getPreset(t);i=this.extendPreset(i)}return i}},{key:"getContainer",value:function e(){return BX.Filter.Utils.getByClass(this.parent.getFilter(),this.parent.settings.classPresetsContainer)}},{key:"getPresets",value:function e(){return BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classPreset,true)}},{key:"getDefaultPresets",value:function e(){return BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classDefaultFilter,true)}},{key:"getPinnedPresetNode",value:function e(){return BX.Filter.Utils.getByClass(this.getContainer(),this.parent.settings.classPinnedPreset)}},{key:"isPinned",value:function e(t){return this.getPinnedPresetId()===t}},{key:"getPinnedPresetId",value:function e(){var t=this.getPinnedPresetNode();var i="default_filter";if(t){var n=BX.data(t,"id");i=n||i}return i}}]);return e}();var E,y,v,B,A,P,S,_;function L(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */L=function t(){return e};var e={},t=Object.prototype,i=t.hasOwnProperty,n=Object.defineProperty||function(e,t,i){e[t]=i.value},s="function"==typeof Symbol?Symbol:{},r=s.iterator||"@@iterator",a=s.asyncIterator||"@@asyncIterator",l=s.toStringTag||"@@toStringTag";function o(e,t,i){return Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{o({},"")}catch(e){o=function e(t,i,n){return t[i]=n}}function u(e,t,i,s){var r=t&&t.prototype instanceof h?t:h,a=Object.create(r.prototype),l=new b(s||[]);return n(a,"_invoke",{value:A(e,i,l)}),a}function c(e,t,i){try{return{type:"normal",arg:e.call(t,i)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d={};function h(){}function p(){}function f(){}var m={};o(m,r,(function(){return this}));var g=Object.getPrototypeOf,E=g&&g(g(I([])));E&&E!==t&&i.call(E,r)&&(m=E);var y=f.prototype=h.prototype=Object.create(m);function v(e){["next","throw","return"].forEach((function(t){o(e,t,(function(e){return this._invoke(t,e)}))}))}function B(e,t){function s(n,r,a,l){var o=c(e[n],e,r);if("throw"!==o.type){var u=o.arg,d=u.value;return d&&"object"==babelHelpers["typeof"](d)&&i.call(d,"__await")?t.resolve(d.__await).then((function(e){s("next",e,a,l)}),(function(e){s("throw",e,a,l)})):t.resolve(d).then((function(e){u.value=e,a(u)}),(function(e){return s("throw",e,a,l)}))}l(o.arg)}var r;n(this,"_invoke",{value:function e(i,n){function a(){return new t((function(e,t){s(i,n,e,t)}))}return r=r?r.then(a,a):a()}})}function A(e,t,i){var n="suspendedStart";return function(s,r){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===s)throw r;return T()}for(i.method=s,i.arg=r;;){var a=i.delegate;if(a){var l=P(a,i);if(l){if(l===d)continue;return l}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if("suspendedStart"===n)throw n="completed",i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);n="executing";var o=c(e,t,i);if("normal"===o.type){if(n=i.done?"completed":"suspendedYield",o.arg===d)continue;return{value:o.arg,done:i.done}}"throw"===o.type&&(n="completed",i.method="throw",i.arg=o.arg)}}}function P(e,t){var i=t.method,n=e.iterator[i];if(undefined===n)return t.delegate=null,"throw"===i&&e.iterator["return"]&&(t.method="return",t.arg=undefined,P(e,t),"throw"===t.method)||"return"!==i&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+i+"' method")),d;var s=c(n,e.iterator,t.arg);if("throw"===s.type)return t.method="throw",t.arg=s.arg,t.delegate=null,d;var r=s.arg;return r?r.done?(t[e.resultName]=r.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=undefined),t.delegate=null,d):r:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,d)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function b(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function I(e){if(e){var t=e[r];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,s=function t(){for(;++n<e.length;)if(i.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=undefined,t.done=!0,t};return s.next=s}}return{next:T}}function T(){return{value:undefined,done:!0}}return p.prototype=f,n(y,"constructor",{value:f,configurable:!0}),n(f,"constructor",{value:p,configurable:!0}),p.displayName=o(f,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,f):(e.__proto__=f,o(e,l,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},v(B.prototype),o(B.prototype,a,(function(){return this})),e.AsyncIterator=B,e.async=function(t,i,n,s,r){void 0===r&&(r=Promise);var a=new B(u(t,i,n,s),r);return e.isGeneratorFunction(i)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},v(y),o(y,l,"Generator"),o(y,r,(function(){return this})),o(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),i=[];for(var n in t)i.push(n);return i.reverse(),function e(){for(;i.length;){var n=i.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},e.values=I,b.prototype={constructor:b,reset:function e(t){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method="next",this.arg=undefined,this.tryEntries.forEach(_),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=undefined)},stop:function e(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function e(t){if(this.done)throw t;var n=this;function s(e,i){return l.type="throw",l.arg=t,n.next=e,i&&(n.method="next",n.arg=undefined),!!i}for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r],l=a.completion;if("root"===a.tryLoc)return s("end");if(a.tryLoc<=this.prev){var o=i.call(a,"catchLoc"),u=i.call(a,"finallyLoc");if(o&&u){if(this.prev<a.catchLoc)return s(a.catchLoc,!0);if(this.prev<a.finallyLoc)return s(a.finallyLoc)}else if(o){if(this.prev<a.catchLoc)return s(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return s(a.finallyLoc)}}}},abrupt:function e(t,n){for(var s=this.tryEntries.length-1;s>=0;--s){var r=this.tryEntries[s];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=n&&n<=a.finallyLoc&&(a=null);var l=a?a.completion:{};return l.type=t,l.arg=n,a?(this.method="next",this.next=a.finallyLoc,d):this.complete(l)},complete:function e(t,i){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&i&&(this.next=i),d},finish:function e(t){for(var i=this.tryEntries.length-1;i>=0;--i){var n=this.tryEntries[i];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),_(n),d}},catch:function e(t){for(var i=this.tryEntries.length-1;i>=0;--i){var n=this.tryEntries[i];if(n.tryLoc===t){var s=n.completion;if("throw"===s.type){var r=s.arg;_(n)}return r}}throw new Error("illegal catch attempt")},delegateYield:function e(t,i,n){return this.delegate={iterator:I(t),resultName:i,nextLoc:n},"next"===this.method&&(this.arg=undefined),d}},e}function b(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function I(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?b(Object(i),!0).forEach((function(t){babelHelpers.defineProperty(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):b(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}(function(){BX.namespace("BX.Main");BX.Main.Filter=function(e,t,i,n,s,r,a){this.params=e;this.search=null;this.popup=null;this.checkboxListPopup=null;this.presets=null;this.fields=null;this.types=i;this.dateTypes=n;this.additionalDateTypes=r;this.additionalNumberTypes=a;this.numberTypes=s;this.settings=new BX.Filter.Settings(t,this);this.filter=null;this.api=null;this.isAddPresetModeState=false;this.firstInit=true;this.analyticsLabel=null;this.emitter=new BX.Event.EventEmitter;this.emitter.setEventNamespace("BX.Filter.Field");this.emitter.subscribe=function(e,t){BX.Event.EventEmitter.subscribe(this.emitter,e.replace("BX.Filter.Field:",""),t)}.bind(this);this.enableFieldsSearch=null;this.enableHeadersSections=null;this.init()};function e(e){if(BX.type.isString(e)){e=e.toLowerCase();e=e.replace(/[\-_\s]+(.)?/g,(function(e,t){return t?t.toUpperCase():""}));return e.substr(0,1).toLowerCase()+e.substr(1)}return e}BX.Main.Filter.prototype={init:function e(){BX.bind(document,"mousedown",BX.delegate(this._onDocumentClick,this));BX.bind(document,"keydown",BX.delegate(this._onDocumentKeydown,this));BX.bind(window,"load",BX.delegate(this.onWindowLoad,this));BX.addCustomEvent("Grid::ready",BX.delegate(this._onGridReady,this));this.getSearch().updatePreset(this.getParam("CURRENT_PRESET"));this.enableFieldsSearch=this.getParam("ENABLE_FIELDS_SEARCH",false);this.enableHeadersSections=this.getParam("HEADERS_SECTIONS",false);if(this.isAppliedDefaultPreset()){this.setDefaultPresetAppliedState(true)}},getEmitter:function e(){return this.emitter},onWindowLoad:function e(){this.settings.get("AUTOFOCUS")&&this.adjustFocus()},clearGet:function e(){if("history"in window){var t=window.location.toString();var i=BX.util.remove_url_param(t,"apply_filter");window.history.replaceState(null,"",i)}},adjustFocus:function e(){this.getSearch().adjustFocus()},_onAddPresetKeydown:function e(t){if(BX.Filter.Utils.isKey(t,"enter")){this._onSaveButtonClick()}},_onDocumentKeydown:function e(t){if(BX.Filter.Utils.isKey(t,"escape")){if(this.getPopup().isShown()){BX.onCustomEvent(window,"BX.Main.Filter:blur",[this]);this.closePopup();if(this.getParam("VALUE_REQUIRED_MODE")){this.restoreRemovedPreset()}if(this.getParam("VALUE_REQUIRED")){if(!this.getSearch().getSquares().length){this.getPreset().applyPinnedPreset()}}}}},getApi:function e(){if(!(this.api instanceof BX.Filter.Api)){this.api=new BX.Filter.Api(this)}return this.api},addSidebarItem:function e(t,i,n){var s=this.getPreset();var r=s.getContainer();var a=s.createSidebarItem(t,i,n);var l=s.getPresetNodeById(t);if(BX.type.isDomNode(l)){BX.remove(l);r.insertBefore(a,s.getAddPresetField())}else{r&&r.insertBefore(a,s.getAddPresetField())}BX.bind(a,"click",BX.delegate(s._onPresetClick,s))},saveUserSettings:function e(t){var i={FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),action:"SET_FILTER_ARRAY"};var n=this.getPreset();var s=n.getCurrentPresetId();var r={};this.params["PRESETS"]=BX.clone(this.editablePresets);r.current_preset=s;n.getPresets().forEach((function(e,i){var s=n.getPresetId(e);if(s&&s!=="tmp_filter"){var a=n.getPreset(s);a.TITLE=BX.util.htmlspecialchars(BX.util.htmlspecialcharsback(a.TITLE));a.SORT=i;n.updatePresetName(e,a.TITLE);r[s]={sort:i,name:a.TITLE,fields:this.preparePresetSettingsFields(a.FIELDS),rows:a.FIELDS.map((function(e){return e.NAME})),for_all:t&&!BX.type.isBoolean(a.FOR_ALL)||t&&a.FOR_ALL===true}}}),this);this.saveOptions(r,i,null,t)},isForAll:function e(t){var i=this.getForAllCheckbox();return BX.type.isBoolean(t)&&t||!!i&&!!i.checked},getForAllCheckbox:function e(){if(!this.forAllCheckbox){this.forAllCheckbox=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classForAllCheckbox)}return this.forAllCheckbox},preparePresetSettingsFields:function e(t){var i={};var n;(t||[]).forEach((function(e){switch(e.TYPE){case this.types.STRING:{i[e.NAME]=e.VALUE;break}case this.types.TEXTAREA:{i[e.NAME]=e.VALUE;break}case this.types.SELECT:{i[e.NAME]="VALUE"in e.VALUE?e.VALUE.VALUE:"";break}case this.types.MULTI_SELECT:{if(BX.type.isArray(e.VALUE)&&e.VALUE.length){e.VALUE.forEach((function(t,n){i[e.NAME]=BX.type.isPlainObject(i[e.NAME])?i[e.NAME]:{};i[e.NAME][n]=t.VALUE}),this)}break}case this.types.CHECKBOX:{if(BX.type.isArray(e.VALUE)&&e.VALUE.length){e.VALUE.forEach((function(t,n){i[e.NAME]=BX.type.isPlainObject(i[e.NAME])?i[e.NAME]:{};i[e.NAME][n]=t.VALUE}),this)}break}case this.types.DATE:{if(BX.type.isPlainObject(e.VALUES)){n=Object.keys(e.VALUES);i[e.NAME+"_datesel"]=e.SUB_TYPE.VALUE;n.forEach((function(t){i[e.NAME+t]=e.VALUES[t]}),this)}break}case this.types.NUMBER:{if(BX.type.isPlainObject(e.VALUES)){n=Object.keys(e.VALUES);i[e.NAME+"_numsel"]=e.SUB_TYPE.VALUE;n.forEach((function(t){i[e.NAME+t]=e.VALUES[t]}),this)}break}case this.types.DEST_SELECTOR:{if(BX.type.isPlainObject(e.VALUES)){i[e.NAME]=e.VALUES._value;i[e.NAME+"_label"]=e.VALUES._label}break}case this.types.DEST_SELECTOR:case this.types.ENTITY_SELECTOR:case this.types.CUSTOM_ENTITY:{if(BX.type.isPlainObject(e.VALUES)){i[e.NAME]=e.VALUES._value;i[e.NAME+"_label"]=e.VALUES._label}break}default:{break}}}),this);return i},savePreset:function e(){var t="filter_"+ +new Date;var i=BX.util.htmlspecialcharsback(this.getPreset().getAddPresetFieldInput().value);this.updatePreset(t,i,null,true,null,null,true);this.addSidebarItem(t,i);this.getPreset().applyPreset(t);this.getPreset().activatePreset(t);this.applyFilter()},updatePreset:function e(t,i,n,s,r,a,l){var o=this.getFilterFieldsValues();var u=this.getPreset().getFields().map((function(e){return BX.data(e,"name")}));var c=this.getPreset().getCurrentPresetData();var d={FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),action:"SET_FILTER"};var h,p,f,m,g;var E={};E.additional={};if(t!=="tmp_filter"&&t!=="default_filter"&&!l){var y=BX.type.isArray(c.ADDITIONAL)?c.ADDITIONAL:[];y.forEach((function(e){Object.keys(o).forEach((function(t){if(t.indexOf(e.NAME)!==-1){E.additional[t]=o[t];delete o[t]}}))}))}h=Object.keys(o);if(!n){E.apply_filter="Y"}else{E.clear_filter="Y"}E.save="Y";E.fields=o;E.rows=u.join(",");E.preset_id=t||c.ID;if(BX.type.isNotEmptyString(i)){E.name=BX.util.htmlspecialchars(i)}else{f=this.getPreset().getPresetNodeById(E.preset_id);m=this.getPreset().getPresetInput(f);if(BX.type.isDomNode(m)&&BX.type.isNotEmptyString(m.value)){E.name=m.value}else{E.name=c.TITLE}}if((!("sort"in E)||!BX.type.isNumber(E.sort))&&s){g=this.getParam("PRESETS");E.sort=g.length+2}if(!n){h.forEach((function(e){if(BX.type.isArray(E.fields[e])){p=E.fields[e].length?{}:"";E.fields[e].forEach((function(e,t){p[t]=e}),this);if(p||BX.type.isNumber(p)||BX.type.isBoolean(p)){E.fields[e]=p}}}),this)}if(E.preset_id==="tmp_filter"||this.isAddPresetEnabled()||n){this.updateParams(E)}if(BX.type.isFunction(r)){r()}var v=new BX.Promise(null,this);v.setAutoResolve("fulfill",0);v.then((function(){var e=new BX.Promise(null,this);this.saveOptions(E,d,BX.proxy(e.fulfill,e));return e})).then((function(){!!a&&a()}));return v},saveFieldsSort:function e(){var t={FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),action:"SET_FILTER"};var i=this.getPreset().getFields();var n={};n.preset_id="default_filter";if(BX.type.isArray(i)){n.rows=i.map((function(e){return BX.data(e,"name")}));n.rows=n.rows.join(",")}this.updateParams(n);this.saveOptions(n,t)},updateParams:function e(t){var i,n;if(BX.type.isPlainObject(t)&&"preset_id"in t){i=this.getPreset().getPreset(t.preset_id);if(BX.type.isPlainObject(i)){if("name"in t&&BX.type.isNotEmptyString(t.name)){i.TITLE=t.name}if("rows"in t&&!("fields"in t)){t.fields={};t.rows.split(",").forEach((function(e){t.fields[e]=""}))}if("fields"in t){i.FIELDS=this.preparePresetFields(t.fields,t.rows)}if("additional"in t&&i.ID!=="tmp_filter"){i.ADDITIONAL=this.preparePresetFields(t.additional,t.rows)}}else{n=this.getParam("PRESETS");i={ID:t.preset_id,TITLE:t.name,SORT:n.length+2,FIELDS:this.preparePresetFields(t.fields,t.rows)};n.push(i)}}},preparePresetFields:function e(t,i){var n,s;var r=[];if(BX.type.isPlainObject(t)){i=BX.type.isNotEmptyString(i)?i.split(","):[];n=i.length?i:Object.keys(t);n.forEach((function(e){e=e.replace("_datesel","").replace("_numsel","").replace("_"+BX.Filter.AdditionalFilter.Type.IS_EMPTY,"").replace("_"+BX.Filter.AdditionalFilter.Type.HAS_ANY_VALUE,"");s=BX.clone(this.getFieldByName(e));if(BX.type.isPlainObject(s)){s.ADDITIONAL_FILTER=BX.Filter.AdditionalFilter.fetchAdditionalFilter(e,t);if(!BX.Type.isStringFilled(s.ADDITIONAL_FILTER)){if(s.TYPE===this.types.STRING){s.VALUE=t[e]}if(s.TYPE===this.types.TEXTAREA){s.VALUE=t[e]}if(s.TYPE===this.types.MULTI_SELECT){s.VALUE=this.prepareMultiSelectValue(t[e],s.ITEMS)}if(s.TYPE===this.types.SELECT||s.TYPE===this.types.CHECKBOX){s.VALUE=this.prepareSelectValue(t[e],s.ITEMS)}if(s.TYPE===this.types.DATE){s.SUB_TYPE=this.prepareSelectValue(t[e+"_datesel"],s.SUB_TYPES);s.VALUES={_from:t[e+"_from"],_to:t[e+"_to"],_days:t[e+"_days"],_month:t[e+"_month"],_quarter:t[e+"_quarter"],_year:t[e+"_year"],_allow_year:t[e+"_allow_year"]}}if(s.TYPE===this.types.CUSTOM_DATE){s.VALUE={days:Object.keys(t[e+"_days"]||{}).map((function(i){return t[e+"_days"][i]})),months:Object.keys(t[e+"_months"]||{}).map((function(i){return t[e+"_months"][i]})),years:Object.keys(t[e+"_years"]||{}).map((function(i){return t[e+"_years"][i]}))}}if(s.TYPE===this.types.NUMBER){s.SUB_TYPE=this.prepareSelectValue(t[e+"_numsel"],s.SUB_TYPES);s.VALUES={_from:t[e+"_from"],_to:t[e+"_to"]}}if(s.TYPE===this.types.DEST_SELECTOR||s.TYPE===this.types.ENTITY_SELECTOR||s.TYPE===this.types.CUSTOM_ENTITY){if(typeof t[e+"_label"]!=="undefined"){s.VALUES._label=t[e+"_label"]}if(typeof t[e]!=="undefined"){s.VALUES._value=t[e]}}if(s.TYPE===this.types.CUSTOM){s._VALUE=t[e]}}r.push(s)}}),this)}return r},prepareSelectValue:function e(t,i){var n={};var s;if(BX.type.isNotEmptyString(t)&&BX.type.isArray(i)){s=this.prepareMultiSelectValue({0:t},i);n=s.length>0?s[0]:{}}else{n=i[0]}return n},prepareMultiSelectValue:function e(t,i){var n=[];if(BX.type.isPlainObject(t)&&BX.type.isArray(i)){var s=Object.keys(t);var r=s.map((function(e){return t[e]}));n=i.filter((function(e){return r.some((function(t){return t===e.VALUE}))}),this)}return n},getFieldByName:function e(t){var i=this.getParam("FIELDS");var n=i.find((function(e){return e.NAME===t}));if(n){return n}var s=this.getFieldListContainer().querySelector('[data-name="'+t+'"]');n=BX.Filter.Field.instances.get(s);if(n){return n.options}return null},confirmSaveForAll:function e(){return new Promise(function(e){var t={CONFIRM:true,CONFIRM_MESSAGE:this.getParam("MAIN_UI_FILTER__CONFIRM_MESSAGE_FOR_ALL"),CONFIRM_APPLY_BUTTON:this.getParam("MAIN_UI_FILTER__CONFIRM_APPLY_FOR_ALL"),CONFIRM_CANCEL_BUTTON:this.getParam("CONFIRM_CANCEL")};this.confirmDialog(t,e)}.bind(this))},saveOptions:function t(i,n,s,r){n.action=e(n.action);n.forAll=this.isForAll(r);n.commonPresetsId=this.getParam("COMMON_PRESETS_ID");n.apply_filter=i.apply_filter||"N";n.clear_filter=i.clear_filter||"N";n.with_preset=i.with_preset||"N";n.save=i.save||"N";n.isSetOutside=this.isSetOutside();var a={params:n,data:i};delete i.apply_filter;delete i.save;delete i.clear_filter;delete i.with_preset;if(n.forAll&&n.action==="setFilterArray"){return this.confirmSaveForAll().then(function(){return this.backend(n.action,a)}.bind(this)).then(function(){this.disableEdit();this.disableAddPreset()}.bind(this))}return this.backend(n.action,a).then(function(){BX.removeClass(this.getFindButton(),this.settings.classWaitButtonClass);BX.type.isFunction(s)&&s()}.bind(this))},backend:function e(t,i){var n=this.analyticsLabel||{};this.analyticsLabel={};return BX.ajax.runComponentAction("bitrix:main.ui.filter",t,{mode:"ajax",data:i,analyticsLabel:I({FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),PRESET_ID:i["data"]["preset_id"],FIND:i["data"].hasOwnProperty("fields")&&i["data"]["fields"].hasOwnProperty("FIND")&&!!i["data"]["fields"]["FIND"]?"Y":"N",ROWS:BX.Type.isObject(i["data"]["additional"])&&Object.keys(i["data"]["additional"]).length==0?"N":"Y"},n)})},limitAnalyticsSend:function e(){BX.ajax.runComponentAction("bitrix:main.ui.filter","limitAnalytics",{mode:"ajax",data:{},analyticsLabel:{FILTER_ID:this.getParam("FILTER_ID"),LIMIT:this.getParam("FILTER_ID")}})},prepareEvent:function e(t){var i,n;if(!("path"in t)||!t.path.length){t.path=[t.target];i=0;while((n=t.path[i++].parentNode)!==null){t.path.push(n)}}return t},restoreRemovedPreset:function e(){if(this.getParam("VALUE_REQUIRED_MODE")){var t=this.getParam("CURRENT_PRESET");if(BX.type.isPlainObject(t)){var i=t.ID;var n=this.getPreset().getPresetNodeById(i);this.getPreset().applyPreset(i);this.getPreset().activatePreset(n)}}},hasScrollClick:function e(t){var i="clientX"in t?t.clientX:"x"in t?t.x:0;return i>=document.documentElement.offsetWidth},isUseCommonPresets:function e(){return!!this.getParam("COMMON_PRESETS_ID")},isInsideFilterEvent:function e(t){t=this.prepareEvent(t);return(t.path||[]).some((function(e){return BX.type.isDomNode(e)&&(BX.hasClass(e,this.settings.classFilterContainer)||BX.hasClass(e,this.settings.classSearchContainer)||BX.hasClass(e,this.settings.classDefaultPopup)||BX.hasClass(e,this.settings.classPopupOverlay)||BX.hasClass(e,this.settings.classSidePanelContainer))}),this)},_onDocumentClick:function e(t){var i=this.getPopup();if(!this.isInsideFilterEvent(t)&&!this.hasScrollClick(t)){if(i&&i.isShown()){this.closePopup();if(this.getParam("VALUE_REQUIRED_MODE")){this.restoreRemovedPreset()}if(this.getParam("VALUE_REQUIRED")){if(!this.getSearch().getSquares().length){this.getPreset().applyPinnedPreset()}}}BX.onCustomEvent(window,"BX.Main.Filter:blur",[this])}},_onAddFieldClick:function e(t){var i=this;t.stopPropagation();t.preventDefault();if(this.getParam("USE_CHECKBOX_LIST_FOR_SETTINGS_POPUP")){BX.Runtime.loadExtension("ui.dialogs.checkbox-list").then((function(){if(BX.UI&&BX.Type.isFunction(BX.UI.CheckboxList)){i.showFieldsSettingsCheckboxList();return}i.showFieldsSettingsPopup()}));return}this.showFieldsSettingsPopup()},showFieldsSettingsPopup:function e(){var t=this.getFieldsPopup();if(t&&!t.isShown()){this.showFieldsPopup();this.syncFields();return}this.closeFieldListPopup()},showFieldsSettingsCheckboxList:function e(){var t=this;if(this.checkboxListPopup){this.checkboxListPopup.show();this.syncCheckboxFields();return}this.getFieldsListPopupContent().then((function(e){var i=t.getPreparedCheckboxListData(e),n=i.sections,s=i.categories,r=i.options;var l=t.enableFieldsSearch,o=t.enableHeadersSections;var u={parentType:"filter"};t.checkboxListPopup=new BX.UI.CheckboxList({popupOptions:{width:t.settings.popupWidth},lang:{title:a.Loc.getMessage("MAIN_UI_FILTER__FIELDS_SETTINGS_TITLE"),placeholder:a.Loc.getMessage("MAIN_UI_FILTER__FIELD_SEARCH_PLACEHOLDER"),emptyStateTitle:a.Loc.getMessage("MAIN_UI_FILTER__FIELD_EMPTY_STATE_TITLE"),emptyStateDescription:a.Loc.getMessage("MAIN_UI_FILTER__FIELD_EMPTY_STATE_DESCRIPTION"),allSectionsDisabledTitle:a.Loc.getMessage("MAIN_UI_FILTER__FIELD_ALL_SECTIONS_DISABLED")},sections:n,categories:s,options:r,events:{onApply:function e(i){return t.onCheckboxListApply(i.data.fields)}},params:{destroyPopupAfterClose:false,useSearch:l,useSectioning:o},context:u});t.checkboxListPopup.show()}))},syncCheckboxFields:function e(){var t=this;var i=this.getPreset().getFields();var n=this.checkboxListPopup.getSelectedOptions();n.forEach((function(e){if(!i.some((function(t){return t.dataset.name===e}))){t.checkboxListPopup.handleOptionToggled(e)}}))},getPreparedCheckboxListData:function e(t){var i,n,s=this;var r=this.getDefaultHeaderSection();var a=new Set;var l=this.getHeadersSections();var o=[];var u=[];var c=[];var d=this.getPreset();var h=d.getFields();var p=(i=(n=d.parent.getParam("CURRENT_PRESET"))===null||n===void 0?void 0:n.FIELDS)!==null&&i!==void 0?i:[];var f=this.getParam("RESTRICTED_FIELDS",[]);t.forEach((function(e){var t=e.sectionId.length?e.sectionId:r===null||r===void 0?void 0:r.id;if(s.enableHeadersSections&&!a.has(t)){var i=l[t].name;a.add(t);o.push({title:i,key:t,value:true});u.push({title:i,sectionKey:t,key:t})}var n=e.name;c.push({title:e.label,value:h.some((function(e){return e.dataset.name===n})),categoryKey:t,defaultValue:p.some((function(e){return e.NAME===n})),id:n,locked:f.includes(n)})}));return{sections:o,categories:u,options:c}},syncFields:function e(t){if(BX.type.isPlainObject(t)){if(t.cache===false){this.fieldsPopupItems=null}}var i=this.getPreset().getFields();var n=this.getFieldsPopupItems();var s,r;if(BX.type.isArray(n)&&n.length){n.forEach((function(e){s=BX.data(e,"name").replace("_datesel","").replace("_numsel","");r=i.some((function(e){return BX.data(e,"name")===s}));if(r){BX.addClass(e,this.settings.classMenuItemChecked)}else{BX.removeClass(e,this.settings.classMenuItemChecked)}}),this)}},getFieldsPopupItems:function e(){if(!BX.type.isArray(this.fieldsPopupItems)){var t=this.getFieldsPopup();if("contentContainer"in t&&BX.type.isDomNode(t.contentContainer)){this.fieldsPopupItems=BX.Filter.Utils.getByClass(t.contentContainer,this.settings.classMenuItem,true)}this.prepareAnimation()}return this.fieldsPopupItems},getFieldListContainerClassName:function e(t){var i=parseInt(this.settings.get("popupColumnsCount",0),10);if(i>0&&i<=this.settings.maxPopupColumnCount){return this.settings.get("classPopupFieldList"+i+"Column")}var n=this.settings.classPopupFieldList1Column;if(t>6&&t<12){n=this.settings.classPopupFieldList2Column}if(t>12){n=this.settings.classPopupFieldList3Column}return n},prepareFieldsDecl:function e(t){return(t||[]).map((function(e){return{block:"main-ui-filter-field-list-item",label:"LABEL"in e?e.LABEL:"",id:"ID"in e?e.ID:"",name:"NAME"in e?e.NAME:"",item:e,sectionId:"SECTION_ID"in e?e.SECTION_ID:"",onClick:BX.delegate(this._clickOnFieldListItem,this)}}),this)},getLazyLoadFields:function e(){var t=this.getParam("LAZY_LOAD")["GET_LIST"];var i=new BX.Promise;if(BX.Type.isPlainObject(t)){var n=t.component,s=t.action,r=t.data;BX.ajax.runComponentAction(n,s,{mode:"ajax",data:r}).then((function(e){var t;i.fulfill((t=e.data.fields)!==null&&t!==void 0?t:[])}))}else{BX.ajax({method:"GET",url:t,dataType:"json",onsuccess:function e(t){return i.fulfill(t)}})}return i},getFieldsListPopupContent:function e(){var t=new BX.Promise;var i=this.getParam("FIELDS");var n=BX.type.isArray(i)?i.length:0;if(this.getParam("LAZY_LOAD")){var s=function(e){t.fulfill(this.getPopupContent(this.settings.classPopupFieldList,this.getFieldListContainerClassName(e.length),this.prepareFieldsDecl(e)))}.bind(this);if(BX.type.isNotEmptyObject(this.getParam("LAZY_LOAD")["CONTROLLER"])){var r=this.getParam("LAZY_LOAD")["CONTROLLER"]["componentName"];var a=this.getParam("LAZY_LOAD")["CONTROLLER"]["signedParameters"];BX.ajax.runAction(this.getParam("LAZY_LOAD")["CONTROLLER"]["getList"],{data:{filterId:this.getParam("FILTER_ID"),componentName:BX.type.isNotEmptyString(r)?r:"",signedParameters:BX.type.isNotEmptyString(a)?a:""}}).then(function(e){s(e.data)}.bind(this),(function(e){}))}else{this.getLazyLoadFields().then(s)}return t}t.fulfill(this.getPopupContent(this.settings.classPopupFieldList,this.getFieldListContainerClassName(n),this.prepareFieldsDecl(i)));return t},getPopupContent:function e(t,i,n){if(this.getParam("USE_CHECKBOX_LIST_FOR_SETTINGS_POPUP")&&BX.UI&&BX.Type.isFunction(BX.UI.CheckboxList)){return n}var s=BX.Tag.render(E||(E=babelHelpers.taggedTemplateLiteral(["<div></div>"])));if(!this.enableHeadersSections){var r=BX.decl({content:n,block:t,mix:i});this.setPopupElementWidthFromSettings(r);s.appendChild(r);if(this.enableFieldsSearch){this.preparePopupContentHeader(s)}return s}var a=this.getDefaultHeaderSection();var l={};n.forEach((function(e){var t=e.sectionId.length?e.sectionId:a.id;if(l[t]===undefined){l[t]=[]}l[t].push(e)}));this.preparePopupContentHeader(s);this.preparePopupContentFields(s,l,t,i);return s},onCheckboxListApply:function e(t){var n=this;return babelHelpers.asyncToGenerator(L().mark((function e(){var s,r,l,o,u,c;return L().wrap((function e(d){while(1)switch(d.prev=d.next){case 0:s=n.getPreset().getFields();r=[];s.forEach((function(e){r.push(e.dataset.name)}));if(!n.isFieldsChangePrevented(t,r)){d.next=5;break}return d.abrupt("return");case 5:d.next=7;return n.fetchFields(t,r);case 7:l=d.sent;if(a.Type.isArray(l)){d.next=11;break}if(a.Type.isPlainObject(l)&&l!==null&&l!==void 0&&l.ERROR){i.UI.Notification.Center.notify({content:l.ERROR})}return d.abrupt("return");case 11:l.forEach((function(e){return n.params.FIELDS.push(e)}));o=t.filter((function(e){return!r.includes(e)}));u=r.filter((function(e){return!t.includes(e)}));c=true;o.forEach((function(e){var t=l.find((function(t){return t.NAME===e}));if(t){n.getPreset().addField(t,c);if(a.Type.isString(t.HTML)){var i=BX.create("div");n.getHiddenElement().appendChild(i);BX.html(i,t.HTML)}}}));u.forEach((function(e){var t=l.find((function(t){return t.NAME===e}));if(t){n.getPreset().removeField(t,c)}}));n.saveFieldsSort();case 18:case"end":return d.stop()}}),e)})))()},fetchFields:function e(t,i){var n=this;return babelHelpers.asyncToGenerator(L().mark((function e(){var s,r,a,l,o;return L().wrap((function e(u){while(1)switch(u.prev=u.next){case 0:if(n.getParam("LAZY_LOAD")){u.next=2;break}return u.abrupt("return",n.getParam("FIELDS"));case 2:s=babelHelpers.toConsumableArray(new Set([].concat(babelHelpers.toConsumableArray(t),babelHelpers.toConsumableArray(i))));r=n.getParam("LAZY_LOAD")["CONTROLLER"];if(!r){u.next=7;break}a=r.componentName,l=r.signedParameters,o=r.getFields;return u.abrupt("return",new Promise((function(e){BX.ajax.runAction(o,{data:{filterId:n.getParam("FILTER_ID"),ids:s,componentName:BX.type.isNotEmptyString(a)?a:"",signedParameters:BX.type.isNotEmptyString(l)?l:""}}).then((function(t){return e(t.data)}))})));case 7:return u.abrupt("return",n.getLazyLoadFieldsByIds(s));case 8:case"end":return u.stop()}}),e)})))()},getLazyLoadFieldsByIds:function e(t){var i=this;return babelHelpers.asyncToGenerator(L().mark((function e(){var n,s;return L().wrap((function e(r){while(1)switch(r.prev=r.next){case 0:n=i.getParam("LAZY_LOAD")["GET_FIELDS"];s=BX.Uri.addParam(n,{ids:t});return r.abrupt("return",new Promise((function(e){BX.ajax({method:"get",url:s,dataType:"json",onsuccess:function t(i){return e(i)}})})));case 3:case"end":return r.stop()}}),e)})))()},isFieldsChangePrevented:function e(t,i){var n=new BX.Event.BaseEvent({data:{fields:t,oldFields:i}});this.emitter.emit("onBeforeChangeFilterItems",n);return n.isDefaultPrevented()},preparePopupContentHeader:function e(t){var i=BX.Tag.render(y||(y=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t<div class="main-ui-filter-popup-search-header-wrapper">\n\t\t\t\t\t<div class="ui-form-row-inline"></div>\n\t\t\t\t</div>\n\t\t\t'])));t.prepend(i);this.preparePopupContentHeaderSections(i);this.preparePopupContentHeaderSearch(i)},preparePopupContentHeaderSections:function e(t){if(!this.enableHeadersSections){return}var i=BX.Tag.render(v||(v=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t<div class="ui-form-row">\n\t\t\t\t\t<div class="ui-form-content main-ui-filter-popup-search-section-wrapper"></div>\n\t\t\t\t</div>\n\t\t\t'])));t.firstElementChild.appendChild(i);var n=this.getHeadersSections();for(var s in n){var r=this.settings.classPopupSearchSectionItemIcon+(n[s].selected?" ".concat(this.settings.classPopupSearchSectionItemIconActive):"");var a=BX.Tag.render(B||(B=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t\t<div class="main-ui-filter-popup-search-section-item" data-ui-popup-filter-section-button="','">\n\t\t\t\t\t\t<div class="','">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t',"\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t"])),s,r,BX.Text.encode(n[s].name));BX.bind(a,"click",this.onFilterSectionClick.bind(this,a));i.firstElementChild.appendChild(a)}},onFilterSectionClick:function e(t){var i=this.settings.classPopupSearchSectionItemIconActive;var n=t.dataset.uiPopupFilterSectionButton;var s=document.querySelectorAll("[data-ui-popup-filter-section='"+n+"']");if(BX.Dom.hasClass(t.firstElementChild,i)){BX.Dom.removeClass(t.firstElementChild,i);BX.Dom.hide(s[0])}else{BX.Dom.addClass(t.firstElementChild,i);BX.Dom.show(s[0])}},preparePopupContentHeaderSearch:function e(t){if(!this.enableFieldsSearch){return}var i=BX.Tag.render(A||(A=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t<div class="ui-form-row">\n\t\t\t\t\t<div class="ui-form-content main-ui-filter-popup-search-input-wrapper">\n\t\t\t\t\t\t<div class="ui-ctl ui-ctl-textbox ui-ctl-before-icon ui-ctl-after-icon">\n\t\t\t\t\t\t\t<div class="ui-ctl-before ui-ctl-icon-search"></div>\n\t\t\t\t\t\t\t<button class="ui-ctl-after ui-ctl-icon-clear"></button>\n\t\t\t\t\t\t\t<input type="text" class="ui-ctl-element ','">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t'])),this.settings.classPopupSearchSectionItem);t.firstElementChild.appendChild(i);var n=i.getElementsByClassName(this.settings.classPopupSearchSectionItem);if(n.length){var s=n[0];BX.bind(s,"input",this.onFilterSectionSearchInput.bind(this,s));BX.bind(s.previousElementSibling,"click",this.onFilterSectionSearchInputClear.bind(this,s))}},preparePopupContentFields:function e(t,i,n,s){if(!this.enableHeadersSections){return}var r=BX.Tag.render(P||(P=babelHelpers.taggedTemplateLiteral(['<div class="main-ui-filter-popup-search-sections-wrapper"></div>'])));t.appendChild(r);for(var a in i){var l=BX.Tag.render(S||(S=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t\t<div class="main-ui-filter-popup-section-wrapper" data-ui-popup-filter-section="','"></div>\n\t\t\t\t'])),a);this.setPopupElementWidthFromSettings(l);if(!this.getHeadersSectionParam(a,"selected")){l.setAttribute("hidden","")}var o=BX.Tag.render(_||(_=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t\t<h3 class="main-ui-filter-popup-title">\n\t\t\t\t\t\t',"\n\t\t\t\t\t</h3>\n\t\t\t\t"])),BX.Text.encode(this.getHeadersSectionParam(a,"name")));var u=BX.decl({block:n,mix:s,content:i[a]});l.appendChild(o);l.appendChild(u);r.appendChild(l)}},prepareAnimation:function e(){var t=this;if(this.enableFieldsSearch){this.fieldsPopupItems.forEach((function(e){BX.bind(e,"animationend",t.onAnimationEnd.bind(t,e))}))}},onAnimationEnd:function e(t){t.style.display=BX.Dom.hasClass(t,this.settings.classPopupSearchFieldListItemHidden)?"none":"inline-block"},onFilterSectionSearchInput:function e(t){var i=t.value;if(i.length){i=i.toLowerCase()}this.getFieldsPopupItems().forEach(function(e){var t=e.innerText.toLowerCase();if(i.length&&t.indexOf(i)===-1){BX.Dom.removeClass(e,this.settings.classPopupSearchFieldListItemVisible);BX.Dom.addClass(e,this.settings.classPopupSearchFieldListItemHidden)}else{BX.Dom.removeClass(e,this.settings.classPopupSearchFieldListItemHidden);BX.Dom.addClass(e,this.settings.classPopupSearchFieldListItemVisible);e.style.display="inline-block"}}.bind(this))},onFilterSectionSearchInputClear:function e(t){if(t.value.length){t.value="";this.onFilterSectionSearchInput(t)}},getDefaultHeaderSection:function e(){var t=this.getHeadersSections();for(var i in t){if("selected"in t[i]&&t[i].selected){return t[i]}}return null},getHeadersSections:function e(){return this.getParam("HEADERS_SECTIONS")},getHeadersSectionParam:function e(t,i,n){if(this.getHeadersSections()[t]!==undefined&&this.getHeadersSections()[t][i]!==undefined){return this.getHeadersSections()[t][i]}return n},getFieldLoader:function e(){if(!this.fieldLoader){this.fieldLoader=new BX.Loader({mode:"custom",size:18,offset:{left:"5px",top:"5px"}})}return this.fieldLoader},_clickOnFieldListItem:function e(t){var i=t.target;var n;if(!BX.hasClass(i,this.settings.classFieldListItem)){i=BX.findParent(i,{className:this.settings.classFieldListItem},true,false)}if(BX.type.isDomNode(i)){try{n=JSON.parse(BX.data(i,"item"))}catch(e){}if(this.isFieldChangePrevented(n,BX.hasClass(i,this.settings.classMenuItemChecked))){return}var s=new BX.Promise;if(this.getParam("LAZY_LOAD")){this.getFieldLoader().show(i);var r=i.querySelector(".main-ui-select-inner-label");if(r){r.classList.add("main-ui-no-before")}var a=function(e){s.fulfill(e);this.getFieldLoader().hide();if(r){r.classList.remove("main-ui-no-before")}}.bind(this);if(BX.type.isNotEmptyObject(this.getParam("LAZY_LOAD")["CONTROLLER"])){var l=this.getParam("LAZY_LOAD")["CONTROLLER"]["componentName"];var o=this.getParam("LAZY_LOAD")["CONTROLLER"]["signedParameters"];BX.ajax.runAction(this.getParam("LAZY_LOAD")["CONTROLLER"]["getField"],{data:{filterId:this.getParam("FILTER_ID"),id:n.NAME,componentName:BX.type.isNotEmptyString(l)?l:"",signedParameters:BX.type.isNotEmptyString(o)?o:""}}).then(function(e){a(e.data)}.bind(this),(function(e){}))}else{this.getLazyLoadField(n.NAME).then(a)}}else{s.fulfill(n)}s.then(function(e){this.params.FIELDS.push(e);if(BX.hasClass(i,this.settings.classMenuItemChecked)){BX.removeClass(i,this.settings.classMenuItemChecked);this.getPreset().removeField(e)}else{if(BX.type.isPlainObject(e)){this.getPreset().addField(e);BX.addClass(i,this.settings.classMenuItemChecked);if(BX.type.isString(e.HTML)){var t=BX.create("div");this.getHiddenElement().appendChild(t);BX.html(t,e.HTML)}}}this.syncFields()}.bind(this))}},isFieldChangePrevented:function e(t,i){var n;if(i){n={fields:[],oldFields:[t.NAME]}}else{n={fields:[t.NAME],oldFields:[]}}var s=new BX.Event.BaseEvent({data:n});this.emitter.emit("onBeforeChangeFilterItems",s);return s.isDefaultPrevented()},getHiddenElement:function e(){if(!this.hiddenElement){this.hiddenElement=BX.create("div");document.body.appendChild(this.hiddenElement)}return this.hiddenElement},getLazyLoadField:function e(t){var i=this.getParam("LAZY_LOAD")["GET_FIELD"];var n=new BX.Promise;if(BX.Type.isPlainObject(i)){var s=i.component,r=i.action,a=i.data;a.fieldId=t;BX.ajax.runComponentAction(s,r,{mode:"ajax",data:a}).then((function(e){var t;n.fulfill((t=e.data.field)!==null&&t!==void 0?t:[])}))}else{BX.ajax({method:"get",url:BX.util.add_url_param(i,{id:t}),dataType:"json",onsuccess:function e(t){return n.fulfill(t)}})}return n},showFieldsPopup:function e(){var t=this.getFieldsPopup();this.adjustFieldListPopupPosition();t.show()},closeFieldListPopup:function e(){if(this.getParam("USE_CHECKBOX_LIST_FOR_SETTINGS_POPUP")&&BX.UI&&BX.Type.isFunction(BX.UI.CheckboxList)){if(this.checkboxListPopup){this.checkboxListPopup.destroy();this.checkboxListPopup=null}return}var t=this.getFieldsPopup();t.close()},adjustFieldListPopupPosition:function e(){var t=this.getFieldsPopup();var i=BX.pos(this.getAddField());i.forceBindPosition=true;t.adjustPosition(i)},getFieldsPopup:function e(){var t=this.settings.get("showPopupInCenter",false)?null:this.getAddField();if(!this.fieldsPopup){this.fieldsPopup=new BX.PopupWindow(this.getParam("FILTER_ID")+"_fields_popup",t,{autoHide:true,offsetTop:4,offsetLeft:0,lightShadow:true,closeIcon:t===null,closeByEsc:t===null,noAllPaddings:true,zIndex:13});this.fieldsPopupLoader=new BX.Loader({target:this.fieldsPopup.contentContainer});this.fieldsPopupLoader.show();this.setPopupElementWidthFromSettings(this.fieldsPopup.contentContainer);this.fieldsPopup.contentContainer.style.height="330px";this.getFieldsListPopupContent().then(function(e){this.fieldsPopup.contentContainer.removeAttribute("style");this.fieldsPopupLoader.hide();this.fieldsPopup.setContent(e);this.syncFields({cache:false});this.adjustFieldListPopupPosition()}.bind(this))}return this.fieldsPopup},setPopupElementWidthFromSettings:function e(t){t.style.width=this.settings.popupWidth+"px"},_onAddPresetClick:function e(){this.enableAddPreset()},enableWaitSate:function e(t){!!t&&BX.addClass(t,this.settings.classWaitButtonClass)},disableWaitState:function e(t){!!t&&BX.removeClass(t,this.settings.classWaitButtonClass)},_onSaveButtonClick:function e(){var t=!!this.getSaveForAllCheckbox()&&this.getSaveForAllCheckbox().checked;var i=this.getPreset().getAddPresetFieldInput();var n=i.parentNode.querySelector(".main-ui-filter-edit-mask");var s;function r(e){if(e.animationName==="fieldError"){e.currentTarget.removeEventListener("animationend",r);e.currentTarget.removeEventListener("oAnimationEnd",r);e.currentTarget.removeEventListener("webkitAnimationEnd",r);e.currentTarget.classList.remove("main-ui-filter-error")}}function a(e){e.addEventListener("animationend",r);e.addEventListener("oAnimationEnd",r);e.addEventListener("webkitAnimationEnd",r);e.classList.add("main-ui-filter-error");var t=new BX.Promise;t.fulfill(true);return t}this.enableWaitSate(this.getFindButton());if(this.isAddPresetEnabled()&&!t){s=i.value;if(s.length){this.savePreset();this.disableAddPreset()}else{a(n).then((function(){i.focus()}))}}if(this.isEditEnabled()){var l=this.getPreset();var o=l.getCurrentPresetId();var u=l.getPresetNodeById(o);var c=l.getPresetInput(u);if(c.value.length===0&&o==="default_filter"){var d=l.getCurrentPresetData();if(d){BX.Dom.attr(c,"value",d.TITLE)}}if(c.value.length>0){l.updateEditablePreset(o);this.saveUserSettings(t);if(!t){this.disableEdit()}}else{var h=u.querySelector(".main-ui-filter-edit-mask");a(h).then((function(){c.focus()}))}}},_onCancelButtonClick:function e(){this.setIsSetOutsideState(false);this.disableAddPreset();this.getPreset().clearAddPresetFieldInput();this.disableEdit();!!this.getSaveForAllCheckbox()&&(this.getSaveForAllCheckbox().checked=null)},_onGridReady:function e(t){if(!this.grid&&t.getContainerId()===this.getParam("GRID_ID")){this.grid=t}},_onFilterMousedown:function e(t){var i=t.target;if(this.getFields().isDragButton(i)){var n=BX.Filter.Utils.getByTag(i.parentNode,"input",true);(n||[]).forEach((function(e){BX.fireEvent(e,"blur")}));BX.fireEvent(this.getFilter(),"click")}},_onFilterClick:function e(t){var i=this.getFields();var n=this.getPreset();var s;if(i.isFieldDelete(t.target)){s=i.getField(t.target);n.removeField(s)}if(i.isFieldValueDelete(t.target)){s=i.getField(t.target);i.clearFieldValue(s)}},getButtonsContainer:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classButtonsContainer)},getSaveButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classSaveButton)},getCancelButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classCancelButton)},getFindButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classFindButton)},getResetButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classResetButton)},getAddPresetButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classAddPresetButton)},isAddPresetEnabled:function e(){return this.isAddPresetModeState},enableAddPreset:function e(){var t=this.getPreset();var i=t.getAddPresetField();var n=t.getAddPresetFieldInput();var s=this.getButtonsContainer();BX.show(i);BX.show(s);BX.hide(this.getPresetButtonsContainer());this.hideForAllCheckbox();if(BX.type.isDomNode(n)){n.focus()}BX.addClass(this.getSidebarControlsContainer(),this.settings.classDisabled);this.isAddPresetModeState=true},disableAddPreset:function e(){var t=this.getPreset();var i=t.getAddPresetField();var n=this.getButtonsContainer();BX.hide(i);BX.hide(n);BX.show(this.getPresetButtonsContainer());this.showForAllCheckbox();t.getAddPresetFieldInput().value="";BX.removeClass(this.getSidebarControlsContainer(),this.settings.classDisabled);this.isAddPresetModeState=false},getControls:function e(){var t=this.getFieldListContainer();var i=null;if(BX.type.isDomNode(t)){i=BX.Filter.Utils.getByClass(t,this.settings.classControl,true)}return i},getFilterFields:function e(){var t=this.getFieldListContainer();var i=[];var n=[];if(BX.type.isDomNode(t)){i=BX.Filter.Utils.getByClass(t,this.settings.classField,true);n=BX.Filter.Utils.getByClass(t,this.settings.classFieldGroup,true);if(!BX.type.isArray(i)){i=[]}if(BX.type.isArray(n)){n.forEach((function(e){i.push(e)}))}}return i},getFilterFieldsValues:function e(){var t=this.getPreset().getFields();var i=this.getSearch();var n={};var s,r;n["FIND"]=i.getInput().value;if(BX.type.isArray(t)&&t.length){t.forEach((function(e){var t=BX.Filter.AdditionalFilter.getInstance().getFilter(e);if(t){Object.assign(n,t);return}s=BX.data(e,"type");r=BX.data(e,"name");switch(s){case this.types.STRING:{this.prepareControlStringValue(n,e);break}case this.types.TEXTAREA:{this.prepareControlTextareaValue(n,e);break}case this.types.NUMBER:{this.prepareControlNumberValue(n,r,e);break}case this.types.DATE:{this.prepareControlDateValue(n,r,e);break}case this.types.CUSTOM_DATE:{this.prepareControlCustomDateValue(n,r,e);break}case this.types.SELECT:{this.prepareControlSelectValue(n,r,e);break}case this.types.MULTI_SELECT:{this.prepareControlMultiselectValue(n,r,e);break}case this.types.DEST_SELECTOR:case this.types.CUSTOM_ENTITY:case this.types.ENTITY_SELECTOR:{this.prepareControlCustomEntityValue(n,r,e);break}case this.types.CUSTOM:{this.prepareControlCustomValue(n,r,e);break}default:{break}}}),this)}return n},prepareControlCustomEntityValue:function e(t,i,n){var s=this.fetchSquares(n);var r=this.fetchSquaresData(s);var a=BX.Main.ui.CustomEntity.isMultiple(n);t[i]="";t[i+"_label"]="";if(a){t[i]=[];t[i+"_label"]=[];!!r&&r.forEach((function(e){t[i].push(e._value.toString());t[i+"_label"].push(e._label.toString())}))}else{if(r.length){t[i]=r[0]._value.toString();t[i+"_label"]=r[0]._label.toString()}}},fetchSquares:function e(t){return!!t?BX.Filter.Utils.getByClass(t,this.settings.classSquare,true):[]},fetchSquaresData:function e(t){return t.map((function(e){return JSON.parse(BX.data(e,"item"))}),this)},prepareControlCustomValue:function e(t,i,n){var s=BX.Filter.Utils.getByTag(n,"input",true);t[i]="";if(BX.type.isArray(s)){s.forEach((function(e){if(BX.type.isNotEmptyString(e.name)){t[e.name]=e.value}}))}},prepareControlMultiselectValue:function e(t,i,n){var s=BX.Filter.Utils.getByClass(n,this.settings.classMultiSelect);var r=JSON.parse(BX.data(s,"value"));t[i]="";if(BX.type.isArray(r)&&r.length){t[i]={};r.forEach((function(e,n){t[i][n]=e.VALUE}))}},prepareControlSelectValue:function e(t,i,n){var s=BX.Filter.Utils.getByClass(n,this.settings.classSelect);var r=JSON.parse(BX.data(s,"value"));t[i]=r.VALUE},prepareControlCustomDateValue:function e(t,i,n){var s=n.querySelector('[data-name="'+i+"_days"+'"]');if(s){var r=JSON.parse(s.dataset.value);t[i+"_days"]=r.map((function(e){return e.VALUE}))}var a=n.querySelector('[data-name="'+i+"_months"+'"]');if(a){var l=JSON.parse(a.dataset.value);t[i+"_months"]=l.map((function(e){return e.VALUE}))}var o=n.querySelector('[data-name="'+i+"_years"+'"]');if(o){var u=JSON.parse(o.dataset.value);t[i+"_years"]=u.map((function(e){return e.VALUE}))}},prepareControlDateValue:function e(t,i,n,s){var r=n.querySelector(".main-ui-filter-additional-fields-container");if(r&&!s){BX.remove(r)}var a=BX.Filter.Utils.getByClass(n,this.settings.classSelect);var l=n.querySelector('.main-ui-select[data-name*="_allow_year"]');var o=i+this.settings.datePostfix;var u=i+this.settings.fromPostfix;var c=i+this.settings.toPostfix;var d=i+this.settings.daysPostfix;var h=i+this.settings.monthPostfix;var p=i+this.settings.quarterPostfix;var f=i+this.settings.yearPostfix;var m=i+"_allow_year";var g,E,y,v,B;t[o]="";t[u]="";t[c]="";t[d]="";t[h]="";t[p]="";t[f]="";var A=n.querySelector(".main-ui-date-input");if(A&&A.dataset.isValid==="false"){return}g=JSON.parse(BX.data(a,"value"));t[o]=g.VALUE;if(l){B=JSON.parse(BX.data(l,"value"));t[m]=B.VALUE}switch(g.VALUE){case this.dateTypes.EXACT:{E=BX.Filter.Utils.getByClass(n,this.settings.classDateInput);t[u]=E.value;t[c]=E.value;break}case this.dateTypes.QUARTER:{y=BX.Filter.Utils.getByClass(n,this.settings.classControl,true);if(BX.type.isArray(y)){y.forEach((function(e){v=BX.data(e,"name");if(v&&v.indexOf("_quarter")!==-1){t[p]=JSON.parse(BX.data(e,"value")).VALUE}if(v&&v.endsWith("_year")&&!v.endsWith("_allow_year")){t[f]=JSON.parse(BX.data(e,"value")).VALUE}}),this)}break}case this.dateTypes.YEAR:{y=BX.Filter.Utils.getByClass(n,this.settings.classControl,true);if(BX.type.isArray(y)){y.forEach((function(e){v=BX.data(e,"name");if(v&&v.endsWith("_year")&&!v.endsWith("_allow_year")){t[f]=JSON.parse(BX.data(e,"value")).VALUE}}),this)}break}case this.dateTypes.MONTH:{y=BX.Filter.Utils.getByClass(n,this.settings.classControl,true);if(BX.type.isArray(y)){y.forEach((function(e){v=BX.data(e,"name");if(v&&v.indexOf("_month")!==-1){t[h]=JSON.parse(BX.data(e,"value")).VALUE}if(v&&v.endsWith("_year")&&!v.endsWith("_allow_year")){t[f]=JSON.parse(BX.data(e,"value")).VALUE}}),this)}break}case this.additionalDateTypes.PREV_DAY:case this.additionalDateTypes.NEXT_DAY:case this.additionalDateTypes.MORE_THAN_DAYS_AGO:case this.additionalDateTypes.AFTER_DAYS:case this.dateTypes.NEXT_DAYS:case this.dateTypes.PREV_DAYS:{var P=BX.Filter.Utils.getByClass(n,this.settings.classNumberInput);if(!!P&&P.name===d){t[d]=P.value}break}case this.dateTypes.RANGE:{E=BX.Filter.Utils.getByClass(n,this.settings.classDateInput,true);E.forEach((function(e){if(e.name===u){t[u]=e.value}else if(e.name===c){t[c]=e.value}}),this);break}case"CUSTOM_DATE":{var S={};this.prepareControlCustomDateValue(S,i,n);t[i+"_days"]=S[i+"_days"];t[h]=S[i+"_months"];t[f]=S[i+"_years"];break}default:{break}}if(r&&!s){BX.append(r,n)}var _=Array.from(n.querySelectorAll('.main-ui-filter-additional-fields-container > [data-type="DATE"]'));if(_){_.forEach((function(e){var i=e.dataset.name;this.prepareControlDateValue(t,i,e,true)}),this)}},prepareControlNumberValue:function e(t,i,n){var s=BX.Filter.Utils.getByClass(n,this.settings.classNumberInput,true);var r=BX.Filter.Utils.getByClass(n,this.settings.classSelect);var a=i+this.settings.numberPostfix;var l=i+this.settings.fromPostfix;var o=i+this.settings.toPostfix;var u;t[l]="";t[o]="";u=JSON.parse(BX.data(r,"value"));t[a]=u.VALUE;s.forEach((function(e){if(e.name.indexOf(this.settings.fromPostfix)!==-1){t[l]=e.value||"";if(t[a]==="exact"){t[o]=e.value||""}}else if(e.name.indexOf(this.settings.toPostfix)!==-1){t[o]=e.value||""}}),this)},prepareControlStringValue:function e(t,i){var n=BX.Filter.Utils.getByClass(i,this.settings.classStringInput);var s;if(BX.type.isDomNode(n)){s=n.name;t[s]=n.value}},prepareControlTextareaValue:function e(t,i){var n=BX.Filter.Utils.getByClass(i,this.settings.classStringInput);var s;if(BX.type.isDomNode(n)){s=n.name;t[s]=n.value}},showGridAnimation:function e(){this.grid&&this.grid.tableFade()},hideGridAnimation:function e(){this.grid&&this.grid.tableUnfade()},getPresetId:function e(t,i){var n=this.getPreset().getCurrentPresetId();if(!this.isEditEnabled()&&!this.isAddPresetEnabled()&&!i||n==="default_filter"&&!t){n="tmp_filter"}return n},isAppliedUserFilter:function e(){var t=this;var i=this.getPreset().getCurrentPresetData();if(BX.Type.isPlainObject(i)){var n=BX.Type.isArrayFilled(i.FIELDS)&&i.FIELDS.some((function(e){return!t.getPreset().isEmptyField(e)}));var s=BX.Type.isArrayFilled(i.ADDITIONAL)&&i.ADDITIONAL.some((function(e){return!t.getPreset().isEmptyField(e)}));return!i.IS_PINNED&&(n||s)||i.IS_PINNED&&BX.Type.isArrayFilled(i.ADDITIONAL)||BX.Type.isStringFilled(this.getSearch().getSearchString())}return false},isAppliedDefaultPreset:function e(){var t=this;var i=this.getPreset().getCurrentPresetData();if(!i.IS_PINNED){return false}if(BX.Type.isArrayFilled(i.ADDITIONAL)){var n=i.ADDITIONAL.some((function(e){return!t.getPreset().isEmptyField(e)}));if(n){return false}}if(BX.Type.isStringFilled(this.getSearch().getSearchString())){return false}return true},applyFilter:function e(t,i,n){this.setIsSetOutsideState(n);var s=this.getParam("FILTER_ID");var r=new BX.Promise(null,this);var a=this.getPreset();var l=this.getSearch();var o={autoResolve:!this.grid};var u=this;this.setDefaultPresetAppliedState(this.isAppliedDefaultPreset());if(this.isAppliedUserFilter()){BX.Dom.addClass(this.getSearch().container,"main-ui-filter-search--active")}else{BX.Dom.removeClass(this.getSearch().container,"main-ui-filter-search--active")}this.clearGet();this.showGridAnimation();var c=t?"clear":"apply";BX.onCustomEvent(window,"BX.Main.Filter:beforeApply",[s,{action:c},this,r]);var d=this.getPresetId(t,i);this.updatePreset(d,null,t,null).then((function(){l.updatePreset(a.getPreset(d));if(u.getParam("VALUE_REQUIRED")){if(!l.getSquares().length){u.lastPromise=a.applyPinnedPreset()}}})).then((function(){var e={apply_filter:"Y",clear_nav:"Y"};var t=BX.delegate(r.fulfill,r);var i=BX.delegate(r.reject,r);u.grid&&u.grid.reloadTable("POST",e,t,i);BX.onCustomEvent(window,"BX.Main.Filter:apply",[s,{action:c},u,r,o]);o.autoResolve&&r.fulfill()}));return r},getAddField:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classAddField)},getFieldListContainer:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classFileldControlList)},getFields:function e(){if(!(this.fields instanceof BX.Filter.Fields)){this.fields=new BX.Filter.Fields(this)}return this.fields},getPreset:function e(){if(!(this.presets instanceof g)){this.presets=new g(this)}return this.presets},resetControlData:function e(t){if(BX.type.isPlainObject(t)){switch(t.TYPE){case this.types.MULTI_SELECT:{t.VALUE=[];break}case this.types.SELECT:{t.VALUE=t.ITEMS[0];break}case this.types.DATE:{t.SUB_TYPE=t.SUB_TYPES[0];t.VALUES={_from:"",_to:"",_days:"",_quarter:"",_year:""};break}case this.types.CUSTOM_DATE:{t.VALUES={days:[],months:[],years:[]};break}case this.types.NUMBER:{t.SUB_TYPE=t.SUB_TYPES[0];t.VALUES={_from:"",_to:""};break}case this.types.DEST_SELECTOR:case this.types.ENTITY_SELECTOR:case this.types.CUSTOM_ENTITY:{t.VALUES={_label:"",_value:""};break}case this.types.CUSTOM:{t._VALUE="";break}default:{t.VALUE=""}}}return t},clearControl:function e(t){var i=this.getPreset().getField({NAME:t});var n,s;if(BX.type.isDomNode(i)){n=this.getFieldByName(t);n=this.resetControlData(n);s=this.getPreset().createControl(n);BX.insertAfter(s,i);BX.remove(i)}},clearControls:function e(t){if(BX.type.isArray(t)){t.forEach((function(e){"name"in e&&this.clearControl(e.name)}),this)}else if(BX.type.isPlainObject(t)&&"name"in t){this.clearControl(t.name)}},getTemplate:function e(){return BX.html(BX(this.settings.generalTemplateId))},isIe:function e(){if(!BX.type.isBoolean(this.ie)){this.ie=BX.hasClass(document.documentElement,"bx-ie")}return this.ie},closePopup:function e(){var t=this.getPopup();var i=t.popupContainer;var n=this.settings.get("FILTER_CLOSE_DELAY");var s;BX.Dom.removeClass(this.getSearch().container,"main-ui-filter-search--showed");setTimeout(BX.delegate((function(){if(!this.isIe()){BX.removeClass(i,this.settings.classAnimationShow);BX.addClass(i,this.settings.classAnimationClose);s=parseFloat(BX.style(i,"animation-duration"));if(BX.type.isNumber(s)){s=s*1e3}setTimeout((function(){t.close()}),s)}else{t.close()}}),this),n);if(this.getParam("LIMITS_ENABLED")){BX.removeClass(this.getFilter(),this.settings.classLimitsAnimation)}this.closeFieldListPopup();this.adjustFocus()},showPopup:function e(){var t=this.getPopup();var i;if(!t.isShown()){BX.Dom.addClass(this.getSearch().container,"main-ui-filter-search--showed");this.isOpened=true;var n=this.settings.get("FILTER_SHOW_DELAY");if(this.getParam("LIMITS_ENABLED")===true){this.limitAnalyticsSend()}setTimeout(BX.delegate((function(){t.show();if(!this.isIe()){i=t.popupContainer;BX.removeClass(i,this.settings.classAnimationClose);BX.addClass(i,this.settings.classAnimationShow);BX.onCustomEvent(window,"BX.Main.Filter:show",[this])}var e=[].slice.call(this.getFieldListContainer().querySelectorAll("textarea"));e.forEach((function(e){BX.style(e,"height",e.scrollHeight+"px")}))}),this),n)}},getSaveForAllCheckbox:function e(){if(!this.saveForAllCheckbox&&!!this.getSaveForAllCheckboxContainer()){this.saveForAllCheckbox=BX.Filter.Utils.getBySelector(this.getSaveForAllCheckboxContainer(),'input[type="checkbox"]')}return this.saveForAllCheckbox},getSaveForAllCheckboxContainer:function e(){if(!this.saveForAllCheckboxContainer){this.saveForAllCheckboxContainer=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classForAllCheckbox)}return this.saveForAllCheckboxContainer},showForAllCheckbox:function e(){!!this.getSaveForAllCheckboxContainer()&&BX.removeClass(this.getSaveForAllCheckboxContainer(),this.settings.classHide)},hideForAllCheckbox:function e(){!!this.getSaveForAllCheckboxContainer()&&BX.addClass(this.getSaveForAllCheckboxContainer(),this.settings.classHide)},getPopupBindElement:function e(){if(!this.popupBindElement){var t=this.settings.get("POPUP_BIND_ELEMENT_SELECTOR");var i=null;if(BX.type.isNotEmptyString(t)){i=BX.Filter.Utils.getBySelector(document,t)}this.popupBindElement=!!i?i:this.getSearch().getContainer()}return this.popupBindElement},getPopup:function e(){if(!(this.popup instanceof BX.PopupWindow)){this.popup=new BX.PopupWindow(this.getParam("FILTER_ID")+this.settings.searchContainerPostfix,this.getPopupBindElement(),{autoHide:false,offsetTop:parseInt(this.settings.get("POPUP_OFFSET_TOP")),offsetLeft:parseInt(this.settings.get("POPUP_OFFSET_LEFT")),lightShadow:true,closeIcon:false,closeByEsc:false,noAllPaddings:true,zIndex:12});this.popup.setContent(this.getTemplate());BX.bind(this.getFieldListContainer(),"keydown",BX.delegate(this._onFieldsContainerKeydown,this));BX.bind(this.getFilter(),"click",BX.delegate(this._onFilterClick,this));BX.bind(this.getAddPresetButton(),"click",BX.delegate(this._onAddPresetClick,this));BX.bind(this.getPreset().getAddPresetFieldInput(),"keydown",BX.delegate(this._onAddPresetKeydown,this));BX.bind(this.getPreset().getContainer(),"keydown",BX.delegate(this._onPresetInputKeydown,this));BX.bind(this.getSaveButton(),"click",BX.delegate(this._onSaveButtonClick,this));BX.bind(this.getCancelButton(),"click",BX.delegate(this._onCancelButtonClick,this));BX.bind(this.getFindButton(),"click",BX.delegate(this._onFindButtonClick,this));BX.bind(this.getResetButton(),"click",BX.delegate(this._onResetButtonClick,this));BX.bind(this.getAddField(),"click",BX.delegate(this._onAddFieldClick,this));BX.bind(this.getEditButton(),"click",BX.delegate(this._onEditButtonClick,this));BX.bind(this.getRestoreButton(),"click",BX.delegate(this._onRestoreButtonClick,this));BX.bind(this.getRestoreFieldsButton(),"click",BX.delegate(this._onRestoreFieldsButtonClick,this));this.getFilter().addEventListener("mousedown",BX.delegate(this._onFilterMousedown,this),true);this.getPreset().showCurrentPresetFields();this.getPreset().bindOnPresetClick()}return this.popup},_onRestoreFieldsButtonClick:function e(){this.restoreDefaultFields()},restoreDefaultFields:function e(){var t=this.getPreset().getPreset("default_filter",true);var i=this.getParam("PRESETS");var n=this.getPreset().getCurrentPresetId();var s={FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),action:"SET_FILTER"};var r=t.FIELDS.map((function(e){return e.NAME}));var a=r.join(",");i.forEach((function(e,n){if(e.ID==="default_filter"){i[n]=BX.clone(t)}}),this);if(BX.type.isArray(this.editablePresets)){this.editablePresets.forEach((function(e,i){if(e.ID==="default_filter"){this.editablePresets[i]=BX.clone(t)}}),this)}this.getPreset().applyPreset(n);this.updatePreset(n);this.saveOptions({preset_id:"default_filter",rows:a,save:"Y",apply_filter:"N"},s)},getRestoreFieldsButton:function e(){if(!this.restoreFieldsButton){this.restoreFieldsButton=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classRestoreFieldsButton)}return this.restoreFieldsButton},restoreFilter:function e(){var t=this.getParam("DEFAULT_PRESETS");var i=this.getParam("PRESETS");var n=false;var s,r,a;if(BX.type.isArray(t)){t.sort((function(e,t){return e.SORT-t.SORT}));t.forEach((function(e){n=i.some((function(t,i){if(t.ID===e.ID){s=i;return true}}));if(n){i[s]=BX.clone(e)}else{i.push(BX.clone(e))}if(e.ID!=="default_filter"){this.addSidebarItem(e.ID,e.TITLE,e.IS_PINNED);if(e.IS_PINNED){r=e.ID}}}),this)}this.saveRestoreFilter();this.disableAddPreset();this.disableEdit();if(!r){r="default_filter"}a=this.getPreset().getPresetNodeById(r);if(a){BX.fireEvent(a,"click")}},saveRestoreFilter:function e(){var t={FILTER_ID:this.getParam("FILTER_ID"),GRID_ID:this.getParam("GRID_ID"),action:"RESTORE_FILTER"};var i=this.getParam("PRESETS");var n={};var s;if(BX.type.isArray(i)){i.forEach((function(e){s=e.FIELDS.map((function(e){return e.NAME}));s=s.join(",");n[e.ID]={name:e.TITLE||null,sort:e.SORT,preset_id:e.ID,fields:this.prepareFields(e.FIELDS),rows:s,for_all:e.FOR_ALL}}),this);this.saveOptions(n,t)}},prepareFields:function e(t){var i={};var n;if(BX.type.isArray(t)){t.forEach((function(e){if(e.TYPE===this.types.SELECT){i[e.NAME]="VALUE"in e.VALUE?e.VALUE.VALUE:""}if(e.TYPE===this.types.MULTI_SELECT){e.VALUE.forEach((function(t,n){i[e.NAME]=i[e.NAME]||{};i[e.NAME][n]=t.VALUE}));i[e.NAME]=i[e.NAME]||""}if(e.TYPE===this.types.DATE||e.TYPE===this.types.NUMBER){n=Object.keys(e.VALUES);n.forEach((function(t){i[e.NAME+t]=e.VALUES[t]}));if(e.TYPE===this.types.DATE){i[e.NAME+"_datesel"]="VALUE"in e.SUB_TYPE?e.SUB_TYPE.VALUE:e.SUB_TYPES[0].VALUE}if(e.TYPE===this.types.NUMBER){i[e.NAME+"_numsel"]="VALUE"in e.SUB_TYPE?e.SUB_TYPE.VALUE:e.SUB_TYPES[0].VALUE}}if(e.TYPE===this.types.DEST_SELECTOR||e.TYPE===this.types.ENTITY_SELECTOR||e.TYPE===this.types.CUSTOM_ENTITY){i[e.NAME+"_label"]=e.VALUES._label;i[e.NAME+"_value"]=e.VALUES._value}}),this)}return i},getRestoreButton:function e(){if(!BX.type.isDomNode(this.restoreButton)){this.restoreButton=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classRestoreButton)}return this.restoreButton},_onPresetInputKeydown:function e(t){if(BX.Filter.Utils.isKey(t,"enter")&&t.target.tagName==="INPUT"){BX.fireEvent(this.getSaveButton(),"click")}},_onFieldsContainerKeydown:function e(t){if(BX.Filter.Utils.isKey(t,"enter")&&t.target.tagName==="INPUT"){BX.fireEvent(this.getFindButton(),"click")}},_onFindButtonClick:function e(){this.setIsSetOutsideState(false);var t=this.getPreset();var i=t.getCurrentPresetId();var n;if(i!=="tmp_filter"&&i!=="default_filter"&&!t.isPresetValuesModified(i)){var s=t.getPreset(i);var r=t.getAdditionalValues(i);var a=t.getFields().map((function(e){return BX.data(e,"name")}));s.ADDITIONAL=this.preparePresetFields(r,a);s.ADDITIONAL=s.ADDITIONAL.filter((function(e){return!this.getPreset().isEmptyField(e)}),this);n=this.applyFilter(false,i);this.closePopup()}else{t.deactivateAllPresets();n=this.applyFilter();this.closePopup()}return n},_onResetButtonClick:function e(){if(this.getParam("VALUE_REQUIRED")){var t=this.getPreset().getCurrentPresetData();if(t.ADDITIONAL.length){this.closePopup()}BX.fireEvent(this.getSearch().getClearButton(),"click")}else{if(this.getParam("RESET_TO_DEFAULT_MODE")){this.getSearch().clearInput();this.getPreset().applyPinnedPreset()}else{this.resetFilter()}this.closePopup()}},resetFilter:function e(t){var i=this.getSearch();var n=this.getPreset();if(!t){i.clearInput()}i.removePreset();n.deactivateAllPresets();n.resetPreset(true);i.hideClearButton();i.adjustPlaceholder();return this.applyFilter(true,true)},_onEditButtonClick:function e(){if(!this.isEditEnabled()){this.enableEdit()}else{this.disableEdit()}},enableFieldsDragAndDrop:function e(){var t=this.getPreset().getFields();this.fieldsList=[];if(BX.type.isArray(t)){this.fieldsList=t.map(this.registerDragItem,this)}},registerDragItem:function e(t){var i=this.getDragButton(t);if(i){i.onbxdragstart=BX.delegate(this._onFieldDragStart,this);i.onbxdragstop=BX.delegate(this._onFieldDragStop,this);i.onbxdrag=BX.delegate(this._onFieldDrag,this);jsDD.registerObject(i);jsDD.registerDest(i)}return t},unregisterDragItem:function e(t){var i=this.getDragButton(t);if(i){jsDD.unregisterObject(i);jsDD.unregisterDest(i)}},_onFieldDragStart:function e(){this.dragItem=this.getFields().getField(jsDD.current_node);this.dragIndex=BX.Filter.Utils.getIndex(this.fieldsList,this.dragItem);this.dragRect=this.dragItem.getBoundingClientRect();this.offset=this.dragRect.height;this.dragStartOffset=jsDD.start_y-(this.dragRect.top+BX.scrollTop(window));BX.Filter.Utils.styleForEach(this.fieldsList,{transition:"100ms"});BX.addClass(this.dragItem,this.settings.classPresetOndrag);BX.bind(document,"mousemove",BX.delegate(this._onMouseMove,this))},_onFieldDragStop:function e(){BX.unbind(document,"mousemove",BX.delegate(this._onMouseMove,this));BX.removeClass(this.dragItem,this.settings.classPresetOndrag);BX.Filter.Utils.styleForEach(this.fieldsList,{transition:"",transform:""});BX.Filter.Utils.collectionSort(this.dragItem,this.targetItem);this.fieldsList=this.getPreset().getFields();this.saveFieldsSort()},_onFieldDrag:function e(){var t=this;var i,n;this.dragOffset=this.realY-this.dragRect.top-this.dragStartOffset;this.sortOffset=t.realY+BX.scrollTop(window);BX.Filter.Utils.styleForEach([this.dragItem],{transition:"0ms",transform:"translate3d(0px, "+this.dragOffset+"px, 0px)"});this.fieldsList.forEach((function(e,s){if(e){i=e.getBoundingClientRect();n=i.top+BX.scrollTop(window)+i.height/2;if(s>t.dragIndex&&t.sortOffset>n&&e.style.transform!=="translate3d(0px, "+-t.offset+"px, 0px)"&&e.style.transform!==""){t.targetItem=e;BX.style(e,"transform","translate3d(0px, "+-t.offset+"px, 0px)");BX.style(e,"transition","300ms")}if(s<t.dragIndex&&t.sortOffset<n&&e.style.transform!=="translate3d(0px, "+t.offset+"px, 0px)"&&e.style.transform!==""){t.targetItem=e;BX.style(e,"transform","translate3d(0px, "+t.offset+"px, 0px)");BX.style(e,"transition","300ms")}if((s<t.dragIndex&&t.sortOffset>n||s>t.dragIndex&&t.sortOffset<n)&&e.style.transform!=="translate3d(0px, 0px, 0px)"){if(e.style.transform!==""){t.targetItem=e}BX.style(e,"transform","translate3d(0px, 0px, 0px)");BX.style(e,"transition","300ms")}}}))},disableFieldsDragAndDrop:function e(){if(BX.type.isArray(this.fieldsList)&&this.fieldsList.length){this.fieldsList.map(this.unregisterDragItem,this)}},enablePresetsDragAndDrop:function e(){var t,i,n,s;t=this.getPreset();i=t.getPresets();this.presetsList=[];if(BX.type.isArray(i)&&i.length){i.forEach((function(e){s=t.getPresetId(e);if(!BX.hasClass(e,this.settings.classAddPresetField)&&s!=="default_filter"&&!BX.hasClass(e,this.settings.classDefaultFilter)){n=this.getDragButton(e);n.onbxdragstart=BX.delegate(this._onDragStart,this);n.onbxdragstop=BX.delegate(this._onDragStop,this);n.onbxdrag=BX.delegate(this._onDrag,this);jsDD.registerObject(n);jsDD.registerDest(n);this.presetsList.push(e)}}),this)}},getDragButton:function e(t){return BX.Filter.Utils.getByClass(t,this.settings.classPresetDragButton)},disablePresetsDragAndDrop:function e(){if(BX.type.isArray(this.presetsList)&&this.presetsList.length){this.presetsList.forEach((function(e){if(!BX.hasClass(e,this.settings.classAddPresetField)){jsDD.unregisterObject(e);jsDD.unregisterDest(e)}}),this)}},_onDragStart:function e(){this.dragItem=this.getPreset().normalizePreset(jsDD.current_node);this.dragIndex=BX.Filter.Utils.getIndex(this.presetsList,this.dragItem);this.dragRect=this.dragItem.getBoundingClientRect();this.offset=this.dragRect.height;this.dragStartOffset=jsDD.start_y-(this.dragRect.top+BX.scrollTop(window));BX.Filter.Utils.styleForEach(this.list,{transition:"100ms"});BX.addClass(this.dragItem,this.settings.classPresetOndrag);BX.bind(document,"mousemove",BX.delegate(this._onMouseMove,this))},_onMouseMove:function e(t){this.realX=t.clientX;this.realY=t.clientY},getDragOffset:function e(){return jsDD.x-this.startDragOffset-this.dragRect.left},_onDragStop:function e(){var t,i;BX.unbind(document,"mousemove",BX.delegate(this._onMouseMove,this));BX.removeClass(this.dragItem,this.settings.classPresetOndrag);BX.Filter.Utils.styleForEach(this.presetsList,{transition:"",transform:""});BX.Filter.Utils.collectionSort(this.dragItem,this.targetItem);t=this.getPreset();i=t.getPresets();this.presetsList=[];if(BX.type.isArray(i)&&i.length){i.forEach((function(e){if(!BX.hasClass(e,this.settings.classAddPresetField)&&!BX.hasClass(e,this.settings.classDefaultFilter)){this.presetsList.push(e)}}),this)}},_onDrag:function e(){var t=this;var i,n;this.dragOffset=this.realY-this.dragRect.top-this.dragStartOffset;this.sortOffset=t.realY+BX.scrollTop(window);BX.Filter.Utils.styleForEach([this.dragItem],{transition:"0ms",transform:"translate3d(0px, "+this.dragOffset+"px, 0px)"});this.presetsList.forEach((function(e,s){if(e){i=e.getBoundingClientRect();n=i.top+BX.scrollTop(window)+i.height/2;if(s>t.dragIndex&&t.sortOffset>n&&e.style.transform!=="translate3d(0px, "+-t.offset+"px, 0px)"&&e.style.transform!==""){t.targetItem=e;BX.style(e,"transform","translate3d(0px, "+-t.offset+"px, 0px)");BX.style(e,"transition","300ms")}if(s<t.dragIndex&&t.sortOffset<n&&e.style.transform!=="translate3d(0px, "+t.offset+"px, 0px)"&&e.style.transform!==""){t.targetItem=e;BX.style(e,"transform","translate3d(0px, "+t.offset+"px, 0px)");BX.style(e,"transition","300ms")}if((s<t.dragIndex&&t.sortOffset>n||s>t.dragIndex&&t.sortOffset<n)&&e.style.transform!=="translate3d(0px, 0px, 0px)"){if(e.style.transform!==""){t.targetItem=e}BX.style(e,"transform","translate3d(0px, 0px, 0px)");BX.style(e,"transition","300ms")}}}))},getSidebarControlsContainer:function e(){if(!BX.type.isDomNode(this.sidebarControlsContainer)){this.sidebarControlsContainer=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classSidebarControlsContainer)}return this.sidebarControlsContainer},enableEdit:function e(){var t=this.getPreset();var i=t.getPresets();var n;if(BX.type.isArray(i)&&i.length){i.forEach((function(e){n=t.getPresetId(e);if(!BX.hasClass(e,this.settings.classAddPresetField)&&n!=="default_filter"){BX.addClass(e,this.settings.classPresetEdit)}}),this)}this.enablePresetsDragAndDrop();BX.show(this.getButtonsContainer());BX.hide(this.getPresetButtonsContainer());BX.addClass(this.getSidebarControlsContainer(),this.settings.classDisabled);this.editablePresets=BX.clone(this.getParam("PRESETS"));this.isEditEnabledState=true},disableEdit:function e(){var t=this.getPreset();var i=t.getPresets();if(BX.type.isArray(i)&&i.length){i.forEach((function(e){if(!BX.hasClass(e,this.settings.classAddPresetField)){BX.removeClass(e,this.settings.classPresetEdit);this.getPreset().disableEditPresetName(e)}}),this)}this.disablePresetsDragAndDrop();if(!this.isAddPresetEnabled()){BX.style(this.getButtonsContainer(),"display","")}BX.show(this.getPresetButtonsContainer());BX.removeClass(this.getSidebarControlsContainer(),this.settings.classDisabled);this.editablePresets=null;this.isEditEnabledState=false;this.applyFilter(null,true)},getPresetButtonsContainer:function e(){if(!BX.type.isDomNode(this.presetButtonsContainer)){this.presetButtonsContainer=BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classPresetButtonsContainer)}return this.presetButtonsContainer},isEditEnabled:function e(){return this.isEditEnabledState},getEditButton:function e(){return BX.Filter.Utils.getByClass(this.getFilter(),this.settings.classEditButton)},getParam:function e(t,i){return t in this.params?this.params[t]:i},getFilter:function e(){return BX.Filter.Utils.getByClass(this.getPopup().contentContainer,this.settings.classFilterContainer)},getSearch:function e(){if(!(this.search instanceof BX.Filter.Search)){this.search=new BX.Filter.Search(this)}return this.search},_onRestoreButtonClick:function e(){var t={CONFIRM:true,CONFIRM_MESSAGE:this.getParam("CONFIRM_MESSAGE"),CONFIRM_APPLY_BUTTON:this.getParam("CONFIRM_APPLY"),CONFIRM_CANCEL_BUTTON:this.getParam("CONFIRM_CANCEL")};this.confirmDialog(t,BX.delegate(this.restoreFilter,this))},confirmDialog:function e(t,i,n){if("CONFIRM"in t&&t.CONFIRM){var s=this.getParam("FILTER_ID")+"-confirm-dialog";var r='<div class="main-ui-filter-confirm-content">'+t.CONFIRM_MESSAGE+"</div>";var a="CONFIRM_TITLE"in t?t.CONFIRM_TITLE:"";var l=new BX.PopupWindowButton({text:t.CONFIRM_APPLY_BUTTON,events:{click:function e(){BX.type.isFunction(i)?i():null;this.popupWindow.close();this.popupWindow.destroy()}}});var o=new BX.PopupWindowButtonLink({text:t.CONFIRM_CANCEL_BUTTON,events:{click:function e(){BX.type.isFunction(n)?n():null;this.popupWindow.close();this.popupWindow.destroy()}}});var u=new BX.PopupWindow(s,null,{content:r,titleBar:a,autoHide:false,zIndex:9999,overlay:.4,offsetTop:-100,closeIcon:true,closeByEsc:true,buttons:[l,o]});BX.addCustomEvent(u,"onPopupClose",BX.delegate((function(){!!this.getSaveForAllCheckbox()&&(this.getSaveForAllCheckbox().checked=null)}),this));if(!u.isShown()){u.show();var c=u.popupContainer;BX.removeClass(c,this.settings.classAnimationShow);BX.addClass(c,this.settings.classAnimationShow)}}else{BX.type.isFunction(i)?i():null}},getInitialValue:function e(t){if(BX.type.isString(t)){var i=this.params.INITIAL_FILTER;if(BX.type.isPlainObject(i)){var n=Object.entries(i).reduce((function(e,i){if(i[0].startsWith(t)){e.push(i)}return e}),[]);if(n.length===1){return n[0][1]}if(n.length>1){return n.reduce((function(e,i){e[i[0].replace(t,"")]=i[1];return e}),{})}}}return""},getField:function e(t){var i=this.getFieldListContainer().querySelector('[data-name="'+t+'"]');return BX.Filter.Field.instances.get(i)},isSetOutside:function e(){return BX.Text.toBoolean(this.isSetOutsideState)},setIsSetOutsideState:function e(t){this.isSetOutsideState=BX.Text.toBoolean(t);var i=this.getSearch().getContainer();if(this.isSetOutsideState){BX.Dom.addClass(i,"main-ui-filter-set-outside");BX.Dom.removeClass(i,"main-ui-filter-set-inside")}else{BX.Dom.addClass(i,"main-ui-filter-set-inside");BX.Dom.removeClass(i,"main-ui-filter-set-outside")}},setDefaultPresetAppliedState:function e(t){this.isDefaultPresetAppliedState=BX.Text.toBoolean(t);var i=this.getSearch().getContainer();if(this.isDefaultPresetAppliedState){BX.Dom.addClass(i,"main-ui-filter-default-applied")}else{BX.Dom.removeClass(i,"main-ui-filter-default-applied")}}}})();(function(){BX.Main.filterManager={data:{},push:function e(t,i){if(BX.type.isNotEmptyString(t)&&i){this.data[t]=i}},getById:function e(t){var i=null;if(t in this.data){i=this.data[t]}return i},getList:function e(){return Object.values(this.data)}}})();var T;function F(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function D(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?F(Object(i),!0).forEach((function(t){babelHelpers.defineProperty(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):F(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}var X=Symbol("onValueChange");var C=function(e){babelHelpers.inherits(t,e);function t(e){var i;babelHelpers.classCallCheck(this,t);i=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).call(this,e));i.setEventNamespace("BX.Filter.Field");i.id=e.options.NAME;i.parent=e.parent;i.node=e.node;i.options=D({},e.options);i.cache=new a.Cache.MemoryCache;i[X]=i[X].bind(babelHelpers.assertThisInitialized(i));a.Event.bind(i.node,"input",i[X]);a.Event.bind(i.node,"change",i[X]);var n=babelHelpers.toConsumableArray(i.node.querySelectorAll(".main-ui-control-value-delete"));n.forEach((function(e){e.addEventListener("click",(function(){setTimeout((function(){i[X]()}))}))}));var s=new MutationObserver((function(){i[X]()}));var r=babelHelpers.toConsumableArray(i.node.querySelectorAll(".main-ui-select"));r.forEach((function(e){s.observe(e,{attributes:true,attributeFilter:["data-value"]})}));t.instances.set(i.node,babelHelpers.assertThisInitialized(i));return i}babelHelpers.createClass(t,[{key:"subscribe",value:function e(t,i){a.Event.EventEmitter.subscribe(this,t.replace("BX.Filter.Field:",""),i)}},{key:X,value:function e(){this.emit("change",{field:this,value:this.getValue()})}},{key:"getAdditionalFieldContainer",value:function e(){return this.cache.remember("additionalFieldsContainer",(function(){return a.Tag.render(T||(T=babelHelpers.taggedTemplateLiteral(['\n\t\t\t\t<div class="main-ui-filter-additional-fields-container"></div>\n\t\t\t'])))}))}},{key:"hasAdditional",value:function e(){return a.Dom.hasClass(this.node,"main-ui-filter-field-with-additional-fields")}},{key:"addAdditionalField",value:function e(i){if(!this.hasAdditional()){a.Dom.addClass(this.node,"main-ui-filter-field-with-additional-fields");a.Dom.append(this.getAdditionalFieldContainer(),this.node)}var n=this.parent.getPreset();var s=this.prepareFieldOptions(i);var r=n.createControl(s);this.appendRenderedField(r);return t.instances.get(r)}},{key:"prepareListItems",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(a.Type.isPlainObject(t)){return Object.entries(t).map((function(e){var t=babelHelpers.slicedToArray(e,2),i=t[0],n=t[1];return{NAME:n,VALUE:i}}))}return{}}},{key:"prepareFieldOptions",value:function e(t){var i=this;if(a.Type.isPlainObject(t)){var n=this.parent.params.FIELDS_STUBS;var s=t.type,r=s===void 0?"string":s;var l=n.find((function(e){return e.NAME===r}));if(a.Type.isPlainObject(l)){var o=D(D({},l),{},{NAME:t.id,LABEL:t.name,TYPE:r==="checkbox"?"SELECT":l.TYPE,VALUE_REQUIRED:t.valueRequired===true});if(r==="list"){return D(D({},o),{},{ITEMS:[].concat(babelHelpers.toConsumableArray(o.ITEMS),[this.prepareListItems(t.items)]),params:{isMulti:function(){if(a.Type.isPlainObject(t.params)){return t.params===true}return false}()}})}if(r==="date"){var u=function(){if(a.Type.isPlainObject(t.value)&&Reflect.has(t.value,"_datesel")){return t.value._datesel}return i.parent.dateTypes.NONE}();return D(D({},o),{},{SUB_TYPES:function(){if(a.Type.isArray(t.exclude)){return o.SUB_TYPES.filter((function(e){return!t.exclude.includes(e.VALUE)}))}return o.SUB_TYPES}(),SUB_TYPE:function(){return o.SUB_TYPES.find((function(e){return e.VALUE===u}))}(),VALUES:function(){if(a.Type.isPlainObject(t.value)){return D({},t.value)}return o.VALUES}()})}if(r==="string"||r==="custom_date"||r==="number"||r==="checkbox"||r==="custom_entity"){return o}}}return t}},{key:"appendRenderedField",value:function e(t){if(a.Type.isDomNode(t)){var i=this.getAdditionalFieldContainer();a.Dom.append(t,i)}}},{key:"getValue",value:function e(){var t=this.parent.getFilterFieldsValues();var i=this.options,n=i.TYPE,s=i.NAME;if(n==="DATE"||n==="NUMBER"){return Object.entries(t).reduce((function(e,t){var i=babelHelpers.slicedToArray(t,2),n=i[0],r=i[1];if(n.startsWith(s)){e[n.replace(s,"")]=r}return e}),{})}if(s in t){return t[s]}return""}},{key:"setValue",value:function e(t){var i=this;var n=this.options.TYPE;if(n==="DATE"||n==="NUMBER"){if(a.Type.isPlainObject(t)){var s=this.parent.getFieldListContainer();Object.entries(t).forEach((function(e){var t=babelHelpers.slicedToArray(e,2),n=t[0],r=t[1];var l=s.querySelector('[data-name="'.concat(i.id,'"] [data-name="').concat(i.id).concat(n,'"], [data-name="').concat(i.id,'"] [name="').concat(i.id).concat(n,'"]'));if(l){if(a.Dom.hasClass(l,"main-ui-select")){var o=a.Dom.attr(l,"data-items");if(a.Type.isArray(o)){var u=o.find((function(e){return e.VALUE===r}));if(a.Type.isPlainObject(u)){a.Dom.attr(l,"data-value",u);var c=l.querySelector(".main-ui-select-name");if(c){c.innerText=u.NAME}var d=BX.Main.ui.Factory.get(l);if(!d){d={node:l,instance:new BX.Main.ui.select(l)};BX.Main.ui.Factory.data.push(d)}if(a.Type.isPlainObject(d)){BX.onCustomEvent(window,"UI::Select::Change",[d.instance,u])}}}}else if(l.tagName==="INPUT"){l.value=r}}}))}}}}]);return t}(a.Event.EventEmitter);babelHelpers.defineProperty(C,"instances",new WeakMap);var N=function(){function e(t){babelHelpers.classCallCheck(this,e);this.parent=t}babelHelpers.createClass(e,[{key:"setFields",value:function e(t){if(a.Type.isPlainObject(t)){this.parent.getPopup();var i=this.parent.getPreset();i.deactivateAllPresets();var n={preset_id:"tmp_filter",fields:t};this.parent.updateParams(n);i.applyPreset("tmp_filter")}}},{key:"setFilter",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;this.setAnalyticsLabel(i);if(a.Type.isObject(t)){this.parent.updateParams(t);this.parent.getPreset().deactivateAllPresets();this.parent.getPreset().activatePreset(t.preset_id);this.parent.getPreset().applyPreset(t.preset_id);if(!t.checkFields||!this.parent.getPreset().isPresetValuesModified(t.preset_id)){var n=true;this.parent.applyFilter(false,t.preset_id,n)}else{var s={};if(a.Type.isPlainObject(t.fields)){s=Object.assign({},t.fields)}if(a.Type.isPlainObject(t.additional)){s=Object.assign({},t.additional)}this.parent.getPreset().deactivateAllPresets();this.setFields(s);this.apply()}}}},{key:"extendFilter",value:function e(t){var i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;this.setAnalyticsLabel(n);if(a.Type.isObject(t)){Object.keys(t).forEach((function(e){if(a.Type.isNumber(t[e])){t[e]=String(t[e])}}));var s=this.parent.getPreset().getCurrentPresetId();if(i||s==="tmp_filter"||s==="default_filter"){var r=Object.assign({},this.parent.getFilterFieldsValues(),t);this.setFields(r);this.apply();return}var l=this.parent.getPreset().getAdditionalValues(s);if(a.Type.isPlainObject(l)&&Object.keys(l).length){t=Object.assign({},l,t)}this.setFilter({preset_id:s,additional:t,checkFields:true})}}},{key:"apply",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;this.setAnalyticsLabel(t);if(!this.parent.isEditEnabled()){if(!this.parent.isEditEnabled()){var i=false;var n=false;var s=true;this.parent.applyFilter(i,n,s)}this.parent.closePopup();if(this.parent.isAddPresetEnabled()){this.parent.disableAddPreset()}}}},{key:"getEmitter",value:function e(){return this.parent.emitter}},{key:"setAnalyticsLabel",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(a.Type.isObject(t)){this.parent.analyticsLabel=t}}}]);return e}();function O(e){return{block:"main-ui-control-field",type:e.type,dragButton:false,content:{block:"main-ui-date",mix:["filter-type-single"],calendarButton:true,valueDelete:true,placeholder:e.placeholder,name:e.name,tabindex:e.tabindex,value:e.value,enableTime:e.enableTime}}}function U(e){return{block:"main-ui-control-field",type:e.type,dragButton:false,content:{block:"main-ui-number",mix:["filter-type-single"],valueDelete:true,placeholder:e.placeholder,name:e.name,tabindex:e.tabindex,value:e.value}}}function k(){return{block:"main-ui-filter-field-line",content:{block:"main-ui-filter-field-line-item",tag:"span"}}}function R(e){return{block:"main-ui-control-field",dragButton:false,content:{block:"main-ui-select",tabindex:e.tabindex,value:e.value,items:e.items,name:e.name,valueDelete:false}}}var M;function w(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function V(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?w(Object(i),!0).forEach((function(t){babelHelpers.defineProperty(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):w(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}var x=new WeakMap;var j=new WeakMap;var Y=new WeakMap;var q=function(){function e(t){babelHelpers.classCallCheck(this,e);this.parent=null;this.init(t)}babelHelpers.createClass(e,[{key:"init",value:function e(t){this.parent=t;BX.addCustomEvent(window,"UI::Select::change",this._onDateTypeChange.bind(this))}},{key:"deleteField",value:function e(t){a.Dom.remove(t)}},{key:"isFieldDelete",value:function e(t){return a.Dom.hasClass(t,this.parent.settings.classFieldDelete)}},{key:"isFieldValueDelete",value:function e(t){return a.Dom.hasClass(t,this.parent.settings.classValueDelete)||a.Dom.hasClass(t.parentNode,this.parent.settings.classValueDelete)}},{key:"isDragButton",value:function e(t){return t&&a.Dom.hasClass(t,this.parent.settings.classPresetDragButton)}},{key:"clearFieldValue",value:function e(t){if(t){var i=babelHelpers.toConsumableArray(t.querySelectorAll(".main-ui-control"));var n=babelHelpers.toConsumableArray(t.querySelectorAll(".main-ui-square"));n.forEach((function(e){return a.Dom.remove(e)}));i.forEach((function(e){if(Reflect.has(e,"value")){e.value=""}}))}}},{key:"getField",value:function e(t){if(a.Type.isDomNode(t)){return t.closest(".main-ui-control-field, .main-ui-control-field-group")}return null}},{key:"render",value:function e(t,i){if(a.Type.isString(t)&&a.Type.isPlainObject(i)){var n=Object.entries(i).reduce((function(e,t){var i=babelHelpers.slicedToArray(t,2),n=i[0],s=i[1];return e.replace(new RegExp("{{".concat(n,"}}"),"g"),s)}),t);var s=a.Dom.create("div",{html:n});var r=s.querySelector(".main-ui-control-field-group");if(r){return r}var l=s.querySelector(".main-ui-control-field");if(l){return l}var o=s.querySelector(".main-ui-filter-field-line");if(o){return o}}return null}},{key:"createInputText",value:function e(t){var i={block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,deleteButton:true,valueDelete:true,name:t.NAME,type:t.TYPE,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",icon:this.parent.getParam("ENABLE_LABEL")&&t.ICON?t.ICON:null,dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:[{block:"main-ui-control-string",name:t.NAME,placeholder:t.PLACEHOLDER||"",value:a.Type.isString(t.VALUE)||a.Type.isNumber(t.VALUE)?t.VALUE:"",tabindex:t.TABINDEX}]};var n=BX.decl(i);this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V({},t),node:n})});return n}},{key:"createTextarea",value:function e(t){var i=BX.decl({block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,deleteButton:true,valueDelete:true,name:t.NAME,type:t.TYPE,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",icon:this.parent.getParam("ENABLE_LABEL")&&t.ICON?t.ICON:null,dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:[{block:"main-ui-control-textarea",name:t.NAME,placeholder:t.PLACEHOLDER||"",value:a.Type.isString(t.VALUE)||a.Type.isNumber(t.VALUE)?t.VALUE:"",tabindex:t.TABINDEX}]});var n=i.querySelector("textarea");var s=function e(){a.Dom.style(n,"height","1px");a.Dom.style(n,"height","".concat(n.scrollHeight,"px"))};a.Event.bind(n,"input",s);a.Event.bind(n,"change",s);a.Event.bind(n,"keyup",s);a.Event.bind(n,"cut",s);a.Event.bind(n,"paste",s);this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V({},t),node:i})});return i}},{key:"createCustomEntityFieldLayout",value:function e(t){var i={block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,deleteButton:true,valueDelete:true,name:t.NAME,type:t.TYPE,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",icon:this.parent.getParam("ENABLE_LABEL")&&t.ICON?t.ICON:null,dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:{block:"main-ui-control-entity",mix:"main-ui-control",attrs:{"data-multiple":JSON.stringify(t.MULTIPLE)},content:[]}};if("_label"in t.VALUES&&!!t.VALUES._label){if(t.MULTIPLE){var n=t.VALUES._label?t.VALUES._label:[];if(a.Type.isPlainObject(n)){n=Object.keys(n).map((function(e){return n[e]}))}if(!a.Type.isArray(n)){n=[n]}var s=t.VALUES._value?t.VALUES._value:[];if(a.Type.isPlainObject(s)){s=Object.keys(s).map((function(e){return s[e]}))}if(!a.Type.isArray(s)){s=[s]}n.forEach((function(e,t){i.content.content.push({block:"main-ui-square",tag:"span",name:e,item:{_label:e,_value:s[t]}})}))}else{i.content.content.push({block:"main-ui-square",tag:"span",name:"_label"in t.VALUES?t.VALUES._label:"",item:t.VALUES})}}i.content.content.push({block:"main-ui-square-search",tag:"span",content:{block:"main-ui-control-string",name:"".concat(t.NAME,"_label"),tabindex:t.TABINDEX,type:"text",placeholder:t.PLACEHOLDER||""}},{block:"main-ui-control-string",name:t.NAME,type:"hidden",placeholder:t.PLACEHOLDER||"",value:"_value"in t.VALUES?t.VALUES._value:"",tabindex:t.TABINDEX});i=BX.decl(i);var r=BX.Filter.Utils.getBySelector(i,'.main-ui-control-string[type="text"]');BX.addClass(r,"main-ui-square-search-item");r.autocomplete="off";a.Event.bind(r,"focus",BX.proxy(this._onCustomEntityInputFocus,this));a.Event.bind(r,"click",BX.proxy(this._onCustomEntityInputClick,this));if(!this.bindDocument){a.Event.bind(document,"click",BX.proxy(this._onCustomEntityBlur,this));document.addEventListener("focus",BX.proxy(this._onDocumentFocus,this),true);this.bindDocument=true}a.Event.bind(r,"keydown",BX.proxy(this._onCustomEntityKeydown,this));a.Event.bind(i,"click",BX.proxy(this._onCustomEntityFieldClick,this));return i}},{key:"createDestSelector",value:function e(t){var i=this.createCustomEntityFieldLayout(t);BX.ready(BX.proxy((function(){BX.Filter.DestinationSelector.create(t.NAME,{filterId:this.parent.getParam("FILTER_ID"),fieldId:t.NAME})}),this));this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V({},t),node:i})});return i}},{key:"createEntitySelector",value:function e(t){var i=this.createCustomEntityFieldLayout(t);BX.Filter.EntitySelector.create(t.NAME,{filter:this.parent,isMultiple:t.MULTIPLE,addEntityIdToResult:t.ADD_ENTITY_ID_TO_RESULT,showDialogOnEmptyInput:t.SHOW_DIALOG_ON_EMPTY_INPUT,dialogOptions:t.DIALOG_OPTIONS});this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V({},t),node:i})});return i}},{key:"createCustomEntity",value:function e(t){var i=this.createCustomEntityFieldLayout(t);this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V({},t),node:i})});return i}},{key:"_onCustomEntityInputFocus",value:function e(t){BX.fireEvent(t.currentTarget,"click")}},{key:"_onCustomEntityInputClick",value:function e(t){t.preventDefault();t.stopPropagation();if(t.isTrusted){this.trustTimestamp=t.timeStamp;this.notTrustTimestamp=this.notTrustTimestamp||t.timeStamp}else{this.notTrustTimestamp=t.timeStamp}var i=new Date(this.trustTimestamp);var n=new Date(this.notTrustTimestamp);var s="".concat(i.getMinutes(),":").concat(i.getSeconds());var r="".concat(n.getMinutes(),":").concat(n.getSeconds());if(s!==r){this._onCustomEntityFocus(t)}}},{key:"_onDocumentFocus",value:function e(t){var i=this.getCustomEntityInstance();var n=i.getPopupContainer();var s=i.getLabelNode()===t.target;var r=!!n&&n.contains(t.target);if(!s&&!r){this._onCustomEntityBlur(t)}}},{key:"_onCustomEntityKeydown",value:function e(t){var i=t.target,n=t.currentTarget;var s=i.parentNode.parentNode;var r=s.querySelectorAll(".main-ui-square");var l=r[r.length-1];if(!a.Type.isDomNode(l)){return}if(BX.Filter.Utils.isKey(t,"backspace")&&n.selectionStart===0){if(a.Dom.hasClass(l,"main-ui-square-selected")){var o=s.querySelector('input[type="hidden"]');if(a.Type.isDomNode(o)){o.value="";BX.fireEvent(o,"input")}a.Dom.remove(l);return}a.Dom.addClass(l,"main-ui-square-selected");return}a.Dom.removeClass(l,"main-ui-square-selected")}},{key:"_onCustomEntityFieldClick",value:function e(t){var i=t.target;if(a.Dom.hasClass(i,"main-ui-square-delete")){var n=i.closest(".main-ui-square");if(a.Type.isDomNode(n)){var s=this.getCustomEntityInstance();BX.onCustomEvent(window,"BX.Main.Filter:customEntityRemove",[s]);a.Dom.remove(n)}return}var r=i.querySelector('input[type="text"]');if(a.Type.isDomNode(r)){BX.fireEvent(r,"focus")}}},{key:"_onCustomEntityBlur",value:function e(t){var i={stopBlur:false};BX.onCustomEvent(window,"BX.Main.Filter:onGetStopBlur",[t,i]);if(typeof i.stopBlur==="undefined"||!i.stopBlur){var n=this.getCustomEntityInstance();BX.onCustomEvent(window,"BX.Main.Filter:customEntityBlur",[n]);a.Event.unbind(n.getPopupContainer(),"click",this._stopPropagation);a.Dom.removeClass(n.getField(),"main-ui-focus")}}},{key:"_stopPropagation",value:function e(t){t.stopPropagation()}},{key:"getCustomEntityInstance",value:function e(){if(!(this.customEntityInstance instanceof BX.Main.ui.CustomEntity)){this.customEntityInstance=new BX.Main.ui.CustomEntity}return this.customEntityInstance}},{key:"_onCustomEntityFocus",value:function e(t){t.stopPropagation();var i=t.currentTarget;var n=i.closest(".main-ui-control-entity");var s=this.getCustomEntityInstance();s.setField(n);BX.onCustomEvent("BX.Main.Filter:customEntityFocus",[s]);var r=s.getPopupContainer();if(a.Type.isElementNode(r)){a.Event.bind(r,"click",this._stopPropagation)}a.Dom.addClass(n,"main-ui-focus")}},{key:"createCustom",value:function e(t){var i=BX.decl({block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,name:t.NAME,type:t.TYPE,deleteButton:true,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",icon:this.parent.getParam("ENABLE_LABEL")&&t.ICON?t.ICON:null,dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:{block:"main-ui-custom",mix:["main-ui-control","main-ui-custom-style"],attrs:{"data-name":t.NAME},content:""}});if(a.Type.isString(t.VALUE)){var n=function(){if(Reflect.has(t,"_VALUE")){return t._VALUE}return""}();var s=a.Text.decode(t.VALUE).replace('name="'.concat(t.NAME,'"'),'name="'.concat(t.NAME,'" value="').concat(n,'"'));var r=i.querySelector(".main-ui-custom");a.Runtime.html(r,s)}this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V({},t),node:i})});return i}},{key:"createSelect",value:function e(t){var i=BX.decl({block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,name:t.NAME,type:t.TYPE,deleteButton:true,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",icon:this.parent.getParam("ENABLE_LABEL")&&t.ICON?t.ICON:null,dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:{block:this.parent.settings.classSelect,name:t.NAME,items:t.ITEMS,value:"VALUE"in t?t.VALUE:t.ITEMS[0],params:t.PARAMS,tabindex:t.TABINDEX,valueDelete:false}});this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V({},t),node:i})});return i}},{key:"createMultiSelect",value:function e(t){var i=BX.decl({block:"main-ui-control-field",mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel]:null,name:t.NAME,type:t.TYPE,deleteButton:true,label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",icon:this.parent.getParam("ENABLE_LABEL")&&t.ICON?t.ICON:null,dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),content:{block:"main-ui-multi-select",name:t.NAME,tabindex:"TABINDEX"in t?t.TABINDEX:"",placeholder:!this.parent.getParam("ENABLE_LABEL")&&"PLACEHOLDER"in t?t.PLACEHOLDER:"",items:"ITEMS"in t?t.ITEMS:[],value:"VALUE"in t?t.VALUE:[],params:"PARAMS"in t?t.PARAMS:{isMulti:true},valueDelete:true}});this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V({},t),node:i})});return i}},{key:"createCustomDate",value:function e(t){var i={block:"main-ui-control-field-group",type:t.TYPE,mix:this.parent.getParam("ENABLE_LABEL")?[this.parent.settings.classFieldWithLabel,"main-ui-filter-date-group"]:["main-ui-filter-date-group"],label:this.parent.getParam("ENABLE_LABEL")?t.LABEL:"",icon:this.parent.getParam("ENABLE_LABEL")&&t.ICON?t.ICON:null,dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),tabindex:"TABINDEX"in t?t.TABINDEX:"",name:"NAME"in t?t.NAME:"",deleteButton:true,content:[]};if(a.Type.isPlainObject(t.VALUE.days)){t.VALUE.days=Object.keys(t.VALUE.days).map((function(e){return t.VALUE.days[e]}))}var n=t.DAYS.filter((function(e){return t.VALUE.days.some((function(t){return t===e.VALUE}))}));var s={block:"main-ui-control-field",mix:["main-ui-control-custom-date"],placeholder:t.DAYS_PLACEHOLDER,dragButton:false,content:{block:"main-ui-multi-select",name:"".concat(t.NAME,"_days"),tabindex:"TABINDEX"in t?t.TABINDEX:"",items:t.DAYS,value:n,params:"PARAMS"in t?t.PARAMS:{isMulti:true},valueDelete:true,attrs:{"data-placeholder":t.DAYS_PLACEHOLDER}}};if(a.Type.isPlainObject(t.VALUE.months)){t.VALUE.months=Object.keys(t.VALUE.months).map((function(e){return t.VALUE.months[e]}))}var r=t.MONTHS.filter((function(e){return t.VALUE.months.some((function(t){return t===e.VALUE}))}));var l={block:"main-ui-control-field",mix:["main-ui-control-custom-date"],dragButton:false,content:{block:"main-ui-multi-select",name:"".concat(t.NAME,"_months"),tabindex:"TABINDEX"in t?t.TABINDEX:"",items:t.MONTHS,value:r,params:"PARAMS"in t?t.PARAMS:{isMulti:true},valueDelete:true,attrs:{"data-placeholder":t.MONTHS_PLACEHOLDER}}};if(a.Type.isPlainObject(t.VALUE.years)){t.VALUE.years=Object.keys(t.VALUE.years).map((function(e){return t.VALUE.years[e]}))}var o=t.YEARS.filter((function(e){return t.VALUE.years.some((function(t){return t===e.VALUE}))}));var u={block:"main-ui-control-field",mix:["main-ui-control-custom-date"],dragButton:false,content:{block:"main-ui-multi-select",name:"".concat(t.NAME,"_years"),tabindex:"TABINDEX"in t?t.TABINDEX:"",items:t.YEARS,value:o,params:"PARAMS"in t?t.PARAMS:{isMulti:true},valueDelete:true,attrs:{"data-placeholder":t.YEARS_PLACEHOLDER}}};i.content.push(s);i.content.push(l);i.content.push(u);var c=BX.decl(i);this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V({},t),node:c})});return c}},{key:"_onDateTypeChange",value:function e(t,i){var n=this;if(this.parent.getPopup().contentContainer.contains(t.node)){var s={};var r=null;var l;var o;var u;if(a.Type.isPlainObject(i)&&Reflect.has(i,"VALUE")){var c=t.getNode();var d=t.getParams();var h=c.dataset.name;if(!a.Type.isPlainObject(d)&&(h.endsWith("_datesel")||h.endsWith("_numsel"))){var p=c.parentNode.parentNode;s.TABINDEX=t.getInput().getAttribute("tabindex");s.SUB_TYPES=t.getItems();s.SUB_TYPE=i;s.NAME=p.dataset.name;s.TYPE=p.dataset.type;s.VALUE_REQUIRED=p.dataset.valueRequired==="true";var f=this.parent.getPreset().getCurrentPresetData();if(a.Type.isArray(f.FIELDS)){var g=f.FIELDS.find((function(e){return e.NAME===s.NAME}));if(a.Type.isNil(g)){g=this.parent.params.FIELDS_STUBS.find((function(e){return e.TYPE===s.TYPE}))}if(!a.Type.isNil(g)){if(h.endsWith("_datesel")){s.MONTHS=g.MONTHS;s.MONTH=g.MONTH;s.YEARS=g.YEARS;s.YEAR=g.YEAR;s.QUARTERS=g.QUARTERS;s.QUARTER=g.QUARTER;s.ENABLE_TIME=g.ENABLE_TIME;s.YEARS_SWITCHER=g.YEARS_SWITCHER}s.VALUES=g.VALUES;s.REQUIRED=g.REQUIRED}}if(this.parent.getParam("ENABLE_LABEL")){l=p.querySelector(".main-ui-control-field-label");s.LABEL=l.innerText}if(h.endsWith("_datesel")){r=this.createDate(s)}else{r=this.createNumber(s)}if(a.Type.isArray(this.parent.fieldsList)){u=this.parent.fieldsList.indexOf(p);if(u!==-1){this.parent.fieldsList[u]=r;this.parent.registerDragItem(r)}}this.parent.unregisterDragItem(p);o=babelHelpers.toConsumableArray(r.querySelectorAll(".main-ui-control-field"));if(a.Type.isArray(o)&&o.length){o.forEach((function(e){e.FieldController=new BX.Filter.FieldController(e,n.parent)}))}if(this.parent.getParam("ENABLE_ADDITIONAL_FILTERS")){var E=m.getInstance().getAdditionalFilterButton({fieldId:s.NAME,enabled:s.ADDITIONAL_FILTER_ALLOWED});a.Dom.append(E,r)}a.Dom.insertAfter(r,p);a.Dom.remove(p)}}}}},{key:"createNumber",value:function e(t){var i=this.parent,n=i.numberTypes,s=i.additionalNumberTypes;var r=this.parent.params.ENABLE_LABEL;var a=t.SUB_TYPE,l=a===void 0?{}:a,o=t.SUB_TYPES,u=o===void 0?[]:o,c=t.TABINDEX,d=c===void 0?"":c,h=t.VALUES,p=h===void 0?{_from:"",_to:""}:h,f=t.LABEL,m=f===void 0?"":f,g=t.ICON,E=g===void 0?null:g,y=t.TYPE;var v=l.VALUE||n.SINGLE;var B=l.PLACEHOLDER||"";var A=t.NAME.replace("_numsel","");var P=function(){if(r){return["main-ui-filter-wield-with-label","main-ui-filter-number-group"]}return["main-ui-filter-number-group"]}();var S={block:"number-group",type:y,mix:P,label:r?m:"",icon:r?E:null,dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),tabindex:d,value:l,items:u,name:A,deleteButton:true,content:[]};if(v!==n.LESS&&v!==s.BEFORE_N){var _={block:"main-ui-control-field",type:y,dragButton:false,content:{block:"main-ui-number",mix:["filter-type-single"],calendarButton:true,valueDelete:true,placeholder:B,name:"".concat(A,"_from"),tabindex:d,value:p._from||""}};S.content.push(_)}if(v===n.RANGE){var L={block:"main-ui-filter-field-line",content:{block:"main-ui-filter-field-line-item",tag:"span"}};S.content.push(L)}if(v===n.RANGE||v===n.LESS||v===s.BEFORE_N){var b={block:"main-ui-control-field",type:y,dragButton:false,content:{block:"main-ui-number",calendarButton:true,valueDelete:true,name:"".concat(A,"_to"),tabindex:d,value:p._to||""}};S.content.push(b)}var I=BX.decl(S);this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V({},t),node:I})});return I}},{key:"createDate",value:function e(t){var i=this;var n=this.parent,s=n.dateTypes,r=n.additionalDateTypes;var l=t.SUB_TYPE,o=l===void 0?{}:l,u=t.SUB_TYPES,c=u===void 0?[]:u,d=t.PLACEHOLDER,h=d===void 0?"":d,p=t.VALUES,f=p===void 0?{_from:"",_to:"",_quarter:"",_days:"",_month:"",_year:"",_allow_year:""}:p,m=t.TABINDEX,g=m===void 0?"":m,E=t.ENABLE_TIME,y=E===void 0?false:E,v=t.LABEL,B=v===void 0?"":v,A=t.ICON,P=A===void 0?null:A,S=t.TYPE,_=t.VALUE_REQUIRED,L=_===void 0?false:_,b=t.REQUIRED,I=b===void 0?false:b;var T=this.parent.params.ENABLE_LABEL;var F=o.VALUE||s.NONE;var D=t.NAME.replace("_datesel","");var X=function(){if(T){return["main-ui-filter-wield-with-label","main-ui-filter-date-group"]}return["main-ui-filter-date-group"]}();var N={block:"date-group",type:S,mix:X,label:T?B:"",icon:T?P:null,dragTitle:this.parent.getParam("MAIN_UI_FILTER__DRAG_FIELD_TITLE"),deleteTitle:this.parent.getParam("MAIN_UI_FILTER__REMOVE_FIELD"),tabindex:g,value:o,items:c,name:D,enableTime:y,deleteButton:true,content:[]};if(F===s.EXACT){var M=O({type:S,name:"".concat(D.NAME,"_from"),placeholder:h,tabindex:g,value:f._from||"",enableTime:y});N.content.push(M)}if(F===s.NEXT_DAYS||F===s.PREV_DAYS||F===r.PREV_DAY||F===r.NEXT_DAY||F===r.MORE_THAN_DAYS_AGO||F===r.AFTER_DAYS){var w=U({type:S,name:"".concat(D,"_days"),tabindex:g,value:f._days||"",placeholder:h});N.content.push(w)}if(F===s.RANGE){var x={block:"main-ui-filter-range-group",content:[O({type:S,name:"".concat(D,"_from"),placeholder:h,tabindex:g,value:f._from||"",enableTime:y}),k(),O({type:S,name:"".concat(D,"_to"),placeholder:h,tabindex:g,value:f._to||"",enableTime:y})]};N.content.push(x)}if(F===s.MONTH){var j=t.MONTHS,Y=t.MONTH,q=t.YEARS,H=t.YEAR;var G=j.find((function(e){return e.VALUE===f._month}))||Y||j[0];var W=q.find((function(e){return e.VALUE===f._year}))||H||q[0];N.content.push(R({name:"".concat(D,"_month"),value:G,items:j,tabindex:g}),R({name:"".concat(D,"_year"),value:W,items:q,tabindex:g}))}if(F===s.QUARTER){var K=t.YEARS,Q=t.YEAR,J=t.QUARTERS,z=t.QUARTER,Z=t.PARAMS;var $=K.find((function(e){return e.VALUE===f._year}))||Q||K[0];var ee=J.find((function(e){return e.VALUE===f._quarter}))||z||J[0];N.content.push(R({name:"".concat(D,"_year"),value:$,items:K,tabindex:g}),R({name:"".concat(D,"_quarter"),value:ee,items:J,tabindex:g,params:Z}))}if(F===s.YEAR){var te=t.YEARS,ie=t.YEAR;var ne=te.find((function(e){return e.VALUE===f._year}))||ie||te[0];N.content.push(R({name:"".concat(D,"_year"),value:ne,items:te,tabindex:g}))}if(F==="CUSTOM_DATE"){var se=c.find((function(e){return e.VALUE==="CUSTOM_DATE"}));if(se){var re=a.Runtime.clone(se.DECL);if(a.Type.isArray(f._days)){re.VALUE.days=f._days}if(a.Type.isArray(f._month)){re.VALUE.months=f._month}if(a.Type.isArray(f._year)){re.VALUE.years=f._year}var ae=this.createCustomDate(re);a.Dom.removeClass(ae,"main-ui-filter-wield-with-label");var le=babelHelpers.toConsumableArray(ae.querySelectorAll(".main-ui-item-icon-container, .main-ui-filter-icon-grab"));le.forEach((function(e){return a.Dom.remove(e)}));N.content.push(ae);N.mix.push("main-ui-filter-custom-date-group")}}if(F!==s.NONE&&F!==r.CUSTOM_DATE&&t.YEARS_SWITCHER){var oe=a.Runtime.clone(t.YEARS_SWITCHER);var ue=oe.ITEMS;oe.VALUE=ue.reduce((function(e,t){return t.VALUE===f._allow_year?t:e}));var ce=this.createSelect(oe);a.Dom.addClass(ce,["main-ui-filter-year-switcher","main-ui-filter-with-padding"]);a.Dom.removeClass(ce,"main-ui-filter-wield-with-label");var de=babelHelpers.toConsumableArray(ce.querySelectorAll(".main-ui-item-icon-container, .main-ui-filter-icon-grab"));de.forEach((function(e){return a.Dom.remove(e)}));var he=N.content.length-1;var pe=N.content[he];if(a.Type.isPlainObject(pe)){if(!a.Type.isArray(pe.mix)){pe.mix=[]}pe.mix.push("main-ui-filter-remove-margin-right")}if(a.Type.isDomNode(pe)){a.Dom.addClass(pe,"main-ui-filter-remove-margin-right")}requestAnimationFrame((function(){a.Dom.addClass(ce.previousElementSibling,"main-ui-filter-remove-margin-right")}));N.content.push(ce);N.mix.push("main-ui-filter-date-with-years-switcher")}var fe=BX.decl(N);var me=a.Runtime.debounce(this.onDateChange,500,this);var ge=babelHelpers.toConsumableArray(fe.querySelectorAll(".main-ui-date-input"));ge.forEach((function(e){e.addEventListener("change",me);e.addEventListener("input",me);var t=e.parentNode;var n=t.querySelector(".main-ui-control-value-delete");if(n){n.addEventListener("click",(function(){setTimeout((function(){i.onDateChange({target:e})}))}))}}));if(L){fe.dataset.valueRequired=true;var Ee=[].concat(babelHelpers.toConsumableArray(ge),babelHelpers.toConsumableArray(fe.querySelectorAll(".main-ui-number-input")));Ee.forEach((function(e){e.addEventListener("change",i.checkRequiredDateValue.bind(i));e.addEventListener("input",i.checkRequiredDateValue.bind(i));var t=e.parentNode;var n=t.querySelector(".main-ui-control-value-delete");if(n){n.addEventListener("click",(function(){setTimeout((function(){i.checkRequiredDateValue({target:e})}))}))}a.Event.bindOnce(e,"mouseout",(function(){i.checkRequiredDateValue({target:e})}))}))}if(I){var ye=fe.querySelector(".main-ui-filter-field-delete");if(ye){BX.remove(ye)}}var ve={};this.parent.prepareControlDateValue(ve,D,fe);Object.entries(ve).forEach((function(e){var t=babelHelpers.slicedToArray(e,2),i=t[0],n=t[1];ve[i.replace(D,"")]=n;delete ve[i]}));this.parent.getEmitter().emit("init",{field:new C({parent:this.parent,options:V(V({},t),{},{VALUES:ve}),node:fe})});return fe}},{key:"checkRequiredDateValue",value:function e(t){if(t.target.value===""){this.showError({id:"valueError",target:t.target,text:this.parent.params.MAIN_UI_FILTER__VALUE_REQUIRED});return}this.hideError({id:"valueError",target:t.target})}},{key:"onDateChange",value:function e(t){var i=this;if(Y.get(t.target)===t.target.value){return}Y.set(t.target,t.target.value);if(t.target.value===""){this.hideError({id:"formatError",target:t.target});return}BX.ajax.runComponentAction("bitrix:main.ui.filter","checkDateFormat",{mode:"ajax",data:{value:t.target.value,format:BX.message("FORMAT_DATETIME")}}).then((function(e){if(!e.data.result){i.showError({id:"formatError",target:t.target});return}i.hideError({id:"formatError",target:t.target})}))}},{key:"showError",value:function e(t){var i=t.id,n=t.target,s=t.text,r=s===void 0?null:s;a.Dom.style(n,"border-color","#FF5752");if(x.has(n)&&j.get(n)===i){a.Dom.remove(x.get(n))}var l=this.parent.params,o=l.MAIN_UI_FILTER__DATE_ERROR_TITLE,u=l.MAIN_UI_FILTER__DATE_ERROR_LABEL;var c=r||"".concat(u," ").concat(a.Loc.getMessage("FORMAT_DATE"));var d=a.Tag.render(M||(M=babelHelpers.taggedTemplateLiteral(['\n\t\t\t<div \n\t\t\t\tclass="main-ui-filter-error-message" \n\t\t\t\ttitle="','">\n\t\t\t\t',"\n\t\t\t</div>\n\t\t"])),o,c);x.set(n,d);j.set(n,i);a.Dom.insertAfter(d,n);a.Dom.attr(n,"is-valid","false")}},{key:"hideError",value:function e(t){var i=t.id,n=t.target;a.Dom.style(n,"border-color",null);if(x.has(n)&&j.get(n)===i){a.Dom.remove(x.get(n))}a.Dom.attr(n,"is-valid","true")}}]);return e}();e.Field=C;e.Api=N;e.Fields=q;e.Presets=g;e.AdditionalFilter=m})(this.BX.Filter=this.BX.Filter||{},BX.UI.EntitySelector,BX,BX,BX.Event,BX.Main,BX);
/* End */
;; /* /bitrix/components/bitrix/crm.entity.product.list/templates/.default/script.min.js?1728733186112636*/
; /* /bitrix/components/bitrix/main.ui.grid/templates/.default/script.min.js?1728733181192113*/
; /* /bitrix/components/bitrix/crm.deal.details/templates/.default/script.min.js?172873318410638*/
; /* /bitrix/components/bitrix/tasks.iframe.popup/templates/.default/logic.min.js?17287331847131*/
; /* /bitrix/components/bitrix/crm.entity.details/templates/.default/script.min.js?172873318227852*/
; /* /bitrix/components/bitrix/crm.entity.progressbar/templates/.default/script.min.js?172873318323475*/
; /* /bitrix/components/bitrix/crm.entity.editor/templates/.default/script.js?1728733184707975*/
; /* /bitrix/components/bitrix/main.interface.buttons/templates/.default/script.min.js?172873318163299*/
; /* /bitrix/components/bitrix/main.interface.buttons/templates/.default/utils.min.js?1728733181575*/
; /* /bitrix/components/bitrix/crm.timeline/templates/.default/script.min.js?17287331814886*/
; /* /bitrix/components/bitrix/disk.uf.file/templates/.default/script.min.js?172873318213285*/
; /* /bitrix/components/bitrix/main.ui.filter/templates/.default/script.min.js?1728733181189396*/

//# sourceMappingURL=page_113be99c529710b87501d90c5e9d0c38.map.js